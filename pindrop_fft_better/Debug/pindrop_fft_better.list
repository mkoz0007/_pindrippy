
pindrop_fft_better.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a54  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000133a4  08009be8  08009be8  0000abe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cf8c  0801cf8c  0001e1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801cf8c  0801cf8c  0001df8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cf94  0801cf94  0001e1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cf94  0801cf94  0001df94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801cf98  0801cf98  0001df98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0801cf9c  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fa4  200001dc  0801d178  0001e1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002180  0801d178  0001f180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001e1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cbfb  00000000  00000000  0001e20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003998  00000000  00000000  0003ae07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  0003e7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e34  00000000  00000000  0003fb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000239f5  00000000  00000000  00040974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001758a  00000000  00000000  00064369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de768  00000000  00000000  0007b8f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0015a05b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061a4  00000000  00000000  0015a114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001602b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000032a6  00000000  00000000  0016032c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000000d8  00000000  00000000  001635d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009bcc 	.word	0x08009bcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009bcc 	.word	0x08009bcc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f18:	f000 feb5 	bl	8001c86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1c:	f000 f83a 	bl	8000f94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f20:	f000 fa20 	bl	8001364 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f24:	f000 f9f8 	bl	8001318 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f28:	f000 f9c6 	bl	80012b8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f2c:	f000 f894 	bl	8001058 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000f30:	f000 f94c 	bl	80011cc <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f34:	f000 f8f6 	bl	8001124 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  // Initialize FFT
  arm_rfft_fast_init_f32(&fft_instance, FFT_SIZE);
 8000f38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f3c:	480e      	ldr	r0, [pc, #56]	@ (8000f78 <main+0x64>)
 8000f3e:	f005 f9dd 	bl	80062fc <arm_rfft_fast_init_f32>

  // Start ADC with DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, AUDIO_BUFFER_SIZE);
 8000f42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f46:	490d      	ldr	r1, [pc, #52]	@ (8000f7c <main+0x68>)
 8000f48:	480d      	ldr	r0, [pc, #52]	@ (8000f80 <main+0x6c>)
 8000f4a:	f001 fa3f 	bl	80023cc <HAL_ADC_Start_DMA>

  // Start timer for sampling rate and fft timer
  HAL_TIM_Base_Start(&htim1);
 8000f4e:	480d      	ldr	r0, [pc, #52]	@ (8000f84 <main+0x70>)
 8000f50:	f003 fe58 	bl	8004c04 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 8000f54:	480c      	ldr	r0, [pc, #48]	@ (8000f88 <main+0x74>)
 8000f56:	f003 fe55 	bl	8004c04 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (buffer_ready) {
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <main+0x78>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d0fa      	beq.n	8000f5a <main+0x46>
	        process_fft();
 8000f64:	f000 fa88 	bl	8001478 <process_fft>
	        //transmit_fft_results();
	        buffer_ready = 0;
 8000f68:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <main+0x78>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
	        adc_index = 0;
 8000f6e:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <main+0x7c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
	  if (buffer_ready) {
 8000f74:	e7f1      	b.n	8000f5a <main+0x46>
 8000f76:	bf00      	nop
 8000f78:	20002014 	.word	0x20002014
 8000f7c:	2000040c 	.word	0x2000040c
 8000f80:	200001f8 	.word	0x200001f8
 8000f84:	200002a4 	.word	0x200002a4
 8000f88:	200002f0 	.word	0x200002f0
 8000f8c:	2000080c 	.word	0x2000080c
 8000f90:	20000810 	.word	0x20000810

08000f94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b096      	sub	sp, #88	@ 0x58
 8000f98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	2244      	movs	r2, #68	@ 0x44
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f006 fecb 	bl	8007d3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa8:	463b      	mov	r3, r7
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fb6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fba:	f002 fc45 	bl	8003848 <HAL_PWREx_ControlVoltageScaling>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fc4:	f000 fb60 	bl	8001688 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fc8:	f002 fc20 	bl	800380c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000fcc:	4b21      	ldr	r3, [pc, #132]	@ (8001054 <SystemClock_Config+0xc0>)
 8000fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000fd2:	4a20      	ldr	r2, [pc, #128]	@ (8001054 <SystemClock_Config+0xc0>)
 8000fd4:	f023 0318 	bic.w	r3, r3, #24
 8000fd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000fdc:	2314      	movs	r3, #20
 8000fde:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fec:	2360      	movs	r3, #96	@ 0x60
 8000fee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000ffc:	2310      	movs	r3, #16
 8000ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001000:	2307      	movs	r3, #7
 8001002:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001004:	2302      	movs	r3, #2
 8001006:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001008:	2302      	movs	r3, #2
 800100a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4618      	mov	r0, r3
 8001012:	f002 fc6f 	bl	80038f4 <HAL_RCC_OscConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800101c:	f000 fb34 	bl	8001688 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001020:	230f      	movs	r3, #15
 8001022:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001024:	2303      	movs	r3, #3
 8001026:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001034:	463b      	mov	r3, r7
 8001036:	2101      	movs	r1, #1
 8001038:	4618      	mov	r0, r3
 800103a:	f003 f86f 	bl	800411c <HAL_RCC_ClockConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001044:	f000 fb20 	bl	8001688 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001048:	f003 fc82 	bl	8004950 <HAL_RCCEx_EnableMSIPLLMode>
}
 800104c:	bf00      	nop
 800104e:	3758      	adds	r7, #88	@ 0x58
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40021000 	.word	0x40021000

08001058 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800105e:	463b      	mov	r3, r7
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
 800106c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800106e:	4b2a      	ldr	r3, [pc, #168]	@ (8001118 <MX_ADC1_Init+0xc0>)
 8001070:	4a2a      	ldr	r2, [pc, #168]	@ (800111c <MX_ADC1_Init+0xc4>)
 8001072:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001074:	4b28      	ldr	r3, [pc, #160]	@ (8001118 <MX_ADC1_Init+0xc0>)
 8001076:	2200      	movs	r2, #0
 8001078:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800107a:	4b27      	ldr	r3, [pc, #156]	@ (8001118 <MX_ADC1_Init+0xc0>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001080:	4b25      	ldr	r3, [pc, #148]	@ (8001118 <MX_ADC1_Init+0xc0>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001086:	4b24      	ldr	r3, [pc, #144]	@ (8001118 <MX_ADC1_Init+0xc0>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108c:	4b22      	ldr	r3, [pc, #136]	@ (8001118 <MX_ADC1_Init+0xc0>)
 800108e:	2204      	movs	r2, #4
 8001090:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001092:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <MX_ADC1_Init+0xc0>)
 8001094:	2200      	movs	r2, #0
 8001096:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001098:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <MX_ADC1_Init+0xc0>)
 800109a:	2200      	movs	r2, #0
 800109c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800109e:	4b1e      	ldr	r3, [pc, #120]	@ (8001118 <MX_ADC1_Init+0xc0>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001118 <MX_ADC1_Init+0xc0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80010ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001118 <MX_ADC1_Init+0xc0>)
 80010ae:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 80010b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010b4:	4b18      	ldr	r3, [pc, #96]	@ (8001118 <MX_ADC1_Init+0xc0>)
 80010b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010bc:	4b16      	ldr	r3, [pc, #88]	@ (8001118 <MX_ADC1_Init+0xc0>)
 80010be:	2201      	movs	r2, #1
 80010c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010c4:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <MX_ADC1_Init+0xc0>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010ca:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <MX_ADC1_Init+0xc0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d2:	4811      	ldr	r0, [pc, #68]	@ (8001118 <MX_ADC1_Init+0xc0>)
 80010d4:	f001 f838 	bl	8002148 <HAL_ADC_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80010de:	f000 fad3 	bl	8001688 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80010e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <MX_ADC1_Init+0xc8>)
 80010e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010e6:	2306      	movs	r3, #6
 80010e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010ee:	237f      	movs	r3, #127	@ 0x7f
 80010f0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f2:	2304      	movs	r3, #4
 80010f4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fa:	463b      	mov	r3, r7
 80010fc:	4619      	mov	r1, r3
 80010fe:	4806      	ldr	r0, [pc, #24]	@ (8001118 <MX_ADC1_Init+0xc0>)
 8001100:	f001 f9fc 	bl	80024fc <HAL_ADC_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800110a:	f000 fabd 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200001f8 	.word	0x200001f8
 800111c:	50040000 	.word	0x50040000
 8001120:	21800100 	.word	0x21800100

08001124 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001142:	4b20      	ldr	r3, [pc, #128]	@ (80011c4 <MX_TIM1_Init+0xa0>)
 8001144:	4a20      	ldr	r2, [pc, #128]	@ (80011c8 <MX_TIM1_Init+0xa4>)
 8001146:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8001148:	4b1e      	ldr	r3, [pc, #120]	@ (80011c4 <MX_TIM1_Init+0xa0>)
 800114a:	221f      	movs	r2, #31
 800114c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114e:	4b1d      	ldr	r3, [pc, #116]	@ (80011c4 <MX_TIM1_Init+0xa0>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001154:	4b1b      	ldr	r3, [pc, #108]	@ (80011c4 <MX_TIM1_Init+0xa0>)
 8001156:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800115a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115c:	4b19      	ldr	r3, [pc, #100]	@ (80011c4 <MX_TIM1_Init+0xa0>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001162:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <MX_TIM1_Init+0xa0>)
 8001164:	2200      	movs	r2, #0
 8001166:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001168:	4b16      	ldr	r3, [pc, #88]	@ (80011c4 <MX_TIM1_Init+0xa0>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800116e:	4815      	ldr	r0, [pc, #84]	@ (80011c4 <MX_TIM1_Init+0xa0>)
 8001170:	f003 fcf0 	bl	8004b54 <HAL_TIM_Base_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800117a:	f000 fa85 	bl	8001688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800117e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001182:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	4619      	mov	r1, r3
 800118a:	480e      	ldr	r0, [pc, #56]	@ (80011c4 <MX_TIM1_Init+0xa0>)
 800118c:	f003 fe62 	bl	8004e54 <HAL_TIM_ConfigClockSource>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001196:	f000 fa77 	bl	8001688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	4619      	mov	r1, r3
 80011aa:	4806      	ldr	r0, [pc, #24]	@ (80011c4 <MX_TIM1_Init+0xa0>)
 80011ac:	f004 faa4 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011b6:	f000 fa67 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	3720      	adds	r7, #32
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200002a4 	.word	0x200002a4
 80011c8:	40012c00 	.word	0x40012c00

080011cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08e      	sub	sp, #56	@ 0x38
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ec:	463b      	mov	r3, r7
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]
 80011fa:	615a      	str	r2, [r3, #20]
 80011fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011fe:	4b2d      	ldr	r3, [pc, #180]	@ (80012b4 <MX_TIM2_Init+0xe8>)
 8001200:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001204:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001206:	4b2b      	ldr	r3, [pc, #172]	@ (80012b4 <MX_TIM2_Init+0xe8>)
 8001208:	2200      	movs	r2, #0
 800120a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120c:	4b29      	ldr	r3, [pc, #164]	@ (80012b4 <MX_TIM2_Init+0xe8>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 8001212:	4b28      	ldr	r3, [pc, #160]	@ (80012b4 <MX_TIM2_Init+0xe8>)
 8001214:	f240 128f 	movw	r2, #399	@ 0x18f
 8001218:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121a:	4b26      	ldr	r3, [pc, #152]	@ (80012b4 <MX_TIM2_Init+0xe8>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001220:	4b24      	ldr	r3, [pc, #144]	@ (80012b4 <MX_TIM2_Init+0xe8>)
 8001222:	2280      	movs	r2, #128	@ 0x80
 8001224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001226:	4823      	ldr	r0, [pc, #140]	@ (80012b4 <MX_TIM2_Init+0xe8>)
 8001228:	f003 fc94 	bl	8004b54 <HAL_TIM_Base_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001232:	f000 fa29 	bl	8001688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001236:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800123a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800123c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001240:	4619      	mov	r1, r3
 8001242:	481c      	ldr	r0, [pc, #112]	@ (80012b4 <MX_TIM2_Init+0xe8>)
 8001244:	f003 fe06 	bl	8004e54 <HAL_TIM_ConfigClockSource>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800124e:	f000 fa1b 	bl	8001688 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001252:	4818      	ldr	r0, [pc, #96]	@ (80012b4 <MX_TIM2_Init+0xe8>)
 8001254:	f003 fd22 	bl	8004c9c <HAL_TIM_OC_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800125e:	f000 fa13 	bl	8001688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001262:	2320      	movs	r3, #32
 8001264:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001266:	2380      	movs	r3, #128	@ 0x80
 8001268:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	4619      	mov	r1, r3
 8001270:	4810      	ldr	r0, [pc, #64]	@ (80012b4 <MX_TIM2_Init+0xe8>)
 8001272:	f004 fa41 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800127c:	f000 fa04 	bl	8001688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001280:	2330      	movs	r3, #48	@ 0x30
 8001282:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001290:	463b      	mov	r3, r7
 8001292:	2200      	movs	r2, #0
 8001294:	4619      	mov	r1, r3
 8001296:	4807      	ldr	r0, [pc, #28]	@ (80012b4 <MX_TIM2_Init+0xe8>)
 8001298:	f003 fd62 	bl	8004d60 <HAL_TIM_OC_ConfigChannel>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80012a2:	f000 f9f1 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012a6:	4803      	ldr	r0, [pc, #12]	@ (80012b4 <MX_TIM2_Init+0xe8>)
 80012a8:	f000 fade 	bl	8001868 <HAL_TIM_MspPostInit>

}
 80012ac:	bf00      	nop
 80012ae:	3738      	adds	r7, #56	@ 0x38
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200002f0 	.word	0x200002f0

080012b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012bc:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <MX_USART2_UART_Init+0x58>)
 80012be:	4a15      	ldr	r2, [pc, #84]	@ (8001314 <MX_USART2_UART_Init+0x5c>)
 80012c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012c2:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <MX_USART2_UART_Init+0x58>)
 80012c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ca:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <MX_USART2_UART_Init+0x58>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <MX_USART2_UART_Init+0x58>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <MX_USART2_UART_Init+0x58>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <MX_USART2_UART_Init+0x58>)
 80012de:	220c      	movs	r2, #12
 80012e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <MX_USART2_UART_Init+0x58>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e8:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <MX_USART2_UART_Init+0x58>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ee:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <MX_USART2_UART_Init+0x58>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f4:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <MX_USART2_UART_Init+0x58>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012fa:	4805      	ldr	r0, [pc, #20]	@ (8001310 <MX_USART2_UART_Init+0x58>)
 80012fc:	f004 fa62 	bl	80057c4 <HAL_UART_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001306:	f000 f9bf 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2000033c 	.word	0x2000033c
 8001314:	40004400 	.word	0x40004400

08001318 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800131e:	4b10      	ldr	r3, [pc, #64]	@ (8001360 <MX_DMA_Init+0x48>)
 8001320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001322:	4a0f      	ldr	r2, [pc, #60]	@ (8001360 <MX_DMA_Init+0x48>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6493      	str	r3, [r2, #72]	@ 0x48
 800132a:	4b0d      	ldr	r3, [pc, #52]	@ (8001360 <MX_DMA_Init+0x48>)
 800132c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	200b      	movs	r0, #11
 800133c:	f001 feb5 	bl	80030aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001340:	200b      	movs	r0, #11
 8001342:	f001 fece 	bl	80030e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	2011      	movs	r0, #17
 800134c:	f001 fead 	bl	80030aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001350:	2011      	movs	r0, #17
 8001352:	f001 fec6 	bl	80030e2 <HAL_NVIC_EnableIRQ>

}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40021000 	.word	0x40021000

08001364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137a:	4b29      	ldr	r3, [pc, #164]	@ (8001420 <MX_GPIO_Init+0xbc>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	4a28      	ldr	r2, [pc, #160]	@ (8001420 <MX_GPIO_Init+0xbc>)
 8001380:	f043 0304 	orr.w	r3, r3, #4
 8001384:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001386:	4b26      	ldr	r3, [pc, #152]	@ (8001420 <MX_GPIO_Init+0xbc>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	4b23      	ldr	r3, [pc, #140]	@ (8001420 <MX_GPIO_Init+0xbc>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001396:	4a22      	ldr	r2, [pc, #136]	@ (8001420 <MX_GPIO_Init+0xbc>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800139e:	4b20      	ldr	r3, [pc, #128]	@ (8001420 <MX_GPIO_Init+0xbc>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001420 <MX_GPIO_Init+0xbc>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001420 <MX_GPIO_Init+0xbc>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001420 <MX_GPIO_Init+0xbc>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013cc:	f002 fa06 	bl	80037dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2108      	movs	r1, #8
 80013d4:	4813      	ldr	r0, [pc, #76]	@ (8001424 <MX_GPIO_Init+0xc0>)
 80013d6:	f002 fa01 	bl	80037dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	4619      	mov	r1, r3
 80013f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f6:	f002 f887 	bl	8003508 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80013fa:	2308      	movs	r3, #8
 80013fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fe:	2301      	movs	r3, #1
 8001400:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	4619      	mov	r1, r3
 8001410:	4804      	ldr	r0, [pc, #16]	@ (8001424 <MX_GPIO_Init+0xc0>)
 8001412:	f002 f879 	bl	8003508 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001416:	bf00      	nop
 8001418:	3720      	adds	r7, #32
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40021000 	.word	0x40021000
 8001424:	48000400 	.word	0x48000400

08001428 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
/* ADC conversion complete callback */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  buffer_ready = 1;
 8001430:	4b04      	ldr	r3, [pc, #16]	@ (8001444 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001432:	2201      	movs	r2, #1
 8001434:	701a      	strb	r2, [r3, #0]
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	2000080c 	.word	0x2000080c

08001448 <swap_buffers>:

// Code to swap output buffers
void swap_buffers() {
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
    float32_t* temp = fft_mag_prev;
 800144e:	4b08      	ldr	r3, [pc, #32]	@ (8001470 <swap_buffers+0x28>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	607b      	str	r3, [r7, #4]
    fft_mag_prev = fft_mag;
 8001454:	4b07      	ldr	r3, [pc, #28]	@ (8001474 <swap_buffers+0x2c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a05      	ldr	r2, [pc, #20]	@ (8001470 <swap_buffers+0x28>)
 800145a:	6013      	str	r3, [r2, #0]
    fft_mag = temp;
 800145c:	4a05      	ldr	r2, [pc, #20]	@ (8001474 <swap_buffers+0x2c>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6013      	str	r3, [r2, #0]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000004 	.word	0x20000004
 8001474:	20000000 	.word	0x20000000

08001478 <process_fft>:

/* Process FFT */
void process_fft(void) {
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b087      	sub	sp, #28
 800147c:	af00      	add	r7, sp, #0
  // Convert ADC samples to float32 (-1 to 1)
  for (int i = 0; i < FFT_SIZE; i++) {
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	e017      	b.n	80014b4 <process_fft+0x3c>
    fft_input[i] = (float32_t)(adc_buffer[i] - 2048) / 2048.0f;
 8001484:	4a78      	ldr	r2, [pc, #480]	@ (8001668 <process_fft+0x1f0>)
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800148c:	b29b      	uxth	r3, r3
 800148e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001492:	ee07 3a90 	vmov	s15, r3
 8001496:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800149a:	eddf 6a74 	vldr	s13, [pc, #464]	@ 800166c <process_fft+0x1f4>
 800149e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a2:	4a73      	ldr	r2, [pc, #460]	@ (8001670 <process_fft+0x1f8>)
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < FFT_SIZE; i++) {
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	3301      	adds	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014ba:	dbe3      	blt.n	8001484 <process_fft+0xc>
  }
  // Calculate and remove mean
  float32_t mean;
  arm_mean_f32(fft_input, FFT_SIZE, &mean);
 80014bc:	463b      	mov	r3, r7
 80014be:	461a      	mov	r2, r3
 80014c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014c4:	486a      	ldr	r0, [pc, #424]	@ (8001670 <process_fft+0x1f8>)
 80014c6:	f004 fe13 	bl	80060f0 <arm_mean_f32>
  arm_offset_f32(fft_input, -mean, fft_input, FFT_SIZE);
 80014ca:	edd7 7a00 	vldr	s15, [r7]
 80014ce:	eef1 7a67 	vneg.f32	s15, s15
 80014d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014d6:	4966      	ldr	r1, [pc, #408]	@ (8001670 <process_fft+0x1f8>)
 80014d8:	eeb0 0a67 	vmov.f32	s0, s15
 80014dc:	4864      	ldr	r0, [pc, #400]	@ (8001670 <process_fft+0x1f8>)
 80014de:	f005 fbcf 	bl	8006c80 <arm_offset_f32>

  // Get time since last fft
  uint32_t time = __HAL_TIM_GET_COUNTER(&htim1)*0.001; // Time in ms
 80014e2:	4b64      	ldr	r3, [pc, #400]	@ (8001674 <process_fft+0x1fc>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff f80b 	bl	8000504 <__aeabi_ui2d>
 80014ee:	a35a      	add	r3, pc, #360	@ (adr r3, 8001658 <process_fft+0x1e0>)
 80014f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f4:	f7ff f880 	bl	80005f8 <__aeabi_dmul>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4610      	mov	r0, r2
 80014fe:	4619      	mov	r1, r3
 8001500:	f7ff fb52 	bl	8000ba8 <__aeabi_d2uiz>
 8001504:	4603      	mov	r3, r0
 8001506:	60bb      	str	r3, [r7, #8]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001508:	4b5a      	ldr	r3, [pc, #360]	@ (8001674 <process_fft+0x1fc>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2200      	movs	r2, #0
 800150e:	625a      	str	r2, [r3, #36]	@ 0x24
  // Perform FFT
  arm_rfft_fast_f32(&fft_instance, fft_input, fft_output, 0);
 8001510:	2300      	movs	r3, #0
 8001512:	4a59      	ldr	r2, [pc, #356]	@ (8001678 <process_fft+0x200>)
 8001514:	4956      	ldr	r1, [pc, #344]	@ (8001670 <process_fft+0x1f8>)
 8001516:	4859      	ldr	r0, [pc, #356]	@ (800167c <process_fft+0x204>)
 8001518:	f004 ffd4 	bl	80064c4 <arm_rfft_fast_f32>

  // Swap pointers to magnitudes to find difference between current and previous fft
  swap_buffers();
 800151c:	f7ff ff94 	bl	8001448 <swap_buffers>
  float32_t fft_mag_diffsqr_sum = 0;
 8001520:	f04f 0300 	mov.w	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
  // Calculate magnitude and find difference from previous
  for (int i = 0; i < FFT_SIZE/2; i++) {
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	e05b      	b.n	80015e4 <process_fft+0x16c>
    fft_mag[i] = sqrtf(fft_output[2*i]*fft_output[2*i] +
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4a51      	ldr	r2, [pc, #324]	@ (8001678 <process_fft+0x200>)
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	ed93 7a00 	vldr	s14, [r3]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	4a4e      	ldr	r2, [pc, #312]	@ (8001678 <process_fft+0x200>)
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	edd3 7a00 	vldr	s15, [r3]
 8001548:	ee27 7a27 	vmul.f32	s14, s14, s15
                       fft_output[2*i+1]*fft_output[2*i+1]);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	3301      	adds	r3, #1
 8001552:	4a49      	ldr	r2, [pc, #292]	@ (8001678 <process_fft+0x200>)
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	edd3 6a00 	vldr	s13, [r3]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	3301      	adds	r3, #1
 8001562:	4a45      	ldr	r2, [pc, #276]	@ (8001678 <process_fft+0x200>)
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    fft_mag[i] = sqrtf(fft_output[2*i]*fft_output[2*i] +
 8001570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001574:	4b42      	ldr	r3, [pc, #264]	@ (8001680 <process_fft+0x208>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	18d4      	adds	r4, r2, r3
 800157e:	eeb0 0a67 	vmov.f32	s0, s15
 8001582:	f008 fb01 	bl	8009b88 <sqrtf>
 8001586:	eef0 7a40 	vmov.f32	s15, s0
 800158a:	edc4 7a00 	vstr	s15, [r4]
    fft_mag_diffsqr_sum += (fft_mag[i] - fft_mag_prev[i])*(fft_mag[i] - fft_mag_prev[i]);
 800158e:	4b3c      	ldr	r3, [pc, #240]	@ (8001680 <process_fft+0x208>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	ed93 7a00 	vldr	s14, [r3]
 800159c:	4b39      	ldr	r3, [pc, #228]	@ (8001684 <process_fft+0x20c>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	edd3 7a00 	vldr	s15, [r3]
 80015aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015ae:	4b34      	ldr	r3, [pc, #208]	@ (8001680 <process_fft+0x208>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	edd3 6a00 	vldr	s13, [r3]
 80015bc:	4b31      	ldr	r3, [pc, #196]	@ (8001684 <process_fft+0x20c>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	edd3 7a00 	vldr	s15, [r3]
 80015ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80015d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015da:	edc7 7a04 	vstr	s15, [r7, #16]
  for (int i = 0; i < FFT_SIZE/2; i++) {
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	3301      	adds	r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2bff      	cmp	r3, #255	@ 0xff
 80015e8:	dda0      	ble.n	800152c <process_fft+0xb4>
  }

  float32_t fft_change = sqrtf(fft_mag_diffsqr_sum)/time;
 80015ea:	ed97 0a04 	vldr	s0, [r7, #16]
 80015ee:	f008 facb 	bl	8009b88 <sqrtf>
 80015f2:	eef0 6a40 	vmov.f32	s13, s0
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	ee07 3a90 	vmov	s15, r3
 80015fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001600:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001604:	edc7 7a01 	vstr	s15, [r7, #4]

  if (fft_change > CHANGE_THRESHOLD) {
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7fe ff9d 	bl	8000548 <__aeabi_f2d>
 800160e:	a314      	add	r3, pc, #80	@ (adr r3, 8001660 <process_fft+0x1e8>)
 8001610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001614:	f7ff fa80 	bl	8000b18 <__aeabi_dcmpgt>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00f      	beq.n	800163e <process_fft+0x1c6>
	  // Turn ON the LED
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800161e:	2201      	movs	r2, #1
 8001620:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001624:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001628:	f002 f8d8 	bl	80037dc <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800162c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001630:	f000 fb9e 	bl	8001d70 <HAL_Delay>
	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001634:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <process_fft+0x1fc>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2200      	movs	r2, #0
 800163a:	625a      	str	r2, [r3, #36]	@ 0x24
//	  __HAL_TIM_SET_COUNTER(&htim1, 0);
//  }
  else {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
  }
}
 800163c:	e006      	b.n	800164c <process_fft+0x1d4>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001644:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001648:	f002 f8c8 	bl	80037dc <HAL_GPIO_WritePin>
}
 800164c:	bf00      	nop
 800164e:	371c      	adds	r7, #28
 8001650:	46bd      	mov	sp, r7
 8001652:	bd90      	pop	{r4, r7, pc}
 8001654:	f3af 8000 	nop.w
 8001658:	d2f1a9fc 	.word	0xd2f1a9fc
 800165c:	3f50624d 	.word	0x3f50624d
 8001660:	9999999a 	.word	0x9999999a
 8001664:	3fc99999 	.word	0x3fc99999
 8001668:	2000040c 	.word	0x2000040c
 800166c:	45000000 	.word	0x45000000
 8001670:	20000814 	.word	0x20000814
 8001674:	200002a4 	.word	0x200002a4
 8001678:	20001014 	.word	0x20001014
 800167c:	20002014 	.word	0x20002014
 8001680:	20000000 	.word	0x20000000
 8001684:	20000004 	.word	0x20000004

08001688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800168c:	b672      	cpsid	i
}
 800168e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <Error_Handler+0x8>

08001694 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	4b0f      	ldr	r3, [pc, #60]	@ (80016d8 <HAL_MspInit+0x44>)
 800169c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800169e:	4a0e      	ldr	r2, [pc, #56]	@ (80016d8 <HAL_MspInit+0x44>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80016a6:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <HAL_MspInit+0x44>)
 80016a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <HAL_MspInit+0x44>)
 80016b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b6:	4a08      	ldr	r2, [pc, #32]	@ (80016d8 <HAL_MspInit+0x44>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80016be:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <HAL_MspInit+0x44>)
 80016c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000

080016dc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b09e      	sub	sp, #120	@ 0x78
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f4:	f107 0310 	add.w	r3, r7, #16
 80016f8:	2254      	movs	r2, #84	@ 0x54
 80016fa:	2100      	movs	r1, #0
 80016fc:	4618      	mov	r0, r3
 80016fe:	f006 fb1e 	bl	8007d3e <memset>
  if(hadc->Instance==ADC1)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a3b      	ldr	r2, [pc, #236]	@ (80017f4 <HAL_ADC_MspInit+0x118>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d16e      	bne.n	80017ea <HAL_ADC_MspInit+0x10e>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800170c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001710:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001712:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001716:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001718:	2301      	movs	r3, #1
 800171a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800171c:	2301      	movs	r3, #1
 800171e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001720:	2310      	movs	r3, #16
 8001722:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001724:	2307      	movs	r3, #7
 8001726:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001728:	2302      	movs	r3, #2
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800172c:	2302      	movs	r3, #2
 800172e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001730:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001734:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001736:	f107 0310 	add.w	r3, r7, #16
 800173a:	4618      	mov	r0, r3
 800173c:	f002 ff12 	bl	8004564 <HAL_RCCEx_PeriphCLKConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001746:	f7ff ff9f 	bl	8001688 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800174a:	4b2b      	ldr	r3, [pc, #172]	@ (80017f8 <HAL_ADC_MspInit+0x11c>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174e:	4a2a      	ldr	r2, [pc, #168]	@ (80017f8 <HAL_ADC_MspInit+0x11c>)
 8001750:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001756:	4b28      	ldr	r3, [pc, #160]	@ (80017f8 <HAL_ADC_MspInit+0x11c>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	4b25      	ldr	r3, [pc, #148]	@ (80017f8 <HAL_ADC_MspInit+0x11c>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001766:	4a24      	ldr	r2, [pc, #144]	@ (80017f8 <HAL_ADC_MspInit+0x11c>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800176e:	4b22      	ldr	r3, [pc, #136]	@ (80017f8 <HAL_ADC_MspInit+0x11c>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800177a:	2308      	movs	r3, #8
 800177c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800177e:	230b      	movs	r3, #11
 8001780:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800178a:	4619      	mov	r1, r3
 800178c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001790:	f001 feba 	bl	8003508 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001794:	4b19      	ldr	r3, [pc, #100]	@ (80017fc <HAL_ADC_MspInit+0x120>)
 8001796:	4a1a      	ldr	r2, [pc, #104]	@ (8001800 <HAL_ADC_MspInit+0x124>)
 8001798:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800179a:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <HAL_ADC_MspInit+0x120>)
 800179c:	2200      	movs	r2, #0
 800179e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017a0:	4b16      	ldr	r3, [pc, #88]	@ (80017fc <HAL_ADC_MspInit+0x120>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <HAL_ADC_MspInit+0x120>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017ac:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <HAL_ADC_MspInit+0x120>)
 80017ae:	2280      	movs	r2, #128	@ 0x80
 80017b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017b2:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <HAL_ADC_MspInit+0x120>)
 80017b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017ba:	4b10      	ldr	r3, [pc, #64]	@ (80017fc <HAL_ADC_MspInit+0x120>)
 80017bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <HAL_ADC_MspInit+0x120>)
 80017c4:	2220      	movs	r2, #32
 80017c6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <HAL_ADC_MspInit+0x120>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017ce:	480b      	ldr	r0, [pc, #44]	@ (80017fc <HAL_ADC_MspInit+0x120>)
 80017d0:	f001 fca2 	bl	8003118 <HAL_DMA_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 80017da:	f7ff ff55 	bl	8001688 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a06      	ldr	r2, [pc, #24]	@ (80017fc <HAL_ADC_MspInit+0x120>)
 80017e2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80017e4:	4a05      	ldr	r2, [pc, #20]	@ (80017fc <HAL_ADC_MspInit+0x120>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80017ea:	bf00      	nop
 80017ec:	3778      	adds	r7, #120	@ 0x78
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	50040000 	.word	0x50040000
 80017f8:	40021000 	.word	0x40021000
 80017fc:	2000025c 	.word	0x2000025c
 8001800:	40020008 	.word	0x40020008

08001804 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a13      	ldr	r2, [pc, #76]	@ (8001860 <HAL_TIM_Base_MspInit+0x5c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d10c      	bne.n	8001830 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001816:	4b13      	ldr	r3, [pc, #76]	@ (8001864 <HAL_TIM_Base_MspInit+0x60>)
 8001818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800181a:	4a12      	ldr	r2, [pc, #72]	@ (8001864 <HAL_TIM_Base_MspInit+0x60>)
 800181c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001820:	6613      	str	r3, [r2, #96]	@ 0x60
 8001822:	4b10      	ldr	r3, [pc, #64]	@ (8001864 <HAL_TIM_Base_MspInit+0x60>)
 8001824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001826:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 800182e:	e010      	b.n	8001852 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001838:	d10b      	bne.n	8001852 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800183a:	4b0a      	ldr	r3, [pc, #40]	@ (8001864 <HAL_TIM_Base_MspInit+0x60>)
 800183c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800183e:	4a09      	ldr	r2, [pc, #36]	@ (8001864 <HAL_TIM_Base_MspInit+0x60>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6593      	str	r3, [r2, #88]	@ 0x58
 8001846:	4b07      	ldr	r3, [pc, #28]	@ (8001864 <HAL_TIM_Base_MspInit+0x60>)
 8001848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
}
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40012c00 	.word	0x40012c00
 8001864:	40021000 	.word	0x40021000

08001868 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001888:	d11c      	bne.n	80018c4 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188a:	4b10      	ldr	r3, [pc, #64]	@ (80018cc <HAL_TIM_MspPostInit+0x64>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188e:	4a0f      	ldr	r2, [pc, #60]	@ (80018cc <HAL_TIM_MspPostInit+0x64>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001896:	4b0d      	ldr	r3, [pc, #52]	@ (80018cc <HAL_TIM_MspPostInit+0x64>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018a2:	2320      	movs	r3, #32
 80018a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018b2:	2301      	movs	r3, #1
 80018b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	4619      	mov	r1, r3
 80018bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018c0:	f001 fe22 	bl	8003508 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018c4:	bf00      	nop
 80018c6:	3720      	adds	r7, #32
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40021000 	.word	0x40021000

080018d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b09e      	sub	sp, #120	@ 0x78
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e8:	f107 0310 	add.w	r3, r7, #16
 80018ec:	2254      	movs	r2, #84	@ 0x54
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f006 fa24 	bl	8007d3e <memset>
  if(huart->Instance==USART2)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a3c      	ldr	r2, [pc, #240]	@ (80019ec <HAL_UART_MspInit+0x11c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d171      	bne.n	80019e4 <HAL_UART_MspInit+0x114>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001900:	2302      	movs	r3, #2
 8001902:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001904:	2300      	movs	r3, #0
 8001906:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001908:	f107 0310 	add.w	r3, r7, #16
 800190c:	4618      	mov	r0, r3
 800190e:	f002 fe29 	bl	8004564 <HAL_RCCEx_PeriphCLKConfig>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001918:	f7ff feb6 	bl	8001688 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800191c:	4b34      	ldr	r3, [pc, #208]	@ (80019f0 <HAL_UART_MspInit+0x120>)
 800191e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001920:	4a33      	ldr	r2, [pc, #204]	@ (80019f0 <HAL_UART_MspInit+0x120>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001926:	6593      	str	r3, [r2, #88]	@ 0x58
 8001928:	4b31      	ldr	r3, [pc, #196]	@ (80019f0 <HAL_UART_MspInit+0x120>)
 800192a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001934:	4b2e      	ldr	r3, [pc, #184]	@ (80019f0 <HAL_UART_MspInit+0x120>)
 8001936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001938:	4a2d      	ldr	r2, [pc, #180]	@ (80019f0 <HAL_UART_MspInit+0x120>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001940:	4b2b      	ldr	r3, [pc, #172]	@ (80019f0 <HAL_UART_MspInit+0x120>)
 8001942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800194c:	2304      	movs	r3, #4
 800194e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800195c:	2307      	movs	r3, #7
 800195e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001960:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001964:	4619      	mov	r1, r3
 8001966:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800196a:	f001 fdcd 	bl	8003508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800196e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001972:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197c:	2303      	movs	r3, #3
 800197e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001980:	2303      	movs	r3, #3
 8001982:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001988:	4619      	mov	r1, r3
 800198a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800198e:	f001 fdbb 	bl	8003508 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001992:	4b18      	ldr	r3, [pc, #96]	@ (80019f4 <HAL_UART_MspInit+0x124>)
 8001994:	4a18      	ldr	r2, [pc, #96]	@ (80019f8 <HAL_UART_MspInit+0x128>)
 8001996:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001998:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <HAL_UART_MspInit+0x124>)
 800199a:	2202      	movs	r2, #2
 800199c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800199e:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <HAL_UART_MspInit+0x124>)
 80019a0:	2210      	movs	r2, #16
 80019a2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a4:	4b13      	ldr	r3, [pc, #76]	@ (80019f4 <HAL_UART_MspInit+0x124>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019aa:	4b12      	ldr	r3, [pc, #72]	@ (80019f4 <HAL_UART_MspInit+0x124>)
 80019ac:	2280      	movs	r2, #128	@ 0x80
 80019ae:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019b0:	4b10      	ldr	r3, [pc, #64]	@ (80019f4 <HAL_UART_MspInit+0x124>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019b6:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <HAL_UART_MspInit+0x124>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80019bc:	4b0d      	ldr	r3, [pc, #52]	@ (80019f4 <HAL_UART_MspInit+0x124>)
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019c2:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <HAL_UART_MspInit+0x124>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80019c8:	480a      	ldr	r0, [pc, #40]	@ (80019f4 <HAL_UART_MspInit+0x124>)
 80019ca:	f001 fba5 	bl	8003118 <HAL_DMA_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80019d4:	f7ff fe58 	bl	8001688 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a06      	ldr	r2, [pc, #24]	@ (80019f4 <HAL_UART_MspInit+0x124>)
 80019dc:	671a      	str	r2, [r3, #112]	@ 0x70
 80019de:	4a05      	ldr	r2, [pc, #20]	@ (80019f4 <HAL_UART_MspInit+0x124>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80019e4:	bf00      	nop
 80019e6:	3778      	adds	r7, #120	@ 0x78
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40004400 	.word	0x40004400
 80019f0:	40021000 	.word	0x40021000
 80019f4:	200003c4 	.word	0x200003c4
 80019f8:	40020080 	.word	0x40020080

080019fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <NMI_Handler+0x4>

08001a04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <HardFault_Handler+0x4>

08001a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <MemManage_Handler+0x4>

08001a14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <BusFault_Handler+0x4>

08001a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <UsageFault_Handler+0x4>

08001a24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a52:	f000 f96d 	bl	8001d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a60:	4802      	ldr	r0, [pc, #8]	@ (8001a6c <DMA1_Channel1_IRQHandler+0x10>)
 8001a62:	f001 fc71 	bl	8003348 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	2000025c 	.word	0x2000025c

08001a70 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001a74:	4802      	ldr	r0, [pc, #8]	@ (8001a80 <DMA1_Channel7_IRQHandler+0x10>)
 8001a76:	f001 fc67 	bl	8003348 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200003c4 	.word	0x200003c4

08001a84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return 1;
 8001a88:	2301      	movs	r3, #1
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <_kill>:

int _kill(int pid, int sig)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a9e:	f006 f9a1 	bl	8007de4 <__errno>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2216      	movs	r2, #22
 8001aa6:	601a      	str	r2, [r3, #0]
  return -1;
 8001aa8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_exit>:

void _exit (int status)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001abc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff ffe7 	bl	8001a94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ac6:	bf00      	nop
 8001ac8:	e7fd      	b.n	8001ac6 <_exit+0x12>

08001aca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b086      	sub	sp, #24
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	e00a      	b.n	8001af2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001adc:	f3af 8000 	nop.w
 8001ae0:	4601      	mov	r1, r0
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	60ba      	str	r2, [r7, #8]
 8001ae8:	b2ca      	uxtb	r2, r1
 8001aea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	3301      	adds	r3, #1
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	dbf0      	blt.n	8001adc <_read+0x12>
  }

  return len;
 8001afa:	687b      	ldr	r3, [r7, #4]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	e009      	b.n	8001b2a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1c5a      	adds	r2, r3, #1
 8001b1a:	60ba      	str	r2, [r7, #8]
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	3301      	adds	r3, #1
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	dbf1      	blt.n	8001b16 <_write+0x12>
  }
  return len;
 8001b32:	687b      	ldr	r3, [r7, #4]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <_close>:

int _close(int file)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b64:	605a      	str	r2, [r3, #4]
  return 0;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <_isatty>:

int _isatty(int file)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b7c:	2301      	movs	r3, #1
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b085      	sub	sp, #20
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bac:	4a14      	ldr	r2, [pc, #80]	@ (8001c00 <_sbrk+0x5c>)
 8001bae:	4b15      	ldr	r3, [pc, #84]	@ (8001c04 <_sbrk+0x60>)
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bb8:	4b13      	ldr	r3, [pc, #76]	@ (8001c08 <_sbrk+0x64>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d102      	bne.n	8001bc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc0:	4b11      	ldr	r3, [pc, #68]	@ (8001c08 <_sbrk+0x64>)
 8001bc2:	4a12      	ldr	r2, [pc, #72]	@ (8001c0c <_sbrk+0x68>)
 8001bc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bc6:	4b10      	ldr	r3, [pc, #64]	@ (8001c08 <_sbrk+0x64>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4413      	add	r3, r2
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d207      	bcs.n	8001be4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd4:	f006 f906 	bl	8007de4 <__errno>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	220c      	movs	r2, #12
 8001bdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295
 8001be2:	e009      	b.n	8001bf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be4:	4b08      	ldr	r3, [pc, #32]	@ (8001c08 <_sbrk+0x64>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bea:	4b07      	ldr	r3, [pc, #28]	@ (8001c08 <_sbrk+0x64>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	4a05      	ldr	r2, [pc, #20]	@ (8001c08 <_sbrk+0x64>)
 8001bf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	2000c000 	.word	0x2000c000
 8001c04:	00000400 	.word	0x00000400
 8001c08:	2000202c 	.word	0x2000202c
 8001c0c:	20002180 	.word	0x20002180

08001c10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c14:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <SystemInit+0x20>)
 8001c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c1a:	4a05      	ldr	r2, [pc, #20]	@ (8001c30 <SystemInit+0x20>)
 8001c1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c38:	f7ff ffea 	bl	8001c10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c3c:	480c      	ldr	r0, [pc, #48]	@ (8001c70 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c3e:	490d      	ldr	r1, [pc, #52]	@ (8001c74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c40:	4a0d      	ldr	r2, [pc, #52]	@ (8001c78 <LoopForever+0xe>)
  movs r3, #0
 8001c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c44:	e002      	b.n	8001c4c <LoopCopyDataInit>

08001c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c4a:	3304      	adds	r3, #4

08001c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c50:	d3f9      	bcc.n	8001c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c52:	4a0a      	ldr	r2, [pc, #40]	@ (8001c7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c54:	4c0a      	ldr	r4, [pc, #40]	@ (8001c80 <LoopForever+0x16>)
  movs r3, #0
 8001c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c58:	e001      	b.n	8001c5e <LoopFillZerobss>

08001c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c5c:	3204      	adds	r2, #4

08001c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c60:	d3fb      	bcc.n	8001c5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c62:	f006 f8c5 	bl	8007df0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c66:	f7ff f955 	bl	8000f14 <main>

08001c6a <LoopForever>:

LoopForever:
    b LoopForever
 8001c6a:	e7fe      	b.n	8001c6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c6c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c74:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001c78:	0801cf9c 	.word	0x0801cf9c
  ldr r2, =_sbss
 8001c7c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001c80:	20002180 	.word	0x20002180

08001c84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c84:	e7fe      	b.n	8001c84 <ADC1_IRQHandler>

08001c86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c90:	2003      	movs	r0, #3
 8001c92:	f001 f9ff 	bl	8003094 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c96:	2000      	movs	r0, #0
 8001c98:	f000 f80e 	bl	8001cb8 <HAL_InitTick>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	71fb      	strb	r3, [r7, #7]
 8001ca6:	e001      	b.n	8001cac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ca8:	f7ff fcf4 	bl	8001694 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cac:	79fb      	ldrb	r3, [r7, #7]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001cc4:	4b17      	ldr	r3, [pc, #92]	@ (8001d24 <HAL_InitTick+0x6c>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d023      	beq.n	8001d14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ccc:	4b16      	ldr	r3, [pc, #88]	@ (8001d28 <HAL_InitTick+0x70>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b14      	ldr	r3, [pc, #80]	@ (8001d24 <HAL_InitTick+0x6c>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f001 fa0b 	bl	80030fe <HAL_SYSTICK_Config>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10f      	bne.n	8001d0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b0f      	cmp	r3, #15
 8001cf2:	d809      	bhi.n	8001d08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f001 f9d5 	bl	80030aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d00:	4a0a      	ldr	r2, [pc, #40]	@ (8001d2c <HAL_InitTick+0x74>)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	e007      	b.n	8001d18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	73fb      	strb	r3, [r7, #15]
 8001d0c:	e004      	b.n	8001d18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	73fb      	strb	r3, [r7, #15]
 8001d12:	e001      	b.n	8001d18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000010 	.word	0x20000010
 8001d28:	20000008 	.word	0x20000008
 8001d2c:	2000000c 	.word	0x2000000c

08001d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d34:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <HAL_IncTick+0x20>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <HAL_IncTick+0x24>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4413      	add	r3, r2
 8001d40:	4a04      	ldr	r2, [pc, #16]	@ (8001d54 <HAL_IncTick+0x24>)
 8001d42:	6013      	str	r3, [r2, #0]
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20000010 	.word	0x20000010
 8001d54:	20002030 	.word	0x20002030

08001d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d5c:	4b03      	ldr	r3, [pc, #12]	@ (8001d6c <HAL_GetTick+0x14>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20002030 	.word	0x20002030

08001d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d78:	f7ff ffee 	bl	8001d58 <HAL_GetTick>
 8001d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d88:	d005      	beq.n	8001d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001db4 <HAL_Delay+0x44>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4413      	add	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d96:	bf00      	nop
 8001d98:	f7ff ffde 	bl	8001d58 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d8f7      	bhi.n	8001d98 <HAL_Delay+0x28>
  {
  }
}
 8001da8:	bf00      	nop
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000010 	.word	0x20000010

08001db8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	609a      	str	r2, [r3, #8]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b087      	sub	sp, #28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	3360      	adds	r3, #96	@ 0x60
 8001e32:	461a      	mov	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <LL_ADC_SetOffset+0x44>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e58:	bf00      	nop
 8001e5a:	371c      	adds	r7, #28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	03fff000 	.word	0x03fff000

08001e68 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3360      	adds	r3, #96	@ 0x60
 8001e76:	461a      	mov	r2, r3
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	3360      	adds	r3, #96	@ 0x60
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ebe:	bf00      	nop
 8001ec0:	371c      	adds	r7, #28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b087      	sub	sp, #28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	3330      	adds	r3, #48	@ 0x30
 8001f00:	461a      	mov	r2, r3
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	4413      	add	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	211f      	movs	r1, #31
 8001f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	401a      	ands	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	0e9b      	lsrs	r3, r3, #26
 8001f28:	f003 011f 	and.w	r1, r3, #31
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	f003 031f 	and.w	r3, r3, #31
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	431a      	orrs	r2, r3
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f3c:	bf00      	nop
 8001f3e:	371c      	adds	r7, #28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	3314      	adds	r3, #20
 8001f58:	461a      	mov	r2, r3
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	0e5b      	lsrs	r3, r3, #25
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	4413      	add	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	0d1b      	lsrs	r3, r3, #20
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	2107      	movs	r1, #7
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	401a      	ands	r2, r3
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	0d1b      	lsrs	r3, r3, #20
 8001f82:	f003 031f 	and.w	r3, r3, #31
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f92:	bf00      	nop
 8001f94:	371c      	adds	r7, #28
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	401a      	ands	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f003 0318 	and.w	r3, r3, #24
 8001fc2:	4908      	ldr	r1, [pc, #32]	@ (8001fe4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fc4:	40d9      	lsrs	r1, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	400b      	ands	r3, r1
 8001fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fd6:	bf00      	nop
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	0007ffff 	.word	0x0007ffff

08001fe8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001ff8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6093      	str	r3, [r2, #8]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800201c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002020:	d101      	bne.n	8002026 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002044:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002048:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800206c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002070:	d101      	bne.n	8002076 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002094:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002098:	f043 0201 	orr.w	r2, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <LL_ADC_IsEnabled+0x18>
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <LL_ADC_IsEnabled+0x1a>
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020e2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020e6:	f043 0204 	orr.w	r2, r3, #4
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b04      	cmp	r3, #4
 800210c:	d101      	bne.n	8002112 <LL_ADC_REG_IsConversionOngoing+0x18>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	2b08      	cmp	r3, #8
 8002132:	d101      	bne.n	8002138 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e126      	b.n	80023b0 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800216c:	2b00      	cmp	r3, #0
 800216e:	d109      	bne.n	8002184 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff fab3 	bl	80016dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff3f 	bl	800200c <LL_ADC_IsDeepPowerDownEnabled>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d004      	beq.n	800219e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff25 	bl	8001fe8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff ff5a 	bl	800205c <LL_ADC_IsInternalRegulatorEnabled>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d115      	bne.n	80021da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff ff3e 	bl	8002034 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021b8:	4b7f      	ldr	r3, [pc, #508]	@ (80023b8 <HAL_ADC_Init+0x270>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	099b      	lsrs	r3, r3, #6
 80021be:	4a7f      	ldr	r2, [pc, #508]	@ (80023bc <HAL_ADC_Init+0x274>)
 80021c0:	fba2 2303 	umull	r2, r3, r2, r3
 80021c4:	099b      	lsrs	r3, r3, #6
 80021c6:	3301      	adds	r3, #1
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021cc:	e002      	b.n	80021d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f9      	bne.n	80021ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff3c 	bl	800205c <LL_ADC_IsInternalRegulatorEnabled>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10d      	bne.n	8002206 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ee:	f043 0210 	orr.w	r2, r3, #16
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fa:	f043 0201 	orr.w	r2, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff ff75 	bl	80020fa <LL_ADC_REG_IsConversionOngoing>
 8002210:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b00      	cmp	r3, #0
 800221c:	f040 80bf 	bne.w	800239e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	2b00      	cmp	r3, #0
 8002224:	f040 80bb 	bne.w	800239e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800222c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002230:	f043 0202 	orr.w	r2, r3, #2
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff35 	bl	80020ac <LL_ADC_IsEnabled>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10b      	bne.n	8002260 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002248:	485d      	ldr	r0, [pc, #372]	@ (80023c0 <HAL_ADC_Init+0x278>)
 800224a:	f7ff ff2f 	bl	80020ac <LL_ADC_IsEnabled>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d105      	bne.n	8002260 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	4619      	mov	r1, r3
 800225a:	485a      	ldr	r0, [pc, #360]	@ (80023c4 <HAL_ADC_Init+0x27c>)
 800225c:	f7ff fdac 	bl	8001db8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	7e5b      	ldrb	r3, [r3, #25]
 8002264:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800226a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002270:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002276:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800227e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3020 	ldrb.w	r3, [r3, #32]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d106      	bne.n	800229c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002292:	3b01      	subs	r3, #1
 8002294:	045b      	lsls	r3, r3, #17
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d009      	beq.n	80022b8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	4b42      	ldr	r3, [pc, #264]	@ (80023c8 <HAL_ADC_Init+0x280>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	69b9      	ldr	r1, [r7, #24]
 80022c8:	430b      	orrs	r3, r1
 80022ca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff25 	bl	8002120 <LL_ADC_INJ_IsConversionOngoing>
 80022d6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d13d      	bne.n	800235a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d13a      	bne.n	800235a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022e8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80022f0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002300:	f023 0302 	bic.w	r3, r3, #2
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6812      	ldr	r2, [r2, #0]
 8002308:	69b9      	ldr	r1, [r7, #24]
 800230a:	430b      	orrs	r3, r1
 800230c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002314:	2b01      	cmp	r3, #1
 8002316:	d118      	bne.n	800234a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002322:	f023 0304 	bic.w	r3, r3, #4
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800232e:	4311      	orrs	r1, r2
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002334:	4311      	orrs	r1, r2
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800233a:	430a      	orrs	r2, r1
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	611a      	str	r2, [r3, #16]
 8002348:	e007      	b.n	800235a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0201 	bic.w	r2, r2, #1
 8002358:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d10c      	bne.n	800237c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002368:	f023 010f 	bic.w	r1, r3, #15
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	1e5a      	subs	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	631a      	str	r2, [r3, #48]	@ 0x30
 800237a:	e007      	b.n	800238c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 020f 	bic.w	r2, r2, #15
 800238a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002390:	f023 0303 	bic.w	r3, r3, #3
 8002394:	f043 0201 	orr.w	r2, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	655a      	str	r2, [r3, #84]	@ 0x54
 800239c:	e007      	b.n	80023ae <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a2:	f043 0210 	orr.w	r2, r3, #16
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3720      	adds	r7, #32
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000008 	.word	0x20000008
 80023bc:	053e2d63 	.word	0x053e2d63
 80023c0:	50040000 	.word	0x50040000
 80023c4:	50040300 	.word	0x50040300
 80023c8:	fff0c007 	.word	0xfff0c007

080023cc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fe8c 	bl	80020fa <LL_ADC_REG_IsConversionOngoing>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d167      	bne.n	80024b8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_Start_DMA+0x2a>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e063      	b.n	80024be <HAL_ADC_Start_DMA+0xf2>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 fc5e 	bl	8002cc0 <ADC_Enable>
 8002404:	4603      	mov	r3, r0
 8002406:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002408:	7dfb      	ldrb	r3, [r7, #23]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d14f      	bne.n	80024ae <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002412:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002416:	f023 0301 	bic.w	r3, r3, #1
 800241a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002426:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d006      	beq.n	800243c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002432:	f023 0206 	bic.w	r2, r3, #6
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	659a      	str	r2, [r3, #88]	@ 0x58
 800243a:	e002      	b.n	8002442 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002446:	4a20      	ldr	r2, [pc, #128]	@ (80024c8 <HAL_ADC_Start_DMA+0xfc>)
 8002448:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800244e:	4a1f      	ldr	r2, [pc, #124]	@ (80024cc <HAL_ADC_Start_DMA+0x100>)
 8002450:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002456:	4a1e      	ldr	r2, [pc, #120]	@ (80024d0 <HAL_ADC_Start_DMA+0x104>)
 8002458:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	221c      	movs	r2, #28
 8002460:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f042 0210 	orr.w	r2, r2, #16
 8002478:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 0201 	orr.w	r2, r2, #1
 8002488:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	3340      	adds	r3, #64	@ 0x40
 8002494:	4619      	mov	r1, r3
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f000 fef5 	bl	8003288 <HAL_DMA_Start_IT>
 800249e:	4603      	mov	r3, r0
 80024a0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fe13 	bl	80020d2 <LL_ADC_REG_StartConversion>
 80024ac:	e006      	b.n	80024bc <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80024b6:	e001      	b.n	80024bc <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024b8:	2302      	movs	r3, #2
 80024ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	08002dcd 	.word	0x08002dcd
 80024cc:	08002ea5 	.word	0x08002ea5
 80024d0:	08002ec1 	.word	0x08002ec1

080024d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b0b6      	sub	sp, #216	@ 0xd8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800250c:	2300      	movs	r3, #0
 800250e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_ADC_ConfigChannel+0x22>
 800251a:	2302      	movs	r3, #2
 800251c:	e3bb      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x79a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff fde5 	bl	80020fa <LL_ADC_REG_IsConversionOngoing>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	f040 83a0 	bne.w	8002c78 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b05      	cmp	r3, #5
 8002546:	d824      	bhi.n	8002592 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	3b02      	subs	r3, #2
 800254e:	2b03      	cmp	r3, #3
 8002550:	d81b      	bhi.n	800258a <HAL_ADC_ConfigChannel+0x8e>
 8002552:	a201      	add	r2, pc, #4	@ (adr r2, 8002558 <HAL_ADC_ConfigChannel+0x5c>)
 8002554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002558:	08002569 	.word	0x08002569
 800255c:	08002571 	.word	0x08002571
 8002560:	08002579 	.word	0x08002579
 8002564:	08002581 	.word	0x08002581
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002568:	230c      	movs	r3, #12
 800256a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800256e:	e010      	b.n	8002592 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002570:	2312      	movs	r3, #18
 8002572:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002576:	e00c      	b.n	8002592 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002578:	2318      	movs	r3, #24
 800257a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800257e:	e008      	b.n	8002592 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002580:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002584:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002588:	e003      	b.n	8002592 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800258a:	2306      	movs	r3, #6
 800258c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002590:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80025a0:	f7ff fca6 	bl	8001ef0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fda6 	bl	80020fa <LL_ADC_REG_IsConversionOngoing>
 80025ae:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fdb2 	bl	8002120 <LL_ADC_INJ_IsConversionOngoing>
 80025bc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f040 81a4 	bne.w	8002912 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f040 819f 	bne.w	8002912 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	6819      	ldr	r1, [r3, #0]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	461a      	mov	r2, r3
 80025e2:	f7ff fcb1 	bl	8001f48 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	08db      	lsrs	r3, r3, #3
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	2b04      	cmp	r3, #4
 8002606:	d00a      	beq.n	800261e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6818      	ldr	r0, [r3, #0]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	6919      	ldr	r1, [r3, #16]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002618:	f7ff fc02 	bl	8001e20 <LL_ADC_SetOffset>
 800261c:	e179      	b.n	8002912 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2100      	movs	r1, #0
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff fc1f 	bl	8001e68 <LL_ADC_GetOffsetChannel>
 800262a:	4603      	mov	r3, r0
 800262c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10a      	bne.n	800264a <HAL_ADC_ConfigChannel+0x14e>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2100      	movs	r1, #0
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fc14 	bl	8001e68 <LL_ADC_GetOffsetChannel>
 8002640:	4603      	mov	r3, r0
 8002642:	0e9b      	lsrs	r3, r3, #26
 8002644:	f003 021f 	and.w	r2, r3, #31
 8002648:	e01e      	b.n	8002688 <HAL_ADC_ConfigChannel+0x18c>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2100      	movs	r1, #0
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fc09 	bl	8001e68 <LL_ADC_GetOffsetChannel>
 8002656:	4603      	mov	r3, r0
 8002658:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002660:	fa93 f3a3 	rbit	r3, r3
 8002664:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002668:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800266c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002670:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002678:	2320      	movs	r3, #32
 800267a:	e004      	b.n	8002686 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800267c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002690:	2b00      	cmp	r3, #0
 8002692:	d105      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x1a4>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	0e9b      	lsrs	r3, r3, #26
 800269a:	f003 031f 	and.w	r3, r3, #31
 800269e:	e018      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x1d6>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026ac:	fa93 f3a3 	rbit	r3, r3
 80026b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80026b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80026bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80026c4:	2320      	movs	r3, #32
 80026c6:	e004      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80026c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026cc:	fab3 f383 	clz	r3, r3
 80026d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d106      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2200      	movs	r2, #0
 80026dc:	2100      	movs	r1, #0
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff fbd8 	bl	8001e94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2101      	movs	r1, #1
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff fbbc 	bl	8001e68 <LL_ADC_GetOffsetChannel>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10a      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x214>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2101      	movs	r1, #1
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fbb1 	bl	8001e68 <LL_ADC_GetOffsetChannel>
 8002706:	4603      	mov	r3, r0
 8002708:	0e9b      	lsrs	r3, r3, #26
 800270a:	f003 021f 	and.w	r2, r3, #31
 800270e:	e01e      	b.n	800274e <HAL_ADC_ConfigChannel+0x252>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2101      	movs	r1, #1
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fba6 	bl	8001e68 <LL_ADC_GetOffsetChannel>
 800271c:	4603      	mov	r3, r0
 800271e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002726:	fa93 f3a3 	rbit	r3, r3
 800272a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800272e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002732:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002736:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800273e:	2320      	movs	r3, #32
 8002740:	e004      	b.n	800274c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002742:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002746:	fab3 f383 	clz	r3, r3
 800274a:	b2db      	uxtb	r3, r3
 800274c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002756:	2b00      	cmp	r3, #0
 8002758:	d105      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x26a>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	0e9b      	lsrs	r3, r3, #26
 8002760:	f003 031f 	and.w	r3, r3, #31
 8002764:	e018      	b.n	8002798 <HAL_ADC_ConfigChannel+0x29c>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002772:	fa93 f3a3 	rbit	r3, r3
 8002776:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800277a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800277e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002782:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800278a:	2320      	movs	r3, #32
 800278c:	e004      	b.n	8002798 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800278e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002792:	fab3 f383 	clz	r3, r3
 8002796:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002798:	429a      	cmp	r2, r3
 800279a:	d106      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2200      	movs	r2, #0
 80027a2:	2101      	movs	r1, #1
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fb75 	bl	8001e94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2102      	movs	r1, #2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fb59 	bl	8001e68 <LL_ADC_GetOffsetChannel>
 80027b6:	4603      	mov	r3, r0
 80027b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10a      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x2da>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2102      	movs	r1, #2
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff fb4e 	bl	8001e68 <LL_ADC_GetOffsetChannel>
 80027cc:	4603      	mov	r3, r0
 80027ce:	0e9b      	lsrs	r3, r3, #26
 80027d0:	f003 021f 	and.w	r2, r3, #31
 80027d4:	e01e      	b.n	8002814 <HAL_ADC_ConfigChannel+0x318>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2102      	movs	r1, #2
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff fb43 	bl	8001e68 <LL_ADC_GetOffsetChannel>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027ec:	fa93 f3a3 	rbit	r3, r3
 80027f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80027f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80027fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002804:	2320      	movs	r3, #32
 8002806:	e004      	b.n	8002812 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002808:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800280c:	fab3 f383 	clz	r3, r3
 8002810:	b2db      	uxtb	r3, r3
 8002812:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281c:	2b00      	cmp	r3, #0
 800281e:	d105      	bne.n	800282c <HAL_ADC_ConfigChannel+0x330>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	0e9b      	lsrs	r3, r3, #26
 8002826:	f003 031f 	and.w	r3, r3, #31
 800282a:	e014      	b.n	8002856 <HAL_ADC_ConfigChannel+0x35a>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002834:	fa93 f3a3 	rbit	r3, r3
 8002838:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800283a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800283c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002840:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002848:	2320      	movs	r3, #32
 800284a:	e004      	b.n	8002856 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800284c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002850:	fab3 f383 	clz	r3, r3
 8002854:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002856:	429a      	cmp	r2, r3
 8002858:	d106      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2200      	movs	r2, #0
 8002860:	2102      	movs	r1, #2
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff fb16 	bl	8001e94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2103      	movs	r1, #3
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff fafa 	bl	8001e68 <LL_ADC_GetOffsetChannel>
 8002874:	4603      	mov	r3, r0
 8002876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10a      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x398>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2103      	movs	r1, #3
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff faef 	bl	8001e68 <LL_ADC_GetOffsetChannel>
 800288a:	4603      	mov	r3, r0
 800288c:	0e9b      	lsrs	r3, r3, #26
 800288e:	f003 021f 	and.w	r2, r3, #31
 8002892:	e017      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x3c8>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2103      	movs	r1, #3
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff fae4 	bl	8001e68 <LL_ADC_GetOffsetChannel>
 80028a0:	4603      	mov	r3, r0
 80028a2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028a6:	fa93 f3a3 	rbit	r3, r3
 80028aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80028ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028ae:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80028b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80028b6:	2320      	movs	r3, #32
 80028b8:	e003      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80028ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028bc:	fab3 f383 	clz	r3, r3
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d105      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x3e0>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	0e9b      	lsrs	r3, r3, #26
 80028d6:	f003 031f 	and.w	r3, r3, #31
 80028da:	e011      	b.n	8002900 <HAL_ADC_ConfigChannel+0x404>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028e4:	fa93 f3a3 	rbit	r3, r3
 80028e8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80028ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028ec:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80028ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80028f4:	2320      	movs	r3, #32
 80028f6:	e003      	b.n	8002900 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80028f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002900:	429a      	cmp	r2, r3
 8002902:	d106      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2200      	movs	r2, #0
 800290a:	2103      	movs	r1, #3
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fac1 	bl	8001e94 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff fbc8 	bl	80020ac <LL_ADC_IsEnabled>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	f040 8140 	bne.w	8002ba4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	6819      	ldr	r1, [r3, #0]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	461a      	mov	r2, r3
 8002932:	f7ff fb35 	bl	8001fa0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	4a8f      	ldr	r2, [pc, #572]	@ (8002b78 <HAL_ADC_ConfigChannel+0x67c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	f040 8131 	bne.w	8002ba4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10b      	bne.n	800296a <HAL_ADC_ConfigChannel+0x46e>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	0e9b      	lsrs	r3, r3, #26
 8002958:	3301      	adds	r3, #1
 800295a:	f003 031f 	and.w	r3, r3, #31
 800295e:	2b09      	cmp	r3, #9
 8002960:	bf94      	ite	ls
 8002962:	2301      	movls	r3, #1
 8002964:	2300      	movhi	r3, #0
 8002966:	b2db      	uxtb	r3, r3
 8002968:	e019      	b.n	800299e <HAL_ADC_ConfigChannel+0x4a2>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002972:	fa93 f3a3 	rbit	r3, r3
 8002976:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002978:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800297a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800297c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002982:	2320      	movs	r3, #32
 8002984:	e003      	b.n	800298e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002986:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002988:	fab3 f383 	clz	r3, r3
 800298c:	b2db      	uxtb	r3, r3
 800298e:	3301      	adds	r3, #1
 8002990:	f003 031f 	and.w	r3, r3, #31
 8002994:	2b09      	cmp	r3, #9
 8002996:	bf94      	ite	ls
 8002998:	2301      	movls	r3, #1
 800299a:	2300      	movhi	r3, #0
 800299c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d079      	beq.n	8002a96 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d107      	bne.n	80029be <HAL_ADC_ConfigChannel+0x4c2>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	0e9b      	lsrs	r3, r3, #26
 80029b4:	3301      	adds	r3, #1
 80029b6:	069b      	lsls	r3, r3, #26
 80029b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029bc:	e015      	b.n	80029ea <HAL_ADC_ConfigChannel+0x4ee>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029c6:	fa93 f3a3 	rbit	r3, r3
 80029ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80029cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029ce:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80029d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80029d6:	2320      	movs	r3, #32
 80029d8:	e003      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80029da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029dc:	fab3 f383 	clz	r3, r3
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	3301      	adds	r3, #1
 80029e4:	069b      	lsls	r3, r3, #26
 80029e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d109      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x50e>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	0e9b      	lsrs	r3, r3, #26
 80029fc:	3301      	adds	r3, #1
 80029fe:	f003 031f 	and.w	r3, r3, #31
 8002a02:	2101      	movs	r1, #1
 8002a04:	fa01 f303 	lsl.w	r3, r1, r3
 8002a08:	e017      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x53e>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a1a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002a1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002a22:	2320      	movs	r3, #32
 8002a24:	e003      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002a26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a28:	fab3 f383 	clz	r3, r3
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	3301      	adds	r3, #1
 8002a30:	f003 031f 	and.w	r3, r3, #31
 8002a34:	2101      	movs	r1, #1
 8002a36:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3a:	ea42 0103 	orr.w	r1, r2, r3
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10a      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x564>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	0e9b      	lsrs	r3, r3, #26
 8002a50:	3301      	adds	r3, #1
 8002a52:	f003 021f 	and.w	r2, r3, #31
 8002a56:	4613      	mov	r3, r2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	4413      	add	r3, r2
 8002a5c:	051b      	lsls	r3, r3, #20
 8002a5e:	e018      	b.n	8002a92 <HAL_ADC_ConfigChannel+0x596>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a68:	fa93 f3a3 	rbit	r3, r3
 8002a6c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a70:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002a78:	2320      	movs	r3, #32
 8002a7a:	e003      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	3301      	adds	r3, #1
 8002a86:	f003 021f 	and.w	r2, r3, #31
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	4413      	add	r3, r2
 8002a90:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a92:	430b      	orrs	r3, r1
 8002a94:	e081      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d107      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x5b6>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	0e9b      	lsrs	r3, r3, #26
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	069b      	lsls	r3, r3, #26
 8002aac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ab0:	e015      	b.n	8002ade <HAL_ADC_ConfigChannel+0x5e2>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aba:	fa93 f3a3 	rbit	r3, r3
 8002abe:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002aca:	2320      	movs	r3, #32
 8002acc:	e003      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad0:	fab3 f383 	clz	r3, r3
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	069b      	lsls	r3, r3, #26
 8002ada:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d109      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x602>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	0e9b      	lsrs	r3, r3, #26
 8002af0:	3301      	adds	r3, #1
 8002af2:	f003 031f 	and.w	r3, r3, #31
 8002af6:	2101      	movs	r1, #1
 8002af8:	fa01 f303 	lsl.w	r3, r1, r3
 8002afc:	e017      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x632>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	61bb      	str	r3, [r7, #24]
  return result;
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002b16:	2320      	movs	r3, #32
 8002b18:	e003      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	fab3 f383 	clz	r3, r3
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	3301      	adds	r3, #1
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	2101      	movs	r1, #1
 8002b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2e:	ea42 0103 	orr.w	r1, r2, r3
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10d      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x65e>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	0e9b      	lsrs	r3, r3, #26
 8002b44:	3301      	adds	r3, #1
 8002b46:	f003 021f 	and.w	r2, r3, #31
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4413      	add	r3, r2
 8002b50:	3b1e      	subs	r3, #30
 8002b52:	051b      	lsls	r3, r3, #20
 8002b54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b58:	e01e      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x69c>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	fa93 f3a3 	rbit	r3, r3
 8002b66:	60fb      	str	r3, [r7, #12]
  return result;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d104      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002b72:	2320      	movs	r3, #32
 8002b74:	e006      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x688>
 8002b76:	bf00      	nop
 8002b78:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	fab3 f383 	clz	r3, r3
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	3301      	adds	r3, #1
 8002b86:	f003 021f 	and.w	r2, r3, #31
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	4413      	add	r3, r2
 8002b90:	3b1e      	subs	r3, #30
 8002b92:	051b      	lsls	r3, r3, #20
 8002b94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b98:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	f7ff f9d2 	bl	8001f48 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ca0 <HAL_ADC_ConfigChannel+0x7a4>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d06c      	beq.n	8002c8a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bb0:	483c      	ldr	r0, [pc, #240]	@ (8002ca4 <HAL_ADC_ConfigChannel+0x7a8>)
 8002bb2:	f7ff f927 	bl	8001e04 <LL_ADC_GetCommonPathInternalCh>
 8002bb6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a3a      	ldr	r2, [pc, #232]	@ (8002ca8 <HAL_ADC_ConfigChannel+0x7ac>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d127      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d121      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a35      	ldr	r2, [pc, #212]	@ (8002cac <HAL_ADC_ConfigChannel+0x7b0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d157      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bde:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002be2:	4619      	mov	r1, r3
 8002be4:	482f      	ldr	r0, [pc, #188]	@ (8002ca4 <HAL_ADC_ConfigChannel+0x7a8>)
 8002be6:	f7ff f8fa 	bl	8001dde <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bea:	4b31      	ldr	r3, [pc, #196]	@ (8002cb0 <HAL_ADC_ConfigChannel+0x7b4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	099b      	lsrs	r3, r3, #6
 8002bf0:	4a30      	ldr	r2, [pc, #192]	@ (8002cb4 <HAL_ADC_ConfigChannel+0x7b8>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	099b      	lsrs	r3, r3, #6
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	4413      	add	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002c04:	e002      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f9      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c12:	e03a      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a27      	ldr	r2, [pc, #156]	@ (8002cb8 <HAL_ADC_ConfigChannel+0x7bc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d113      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10d      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8002cac <HAL_ADC_ConfigChannel+0x7b0>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d12a      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4819      	ldr	r0, [pc, #100]	@ (8002ca4 <HAL_ADC_ConfigChannel+0x7a8>)
 8002c40:	f7ff f8cd 	bl	8001dde <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c44:	e021      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8002cbc <HAL_ADC_ConfigChannel+0x7c0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d11c      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d116      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a12      	ldr	r2, [pc, #72]	@ (8002cac <HAL_ADC_ConfigChannel+0x7b0>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d111      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c6a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c6e:	4619      	mov	r1, r3
 8002c70:	480c      	ldr	r0, [pc, #48]	@ (8002ca4 <HAL_ADC_ConfigChannel+0x7a8>)
 8002c72:	f7ff f8b4 	bl	8001dde <LL_ADC_SetCommonPathInternalCh>
 8002c76:	e008      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c7c:	f043 0220 	orr.w	r2, r3, #32
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c92:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	37d8      	adds	r7, #216	@ 0xd8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	80080000 	.word	0x80080000
 8002ca4:	50040300 	.word	0x50040300
 8002ca8:	c7520000 	.word	0xc7520000
 8002cac:	50040000 	.word	0x50040000
 8002cb0:	20000008 	.word	0x20000008
 8002cb4:	053e2d63 	.word	0x053e2d63
 8002cb8:	cb840000 	.word	0xcb840000
 8002cbc:	80000001 	.word	0x80000001

08002cc0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff f9eb 	bl	80020ac <LL_ADC_IsEnabled>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d169      	bne.n	8002db0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	4b36      	ldr	r3, [pc, #216]	@ (8002dbc <ADC_Enable+0xfc>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00d      	beq.n	8002d06 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cee:	f043 0210 	orr.w	r2, r3, #16
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfa:	f043 0201 	orr.w	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e055      	b.n	8002db2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff f9ba 	bl	8002084 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002d10:	482b      	ldr	r0, [pc, #172]	@ (8002dc0 <ADC_Enable+0x100>)
 8002d12:	f7ff f877 	bl	8001e04 <LL_ADC_GetCommonPathInternalCh>
 8002d16:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002d18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d013      	beq.n	8002d48 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d20:	4b28      	ldr	r3, [pc, #160]	@ (8002dc4 <ADC_Enable+0x104>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	099b      	lsrs	r3, r3, #6
 8002d26:	4a28      	ldr	r2, [pc, #160]	@ (8002dc8 <ADC_Enable+0x108>)
 8002d28:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2c:	099b      	lsrs	r3, r3, #6
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	4613      	mov	r3, r2
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d3a:	e002      	b.n	8002d42 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1f9      	bne.n	8002d3c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d48:	f7ff f806 	bl	8001d58 <HAL_GetTick>
 8002d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d4e:	e028      	b.n	8002da2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff f9a9 	bl	80020ac <LL_ADC_IsEnabled>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d104      	bne.n	8002d6a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff f98d 	bl	8002084 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d6a:	f7fe fff5 	bl	8001d58 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d914      	bls.n	8002da2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d00d      	beq.n	8002da2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d8a:	f043 0210 	orr.w	r2, r3, #16
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d96:	f043 0201 	orr.w	r2, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e007      	b.n	8002db2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d1cf      	bne.n	8002d50 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	8000003f 	.word	0x8000003f
 8002dc0:	50040300 	.word	0x50040300
 8002dc4:	20000008 	.word	0x20000008
 8002dc8:	053e2d63 	.word	0x053e2d63

08002dcc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dde:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d14b      	bne.n	8002e7e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0308 	and.w	r3, r3, #8
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d021      	beq.n	8002e44 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff f860 	bl	8001eca <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d032      	beq.n	8002e76 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d12b      	bne.n	8002e76 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e22:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d11f      	bne.n	8002e76 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e3a:	f043 0201 	orr.w	r2, r3, #1
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e42:	e018      	b.n	8002e76 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d111      	bne.n	8002e76 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e56:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d105      	bne.n	8002e76 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6e:	f043 0201 	orr.w	r2, r3, #1
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f7fe fad6 	bl	8001428 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e7c:	e00e      	b.n	8002e9c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f7ff fb2c 	bl	80024e8 <HAL_ADC_ErrorCallback>
}
 8002e90:	e004      	b.n	8002e9c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	4798      	blx	r3
}
 8002e9c:	bf00      	nop
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f7ff fb0e 	bl	80024d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002eb8:	bf00      	nop
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ecc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ede:	f043 0204 	orr.w	r2, r3, #4
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f7ff fafe 	bl	80024e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f04:	4b0c      	ldr	r3, [pc, #48]	@ (8002f38 <__NVIC_SetPriorityGrouping+0x44>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f10:	4013      	ands	r3, r2
 8002f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f26:	4a04      	ldr	r2, [pc, #16]	@ (8002f38 <__NVIC_SetPriorityGrouping+0x44>)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	60d3      	str	r3, [r2, #12]
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	e000ed00 	.word	0xe000ed00

08002f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f40:	4b04      	ldr	r3, [pc, #16]	@ (8002f54 <__NVIC_GetPriorityGrouping+0x18>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	0a1b      	lsrs	r3, r3, #8
 8002f46:	f003 0307 	and.w	r3, r3, #7
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	db0b      	blt.n	8002f82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	f003 021f 	and.w	r2, r3, #31
 8002f70:	4907      	ldr	r1, [pc, #28]	@ (8002f90 <__NVIC_EnableIRQ+0x38>)
 8002f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	2001      	movs	r0, #1
 8002f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	e000e100 	.word	0xe000e100

08002f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	6039      	str	r1, [r7, #0]
 8002f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	db0a      	blt.n	8002fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	490c      	ldr	r1, [pc, #48]	@ (8002fe0 <__NVIC_SetPriority+0x4c>)
 8002fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb2:	0112      	lsls	r2, r2, #4
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fbc:	e00a      	b.n	8002fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	4908      	ldr	r1, [pc, #32]	@ (8002fe4 <__NVIC_SetPriority+0x50>)
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	3b04      	subs	r3, #4
 8002fcc:	0112      	lsls	r2, r2, #4
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	761a      	strb	r2, [r3, #24]
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	e000e100 	.word	0xe000e100
 8002fe4:	e000ed00 	.word	0xe000ed00

08002fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b089      	sub	sp, #36	@ 0x24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f1c3 0307 	rsb	r3, r3, #7
 8003002:	2b04      	cmp	r3, #4
 8003004:	bf28      	it	cs
 8003006:	2304      	movcs	r3, #4
 8003008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3304      	adds	r3, #4
 800300e:	2b06      	cmp	r3, #6
 8003010:	d902      	bls.n	8003018 <NVIC_EncodePriority+0x30>
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3b03      	subs	r3, #3
 8003016:	e000      	b.n	800301a <NVIC_EncodePriority+0x32>
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800301c:	f04f 32ff 	mov.w	r2, #4294967295
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43da      	mvns	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	401a      	ands	r2, r3
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003030:	f04f 31ff 	mov.w	r1, #4294967295
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	fa01 f303 	lsl.w	r3, r1, r3
 800303a:	43d9      	mvns	r1, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003040:	4313      	orrs	r3, r2
         );
}
 8003042:	4618      	mov	r0, r3
 8003044:	3724      	adds	r7, #36	@ 0x24
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
	...

08003050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3b01      	subs	r3, #1
 800305c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003060:	d301      	bcc.n	8003066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003062:	2301      	movs	r3, #1
 8003064:	e00f      	b.n	8003086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003066:	4a0a      	ldr	r2, [pc, #40]	@ (8003090 <SysTick_Config+0x40>)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3b01      	subs	r3, #1
 800306c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800306e:	210f      	movs	r1, #15
 8003070:	f04f 30ff 	mov.w	r0, #4294967295
 8003074:	f7ff ff8e 	bl	8002f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003078:	4b05      	ldr	r3, [pc, #20]	@ (8003090 <SysTick_Config+0x40>)
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800307e:	4b04      	ldr	r3, [pc, #16]	@ (8003090 <SysTick_Config+0x40>)
 8003080:	2207      	movs	r2, #7
 8003082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	e000e010 	.word	0xe000e010

08003094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7ff ff29 	bl	8002ef4 <__NVIC_SetPriorityGrouping>
}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b086      	sub	sp, #24
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	4603      	mov	r3, r0
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	607a      	str	r2, [r7, #4]
 80030b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030bc:	f7ff ff3e 	bl	8002f3c <__NVIC_GetPriorityGrouping>
 80030c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	6978      	ldr	r0, [r7, #20]
 80030c8:	f7ff ff8e 	bl	8002fe8 <NVIC_EncodePriority>
 80030cc:	4602      	mov	r2, r0
 80030ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff ff5d 	bl	8002f94 <__NVIC_SetPriority>
}
 80030da:	bf00      	nop
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	4603      	mov	r3, r0
 80030ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff ff31 	bl	8002f58 <__NVIC_EnableIRQ>
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff ffa2 	bl	8003050 <SysTick_Config>
 800310c:	4603      	mov	r3, r0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e098      	b.n	800325c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	4b4d      	ldr	r3, [pc, #308]	@ (8003268 <HAL_DMA_Init+0x150>)
 8003132:	429a      	cmp	r2, r3
 8003134:	d80f      	bhi.n	8003156 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	461a      	mov	r2, r3
 800313c:	4b4b      	ldr	r3, [pc, #300]	@ (800326c <HAL_DMA_Init+0x154>)
 800313e:	4413      	add	r3, r2
 8003140:	4a4b      	ldr	r2, [pc, #300]	@ (8003270 <HAL_DMA_Init+0x158>)
 8003142:	fba2 2303 	umull	r2, r3, r2, r3
 8003146:	091b      	lsrs	r3, r3, #4
 8003148:	009a      	lsls	r2, r3, #2
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a48      	ldr	r2, [pc, #288]	@ (8003274 <HAL_DMA_Init+0x15c>)
 8003152:	641a      	str	r2, [r3, #64]	@ 0x40
 8003154:	e00e      	b.n	8003174 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	4b46      	ldr	r3, [pc, #280]	@ (8003278 <HAL_DMA_Init+0x160>)
 800315e:	4413      	add	r3, r2
 8003160:	4a43      	ldr	r2, [pc, #268]	@ (8003270 <HAL_DMA_Init+0x158>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	091b      	lsrs	r3, r3, #4
 8003168:	009a      	lsls	r2, r3, #2
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a42      	ldr	r2, [pc, #264]	@ (800327c <HAL_DMA_Init+0x164>)
 8003172:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800318a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800318e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003198:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031ce:	d039      	beq.n	8003244 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d4:	4a27      	ldr	r2, [pc, #156]	@ (8003274 <HAL_DMA_Init+0x15c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d11a      	bne.n	8003210 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80031da:	4b29      	ldr	r3, [pc, #164]	@ (8003280 <HAL_DMA_Init+0x168>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e2:	f003 031c 	and.w	r3, r3, #28
 80031e6:	210f      	movs	r1, #15
 80031e8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	4924      	ldr	r1, [pc, #144]	@ (8003280 <HAL_DMA_Init+0x168>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80031f4:	4b22      	ldr	r3, [pc, #136]	@ (8003280 <HAL_DMA_Init+0x168>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6859      	ldr	r1, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003200:	f003 031c 	and.w	r3, r3, #28
 8003204:	fa01 f303 	lsl.w	r3, r1, r3
 8003208:	491d      	ldr	r1, [pc, #116]	@ (8003280 <HAL_DMA_Init+0x168>)
 800320a:	4313      	orrs	r3, r2
 800320c:	600b      	str	r3, [r1, #0]
 800320e:	e019      	b.n	8003244 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003210:	4b1c      	ldr	r3, [pc, #112]	@ (8003284 <HAL_DMA_Init+0x16c>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003218:	f003 031c 	and.w	r3, r3, #28
 800321c:	210f      	movs	r1, #15
 800321e:	fa01 f303 	lsl.w	r3, r1, r3
 8003222:	43db      	mvns	r3, r3
 8003224:	4917      	ldr	r1, [pc, #92]	@ (8003284 <HAL_DMA_Init+0x16c>)
 8003226:	4013      	ands	r3, r2
 8003228:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800322a:	4b16      	ldr	r3, [pc, #88]	@ (8003284 <HAL_DMA_Init+0x16c>)
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6859      	ldr	r1, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003236:	f003 031c 	and.w	r3, r3, #28
 800323a:	fa01 f303 	lsl.w	r3, r1, r3
 800323e:	4911      	ldr	r1, [pc, #68]	@ (8003284 <HAL_DMA_Init+0x16c>)
 8003240:	4313      	orrs	r3, r2
 8003242:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	40020407 	.word	0x40020407
 800326c:	bffdfff8 	.word	0xbffdfff8
 8003270:	cccccccd 	.word	0xcccccccd
 8003274:	40020000 	.word	0x40020000
 8003278:	bffdfbf8 	.word	0xbffdfbf8
 800327c:	40020400 	.word	0x40020400
 8003280:	400200a8 	.word	0x400200a8
 8003284:	400204a8 	.word	0x400204a8

08003288 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003296:	2300      	movs	r3, #0
 8003298:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <HAL_DMA_Start_IT+0x20>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e04b      	b.n	8003340 <HAL_DMA_Start_IT+0xb8>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d13a      	bne.n	8003332 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0201 	bic.w	r2, r2, #1
 80032d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	68b9      	ldr	r1, [r7, #8]
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 f8e0 	bl	80034a6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d008      	beq.n	8003300 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 020e 	orr.w	r2, r2, #14
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	e00f      	b.n	8003320 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0204 	bic.w	r2, r2, #4
 800330e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 020a 	orr.w	r2, r2, #10
 800331e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0201 	orr.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	e005      	b.n	800333e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800333a:	2302      	movs	r3, #2
 800333c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800333e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003364:	f003 031c 	and.w	r3, r3, #28
 8003368:	2204      	movs	r2, #4
 800336a:	409a      	lsls	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4013      	ands	r3, r2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d026      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x7a>
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f003 0304 	and.w	r3, r3, #4
 800337a:	2b00      	cmp	r3, #0
 800337c:	d021      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0320 	and.w	r3, r3, #32
 8003388:	2b00      	cmp	r3, #0
 800338a:	d107      	bne.n	800339c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0204 	bic.w	r2, r2, #4
 800339a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a0:	f003 021c 	and.w	r2, r3, #28
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a8:	2104      	movs	r1, #4
 80033aa:	fa01 f202 	lsl.w	r2, r1, r2
 80033ae:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d071      	beq.n	800349c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80033c0:	e06c      	b.n	800349c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c6:	f003 031c 	and.w	r3, r3, #28
 80033ca:	2202      	movs	r2, #2
 80033cc:	409a      	lsls	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d02e      	beq.n	8003434 <HAL_DMA_IRQHandler+0xec>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d029      	beq.n	8003434 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0320 	and.w	r3, r3, #32
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10b      	bne.n	8003406 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 020a 	bic.w	r2, r2, #10
 80033fc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340a:	f003 021c 	and.w	r2, r3, #28
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003412:	2102      	movs	r1, #2
 8003414:	fa01 f202 	lsl.w	r2, r1, r2
 8003418:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003426:	2b00      	cmp	r3, #0
 8003428:	d038      	beq.n	800349c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003432:	e033      	b.n	800349c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003438:	f003 031c 	and.w	r3, r3, #28
 800343c:	2208      	movs	r2, #8
 800343e:	409a      	lsls	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4013      	ands	r3, r2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d02a      	beq.n	800349e <HAL_DMA_IRQHandler+0x156>
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b00      	cmp	r3, #0
 8003450:	d025      	beq.n	800349e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 020e 	bic.w	r2, r2, #14
 8003460:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003466:	f003 021c 	and.w	r2, r3, #28
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	2101      	movs	r1, #1
 8003470:	fa01 f202 	lsl.w	r2, r1, r2
 8003474:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003490:	2b00      	cmp	r3, #0
 8003492:	d004      	beq.n	800349e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800349c:	bf00      	nop
 800349e:	bf00      	nop
}
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b085      	sub	sp, #20
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
 80034b2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b8:	f003 021c 	and.w	r2, r3, #28
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c0:	2101      	movs	r1, #1
 80034c2:	fa01 f202 	lsl.w	r2, r1, r2
 80034c6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b10      	cmp	r3, #16
 80034d6:	d108      	bne.n	80034ea <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034e8:	e007      	b.n	80034fa <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	60da      	str	r2, [r3, #12]
}
 80034fa:	bf00      	nop
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
	...

08003508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003516:	e148      	b.n	80037aa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	2101      	movs	r1, #1
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	fa01 f303 	lsl.w	r3, r1, r3
 8003524:	4013      	ands	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 813a 	beq.w	80037a4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 0303 	and.w	r3, r3, #3
 8003538:	2b01      	cmp	r3, #1
 800353a:	d005      	beq.n	8003548 <HAL_GPIO_Init+0x40>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 0303 	and.w	r3, r3, #3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d130      	bne.n	80035aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	2203      	movs	r2, #3
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4013      	ands	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800357e:	2201      	movs	r2, #1
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	43db      	mvns	r3, r3
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4013      	ands	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	091b      	lsrs	r3, r3, #4
 8003594:	f003 0201 	and.w	r2, r3, #1
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d017      	beq.n	80035e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	2203      	movs	r2, #3
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43db      	mvns	r3, r3
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4013      	ands	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d123      	bne.n	800363a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	08da      	lsrs	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3208      	adds	r2, #8
 80035fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	220f      	movs	r2, #15
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	4013      	ands	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	08da      	lsrs	r2, r3, #3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3208      	adds	r2, #8
 8003634:	6939      	ldr	r1, [r7, #16]
 8003636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	2203      	movs	r2, #3
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	43db      	mvns	r3, r3
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4013      	ands	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 0203 	and.w	r2, r3, #3
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 8094 	beq.w	80037a4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800367c:	4b52      	ldr	r3, [pc, #328]	@ (80037c8 <HAL_GPIO_Init+0x2c0>)
 800367e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003680:	4a51      	ldr	r2, [pc, #324]	@ (80037c8 <HAL_GPIO_Init+0x2c0>)
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	6613      	str	r3, [r2, #96]	@ 0x60
 8003688:	4b4f      	ldr	r3, [pc, #316]	@ (80037c8 <HAL_GPIO_Init+0x2c0>)
 800368a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003694:	4a4d      	ldr	r2, [pc, #308]	@ (80037cc <HAL_GPIO_Init+0x2c4>)
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	089b      	lsrs	r3, r3, #2
 800369a:	3302      	adds	r3, #2
 800369c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f003 0303 	and.w	r3, r3, #3
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	220f      	movs	r2, #15
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4013      	ands	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80036be:	d00d      	beq.n	80036dc <HAL_GPIO_Init+0x1d4>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a43      	ldr	r2, [pc, #268]	@ (80037d0 <HAL_GPIO_Init+0x2c8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d007      	beq.n	80036d8 <HAL_GPIO_Init+0x1d0>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a42      	ldr	r2, [pc, #264]	@ (80037d4 <HAL_GPIO_Init+0x2cc>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d101      	bne.n	80036d4 <HAL_GPIO_Init+0x1cc>
 80036d0:	2302      	movs	r3, #2
 80036d2:	e004      	b.n	80036de <HAL_GPIO_Init+0x1d6>
 80036d4:	2307      	movs	r3, #7
 80036d6:	e002      	b.n	80036de <HAL_GPIO_Init+0x1d6>
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <HAL_GPIO_Init+0x1d6>
 80036dc:	2300      	movs	r3, #0
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	f002 0203 	and.w	r2, r2, #3
 80036e4:	0092      	lsls	r2, r2, #2
 80036e6:	4093      	lsls	r3, r2
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036ee:	4937      	ldr	r1, [pc, #220]	@ (80037cc <HAL_GPIO_Init+0x2c4>)
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	089b      	lsrs	r3, r3, #2
 80036f4:	3302      	adds	r3, #2
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036fc:	4b36      	ldr	r3, [pc, #216]	@ (80037d8 <HAL_GPIO_Init+0x2d0>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	43db      	mvns	r3, r3
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4013      	ands	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003720:	4a2d      	ldr	r2, [pc, #180]	@ (80037d8 <HAL_GPIO_Init+0x2d0>)
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003726:	4b2c      	ldr	r3, [pc, #176]	@ (80037d8 <HAL_GPIO_Init+0x2d0>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	43db      	mvns	r3, r3
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4013      	ands	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800374a:	4a23      	ldr	r2, [pc, #140]	@ (80037d8 <HAL_GPIO_Init+0x2d0>)
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003750:	4b21      	ldr	r3, [pc, #132]	@ (80037d8 <HAL_GPIO_Init+0x2d0>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	43db      	mvns	r3, r3
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4013      	ands	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003774:	4a18      	ldr	r2, [pc, #96]	@ (80037d8 <HAL_GPIO_Init+0x2d0>)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800377a:	4b17      	ldr	r3, [pc, #92]	@ (80037d8 <HAL_GPIO_Init+0x2d0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	43db      	mvns	r3, r3
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4013      	ands	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800379e:	4a0e      	ldr	r2, [pc, #56]	@ (80037d8 <HAL_GPIO_Init+0x2d0>)
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	3301      	adds	r3, #1
 80037a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f47f aeaf 	bne.w	8003518 <HAL_GPIO_Init+0x10>
  }
}
 80037ba:	bf00      	nop
 80037bc:	bf00      	nop
 80037be:	371c      	adds	r7, #28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	40021000 	.word	0x40021000
 80037cc:	40010000 	.word	0x40010000
 80037d0:	48000400 	.word	0x48000400
 80037d4:	48000800 	.word	0x48000800
 80037d8:	40010400 	.word	0x40010400

080037dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	460b      	mov	r3, r1
 80037e6:	807b      	strh	r3, [r7, #2]
 80037e8:	4613      	mov	r3, r2
 80037ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037ec:	787b      	ldrb	r3, [r7, #1]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037f2:	887a      	ldrh	r2, [r7, #2]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037f8:	e002      	b.n	8003800 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037fa:	887a      	ldrh	r2, [r7, #2]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003810:	4b05      	ldr	r3, [pc, #20]	@ (8003828 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a04      	ldr	r2, [pc, #16]	@ (8003828 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800381a:	6013      	str	r3, [r2, #0]
}
 800381c:	bf00      	nop
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40007000 	.word	0x40007000

0800382c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003830:	4b04      	ldr	r3, [pc, #16]	@ (8003844 <HAL_PWREx_GetVoltageRange+0x18>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003838:	4618      	mov	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40007000 	.word	0x40007000

08003848 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003856:	d130      	bne.n	80038ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003858:	4b23      	ldr	r3, [pc, #140]	@ (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003864:	d038      	beq.n	80038d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003866:	4b20      	ldr	r3, [pc, #128]	@ (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800386e:	4a1e      	ldr	r2, [pc, #120]	@ (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003870:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003874:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003876:	4b1d      	ldr	r3, [pc, #116]	@ (80038ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2232      	movs	r2, #50	@ 0x32
 800387c:	fb02 f303 	mul.w	r3, r2, r3
 8003880:	4a1b      	ldr	r2, [pc, #108]	@ (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	0c9b      	lsrs	r3, r3, #18
 8003888:	3301      	adds	r3, #1
 800388a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800388c:	e002      	b.n	8003894 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	3b01      	subs	r3, #1
 8003892:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003894:	4b14      	ldr	r3, [pc, #80]	@ (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800389c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038a0:	d102      	bne.n	80038a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1f2      	bne.n	800388e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038a8:	4b0f      	ldr	r3, [pc, #60]	@ (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038b4:	d110      	bne.n	80038d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e00f      	b.n	80038da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038ba:	4b0b      	ldr	r3, [pc, #44]	@ (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c6:	d007      	beq.n	80038d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038c8:	4b07      	ldr	r3, [pc, #28]	@ (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038d0:	4a05      	ldr	r2, [pc, #20]	@ (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40007000 	.word	0x40007000
 80038ec:	20000008 	.word	0x20000008
 80038f0:	431bde83 	.word	0x431bde83

080038f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d102      	bne.n	8003908 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	f000 bc02 	b.w	800410c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003908:	4b96      	ldr	r3, [pc, #600]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 030c 	and.w	r3, r3, #12
 8003910:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003912:	4b94      	ldr	r3, [pc, #592]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 80e4 	beq.w	8003af2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d007      	beq.n	8003940 <HAL_RCC_OscConfig+0x4c>
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	2b0c      	cmp	r3, #12
 8003934:	f040 808b 	bne.w	8003a4e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	2b01      	cmp	r3, #1
 800393c:	f040 8087 	bne.w	8003a4e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003940:	4b88      	ldr	r3, [pc, #544]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <HAL_RCC_OscConfig+0x64>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e3d9      	b.n	800410c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a1a      	ldr	r2, [r3, #32]
 800395c:	4b81      	ldr	r3, [pc, #516]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0308 	and.w	r3, r3, #8
 8003964:	2b00      	cmp	r3, #0
 8003966:	d004      	beq.n	8003972 <HAL_RCC_OscConfig+0x7e>
 8003968:	4b7e      	ldr	r3, [pc, #504]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003970:	e005      	b.n	800397e <HAL_RCC_OscConfig+0x8a>
 8003972:	4b7c      	ldr	r3, [pc, #496]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003974:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003978:	091b      	lsrs	r3, r3, #4
 800397a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800397e:	4293      	cmp	r3, r2
 8003980:	d223      	bcs.n	80039ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	4618      	mov	r0, r3
 8003988:	f000 fd8c 	bl	80044a4 <RCC_SetFlashLatencyFromMSIRange>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e3ba      	b.n	800410c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003996:	4b73      	ldr	r3, [pc, #460]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a72      	ldr	r2, [pc, #456]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 800399c:	f043 0308 	orr.w	r3, r3, #8
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	4b70      	ldr	r3, [pc, #448]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	496d      	ldr	r1, [pc, #436]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039b4:	4b6b      	ldr	r3, [pc, #428]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	021b      	lsls	r3, r3, #8
 80039c2:	4968      	ldr	r1, [pc, #416]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	604b      	str	r3, [r1, #4]
 80039c8:	e025      	b.n	8003a16 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039ca:	4b66      	ldr	r3, [pc, #408]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a65      	ldr	r2, [pc, #404]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039d0:	f043 0308 	orr.w	r3, r3, #8
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	4b63      	ldr	r3, [pc, #396]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	4960      	ldr	r1, [pc, #384]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039e8:	4b5e      	ldr	r3, [pc, #376]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	021b      	lsls	r3, r3, #8
 80039f6:	495b      	ldr	r1, [pc, #364]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d109      	bne.n	8003a16 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 fd4c 	bl	80044a4 <RCC_SetFlashLatencyFromMSIRange>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e37a      	b.n	800410c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a16:	f000 fc81 	bl	800431c <HAL_RCC_GetSysClockFreq>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	4b51      	ldr	r3, [pc, #324]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	091b      	lsrs	r3, r3, #4
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	4950      	ldr	r1, [pc, #320]	@ (8003b68 <HAL_RCC_OscConfig+0x274>)
 8003a28:	5ccb      	ldrb	r3, [r1, r3]
 8003a2a:	f003 031f 	and.w	r3, r3, #31
 8003a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a32:	4a4e      	ldr	r2, [pc, #312]	@ (8003b6c <HAL_RCC_OscConfig+0x278>)
 8003a34:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a36:	4b4e      	ldr	r3, [pc, #312]	@ (8003b70 <HAL_RCC_OscConfig+0x27c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fe f93c 	bl	8001cb8 <HAL_InitTick>
 8003a40:	4603      	mov	r3, r0
 8003a42:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d052      	beq.n	8003af0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	e35e      	b.n	800410c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d032      	beq.n	8003abc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a56:	4b43      	ldr	r3, [pc, #268]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a42      	ldr	r2, [pc, #264]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a62:	f7fe f979 	bl	8001d58 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a6a:	f7fe f975 	bl	8001d58 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e347      	b.n	800410c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a7c:	4b39      	ldr	r3, [pc, #228]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a88:	4b36      	ldr	r3, [pc, #216]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a35      	ldr	r2, [pc, #212]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003a8e:	f043 0308 	orr.w	r3, r3, #8
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	4b33      	ldr	r3, [pc, #204]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	4930      	ldr	r1, [pc, #192]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	021b      	lsls	r3, r3, #8
 8003ab4:	492b      	ldr	r1, [pc, #172]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	604b      	str	r3, [r1, #4]
 8003aba:	e01a      	b.n	8003af2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003abc:	4b29      	ldr	r3, [pc, #164]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a28      	ldr	r2, [pc, #160]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003ac2:	f023 0301 	bic.w	r3, r3, #1
 8003ac6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ac8:	f7fe f946 	bl	8001d58 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ad0:	f7fe f942 	bl	8001d58 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e314      	b.n	800410c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ae2:	4b20      	ldr	r3, [pc, #128]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x1dc>
 8003aee:	e000      	b.n	8003af2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003af0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d073      	beq.n	8003be6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d005      	beq.n	8003b10 <HAL_RCC_OscConfig+0x21c>
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	2b0c      	cmp	r3, #12
 8003b08:	d10e      	bne.n	8003b28 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	d10b      	bne.n	8003b28 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b10:	4b14      	ldr	r3, [pc, #80]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d063      	beq.n	8003be4 <HAL_RCC_OscConfig+0x2f0>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d15f      	bne.n	8003be4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e2f1      	b.n	800410c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b30:	d106      	bne.n	8003b40 <HAL_RCC_OscConfig+0x24c>
 8003b32:	4b0c      	ldr	r3, [pc, #48]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a0b      	ldr	r2, [pc, #44]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003b38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	e025      	b.n	8003b8c <HAL_RCC_OscConfig+0x298>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b48:	d114      	bne.n	8003b74 <HAL_RCC_OscConfig+0x280>
 8003b4a:	4b06      	ldr	r3, [pc, #24]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a05      	ldr	r2, [pc, #20]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003b50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	4b03      	ldr	r3, [pc, #12]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a02      	ldr	r2, [pc, #8]	@ (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	e013      	b.n	8003b8c <HAL_RCC_OscConfig+0x298>
 8003b64:	40021000 	.word	0x40021000
 8003b68:	08009be8 	.word	0x08009be8
 8003b6c:	20000008 	.word	0x20000008
 8003b70:	2000000c 	.word	0x2000000c
 8003b74:	4ba0      	ldr	r3, [pc, #640]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a9f      	ldr	r2, [pc, #636]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003b7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	4b9d      	ldr	r3, [pc, #628]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a9c      	ldr	r2, [pc, #624]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003b86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d013      	beq.n	8003bbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b94:	f7fe f8e0 	bl	8001d58 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b9c:	f7fe f8dc 	bl	8001d58 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b64      	cmp	r3, #100	@ 0x64
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e2ae      	b.n	800410c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bae:	4b92      	ldr	r3, [pc, #584]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0x2a8>
 8003bba:	e014      	b.n	8003be6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fe f8cc 	bl	8001d58 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc4:	f7fe f8c8 	bl	8001d58 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b64      	cmp	r3, #100	@ 0x64
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e29a      	b.n	800410c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bd6:	4b88      	ldr	r3, [pc, #544]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x2d0>
 8003be2:	e000      	b.n	8003be6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d060      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d005      	beq.n	8003c04 <HAL_RCC_OscConfig+0x310>
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2b0c      	cmp	r3, #12
 8003bfc:	d119      	bne.n	8003c32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d116      	bne.n	8003c32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c04:	4b7c      	ldr	r3, [pc, #496]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <HAL_RCC_OscConfig+0x328>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e277      	b.n	800410c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1c:	4b76      	ldr	r3, [pc, #472]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	061b      	lsls	r3, r3, #24
 8003c2a:	4973      	ldr	r1, [pc, #460]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c30:	e040      	b.n	8003cb4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d023      	beq.n	8003c82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c3a:	4b6f      	ldr	r3, [pc, #444]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a6e      	ldr	r2, [pc, #440]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c46:	f7fe f887 	bl	8001d58 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c4e:	f7fe f883 	bl	8001d58 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e255      	b.n	800410c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c60:	4b65      	ldr	r3, [pc, #404]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0f0      	beq.n	8003c4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6c:	4b62      	ldr	r3, [pc, #392]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	061b      	lsls	r3, r3, #24
 8003c7a:	495f      	ldr	r1, [pc, #380]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	604b      	str	r3, [r1, #4]
 8003c80:	e018      	b.n	8003cb4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c82:	4b5d      	ldr	r3, [pc, #372]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a5c      	ldr	r2, [pc, #368]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8e:	f7fe f863 	bl	8001d58 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c96:	f7fe f85f 	bl	8001d58 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e231      	b.n	800410c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ca8:	4b53      	ldr	r3, [pc, #332]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f0      	bne.n	8003c96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d03c      	beq.n	8003d3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01c      	beq.n	8003d02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cc8:	4b4b      	ldr	r3, [pc, #300]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cce:	4a4a      	ldr	r2, [pc, #296]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003cd0:	f043 0301 	orr.w	r3, r3, #1
 8003cd4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd8:	f7fe f83e 	bl	8001d58 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce0:	f7fe f83a 	bl	8001d58 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e20c      	b.n	800410c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cf2:	4b41      	ldr	r3, [pc, #260]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0ef      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x3ec>
 8003d00:	e01b      	b.n	8003d3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d02:	4b3d      	ldr	r3, [pc, #244]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d08:	4a3b      	ldr	r2, [pc, #236]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003d0a:	f023 0301 	bic.w	r3, r3, #1
 8003d0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d12:	f7fe f821 	bl	8001d58 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d1a:	f7fe f81d 	bl	8001d58 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e1ef      	b.n	800410c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d2c:	4b32      	ldr	r3, [pc, #200]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1ef      	bne.n	8003d1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 80a6 	beq.w	8003e94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10d      	bne.n	8003d74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d58:	4b27      	ldr	r3, [pc, #156]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5c:	4a26      	ldr	r2, [pc, #152]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003d5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d62:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d64:	4b24      	ldr	r3, [pc, #144]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d6c:	60bb      	str	r3, [r7, #8]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d70:	2301      	movs	r3, #1
 8003d72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d74:	4b21      	ldr	r3, [pc, #132]	@ (8003dfc <HAL_RCC_OscConfig+0x508>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d118      	bne.n	8003db2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d80:	4b1e      	ldr	r3, [pc, #120]	@ (8003dfc <HAL_RCC_OscConfig+0x508>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a1d      	ldr	r2, [pc, #116]	@ (8003dfc <HAL_RCC_OscConfig+0x508>)
 8003d86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d8c:	f7fd ffe4 	bl	8001d58 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d94:	f7fd ffe0 	bl	8001d58 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e1b2      	b.n	800410c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003da6:	4b15      	ldr	r3, [pc, #84]	@ (8003dfc <HAL_RCC_OscConfig+0x508>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d108      	bne.n	8003dcc <HAL_RCC_OscConfig+0x4d8>
 8003dba:	4b0f      	ldr	r3, [pc, #60]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dca:	e029      	b.n	8003e20 <HAL_RCC_OscConfig+0x52c>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	2b05      	cmp	r3, #5
 8003dd2:	d115      	bne.n	8003e00 <HAL_RCC_OscConfig+0x50c>
 8003dd4:	4b08      	ldr	r3, [pc, #32]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dda:	4a07      	ldr	r2, [pc, #28]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003ddc:	f043 0304 	orr.w	r3, r3, #4
 8003de0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003de4:	4b04      	ldr	r3, [pc, #16]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dea:	4a03      	ldr	r2, [pc, #12]	@ (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003df4:	e014      	b.n	8003e20 <HAL_RCC_OscConfig+0x52c>
 8003df6:	bf00      	nop
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	40007000 	.word	0x40007000
 8003e00:	4b9a      	ldr	r3, [pc, #616]	@ (800406c <HAL_RCC_OscConfig+0x778>)
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e06:	4a99      	ldr	r2, [pc, #612]	@ (800406c <HAL_RCC_OscConfig+0x778>)
 8003e08:	f023 0301 	bic.w	r3, r3, #1
 8003e0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e10:	4b96      	ldr	r3, [pc, #600]	@ (800406c <HAL_RCC_OscConfig+0x778>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e16:	4a95      	ldr	r2, [pc, #596]	@ (800406c <HAL_RCC_OscConfig+0x778>)
 8003e18:	f023 0304 	bic.w	r3, r3, #4
 8003e1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d016      	beq.n	8003e56 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e28:	f7fd ff96 	bl	8001d58 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e2e:	e00a      	b.n	8003e46 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e30:	f7fd ff92 	bl	8001d58 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e162      	b.n	800410c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e46:	4b89      	ldr	r3, [pc, #548]	@ (800406c <HAL_RCC_OscConfig+0x778>)
 8003e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0ed      	beq.n	8003e30 <HAL_RCC_OscConfig+0x53c>
 8003e54:	e015      	b.n	8003e82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e56:	f7fd ff7f 	bl	8001d58 <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e5c:	e00a      	b.n	8003e74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5e:	f7fd ff7b 	bl	8001d58 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e14b      	b.n	800410c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e74:	4b7d      	ldr	r3, [pc, #500]	@ (800406c <HAL_RCC_OscConfig+0x778>)
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1ed      	bne.n	8003e5e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e82:	7ffb      	ldrb	r3, [r7, #31]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d105      	bne.n	8003e94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e88:	4b78      	ldr	r3, [pc, #480]	@ (800406c <HAL_RCC_OscConfig+0x778>)
 8003e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e8c:	4a77      	ldr	r2, [pc, #476]	@ (800406c <HAL_RCC_OscConfig+0x778>)
 8003e8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e92:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d03c      	beq.n	8003f1a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d01c      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ea8:	4b70      	ldr	r3, [pc, #448]	@ (800406c <HAL_RCC_OscConfig+0x778>)
 8003eaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003eae:	4a6f      	ldr	r2, [pc, #444]	@ (800406c <HAL_RCC_OscConfig+0x778>)
 8003eb0:	f043 0301 	orr.w	r3, r3, #1
 8003eb4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb8:	f7fd ff4e 	bl	8001d58 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ec0:	f7fd ff4a 	bl	8001d58 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e11c      	b.n	800410c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ed2:	4b66      	ldr	r3, [pc, #408]	@ (800406c <HAL_RCC_OscConfig+0x778>)
 8003ed4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0ef      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x5cc>
 8003ee0:	e01b      	b.n	8003f1a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ee2:	4b62      	ldr	r3, [pc, #392]	@ (800406c <HAL_RCC_OscConfig+0x778>)
 8003ee4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ee8:	4a60      	ldr	r2, [pc, #384]	@ (800406c <HAL_RCC_OscConfig+0x778>)
 8003eea:	f023 0301 	bic.w	r3, r3, #1
 8003eee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef2:	f7fd ff31 	bl	8001d58 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003efa:	f7fd ff2d 	bl	8001d58 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e0ff      	b.n	800410c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f0c:	4b57      	ldr	r3, [pc, #348]	@ (800406c <HAL_RCC_OscConfig+0x778>)
 8003f0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1ef      	bne.n	8003efa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 80f3 	beq.w	800410a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	f040 80c9 	bne.w	80040c0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f2e:	4b4f      	ldr	r3, [pc, #316]	@ (800406c <HAL_RCC_OscConfig+0x778>)
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f003 0203 	and.w	r2, r3, #3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d12c      	bne.n	8003f9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d123      	bne.n	8003f9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f5e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d11b      	bne.n	8003f9c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d113      	bne.n	8003f9c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f7e:	085b      	lsrs	r3, r3, #1
 8003f80:	3b01      	subs	r3, #1
 8003f82:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d109      	bne.n	8003f9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f92:	085b      	lsrs	r3, r3, #1
 8003f94:	3b01      	subs	r3, #1
 8003f96:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d06b      	beq.n	8004074 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	2b0c      	cmp	r3, #12
 8003fa0:	d062      	beq.n	8004068 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fa2:	4b32      	ldr	r3, [pc, #200]	@ (800406c <HAL_RCC_OscConfig+0x778>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e0ac      	b.n	800410c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fb2:	4b2e      	ldr	r3, [pc, #184]	@ (800406c <HAL_RCC_OscConfig+0x778>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a2d      	ldr	r2, [pc, #180]	@ (800406c <HAL_RCC_OscConfig+0x778>)
 8003fb8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fbc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fbe:	f7fd fecb 	bl	8001d58 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc6:	f7fd fec7 	bl	8001d58 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e099      	b.n	800410c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fd8:	4b24      	ldr	r3, [pc, #144]	@ (800406c <HAL_RCC_OscConfig+0x778>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1f0      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fe4:	4b21      	ldr	r3, [pc, #132]	@ (800406c <HAL_RCC_OscConfig+0x778>)
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	4b21      	ldr	r3, [pc, #132]	@ (8004070 <HAL_RCC_OscConfig+0x77c>)
 8003fea:	4013      	ands	r3, r2
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003ff4:	3a01      	subs	r2, #1
 8003ff6:	0112      	lsls	r2, r2, #4
 8003ff8:	4311      	orrs	r1, r2
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ffe:	0212      	lsls	r2, r2, #8
 8004000:	4311      	orrs	r1, r2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004006:	0852      	lsrs	r2, r2, #1
 8004008:	3a01      	subs	r2, #1
 800400a:	0552      	lsls	r2, r2, #21
 800400c:	4311      	orrs	r1, r2
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004012:	0852      	lsrs	r2, r2, #1
 8004014:	3a01      	subs	r2, #1
 8004016:	0652      	lsls	r2, r2, #25
 8004018:	4311      	orrs	r1, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800401e:	06d2      	lsls	r2, r2, #27
 8004020:	430a      	orrs	r2, r1
 8004022:	4912      	ldr	r1, [pc, #72]	@ (800406c <HAL_RCC_OscConfig+0x778>)
 8004024:	4313      	orrs	r3, r2
 8004026:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004028:	4b10      	ldr	r3, [pc, #64]	@ (800406c <HAL_RCC_OscConfig+0x778>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a0f      	ldr	r2, [pc, #60]	@ (800406c <HAL_RCC_OscConfig+0x778>)
 800402e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004032:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004034:	4b0d      	ldr	r3, [pc, #52]	@ (800406c <HAL_RCC_OscConfig+0x778>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	4a0c      	ldr	r2, [pc, #48]	@ (800406c <HAL_RCC_OscConfig+0x778>)
 800403a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800403e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004040:	f7fd fe8a 	bl	8001d58 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004048:	f7fd fe86 	bl	8001d58 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e058      	b.n	800410c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800405a:	4b04      	ldr	r3, [pc, #16]	@ (800406c <HAL_RCC_OscConfig+0x778>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0f0      	beq.n	8004048 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004066:	e050      	b.n	800410a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e04f      	b.n	800410c <HAL_RCC_OscConfig+0x818>
 800406c:	40021000 	.word	0x40021000
 8004070:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004074:	4b27      	ldr	r3, [pc, #156]	@ (8004114 <HAL_RCC_OscConfig+0x820>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d144      	bne.n	800410a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004080:	4b24      	ldr	r3, [pc, #144]	@ (8004114 <HAL_RCC_OscConfig+0x820>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a23      	ldr	r2, [pc, #140]	@ (8004114 <HAL_RCC_OscConfig+0x820>)
 8004086:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800408a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800408c:	4b21      	ldr	r3, [pc, #132]	@ (8004114 <HAL_RCC_OscConfig+0x820>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	4a20      	ldr	r2, [pc, #128]	@ (8004114 <HAL_RCC_OscConfig+0x820>)
 8004092:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004096:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004098:	f7fd fe5e 	bl	8001d58 <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a0:	f7fd fe5a 	bl	8001d58 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e02c      	b.n	800410c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040b2:	4b18      	ldr	r3, [pc, #96]	@ (8004114 <HAL_RCC_OscConfig+0x820>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0f0      	beq.n	80040a0 <HAL_RCC_OscConfig+0x7ac>
 80040be:	e024      	b.n	800410a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	2b0c      	cmp	r3, #12
 80040c4:	d01f      	beq.n	8004106 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c6:	4b13      	ldr	r3, [pc, #76]	@ (8004114 <HAL_RCC_OscConfig+0x820>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a12      	ldr	r2, [pc, #72]	@ (8004114 <HAL_RCC_OscConfig+0x820>)
 80040cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d2:	f7fd fe41 	bl	8001d58 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040da:	f7fd fe3d 	bl	8001d58 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e00f      	b.n	800410c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040ec:	4b09      	ldr	r3, [pc, #36]	@ (8004114 <HAL_RCC_OscConfig+0x820>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1f0      	bne.n	80040da <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80040f8:	4b06      	ldr	r3, [pc, #24]	@ (8004114 <HAL_RCC_OscConfig+0x820>)
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	4905      	ldr	r1, [pc, #20]	@ (8004114 <HAL_RCC_OscConfig+0x820>)
 80040fe:	4b06      	ldr	r3, [pc, #24]	@ (8004118 <HAL_RCC_OscConfig+0x824>)
 8004100:	4013      	ands	r3, r2
 8004102:	60cb      	str	r3, [r1, #12]
 8004104:	e001      	b.n	800410a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3720      	adds	r7, #32
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40021000 	.word	0x40021000
 8004118:	feeefffc 	.word	0xfeeefffc

0800411c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e0e7      	b.n	8004300 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004130:	4b75      	ldr	r3, [pc, #468]	@ (8004308 <HAL_RCC_ClockConfig+0x1ec>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d910      	bls.n	8004160 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413e:	4b72      	ldr	r3, [pc, #456]	@ (8004308 <HAL_RCC_ClockConfig+0x1ec>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f023 0207 	bic.w	r2, r3, #7
 8004146:	4970      	ldr	r1, [pc, #448]	@ (8004308 <HAL_RCC_ClockConfig+0x1ec>)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	4313      	orrs	r3, r2
 800414c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800414e:	4b6e      	ldr	r3, [pc, #440]	@ (8004308 <HAL_RCC_ClockConfig+0x1ec>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d001      	beq.n	8004160 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e0cf      	b.n	8004300 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d010      	beq.n	800418e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	4b66      	ldr	r3, [pc, #408]	@ (800430c <HAL_RCC_ClockConfig+0x1f0>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004178:	429a      	cmp	r2, r3
 800417a:	d908      	bls.n	800418e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800417c:	4b63      	ldr	r3, [pc, #396]	@ (800430c <HAL_RCC_ClockConfig+0x1f0>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	4960      	ldr	r1, [pc, #384]	@ (800430c <HAL_RCC_ClockConfig+0x1f0>)
 800418a:	4313      	orrs	r3, r2
 800418c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d04c      	beq.n	8004234 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d107      	bne.n	80041b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041a2:	4b5a      	ldr	r3, [pc, #360]	@ (800430c <HAL_RCC_ClockConfig+0x1f0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d121      	bne.n	80041f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e0a6      	b.n	8004300 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d107      	bne.n	80041ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041ba:	4b54      	ldr	r3, [pc, #336]	@ (800430c <HAL_RCC_ClockConfig+0x1f0>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d115      	bne.n	80041f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e09a      	b.n	8004300 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d107      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041d2:	4b4e      	ldr	r3, [pc, #312]	@ (800430c <HAL_RCC_ClockConfig+0x1f0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d109      	bne.n	80041f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e08e      	b.n	8004300 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041e2:	4b4a      	ldr	r3, [pc, #296]	@ (800430c <HAL_RCC_ClockConfig+0x1f0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e086      	b.n	8004300 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041f2:	4b46      	ldr	r3, [pc, #280]	@ (800430c <HAL_RCC_ClockConfig+0x1f0>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f023 0203 	bic.w	r2, r3, #3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	4943      	ldr	r1, [pc, #268]	@ (800430c <HAL_RCC_ClockConfig+0x1f0>)
 8004200:	4313      	orrs	r3, r2
 8004202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004204:	f7fd fda8 	bl	8001d58 <HAL_GetTick>
 8004208:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420a:	e00a      	b.n	8004222 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800420c:	f7fd fda4 	bl	8001d58 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800421a:	4293      	cmp	r3, r2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e06e      	b.n	8004300 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004222:	4b3a      	ldr	r3, [pc, #232]	@ (800430c <HAL_RCC_ClockConfig+0x1f0>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 020c 	and.w	r2, r3, #12
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	429a      	cmp	r2, r3
 8004232:	d1eb      	bne.n	800420c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d010      	beq.n	8004262 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	4b31      	ldr	r3, [pc, #196]	@ (800430c <HAL_RCC_ClockConfig+0x1f0>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800424c:	429a      	cmp	r2, r3
 800424e:	d208      	bcs.n	8004262 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004250:	4b2e      	ldr	r3, [pc, #184]	@ (800430c <HAL_RCC_ClockConfig+0x1f0>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	492b      	ldr	r1, [pc, #172]	@ (800430c <HAL_RCC_ClockConfig+0x1f0>)
 800425e:	4313      	orrs	r3, r2
 8004260:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004262:	4b29      	ldr	r3, [pc, #164]	@ (8004308 <HAL_RCC_ClockConfig+0x1ec>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	d210      	bcs.n	8004292 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004270:	4b25      	ldr	r3, [pc, #148]	@ (8004308 <HAL_RCC_ClockConfig+0x1ec>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f023 0207 	bic.w	r2, r3, #7
 8004278:	4923      	ldr	r1, [pc, #140]	@ (8004308 <HAL_RCC_ClockConfig+0x1ec>)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	4313      	orrs	r3, r2
 800427e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004280:	4b21      	ldr	r3, [pc, #132]	@ (8004308 <HAL_RCC_ClockConfig+0x1ec>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d001      	beq.n	8004292 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e036      	b.n	8004300 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0304 	and.w	r3, r3, #4
 800429a:	2b00      	cmp	r3, #0
 800429c:	d008      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800429e:	4b1b      	ldr	r3, [pc, #108]	@ (800430c <HAL_RCC_ClockConfig+0x1f0>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	4918      	ldr	r1, [pc, #96]	@ (800430c <HAL_RCC_ClockConfig+0x1f0>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0308 	and.w	r3, r3, #8
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d009      	beq.n	80042d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042bc:	4b13      	ldr	r3, [pc, #76]	@ (800430c <HAL_RCC_ClockConfig+0x1f0>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	4910      	ldr	r1, [pc, #64]	@ (800430c <HAL_RCC_ClockConfig+0x1f0>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042d0:	f000 f824 	bl	800431c <HAL_RCC_GetSysClockFreq>
 80042d4:	4602      	mov	r2, r0
 80042d6:	4b0d      	ldr	r3, [pc, #52]	@ (800430c <HAL_RCC_ClockConfig+0x1f0>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	091b      	lsrs	r3, r3, #4
 80042dc:	f003 030f 	and.w	r3, r3, #15
 80042e0:	490b      	ldr	r1, [pc, #44]	@ (8004310 <HAL_RCC_ClockConfig+0x1f4>)
 80042e2:	5ccb      	ldrb	r3, [r1, r3]
 80042e4:	f003 031f 	and.w	r3, r3, #31
 80042e8:	fa22 f303 	lsr.w	r3, r2, r3
 80042ec:	4a09      	ldr	r2, [pc, #36]	@ (8004314 <HAL_RCC_ClockConfig+0x1f8>)
 80042ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042f0:	4b09      	ldr	r3, [pc, #36]	@ (8004318 <HAL_RCC_ClockConfig+0x1fc>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fd fcdf 	bl	8001cb8 <HAL_InitTick>
 80042fa:	4603      	mov	r3, r0
 80042fc:	72fb      	strb	r3, [r7, #11]

  return status;
 80042fe:	7afb      	ldrb	r3, [r7, #11]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40022000 	.word	0x40022000
 800430c:	40021000 	.word	0x40021000
 8004310:	08009be8 	.word	0x08009be8
 8004314:	20000008 	.word	0x20000008
 8004318:	2000000c 	.word	0x2000000c

0800431c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800431c:	b480      	push	{r7}
 800431e:	b089      	sub	sp, #36	@ 0x24
 8004320:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	61fb      	str	r3, [r7, #28]
 8004326:	2300      	movs	r3, #0
 8004328:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800432a:	4b3e      	ldr	r3, [pc, #248]	@ (8004424 <HAL_RCC_GetSysClockFreq+0x108>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 030c 	and.w	r3, r3, #12
 8004332:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004334:	4b3b      	ldr	r3, [pc, #236]	@ (8004424 <HAL_RCC_GetSysClockFreq+0x108>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f003 0303 	and.w	r3, r3, #3
 800433c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <HAL_RCC_GetSysClockFreq+0x34>
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	2b0c      	cmp	r3, #12
 8004348:	d121      	bne.n	800438e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d11e      	bne.n	800438e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004350:	4b34      	ldr	r3, [pc, #208]	@ (8004424 <HAL_RCC_GetSysClockFreq+0x108>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	2b00      	cmp	r3, #0
 800435a:	d107      	bne.n	800436c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800435c:	4b31      	ldr	r3, [pc, #196]	@ (8004424 <HAL_RCC_GetSysClockFreq+0x108>)
 800435e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004362:	0a1b      	lsrs	r3, r3, #8
 8004364:	f003 030f 	and.w	r3, r3, #15
 8004368:	61fb      	str	r3, [r7, #28]
 800436a:	e005      	b.n	8004378 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800436c:	4b2d      	ldr	r3, [pc, #180]	@ (8004424 <HAL_RCC_GetSysClockFreq+0x108>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	091b      	lsrs	r3, r3, #4
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004378:	4a2b      	ldr	r2, [pc, #172]	@ (8004428 <HAL_RCC_GetSysClockFreq+0x10c>)
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004380:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10d      	bne.n	80043a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800438c:	e00a      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	2b04      	cmp	r3, #4
 8004392:	d102      	bne.n	800439a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004394:	4b25      	ldr	r3, [pc, #148]	@ (800442c <HAL_RCC_GetSysClockFreq+0x110>)
 8004396:	61bb      	str	r3, [r7, #24]
 8004398:	e004      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	2b08      	cmp	r3, #8
 800439e:	d101      	bne.n	80043a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043a0:	4b23      	ldr	r3, [pc, #140]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x114>)
 80043a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	2b0c      	cmp	r3, #12
 80043a8:	d134      	bne.n	8004414 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004424 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d003      	beq.n	80043c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b03      	cmp	r3, #3
 80043be:	d003      	beq.n	80043c8 <HAL_RCC_GetSysClockFreq+0xac>
 80043c0:	e005      	b.n	80043ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043c2:	4b1a      	ldr	r3, [pc, #104]	@ (800442c <HAL_RCC_GetSysClockFreq+0x110>)
 80043c4:	617b      	str	r3, [r7, #20]
      break;
 80043c6:	e005      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043c8:	4b19      	ldr	r3, [pc, #100]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x114>)
 80043ca:	617b      	str	r3, [r7, #20]
      break;
 80043cc:	e002      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	617b      	str	r3, [r7, #20]
      break;
 80043d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043d4:	4b13      	ldr	r3, [pc, #76]	@ (8004424 <HAL_RCC_GetSysClockFreq+0x108>)
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	091b      	lsrs	r3, r3, #4
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	3301      	adds	r3, #1
 80043e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043e2:	4b10      	ldr	r3, [pc, #64]	@ (8004424 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	0a1b      	lsrs	r3, r3, #8
 80043e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	fb03 f202 	mul.w	r2, r3, r2
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004424 <HAL_RCC_GetSysClockFreq+0x108>)
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	0e5b      	lsrs	r3, r3, #25
 8004400:	f003 0303 	and.w	r3, r3, #3
 8004404:	3301      	adds	r3, #1
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004412:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004414:	69bb      	ldr	r3, [r7, #24]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3724      	adds	r7, #36	@ 0x24
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	40021000 	.word	0x40021000
 8004428:	08009c00 	.word	0x08009c00
 800442c:	00f42400 	.word	0x00f42400
 8004430:	007a1200 	.word	0x007a1200

08004434 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004438:	4b03      	ldr	r3, [pc, #12]	@ (8004448 <HAL_RCC_GetHCLKFreq+0x14>)
 800443a:	681b      	ldr	r3, [r3, #0]
}
 800443c:	4618      	mov	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	20000008 	.word	0x20000008

0800444c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004450:	f7ff fff0 	bl	8004434 <HAL_RCC_GetHCLKFreq>
 8004454:	4602      	mov	r2, r0
 8004456:	4b06      	ldr	r3, [pc, #24]	@ (8004470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	0a1b      	lsrs	r3, r3, #8
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	4904      	ldr	r1, [pc, #16]	@ (8004474 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004462:	5ccb      	ldrb	r3, [r1, r3]
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800446c:	4618      	mov	r0, r3
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40021000 	.word	0x40021000
 8004474:	08009bf8 	.word	0x08009bf8

08004478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800447c:	f7ff ffda 	bl	8004434 <HAL_RCC_GetHCLKFreq>
 8004480:	4602      	mov	r2, r0
 8004482:	4b06      	ldr	r3, [pc, #24]	@ (800449c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	0adb      	lsrs	r3, r3, #11
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	4904      	ldr	r1, [pc, #16]	@ (80044a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800448e:	5ccb      	ldrb	r3, [r1, r3]
 8004490:	f003 031f 	and.w	r3, r3, #31
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004498:	4618      	mov	r0, r3
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40021000 	.word	0x40021000
 80044a0:	08009bf8 	.word	0x08009bf8

080044a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044ac:	2300      	movs	r3, #0
 80044ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044b0:	4b2a      	ldr	r3, [pc, #168]	@ (800455c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044bc:	f7ff f9b6 	bl	800382c <HAL_PWREx_GetVoltageRange>
 80044c0:	6178      	str	r0, [r7, #20]
 80044c2:	e014      	b.n	80044ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044c4:	4b25      	ldr	r3, [pc, #148]	@ (800455c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c8:	4a24      	ldr	r2, [pc, #144]	@ (800455c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80044d0:	4b22      	ldr	r3, [pc, #136]	@ (800455c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044dc:	f7ff f9a6 	bl	800382c <HAL_PWREx_GetVoltageRange>
 80044e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044e2:	4b1e      	ldr	r3, [pc, #120]	@ (800455c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e6:	4a1d      	ldr	r2, [pc, #116]	@ (800455c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044f4:	d10b      	bne.n	800450e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b80      	cmp	r3, #128	@ 0x80
 80044fa:	d919      	bls.n	8004530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2ba0      	cmp	r3, #160	@ 0xa0
 8004500:	d902      	bls.n	8004508 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004502:	2302      	movs	r3, #2
 8004504:	613b      	str	r3, [r7, #16]
 8004506:	e013      	b.n	8004530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004508:	2301      	movs	r3, #1
 800450a:	613b      	str	r3, [r7, #16]
 800450c:	e010      	b.n	8004530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b80      	cmp	r3, #128	@ 0x80
 8004512:	d902      	bls.n	800451a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004514:	2303      	movs	r3, #3
 8004516:	613b      	str	r3, [r7, #16]
 8004518:	e00a      	b.n	8004530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b80      	cmp	r3, #128	@ 0x80
 800451e:	d102      	bne.n	8004526 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004520:	2302      	movs	r3, #2
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	e004      	b.n	8004530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b70      	cmp	r3, #112	@ 0x70
 800452a:	d101      	bne.n	8004530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800452c:	2301      	movs	r3, #1
 800452e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004530:	4b0b      	ldr	r3, [pc, #44]	@ (8004560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f023 0207 	bic.w	r2, r3, #7
 8004538:	4909      	ldr	r1, [pc, #36]	@ (8004560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004540:	4b07      	ldr	r3, [pc, #28]	@ (8004560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	429a      	cmp	r2, r3
 800454c:	d001      	beq.n	8004552 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40021000 	.word	0x40021000
 8004560:	40022000 	.word	0x40022000

08004564 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800456c:	2300      	movs	r3, #0
 800456e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004570:	2300      	movs	r3, #0
 8004572:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800457c:	2b00      	cmp	r3, #0
 800457e:	d031      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004584:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004588:	d01a      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800458a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800458e:	d814      	bhi.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004590:	2b00      	cmp	r3, #0
 8004592:	d009      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004594:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004598:	d10f      	bne.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800459a:	4b5d      	ldr	r3, [pc, #372]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	4a5c      	ldr	r2, [pc, #368]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045a4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045a6:	e00c      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3304      	adds	r3, #4
 80045ac:	2100      	movs	r1, #0
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 f9de 	bl	8004970 <RCCEx_PLLSAI1_Config>
 80045b4:	4603      	mov	r3, r0
 80045b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045b8:	e003      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	74fb      	strb	r3, [r7, #19]
      break;
 80045be:	e000      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80045c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045c2:	7cfb      	ldrb	r3, [r7, #19]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10b      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045c8:	4b51      	ldr	r3, [pc, #324]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d6:	494e      	ldr	r1, [pc, #312]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80045de:	e001      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e0:	7cfb      	ldrb	r3, [r7, #19]
 80045e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 809e 	beq.w	800472e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045f2:	2300      	movs	r3, #0
 80045f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045f6:	4b46      	ldr	r3, [pc, #280]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004602:	2301      	movs	r3, #1
 8004604:	e000      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004606:	2300      	movs	r3, #0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00d      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800460c:	4b40      	ldr	r3, [pc, #256]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800460e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004610:	4a3f      	ldr	r2, [pc, #252]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004616:	6593      	str	r3, [r2, #88]	@ 0x58
 8004618:	4b3d      	ldr	r3, [pc, #244]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800461a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800461c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004624:	2301      	movs	r3, #1
 8004626:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004628:	4b3a      	ldr	r3, [pc, #232]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a39      	ldr	r2, [pc, #228]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800462e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004632:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004634:	f7fd fb90 	bl	8001d58 <HAL_GetTick>
 8004638:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800463a:	e009      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800463c:	f7fd fb8c 	bl	8001d58 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d902      	bls.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	74fb      	strb	r3, [r7, #19]
        break;
 800464e:	e005      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004650:	4b30      	ldr	r3, [pc, #192]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0ef      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800465c:	7cfb      	ldrb	r3, [r7, #19]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d15a      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004662:	4b2b      	ldr	r3, [pc, #172]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004668:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800466c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d01e      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	429a      	cmp	r2, r3
 800467c:	d019      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800467e:	4b24      	ldr	r3, [pc, #144]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004684:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004688:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800468a:	4b21      	ldr	r3, [pc, #132]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800468c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004690:	4a1f      	ldr	r2, [pc, #124]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004692:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004696:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800469a:	4b1d      	ldr	r3, [pc, #116]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800469c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a0:	4a1b      	ldr	r2, [pc, #108]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046aa:	4a19      	ldr	r2, [pc, #100]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d016      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046bc:	f7fd fb4c 	bl	8001d58 <HAL_GetTick>
 80046c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046c2:	e00b      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c4:	f7fd fb48 	bl	8001d58 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d902      	bls.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	74fb      	strb	r3, [r7, #19]
            break;
 80046da:	e006      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0ec      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80046ea:	7cfb      	ldrb	r3, [r7, #19]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10b      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046f0:	4b07      	ldr	r3, [pc, #28]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046fe:	4904      	ldr	r1, [pc, #16]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004706:	e009      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004708:	7cfb      	ldrb	r3, [r7, #19]
 800470a:	74bb      	strb	r3, [r7, #18]
 800470c:	e006      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800470e:	bf00      	nop
 8004710:	40021000 	.word	0x40021000
 8004714:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004718:	7cfb      	ldrb	r3, [r7, #19]
 800471a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800471c:	7c7b      	ldrb	r3, [r7, #17]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d105      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004722:	4b8a      	ldr	r3, [pc, #552]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004726:	4a89      	ldr	r2, [pc, #548]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004728:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800472c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800473a:	4b84      	ldr	r3, [pc, #528]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800473c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004740:	f023 0203 	bic.w	r2, r3, #3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	4980      	ldr	r1, [pc, #512]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800474a:	4313      	orrs	r3, r2
 800474c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00a      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800475c:	4b7b      	ldr	r3, [pc, #492]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004762:	f023 020c 	bic.w	r2, r3, #12
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476a:	4978      	ldr	r1, [pc, #480]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0320 	and.w	r3, r3, #32
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800477e:	4b73      	ldr	r3, [pc, #460]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004784:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478c:	496f      	ldr	r1, [pc, #444]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047a0:	4b6a      	ldr	r3, [pc, #424]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ae:	4967      	ldr	r1, [pc, #412]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047c2:	4b62      	ldr	r3, [pc, #392]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d0:	495e      	ldr	r1, [pc, #376]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00a      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047e4:	4b59      	ldr	r3, [pc, #356]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f2:	4956      	ldr	r1, [pc, #344]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004806:	4b51      	ldr	r3, [pc, #324]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800480c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004814:	494d      	ldr	r1, [pc, #308]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d028      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004828:	4b48      	ldr	r3, [pc, #288]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004836:	4945      	ldr	r1, [pc, #276]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004842:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004846:	d106      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004848:	4b40      	ldr	r3, [pc, #256]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	4a3f      	ldr	r2, [pc, #252]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800484e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004852:	60d3      	str	r3, [r2, #12]
 8004854:	e011      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800485e:	d10c      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3304      	adds	r3, #4
 8004864:	2101      	movs	r1, #1
 8004866:	4618      	mov	r0, r3
 8004868:	f000 f882 	bl	8004970 <RCCEx_PLLSAI1_Config>
 800486c:	4603      	mov	r3, r0
 800486e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004870:	7cfb      	ldrb	r3, [r7, #19]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004876:	7cfb      	ldrb	r3, [r7, #19]
 8004878:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d028      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004886:	4b31      	ldr	r3, [pc, #196]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800488c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004894:	492d      	ldr	r1, [pc, #180]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048a4:	d106      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048a6:	4b29      	ldr	r3, [pc, #164]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	4a28      	ldr	r2, [pc, #160]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048b0:	60d3      	str	r3, [r2, #12]
 80048b2:	e011      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048bc:	d10c      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3304      	adds	r3, #4
 80048c2:	2101      	movs	r1, #1
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 f853 	bl	8004970 <RCCEx_PLLSAI1_Config>
 80048ca:	4603      	mov	r3, r0
 80048cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048ce:	7cfb      	ldrb	r3, [r7, #19]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80048d4:	7cfb      	ldrb	r3, [r7, #19]
 80048d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d01c      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048e4:	4b19      	ldr	r3, [pc, #100]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048f2:	4916      	ldr	r1, [pc, #88]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004902:	d10c      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3304      	adds	r3, #4
 8004908:	2102      	movs	r1, #2
 800490a:	4618      	mov	r0, r3
 800490c:	f000 f830 	bl	8004970 <RCCEx_PLLSAI1_Config>
 8004910:	4603      	mov	r3, r0
 8004912:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004914:	7cfb      	ldrb	r3, [r7, #19]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800491a:	7cfb      	ldrb	r3, [r7, #19]
 800491c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00a      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800492a:	4b08      	ldr	r3, [pc, #32]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800492c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004930:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004938:	4904      	ldr	r1, [pc, #16]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800493a:	4313      	orrs	r3, r2
 800493c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004940:	7cbb      	ldrb	r3, [r7, #18]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	40021000 	.word	0x40021000

08004950 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004954:	4b05      	ldr	r3, [pc, #20]	@ (800496c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a04      	ldr	r2, [pc, #16]	@ (800496c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800495a:	f043 0304 	orr.w	r3, r3, #4
 800495e:	6013      	str	r3, [r2, #0]
}
 8004960:	bf00      	nop
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	40021000 	.word	0x40021000

08004970 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800497e:	4b74      	ldr	r3, [pc, #464]	@ (8004b50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d018      	beq.n	80049bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800498a:	4b71      	ldr	r3, [pc, #452]	@ (8004b50 <RCCEx_PLLSAI1_Config+0x1e0>)
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f003 0203 	and.w	r2, r3, #3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	429a      	cmp	r2, r3
 8004998:	d10d      	bne.n	80049b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
       ||
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d009      	beq.n	80049b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80049a2:	4b6b      	ldr	r3, [pc, #428]	@ (8004b50 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	091b      	lsrs	r3, r3, #4
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
       ||
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d047      	beq.n	8004a46 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	73fb      	strb	r3, [r7, #15]
 80049ba:	e044      	b.n	8004a46 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b03      	cmp	r3, #3
 80049c2:	d018      	beq.n	80049f6 <RCCEx_PLLSAI1_Config+0x86>
 80049c4:	2b03      	cmp	r3, #3
 80049c6:	d825      	bhi.n	8004a14 <RCCEx_PLLSAI1_Config+0xa4>
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d002      	beq.n	80049d2 <RCCEx_PLLSAI1_Config+0x62>
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d009      	beq.n	80049e4 <RCCEx_PLLSAI1_Config+0x74>
 80049d0:	e020      	b.n	8004a14 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004b50 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d11d      	bne.n	8004a1a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049e2:	e01a      	b.n	8004a1a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049e4:	4b5a      	ldr	r3, [pc, #360]	@ (8004b50 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d116      	bne.n	8004a1e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049f4:	e013      	b.n	8004a1e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049f6:	4b56      	ldr	r3, [pc, #344]	@ (8004b50 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10f      	bne.n	8004a22 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a02:	4b53      	ldr	r3, [pc, #332]	@ (8004b50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d109      	bne.n	8004a22 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a12:	e006      	b.n	8004a22 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	73fb      	strb	r3, [r7, #15]
      break;
 8004a18:	e004      	b.n	8004a24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a1a:	bf00      	nop
 8004a1c:	e002      	b.n	8004a24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a1e:	bf00      	nop
 8004a20:	e000      	b.n	8004a24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a22:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10d      	bne.n	8004a46 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a2a:	4b49      	ldr	r3, [pc, #292]	@ (8004b50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6819      	ldr	r1, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	011b      	lsls	r3, r3, #4
 8004a3e:	430b      	orrs	r3, r1
 8004a40:	4943      	ldr	r1, [pc, #268]	@ (8004b50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a46:	7bfb      	ldrb	r3, [r7, #15]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d17c      	bne.n	8004b46 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a4c:	4b40      	ldr	r3, [pc, #256]	@ (8004b50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a3f      	ldr	r2, [pc, #252]	@ (8004b50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a58:	f7fd f97e 	bl	8001d58 <HAL_GetTick>
 8004a5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a5e:	e009      	b.n	8004a74 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a60:	f7fd f97a 	bl	8001d58 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d902      	bls.n	8004a74 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	73fb      	strb	r3, [r7, #15]
        break;
 8004a72:	e005      	b.n	8004a80 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a74:	4b36      	ldr	r3, [pc, #216]	@ (8004b50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1ef      	bne.n	8004a60 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d15f      	bne.n	8004b46 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d110      	bne.n	8004aae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a8c:	4b30      	ldr	r3, [pc, #192]	@ (8004b50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004a94:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6892      	ldr	r2, [r2, #8]
 8004a9c:	0211      	lsls	r1, r2, #8
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	68d2      	ldr	r2, [r2, #12]
 8004aa2:	06d2      	lsls	r2, r2, #27
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	492a      	ldr	r1, [pc, #168]	@ (8004b50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	610b      	str	r3, [r1, #16]
 8004aac:	e027      	b.n	8004afe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d112      	bne.n	8004ada <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ab4:	4b26      	ldr	r3, [pc, #152]	@ (8004b50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004abc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6892      	ldr	r2, [r2, #8]
 8004ac4:	0211      	lsls	r1, r2, #8
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	6912      	ldr	r2, [r2, #16]
 8004aca:	0852      	lsrs	r2, r2, #1
 8004acc:	3a01      	subs	r2, #1
 8004ace:	0552      	lsls	r2, r2, #21
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	491f      	ldr	r1, [pc, #124]	@ (8004b50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	610b      	str	r3, [r1, #16]
 8004ad8:	e011      	b.n	8004afe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ada:	4b1d      	ldr	r3, [pc, #116]	@ (8004b50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004ae2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6892      	ldr	r2, [r2, #8]
 8004aea:	0211      	lsls	r1, r2, #8
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6952      	ldr	r2, [r2, #20]
 8004af0:	0852      	lsrs	r2, r2, #1
 8004af2:	3a01      	subs	r2, #1
 8004af4:	0652      	lsls	r2, r2, #25
 8004af6:	430a      	orrs	r2, r1
 8004af8:	4915      	ldr	r1, [pc, #84]	@ (8004b50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004afe:	4b14      	ldr	r3, [pc, #80]	@ (8004b50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a13      	ldr	r2, [pc, #76]	@ (8004b50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b04:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b08:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0a:	f7fd f925 	bl	8001d58 <HAL_GetTick>
 8004b0e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b10:	e009      	b.n	8004b26 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b12:	f7fd f921 	bl	8001d58 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d902      	bls.n	8004b26 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	73fb      	strb	r3, [r7, #15]
          break;
 8004b24:	e005      	b.n	8004b32 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b26:	4b0a      	ldr	r3, [pc, #40]	@ (8004b50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0ef      	beq.n	8004b12 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004b32:	7bfb      	ldrb	r3, [r7, #15]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d106      	bne.n	8004b46 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b38:	4b05      	ldr	r3, [pc, #20]	@ (8004b50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b3a:	691a      	ldr	r2, [r3, #16]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	4903      	ldr	r1, [pc, #12]	@ (8004b50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	40021000 	.word	0x40021000

08004b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e049      	b.n	8004bfa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fc fe42 	bl	8001804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	4619      	mov	r1, r3
 8004b92:	4610      	mov	r0, r2
 8004b94:	f000 fa28 	bl	8004fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d001      	beq.n	8004c1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e033      	b.n	8004c84 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a19      	ldr	r2, [pc, #100]	@ (8004c90 <HAL_TIM_Base_Start+0x8c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d009      	beq.n	8004c42 <HAL_TIM_Base_Start+0x3e>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c36:	d004      	beq.n	8004c42 <HAL_TIM_Base_Start+0x3e>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a15      	ldr	r2, [pc, #84]	@ (8004c94 <HAL_TIM_Base_Start+0x90>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d115      	bne.n	8004c6e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	4b13      	ldr	r3, [pc, #76]	@ (8004c98 <HAL_TIM_Base_Start+0x94>)
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b06      	cmp	r3, #6
 8004c52:	d015      	beq.n	8004c80 <HAL_TIM_Base_Start+0x7c>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c5a:	d011      	beq.n	8004c80 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f042 0201 	orr.w	r2, r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c6c:	e008      	b.n	8004c80 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f042 0201 	orr.w	r2, r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	e000      	b.n	8004c82 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	40012c00 	.word	0x40012c00
 8004c94:	40014000 	.word	0x40014000
 8004c98:	00010007 	.word	0x00010007

08004c9c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e049      	b.n	8004d42 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d106      	bne.n	8004cc8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f841 	bl	8004d4a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3304      	adds	r3, #4
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4610      	mov	r0, r2
 8004cdc:	f000 f984 	bl	8004fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004d52:	bf00      	nop
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
	...

08004d60 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d101      	bne.n	8004d7e <HAL_TIM_OC_ConfigChannel+0x1e>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	e066      	b.n	8004e4c <HAL_TIM_OC_ConfigChannel+0xec>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b14      	cmp	r3, #20
 8004d8a:	d857      	bhi.n	8004e3c <HAL_TIM_OC_ConfigChannel+0xdc>
 8004d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d94 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d92:	bf00      	nop
 8004d94:	08004de9 	.word	0x08004de9
 8004d98:	08004e3d 	.word	0x08004e3d
 8004d9c:	08004e3d 	.word	0x08004e3d
 8004da0:	08004e3d 	.word	0x08004e3d
 8004da4:	08004df7 	.word	0x08004df7
 8004da8:	08004e3d 	.word	0x08004e3d
 8004dac:	08004e3d 	.word	0x08004e3d
 8004db0:	08004e3d 	.word	0x08004e3d
 8004db4:	08004e05 	.word	0x08004e05
 8004db8:	08004e3d 	.word	0x08004e3d
 8004dbc:	08004e3d 	.word	0x08004e3d
 8004dc0:	08004e3d 	.word	0x08004e3d
 8004dc4:	08004e13 	.word	0x08004e13
 8004dc8:	08004e3d 	.word	0x08004e3d
 8004dcc:	08004e3d 	.word	0x08004e3d
 8004dd0:	08004e3d 	.word	0x08004e3d
 8004dd4:	08004e21 	.word	0x08004e21
 8004dd8:	08004e3d 	.word	0x08004e3d
 8004ddc:	08004e3d 	.word	0x08004e3d
 8004de0:	08004e3d 	.word	0x08004e3d
 8004de4:	08004e2f 	.word	0x08004e2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68b9      	ldr	r1, [r7, #8]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 f96a 	bl	80050c8 <TIM_OC1_SetConfig>
      break;
 8004df4:	e025      	b.n	8004e42 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68b9      	ldr	r1, [r7, #8]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 f9df 	bl	80051c0 <TIM_OC2_SetConfig>
      break;
 8004e02:	e01e      	b.n	8004e42 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68b9      	ldr	r1, [r7, #8]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 fa52 	bl	80052b4 <TIM_OC3_SetConfig>
      break;
 8004e10:	e017      	b.n	8004e42 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68b9      	ldr	r1, [r7, #8]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 fac3 	bl	80053a4 <TIM_OC4_SetConfig>
      break;
 8004e1e:	e010      	b.n	8004e42 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68b9      	ldr	r1, [r7, #8]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fb1a 	bl	8005460 <TIM_OC5_SetConfig>
      break;
 8004e2c:	e009      	b.n	8004e42 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68b9      	ldr	r1, [r7, #8]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 fb6b 	bl	8005510 <TIM_OC6_SetConfig>
      break;
 8004e3a:	e002      	b.n	8004e42 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3718      	adds	r7, #24
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <HAL_TIM_ConfigClockSource+0x1c>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e0b6      	b.n	8004fde <HAL_TIM_ConfigClockSource+0x18a>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004e92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004eac:	d03e      	beq.n	8004f2c <HAL_TIM_ConfigClockSource+0xd8>
 8004eae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004eb2:	f200 8087 	bhi.w	8004fc4 <HAL_TIM_ConfigClockSource+0x170>
 8004eb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eba:	f000 8086 	beq.w	8004fca <HAL_TIM_ConfigClockSource+0x176>
 8004ebe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ec2:	d87f      	bhi.n	8004fc4 <HAL_TIM_ConfigClockSource+0x170>
 8004ec4:	2b70      	cmp	r3, #112	@ 0x70
 8004ec6:	d01a      	beq.n	8004efe <HAL_TIM_ConfigClockSource+0xaa>
 8004ec8:	2b70      	cmp	r3, #112	@ 0x70
 8004eca:	d87b      	bhi.n	8004fc4 <HAL_TIM_ConfigClockSource+0x170>
 8004ecc:	2b60      	cmp	r3, #96	@ 0x60
 8004ece:	d050      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x11e>
 8004ed0:	2b60      	cmp	r3, #96	@ 0x60
 8004ed2:	d877      	bhi.n	8004fc4 <HAL_TIM_ConfigClockSource+0x170>
 8004ed4:	2b50      	cmp	r3, #80	@ 0x50
 8004ed6:	d03c      	beq.n	8004f52 <HAL_TIM_ConfigClockSource+0xfe>
 8004ed8:	2b50      	cmp	r3, #80	@ 0x50
 8004eda:	d873      	bhi.n	8004fc4 <HAL_TIM_ConfigClockSource+0x170>
 8004edc:	2b40      	cmp	r3, #64	@ 0x40
 8004ede:	d058      	beq.n	8004f92 <HAL_TIM_ConfigClockSource+0x13e>
 8004ee0:	2b40      	cmp	r3, #64	@ 0x40
 8004ee2:	d86f      	bhi.n	8004fc4 <HAL_TIM_ConfigClockSource+0x170>
 8004ee4:	2b30      	cmp	r3, #48	@ 0x30
 8004ee6:	d064      	beq.n	8004fb2 <HAL_TIM_ConfigClockSource+0x15e>
 8004ee8:	2b30      	cmp	r3, #48	@ 0x30
 8004eea:	d86b      	bhi.n	8004fc4 <HAL_TIM_ConfigClockSource+0x170>
 8004eec:	2b20      	cmp	r3, #32
 8004eee:	d060      	beq.n	8004fb2 <HAL_TIM_ConfigClockSource+0x15e>
 8004ef0:	2b20      	cmp	r3, #32
 8004ef2:	d867      	bhi.n	8004fc4 <HAL_TIM_ConfigClockSource+0x170>
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d05c      	beq.n	8004fb2 <HAL_TIM_ConfigClockSource+0x15e>
 8004ef8:	2b10      	cmp	r3, #16
 8004efa:	d05a      	beq.n	8004fb2 <HAL_TIM_ConfigClockSource+0x15e>
 8004efc:	e062      	b.n	8004fc4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f0e:	f000 fbd3 	bl	80056b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	609a      	str	r2, [r3, #8]
      break;
 8004f2a:	e04f      	b.n	8004fcc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f3c:	f000 fbbc 	bl	80056b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f4e:	609a      	str	r2, [r3, #8]
      break;
 8004f50:	e03c      	b.n	8004fcc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f000 fb30 	bl	80055c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2150      	movs	r1, #80	@ 0x50
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 fb89 	bl	8005682 <TIM_ITRx_SetConfig>
      break;
 8004f70:	e02c      	b.n	8004fcc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f7e:	461a      	mov	r2, r3
 8004f80:	f000 fb4f 	bl	8005622 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2160      	movs	r1, #96	@ 0x60
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 fb79 	bl	8005682 <TIM_ITRx_SetConfig>
      break;
 8004f90:	e01c      	b.n	8004fcc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	f000 fb10 	bl	80055c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2140      	movs	r1, #64	@ 0x40
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 fb69 	bl	8005682 <TIM_ITRx_SetConfig>
      break;
 8004fb0:	e00c      	b.n	8004fcc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	f000 fb60 	bl	8005682 <TIM_ITRx_SetConfig>
      break;
 8004fc2:	e003      	b.n	8004fcc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fc8:	e000      	b.n	8004fcc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004fca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
	...

08004fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a30      	ldr	r2, [pc, #192]	@ (80050bc <TIM_Base_SetConfig+0xd4>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d003      	beq.n	8005008 <TIM_Base_SetConfig+0x20>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005006:	d108      	bne.n	800501a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800500e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4313      	orrs	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a27      	ldr	r2, [pc, #156]	@ (80050bc <TIM_Base_SetConfig+0xd4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d00b      	beq.n	800503a <TIM_Base_SetConfig+0x52>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005028:	d007      	beq.n	800503a <TIM_Base_SetConfig+0x52>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a24      	ldr	r2, [pc, #144]	@ (80050c0 <TIM_Base_SetConfig+0xd8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d003      	beq.n	800503a <TIM_Base_SetConfig+0x52>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a23      	ldr	r2, [pc, #140]	@ (80050c4 <TIM_Base_SetConfig+0xdc>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d108      	bne.n	800504c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4313      	orrs	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a12      	ldr	r2, [pc, #72]	@ (80050bc <TIM_Base_SetConfig+0xd4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d007      	beq.n	8005088 <TIM_Base_SetConfig+0xa0>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a11      	ldr	r2, [pc, #68]	@ (80050c0 <TIM_Base_SetConfig+0xd8>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d003      	beq.n	8005088 <TIM_Base_SetConfig+0xa0>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a10      	ldr	r2, [pc, #64]	@ (80050c4 <TIM_Base_SetConfig+0xdc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d103      	bne.n	8005090 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d105      	bne.n	80050ae <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f023 0201 	bic.w	r2, r3, #1
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	611a      	str	r2, [r3, #16]
  }
}
 80050ae:	bf00      	nop
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	40012c00 	.word	0x40012c00
 80050c0:	40014000 	.word	0x40014000
 80050c4:	40014400 	.word	0x40014400

080050c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	f023 0201 	bic.w	r2, r3, #1
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0303 	bic.w	r3, r3, #3
 8005102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	4313      	orrs	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f023 0302 	bic.w	r3, r3, #2
 8005114:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4313      	orrs	r3, r2
 800511e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a24      	ldr	r2, [pc, #144]	@ (80051b4 <TIM_OC1_SetConfig+0xec>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d007      	beq.n	8005138 <TIM_OC1_SetConfig+0x70>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a23      	ldr	r2, [pc, #140]	@ (80051b8 <TIM_OC1_SetConfig+0xf0>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <TIM_OC1_SetConfig+0x70>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a22      	ldr	r2, [pc, #136]	@ (80051bc <TIM_OC1_SetConfig+0xf4>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d10c      	bne.n	8005152 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f023 0308 	bic.w	r3, r3, #8
 800513e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f023 0304 	bic.w	r3, r3, #4
 8005150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a17      	ldr	r2, [pc, #92]	@ (80051b4 <TIM_OC1_SetConfig+0xec>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d007      	beq.n	800516a <TIM_OC1_SetConfig+0xa2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a16      	ldr	r2, [pc, #88]	@ (80051b8 <TIM_OC1_SetConfig+0xf0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d003      	beq.n	800516a <TIM_OC1_SetConfig+0xa2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a15      	ldr	r2, [pc, #84]	@ (80051bc <TIM_OC1_SetConfig+0xf4>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d111      	bne.n	800518e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	4313      	orrs	r3, r2
 8005182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	621a      	str	r2, [r3, #32]
}
 80051a8:	bf00      	nop
 80051aa:	371c      	adds	r7, #28
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	40012c00 	.word	0x40012c00
 80051b8:	40014000 	.word	0x40014000
 80051bc:	40014400 	.word	0x40014400

080051c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	f023 0210 	bic.w	r2, r3, #16
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f023 0320 	bic.w	r3, r3, #32
 800520e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a22      	ldr	r2, [pc, #136]	@ (80052a8 <TIM_OC2_SetConfig+0xe8>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d10d      	bne.n	8005240 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800522a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800523e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a19      	ldr	r2, [pc, #100]	@ (80052a8 <TIM_OC2_SetConfig+0xe8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d007      	beq.n	8005258 <TIM_OC2_SetConfig+0x98>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a18      	ldr	r2, [pc, #96]	@ (80052ac <TIM_OC2_SetConfig+0xec>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d003      	beq.n	8005258 <TIM_OC2_SetConfig+0x98>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a17      	ldr	r2, [pc, #92]	@ (80052b0 <TIM_OC2_SetConfig+0xf0>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d113      	bne.n	8005280 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800525e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005266:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	4313      	orrs	r3, r2
 8005272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	621a      	str	r2, [r3, #32]
}
 800529a:	bf00      	nop
 800529c:	371c      	adds	r7, #28
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40012c00 	.word	0x40012c00
 80052ac:	40014000 	.word	0x40014000
 80052b0:	40014400 	.word	0x40014400

080052b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 0303 	bic.w	r3, r3, #3
 80052ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	021b      	lsls	r3, r3, #8
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	4313      	orrs	r3, r2
 800530c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a21      	ldr	r2, [pc, #132]	@ (8005398 <TIM_OC3_SetConfig+0xe4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d10d      	bne.n	8005332 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800531c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	021b      	lsls	r3, r3, #8
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a18      	ldr	r2, [pc, #96]	@ (8005398 <TIM_OC3_SetConfig+0xe4>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d007      	beq.n	800534a <TIM_OC3_SetConfig+0x96>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a17      	ldr	r2, [pc, #92]	@ (800539c <TIM_OC3_SetConfig+0xe8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d003      	beq.n	800534a <TIM_OC3_SetConfig+0x96>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a16      	ldr	r2, [pc, #88]	@ (80053a0 <TIM_OC3_SetConfig+0xec>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d113      	bne.n	8005372 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005350:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005358:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	011b      	lsls	r3, r3, #4
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	4313      	orrs	r3, r2
 8005364:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4313      	orrs	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	621a      	str	r2, [r3, #32]
}
 800538c:	bf00      	nop
 800538e:	371c      	adds	r7, #28
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	40012c00 	.word	0x40012c00
 800539c:	40014000 	.word	0x40014000
 80053a0:	40014400 	.word	0x40014400

080053a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b087      	sub	sp, #28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	021b      	lsls	r3, r3, #8
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	031b      	lsls	r3, r3, #12
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a14      	ldr	r2, [pc, #80]	@ (8005454 <TIM_OC4_SetConfig+0xb0>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d007      	beq.n	8005418 <TIM_OC4_SetConfig+0x74>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a13      	ldr	r2, [pc, #76]	@ (8005458 <TIM_OC4_SetConfig+0xb4>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d003      	beq.n	8005418 <TIM_OC4_SetConfig+0x74>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a12      	ldr	r2, [pc, #72]	@ (800545c <TIM_OC4_SetConfig+0xb8>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d109      	bne.n	800542c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800541e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	019b      	lsls	r3, r3, #6
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	4313      	orrs	r3, r2
 800542a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	621a      	str	r2, [r3, #32]
}
 8005446:	bf00      	nop
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40012c00 	.word	0x40012c00
 8005458:	40014000 	.word	0x40014000
 800545c:	40014400 	.word	0x40014400

08005460 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800548e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	4313      	orrs	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80054a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	041b      	lsls	r3, r3, #16
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a13      	ldr	r2, [pc, #76]	@ (8005504 <TIM_OC5_SetConfig+0xa4>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d007      	beq.n	80054ca <TIM_OC5_SetConfig+0x6a>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a12      	ldr	r2, [pc, #72]	@ (8005508 <TIM_OC5_SetConfig+0xa8>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d003      	beq.n	80054ca <TIM_OC5_SetConfig+0x6a>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a11      	ldr	r2, [pc, #68]	@ (800550c <TIM_OC5_SetConfig+0xac>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d109      	bne.n	80054de <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	021b      	lsls	r3, r3, #8
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	4313      	orrs	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	621a      	str	r2, [r3, #32]
}
 80054f8:	bf00      	nop
 80054fa:	371c      	adds	r7, #28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	40012c00 	.word	0x40012c00
 8005508:	40014000 	.word	0x40014000
 800550c:	40014400 	.word	0x40014400

08005510 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800553e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	021b      	lsls	r3, r3, #8
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	4313      	orrs	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005556:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	051b      	lsls	r3, r3, #20
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	4313      	orrs	r3, r2
 8005562:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a14      	ldr	r2, [pc, #80]	@ (80055b8 <TIM_OC6_SetConfig+0xa8>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d007      	beq.n	800557c <TIM_OC6_SetConfig+0x6c>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a13      	ldr	r2, [pc, #76]	@ (80055bc <TIM_OC6_SetConfig+0xac>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d003      	beq.n	800557c <TIM_OC6_SetConfig+0x6c>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a12      	ldr	r2, [pc, #72]	@ (80055c0 <TIM_OC6_SetConfig+0xb0>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d109      	bne.n	8005590 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005582:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	029b      	lsls	r3, r3, #10
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	4313      	orrs	r3, r2
 800558e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	621a      	str	r2, [r3, #32]
}
 80055aa:	bf00      	nop
 80055ac:	371c      	adds	r7, #28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	40012c00 	.word	0x40012c00
 80055bc:	40014000 	.word	0x40014000
 80055c0:	40014400 	.word	0x40014400

080055c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	f023 0201 	bic.w	r2, r3, #1
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f023 030a 	bic.w	r3, r3, #10
 8005600:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4313      	orrs	r3, r2
 8005608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	621a      	str	r2, [r3, #32]
}
 8005616:	bf00      	nop
 8005618:	371c      	adds	r7, #28
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005622:	b480      	push	{r7}
 8005624:	b087      	sub	sp, #28
 8005626:	af00      	add	r7, sp, #0
 8005628:	60f8      	str	r0, [r7, #12]
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	f023 0210 	bic.w	r2, r3, #16
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800564c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	031b      	lsls	r3, r3, #12
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	4313      	orrs	r3, r2
 8005656:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800565e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	011b      	lsls	r3, r3, #4
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	621a      	str	r2, [r3, #32]
}
 8005676:	bf00      	nop
 8005678:	371c      	adds	r7, #28
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005682:	b480      	push	{r7}
 8005684:	b085      	sub	sp, #20
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4313      	orrs	r3, r2
 80056a0:	f043 0307 	orr.w	r3, r3, #7
 80056a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	609a      	str	r2, [r3, #8]
}
 80056ac:	bf00      	nop
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	021a      	lsls	r2, r3, #8
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	431a      	orrs	r2, r3
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	4313      	orrs	r3, r2
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	609a      	str	r2, [r3, #8]
}
 80056ec:	bf00      	nop
 80056ee:	371c      	adds	r7, #28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800570c:	2302      	movs	r3, #2
 800570e:	e04f      	b.n	80057b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a21      	ldr	r2, [pc, #132]	@ (80057bc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d108      	bne.n	800574c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005740:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	4313      	orrs	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005752:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a14      	ldr	r2, [pc, #80]	@ (80057bc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d009      	beq.n	8005784 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005778:	d004      	beq.n	8005784 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a10      	ldr	r2, [pc, #64]	@ (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d10c      	bne.n	800579e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800578a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	4313      	orrs	r3, r2
 8005794:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	40012c00 	.word	0x40012c00
 80057c0:	40014000 	.word	0x40014000

080057c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e040      	b.n	8005858 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d106      	bne.n	80057ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7fc f872 	bl	80018d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2224      	movs	r2, #36	@ 0x24
 80057f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 0201 	bic.w	r2, r2, #1
 8005800:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fa54 	bl	8005cb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f825 	bl	8005860 <UART_SetConfig>
 8005816:	4603      	mov	r3, r0
 8005818:	2b01      	cmp	r3, #1
 800581a:	d101      	bne.n	8005820 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e01b      	b.n	8005858 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800582e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689a      	ldr	r2, [r3, #8]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800583e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0201 	orr.w	r2, r2, #1
 800584e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fad3 	bl	8005dfc <UART_CheckIdleState>
 8005856:	4603      	mov	r3, r0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005864:	b08a      	sub	sp, #40	@ 0x28
 8005866:	af00      	add	r7, sp, #0
 8005868:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	431a      	orrs	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	431a      	orrs	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	4313      	orrs	r3, r2
 8005886:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	4bb4      	ldr	r3, [pc, #720]	@ (8005b60 <UART_SetConfig+0x300>)
 8005890:	4013      	ands	r3, r2
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	6812      	ldr	r2, [r2, #0]
 8005896:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005898:	430b      	orrs	r3, r1
 800589a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	68da      	ldr	r2, [r3, #12]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4aa9      	ldr	r2, [pc, #676]	@ (8005b64 <UART_SetConfig+0x304>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d004      	beq.n	80058cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058c8:	4313      	orrs	r3, r2
 80058ca:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058dc:	430a      	orrs	r2, r1
 80058de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4aa0      	ldr	r2, [pc, #640]	@ (8005b68 <UART_SetConfig+0x308>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d126      	bne.n	8005938 <UART_SetConfig+0xd8>
 80058ea:	4ba0      	ldr	r3, [pc, #640]	@ (8005b6c <UART_SetConfig+0x30c>)
 80058ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f0:	f003 0303 	and.w	r3, r3, #3
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d81b      	bhi.n	8005930 <UART_SetConfig+0xd0>
 80058f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005900 <UART_SetConfig+0xa0>)
 80058fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fe:	bf00      	nop
 8005900:	08005911 	.word	0x08005911
 8005904:	08005921 	.word	0x08005921
 8005908:	08005919 	.word	0x08005919
 800590c:	08005929 	.word	0x08005929
 8005910:	2301      	movs	r3, #1
 8005912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005916:	e080      	b.n	8005a1a <UART_SetConfig+0x1ba>
 8005918:	2302      	movs	r3, #2
 800591a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800591e:	e07c      	b.n	8005a1a <UART_SetConfig+0x1ba>
 8005920:	2304      	movs	r3, #4
 8005922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005926:	e078      	b.n	8005a1a <UART_SetConfig+0x1ba>
 8005928:	2308      	movs	r3, #8
 800592a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800592e:	e074      	b.n	8005a1a <UART_SetConfig+0x1ba>
 8005930:	2310      	movs	r3, #16
 8005932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005936:	e070      	b.n	8005a1a <UART_SetConfig+0x1ba>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a8c      	ldr	r2, [pc, #560]	@ (8005b70 <UART_SetConfig+0x310>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d138      	bne.n	80059b4 <UART_SetConfig+0x154>
 8005942:	4b8a      	ldr	r3, [pc, #552]	@ (8005b6c <UART_SetConfig+0x30c>)
 8005944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005948:	f003 030c 	and.w	r3, r3, #12
 800594c:	2b0c      	cmp	r3, #12
 800594e:	d82d      	bhi.n	80059ac <UART_SetConfig+0x14c>
 8005950:	a201      	add	r2, pc, #4	@ (adr r2, 8005958 <UART_SetConfig+0xf8>)
 8005952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005956:	bf00      	nop
 8005958:	0800598d 	.word	0x0800598d
 800595c:	080059ad 	.word	0x080059ad
 8005960:	080059ad 	.word	0x080059ad
 8005964:	080059ad 	.word	0x080059ad
 8005968:	0800599d 	.word	0x0800599d
 800596c:	080059ad 	.word	0x080059ad
 8005970:	080059ad 	.word	0x080059ad
 8005974:	080059ad 	.word	0x080059ad
 8005978:	08005995 	.word	0x08005995
 800597c:	080059ad 	.word	0x080059ad
 8005980:	080059ad 	.word	0x080059ad
 8005984:	080059ad 	.word	0x080059ad
 8005988:	080059a5 	.word	0x080059a5
 800598c:	2300      	movs	r3, #0
 800598e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005992:	e042      	b.n	8005a1a <UART_SetConfig+0x1ba>
 8005994:	2302      	movs	r3, #2
 8005996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800599a:	e03e      	b.n	8005a1a <UART_SetConfig+0x1ba>
 800599c:	2304      	movs	r3, #4
 800599e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059a2:	e03a      	b.n	8005a1a <UART_SetConfig+0x1ba>
 80059a4:	2308      	movs	r3, #8
 80059a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059aa:	e036      	b.n	8005a1a <UART_SetConfig+0x1ba>
 80059ac:	2310      	movs	r3, #16
 80059ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059b2:	e032      	b.n	8005a1a <UART_SetConfig+0x1ba>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a6a      	ldr	r2, [pc, #424]	@ (8005b64 <UART_SetConfig+0x304>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d12a      	bne.n	8005a14 <UART_SetConfig+0x1b4>
 80059be:	4b6b      	ldr	r3, [pc, #428]	@ (8005b6c <UART_SetConfig+0x30c>)
 80059c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80059c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059cc:	d01a      	beq.n	8005a04 <UART_SetConfig+0x1a4>
 80059ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059d2:	d81b      	bhi.n	8005a0c <UART_SetConfig+0x1ac>
 80059d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059d8:	d00c      	beq.n	80059f4 <UART_SetConfig+0x194>
 80059da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059de:	d815      	bhi.n	8005a0c <UART_SetConfig+0x1ac>
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <UART_SetConfig+0x18c>
 80059e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059e8:	d008      	beq.n	80059fc <UART_SetConfig+0x19c>
 80059ea:	e00f      	b.n	8005a0c <UART_SetConfig+0x1ac>
 80059ec:	2300      	movs	r3, #0
 80059ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059f2:	e012      	b.n	8005a1a <UART_SetConfig+0x1ba>
 80059f4:	2302      	movs	r3, #2
 80059f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059fa:	e00e      	b.n	8005a1a <UART_SetConfig+0x1ba>
 80059fc:	2304      	movs	r3, #4
 80059fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a02:	e00a      	b.n	8005a1a <UART_SetConfig+0x1ba>
 8005a04:	2308      	movs	r3, #8
 8005a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a0a:	e006      	b.n	8005a1a <UART_SetConfig+0x1ba>
 8005a0c:	2310      	movs	r3, #16
 8005a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a12:	e002      	b.n	8005a1a <UART_SetConfig+0x1ba>
 8005a14:	2310      	movs	r3, #16
 8005a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a51      	ldr	r2, [pc, #324]	@ (8005b64 <UART_SetConfig+0x304>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d17a      	bne.n	8005b1a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d824      	bhi.n	8005a76 <UART_SetConfig+0x216>
 8005a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a34 <UART_SetConfig+0x1d4>)
 8005a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a32:	bf00      	nop
 8005a34:	08005a59 	.word	0x08005a59
 8005a38:	08005a77 	.word	0x08005a77
 8005a3c:	08005a61 	.word	0x08005a61
 8005a40:	08005a77 	.word	0x08005a77
 8005a44:	08005a67 	.word	0x08005a67
 8005a48:	08005a77 	.word	0x08005a77
 8005a4c:	08005a77 	.word	0x08005a77
 8005a50:	08005a77 	.word	0x08005a77
 8005a54:	08005a6f 	.word	0x08005a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a58:	f7fe fcf8 	bl	800444c <HAL_RCC_GetPCLK1Freq>
 8005a5c:	61f8      	str	r0, [r7, #28]
        break;
 8005a5e:	e010      	b.n	8005a82 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a60:	4b44      	ldr	r3, [pc, #272]	@ (8005b74 <UART_SetConfig+0x314>)
 8005a62:	61fb      	str	r3, [r7, #28]
        break;
 8005a64:	e00d      	b.n	8005a82 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a66:	f7fe fc59 	bl	800431c <HAL_RCC_GetSysClockFreq>
 8005a6a:	61f8      	str	r0, [r7, #28]
        break;
 8005a6c:	e009      	b.n	8005a82 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a72:	61fb      	str	r3, [r7, #28]
        break;
 8005a74:	e005      	b.n	8005a82 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 8107 	beq.w	8005c98 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	4413      	add	r3, r2
 8005a94:	69fa      	ldr	r2, [r7, #28]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d305      	bcc.n	8005aa6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005aa0:	69fa      	ldr	r2, [r7, #28]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d903      	bls.n	8005aae <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005aac:	e0f4      	b.n	8005c98 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	461c      	mov	r4, r3
 8005ab4:	4615      	mov	r5, r2
 8005ab6:	f04f 0200 	mov.w	r2, #0
 8005aba:	f04f 0300 	mov.w	r3, #0
 8005abe:	022b      	lsls	r3, r5, #8
 8005ac0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005ac4:	0222      	lsls	r2, r4, #8
 8005ac6:	68f9      	ldr	r1, [r7, #12]
 8005ac8:	6849      	ldr	r1, [r1, #4]
 8005aca:	0849      	lsrs	r1, r1, #1
 8005acc:	2000      	movs	r0, #0
 8005ace:	4688      	mov	r8, r1
 8005ad0:	4681      	mov	r9, r0
 8005ad2:	eb12 0a08 	adds.w	sl, r2, r8
 8005ad6:	eb43 0b09 	adc.w	fp, r3, r9
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	603b      	str	r3, [r7, #0]
 8005ae2:	607a      	str	r2, [r7, #4]
 8005ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ae8:	4650      	mov	r0, sl
 8005aea:	4659      	mov	r1, fp
 8005aec:	f7fb f87c 	bl	8000be8 <__aeabi_uldivmod>
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	4613      	mov	r3, r2
 8005af6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005afe:	d308      	bcc.n	8005b12 <UART_SetConfig+0x2b2>
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b06:	d204      	bcs.n	8005b12 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	60da      	str	r2, [r3, #12]
 8005b10:	e0c2      	b.n	8005c98 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005b18:	e0be      	b.n	8005c98 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b22:	d16a      	bne.n	8005bfa <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005b24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	d834      	bhi.n	8005b96 <UART_SetConfig+0x336>
 8005b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b34 <UART_SetConfig+0x2d4>)
 8005b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b32:	bf00      	nop
 8005b34:	08005b59 	.word	0x08005b59
 8005b38:	08005b79 	.word	0x08005b79
 8005b3c:	08005b81 	.word	0x08005b81
 8005b40:	08005b97 	.word	0x08005b97
 8005b44:	08005b87 	.word	0x08005b87
 8005b48:	08005b97 	.word	0x08005b97
 8005b4c:	08005b97 	.word	0x08005b97
 8005b50:	08005b97 	.word	0x08005b97
 8005b54:	08005b8f 	.word	0x08005b8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b58:	f7fe fc78 	bl	800444c <HAL_RCC_GetPCLK1Freq>
 8005b5c:	61f8      	str	r0, [r7, #28]
        break;
 8005b5e:	e020      	b.n	8005ba2 <UART_SetConfig+0x342>
 8005b60:	efff69f3 	.word	0xefff69f3
 8005b64:	40008000 	.word	0x40008000
 8005b68:	40013800 	.word	0x40013800
 8005b6c:	40021000 	.word	0x40021000
 8005b70:	40004400 	.word	0x40004400
 8005b74:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b78:	f7fe fc7e 	bl	8004478 <HAL_RCC_GetPCLK2Freq>
 8005b7c:	61f8      	str	r0, [r7, #28]
        break;
 8005b7e:	e010      	b.n	8005ba2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b80:	4b4c      	ldr	r3, [pc, #304]	@ (8005cb4 <UART_SetConfig+0x454>)
 8005b82:	61fb      	str	r3, [r7, #28]
        break;
 8005b84:	e00d      	b.n	8005ba2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b86:	f7fe fbc9 	bl	800431c <HAL_RCC_GetSysClockFreq>
 8005b8a:	61f8      	str	r0, [r7, #28]
        break;
 8005b8c:	e009      	b.n	8005ba2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b92:	61fb      	str	r3, [r7, #28]
        break;
 8005b94:	e005      	b.n	8005ba2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ba0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d077      	beq.n	8005c98 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	005a      	lsls	r2, r3, #1
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	085b      	lsrs	r3, r3, #1
 8005bb2:	441a      	add	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bbc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	2b0f      	cmp	r3, #15
 8005bc2:	d916      	bls.n	8005bf2 <UART_SetConfig+0x392>
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bca:	d212      	bcs.n	8005bf2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	f023 030f 	bic.w	r3, r3, #15
 8005bd4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	085b      	lsrs	r3, r3, #1
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	f003 0307 	and.w	r3, r3, #7
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	8afb      	ldrh	r3, [r7, #22]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	8afa      	ldrh	r2, [r7, #22]
 8005bee:	60da      	str	r2, [r3, #12]
 8005bf0:	e052      	b.n	8005c98 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005bf8:	e04e      	b.n	8005c98 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bfa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005bfe:	2b08      	cmp	r3, #8
 8005c00:	d827      	bhi.n	8005c52 <UART_SetConfig+0x3f2>
 8005c02:	a201      	add	r2, pc, #4	@ (adr r2, 8005c08 <UART_SetConfig+0x3a8>)
 8005c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c08:	08005c2d 	.word	0x08005c2d
 8005c0c:	08005c35 	.word	0x08005c35
 8005c10:	08005c3d 	.word	0x08005c3d
 8005c14:	08005c53 	.word	0x08005c53
 8005c18:	08005c43 	.word	0x08005c43
 8005c1c:	08005c53 	.word	0x08005c53
 8005c20:	08005c53 	.word	0x08005c53
 8005c24:	08005c53 	.word	0x08005c53
 8005c28:	08005c4b 	.word	0x08005c4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c2c:	f7fe fc0e 	bl	800444c <HAL_RCC_GetPCLK1Freq>
 8005c30:	61f8      	str	r0, [r7, #28]
        break;
 8005c32:	e014      	b.n	8005c5e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c34:	f7fe fc20 	bl	8004478 <HAL_RCC_GetPCLK2Freq>
 8005c38:	61f8      	str	r0, [r7, #28]
        break;
 8005c3a:	e010      	b.n	8005c5e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8005cb4 <UART_SetConfig+0x454>)
 8005c3e:	61fb      	str	r3, [r7, #28]
        break;
 8005c40:	e00d      	b.n	8005c5e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c42:	f7fe fb6b 	bl	800431c <HAL_RCC_GetSysClockFreq>
 8005c46:	61f8      	str	r0, [r7, #28]
        break;
 8005c48:	e009      	b.n	8005c5e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c4e:	61fb      	str	r3, [r7, #28]
        break;
 8005c50:	e005      	b.n	8005c5e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005c5c:	bf00      	nop
    }

    if (pclk != 0U)
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d019      	beq.n	8005c98 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	085a      	lsrs	r2, r3, #1
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	441a      	add	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c76:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	2b0f      	cmp	r3, #15
 8005c7c:	d909      	bls.n	8005c92 <UART_SetConfig+0x432>
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c84:	d205      	bcs.n	8005c92 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	60da      	str	r2, [r3, #12]
 8005c90:	e002      	b.n	8005c98 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005ca4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3728      	adds	r7, #40	@ 0x28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cb2:	bf00      	nop
 8005cb4:	00f42400 	.word	0x00f42400

08005cb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00a      	beq.n	8005ce2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00a      	beq.n	8005d26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2a:	f003 0304 	and.w	r3, r3, #4
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00a      	beq.n	8005d48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4c:	f003 0310 	and.w	r3, r3, #16
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00a      	beq.n	8005d6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6e:	f003 0320 	and.w	r3, r3, #32
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00a      	beq.n	8005d8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d01a      	beq.n	8005dce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005db6:	d10a      	bne.n	8005dce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	605a      	str	r2, [r3, #4]
  }
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b098      	sub	sp, #96	@ 0x60
 8005e00:	af02      	add	r7, sp, #8
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e0c:	f7fb ffa4 	bl	8001d58 <HAL_GetTick>
 8005e10:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	d12e      	bne.n	8005e7e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f88c 	bl	8005f4c <UART_WaitOnFlagUntilTimeout>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d021      	beq.n	8005e7e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e42:	e853 3f00 	ldrex	r3, [r3]
 8005e46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	461a      	mov	r2, r3
 8005e56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e58:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e5a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e60:	e841 2300 	strex	r3, r2, [r1]
 8005e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1e6      	bne.n	8005e3a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e062      	b.n	8005f44 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b04      	cmp	r3, #4
 8005e8a:	d149      	bne.n	8005f20 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e94:	2200      	movs	r2, #0
 8005e96:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f856 	bl	8005f4c <UART_WaitOnFlagUntilTimeout>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d03c      	beq.n	8005f20 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eae:	e853 3f00 	ldrex	r3, [r3]
 8005eb2:	623b      	str	r3, [r7, #32]
   return(result);
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ec4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ec6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005eca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ecc:	e841 2300 	strex	r3, r2, [r1]
 8005ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1e6      	bne.n	8005ea6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3308      	adds	r3, #8
 8005ede:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	e853 3f00 	ldrex	r3, [r3]
 8005ee6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f023 0301 	bic.w	r3, r3, #1
 8005eee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	3308      	adds	r3, #8
 8005ef6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ef8:	61fa      	str	r2, [r7, #28]
 8005efa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efc:	69b9      	ldr	r1, [r7, #24]
 8005efe:	69fa      	ldr	r2, [r7, #28]
 8005f00:	e841 2300 	strex	r3, r2, [r1]
 8005f04:	617b      	str	r3, [r7, #20]
   return(result);
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1e5      	bne.n	8005ed8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e011      	b.n	8005f44 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2220      	movs	r2, #32
 8005f24:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3758      	adds	r7, #88	@ 0x58
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	603b      	str	r3, [r7, #0]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f5c:	e04f      	b.n	8005ffe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f64:	d04b      	beq.n	8005ffe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f66:	f7fb fef7 	bl	8001d58 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d302      	bcc.n	8005f7c <UART_WaitOnFlagUntilTimeout+0x30>
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e04e      	b.n	800601e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0304 	and.w	r3, r3, #4
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d037      	beq.n	8005ffe <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	2b80      	cmp	r3, #128	@ 0x80
 8005f92:	d034      	beq.n	8005ffe <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2b40      	cmp	r3, #64	@ 0x40
 8005f98:	d031      	beq.n	8005ffe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	f003 0308 	and.w	r3, r3, #8
 8005fa4:	2b08      	cmp	r3, #8
 8005fa6:	d110      	bne.n	8005fca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2208      	movs	r2, #8
 8005fae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 f838 	bl	8006026 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2208      	movs	r2, #8
 8005fba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e029      	b.n	800601e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fd8:	d111      	bne.n	8005ffe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005fe2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 f81e 	bl	8006026 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2220      	movs	r2, #32
 8005fee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e00f      	b.n	800601e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	69da      	ldr	r2, [r3, #28]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	4013      	ands	r3, r2
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	429a      	cmp	r2, r3
 800600c:	bf0c      	ite	eq
 800600e:	2301      	moveq	r3, #1
 8006010:	2300      	movne	r3, #0
 8006012:	b2db      	uxtb	r3, r3
 8006014:	461a      	mov	r2, r3
 8006016:	79fb      	ldrb	r3, [r7, #7]
 8006018:	429a      	cmp	r2, r3
 800601a:	d0a0      	beq.n	8005f5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006026:	b480      	push	{r7}
 8006028:	b095      	sub	sp, #84	@ 0x54
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006036:	e853 3f00 	ldrex	r3, [r3]
 800603a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800603c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006042:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	461a      	mov	r2, r3
 800604a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800604c:	643b      	str	r3, [r7, #64]	@ 0x40
 800604e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006052:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006054:	e841 2300 	strex	r3, r2, [r1]
 8006058:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800605a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e6      	bne.n	800602e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3308      	adds	r3, #8
 8006066:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	e853 3f00 	ldrex	r3, [r3]
 800606e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	f023 0301 	bic.w	r3, r3, #1
 8006076:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	3308      	adds	r3, #8
 800607e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006080:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006082:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006084:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006086:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006088:	e841 2300 	strex	r3, r2, [r1]
 800608c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800608e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1e5      	bne.n	8006060 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006098:	2b01      	cmp	r3, #1
 800609a:	d118      	bne.n	80060ce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	e853 3f00 	ldrex	r3, [r3]
 80060a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f023 0310 	bic.w	r3, r3, #16
 80060b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	461a      	mov	r2, r3
 80060b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060ba:	61bb      	str	r3, [r7, #24]
 80060bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060be:	6979      	ldr	r1, [r7, #20]
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	e841 2300 	strex	r3, r2, [r1]
 80060c6:	613b      	str	r3, [r7, #16]
   return(result);
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1e6      	bne.n	800609c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80060e2:	bf00      	nop
 80060e4:	3754      	adds	r7, #84	@ 0x54
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
	...

080060f0 <arm_mean_f32>:
 80060f0:	b430      	push	{r4, r5}
 80060f2:	088d      	lsrs	r5, r1, #2
 80060f4:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8006168 <arm_mean_f32+0x78>
 80060f8:	d018      	beq.n	800612c <arm_mean_f32+0x3c>
 80060fa:	f100 0310 	add.w	r3, r0, #16
 80060fe:	462c      	mov	r4, r5
 8006100:	ed53 5a04 	vldr	s11, [r3, #-16]
 8006104:	ed13 6a03 	vldr	s12, [r3, #-12]
 8006108:	ed53 6a02 	vldr	s13, [r3, #-8]
 800610c:	ed13 7a01 	vldr	s14, [r3, #-4]
 8006110:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006114:	3c01      	subs	r4, #1
 8006116:	ee77 7a86 	vadd.f32	s15, s15, s12
 800611a:	f103 0310 	add.w	r3, r3, #16
 800611e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006122:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006126:	d1eb      	bne.n	8006100 <arm_mean_f32+0x10>
 8006128:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800612c:	f011 0303 	ands.w	r3, r1, #3
 8006130:	d00f      	beq.n	8006152 <arm_mean_f32+0x62>
 8006132:	ed90 7a00 	vldr	s14, [r0]
 8006136:	3b01      	subs	r3, #1
 8006138:	ee77 7a87 	vadd.f32	s15, s15, s14
 800613c:	d009      	beq.n	8006152 <arm_mean_f32+0x62>
 800613e:	ed90 7a01 	vldr	s14, [r0, #4]
 8006142:	2b01      	cmp	r3, #1
 8006144:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006148:	bf1c      	itt	ne
 800614a:	ed90 7a02 	vldrne	s14, [r0, #8]
 800614e:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8006152:	ee07 1a10 	vmov	s14, r1
 8006156:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800615a:	bc30      	pop	{r4, r5}
 800615c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006160:	edc2 6a00 	vstr	s13, [r2]
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	00000000 	.word	0x00000000

0800616c <arm_rfft_32_fast_init_f32>:
 800616c:	b178      	cbz	r0, 800618e <arm_rfft_32_fast_init_f32+0x22>
 800616e:	b430      	push	{r4, r5}
 8006170:	4908      	ldr	r1, [pc, #32]	@ (8006194 <arm_rfft_32_fast_init_f32+0x28>)
 8006172:	4a09      	ldr	r2, [pc, #36]	@ (8006198 <arm_rfft_32_fast_init_f32+0x2c>)
 8006174:	2310      	movs	r3, #16
 8006176:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800617a:	8003      	strh	r3, [r0, #0]
 800617c:	2520      	movs	r5, #32
 800617e:	2414      	movs	r4, #20
 8006180:	4b06      	ldr	r3, [pc, #24]	@ (800619c <arm_rfft_32_fast_init_f32+0x30>)
 8006182:	8205      	strh	r5, [r0, #16]
 8006184:	8184      	strh	r4, [r0, #12]
 8006186:	6143      	str	r3, [r0, #20]
 8006188:	bc30      	pop	{r4, r5}
 800618a:	2000      	movs	r0, #0
 800618c:	4770      	bx	lr
 800618e:	f04f 30ff 	mov.w	r0, #4294967295
 8006192:	4770      	bx	lr
 8006194:	0800abe0 	.word	0x0800abe0
 8006198:	0800f518 	.word	0x0800f518
 800619c:	08018298 	.word	0x08018298

080061a0 <arm_rfft_64_fast_init_f32>:
 80061a0:	b178      	cbz	r0, 80061c2 <arm_rfft_64_fast_init_f32+0x22>
 80061a2:	b430      	push	{r4, r5}
 80061a4:	4908      	ldr	r1, [pc, #32]	@ (80061c8 <arm_rfft_64_fast_init_f32+0x28>)
 80061a6:	4a09      	ldr	r2, [pc, #36]	@ (80061cc <arm_rfft_64_fast_init_f32+0x2c>)
 80061a8:	2320      	movs	r3, #32
 80061aa:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80061ae:	8003      	strh	r3, [r0, #0]
 80061b0:	2540      	movs	r5, #64	@ 0x40
 80061b2:	2430      	movs	r4, #48	@ 0x30
 80061b4:	4b06      	ldr	r3, [pc, #24]	@ (80061d0 <arm_rfft_64_fast_init_f32+0x30>)
 80061b6:	8205      	strh	r5, [r0, #16]
 80061b8:	8184      	strh	r4, [r0, #12]
 80061ba:	6143      	str	r3, [r0, #20]
 80061bc:	bc30      	pop	{r4, r5}
 80061be:	2000      	movs	r0, #0
 80061c0:	4770      	bx	lr
 80061c2:	f04f 30ff 	mov.w	r0, #4294967295
 80061c6:	4770      	bx	lr
 80061c8:	0800cd38 	.word	0x0800cd38
 80061cc:	08013d98 	.word	0x08013d98
 80061d0:	0801cb18 	.word	0x0801cb18

080061d4 <arm_rfft_256_fast_init_f32>:
 80061d4:	b180      	cbz	r0, 80061f8 <arm_rfft_256_fast_init_f32+0x24>
 80061d6:	b430      	push	{r4, r5}
 80061d8:	4909      	ldr	r1, [pc, #36]	@ (8006200 <arm_rfft_256_fast_init_f32+0x2c>)
 80061da:	4a0a      	ldr	r2, [pc, #40]	@ (8006204 <arm_rfft_256_fast_init_f32+0x30>)
 80061dc:	2380      	movs	r3, #128	@ 0x80
 80061de:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80061e2:	8003      	strh	r3, [r0, #0]
 80061e4:	f44f 7580 	mov.w	r5, #256	@ 0x100
 80061e8:	24d0      	movs	r4, #208	@ 0xd0
 80061ea:	4b07      	ldr	r3, [pc, #28]	@ (8006208 <arm_rfft_256_fast_init_f32+0x34>)
 80061ec:	8205      	strh	r5, [r0, #16]
 80061ee:	8184      	strh	r4, [r0, #12]
 80061f0:	6143      	str	r3, [r0, #20]
 80061f2:	bc30      	pop	{r4, r5}
 80061f4:	2000      	movs	r0, #0
 80061f6:	4770      	bx	lr
 80061f8:	f04f 30ff 	mov.w	r0, #4294967295
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	0800aa40 	.word	0x0800aa40
 8006204:	0800f118 	.word	0x0800f118
 8006208:	08017e98 	.word	0x08017e98

0800620c <arm_rfft_512_fast_init_f32>:
 800620c:	b190      	cbz	r0, 8006234 <arm_rfft_512_fast_init_f32+0x28>
 800620e:	b430      	push	{r4, r5}
 8006210:	490a      	ldr	r1, [pc, #40]	@ (800623c <arm_rfft_512_fast_init_f32+0x30>)
 8006212:	4a0b      	ldr	r2, [pc, #44]	@ (8006240 <arm_rfft_512_fast_init_f32+0x34>)
 8006214:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006218:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800621c:	8003      	strh	r3, [r0, #0]
 800621e:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8006222:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 8006226:	4b07      	ldr	r3, [pc, #28]	@ (8006244 <arm_rfft_512_fast_init_f32+0x38>)
 8006228:	8205      	strh	r5, [r0, #16]
 800622a:	8184      	strh	r4, [r0, #12]
 800622c:	6143      	str	r3, [r0, #20]
 800622e:	bc30      	pop	{r4, r5}
 8006230:	2000      	movs	r0, #0
 8006232:	4770      	bx	lr
 8006234:	f04f 30ff 	mov.w	r0, #4294967295
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	0800c9c8 	.word	0x0800c9c8
 8006240:	08013598 	.word	0x08013598
 8006244:	0801c318 	.word	0x0801c318

08006248 <arm_rfft_1024_fast_init_f32>:
 8006248:	b190      	cbz	r0, 8006270 <arm_rfft_1024_fast_init_f32+0x28>
 800624a:	b430      	push	{r4, r5}
 800624c:	490a      	ldr	r1, [pc, #40]	@ (8006278 <arm_rfft_1024_fast_init_f32+0x30>)
 800624e:	4a0b      	ldr	r2, [pc, #44]	@ (800627c <arm_rfft_1024_fast_init_f32+0x34>)
 8006250:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006254:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006258:	8003      	strh	r3, [r0, #0]
 800625a:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 800625e:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 8006262:	4b07      	ldr	r3, [pc, #28]	@ (8006280 <arm_rfft_1024_fast_init_f32+0x38>)
 8006264:	8205      	strh	r5, [r0, #16]
 8006266:	8184      	strh	r4, [r0, #12]
 8006268:	6143      	str	r3, [r0, #20]
 800626a:	bc30      	pop	{r4, r5}
 800626c:	2000      	movs	r0, #0
 800626e:	4770      	bx	lr
 8006270:	f04f 30ff 	mov.w	r0, #4294967295
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	0800cd98 	.word	0x0800cd98
 800627c:	08013e98 	.word	0x08013e98
 8006280:	08014e98 	.word	0x08014e98

08006284 <arm_rfft_2048_fast_init_f32>:
 8006284:	b190      	cbz	r0, 80062ac <arm_rfft_2048_fast_init_f32+0x28>
 8006286:	b430      	push	{r4, r5}
 8006288:	490a      	ldr	r1, [pc, #40]	@ (80062b4 <arm_rfft_2048_fast_init_f32+0x30>)
 800628a:	4a0b      	ldr	r2, [pc, #44]	@ (80062b8 <arm_rfft_2048_fast_init_f32+0x34>)
 800628c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006290:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006294:	8003      	strh	r3, [r0, #0]
 8006296:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800629a:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 800629e:	4b07      	ldr	r3, [pc, #28]	@ (80062bc <arm_rfft_2048_fast_init_f32+0x38>)
 80062a0:	8205      	strh	r5, [r0, #16]
 80062a2:	8184      	strh	r4, [r0, #12]
 80062a4:	6143      	str	r3, [r0, #20]
 80062a6:	bc30      	pop	{r4, r5}
 80062a8:	2000      	movs	r0, #0
 80062aa:	4770      	bx	lr
 80062ac:	f04f 30ff 	mov.w	r0, #4294967295
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	08009c30 	.word	0x08009c30
 80062b8:	0800d118 	.word	0x0800d118
 80062bc:	08015e98 	.word	0x08015e98

080062c0 <arm_rfft_4096_fast_init_f32>:
 80062c0:	b190      	cbz	r0, 80062e8 <arm_rfft_4096_fast_init_f32+0x28>
 80062c2:	b430      	push	{r4, r5}
 80062c4:	490a      	ldr	r1, [pc, #40]	@ (80062f0 <arm_rfft_4096_fast_init_f32+0x30>)
 80062c6:	4a0b      	ldr	r2, [pc, #44]	@ (80062f4 <arm_rfft_4096_fast_init_f32+0x34>)
 80062c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80062cc:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80062d0:	8003      	strh	r3, [r0, #0]
 80062d2:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 80062d6:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 80062da:	4b07      	ldr	r3, [pc, #28]	@ (80062f8 <arm_rfft_4096_fast_init_f32+0x38>)
 80062dc:	8205      	strh	r5, [r0, #16]
 80062de:	8184      	strh	r4, [r0, #12]
 80062e0:	6143      	str	r3, [r0, #20]
 80062e2:	bc30      	pop	{r4, r5}
 80062e4:	2000      	movs	r0, #0
 80062e6:	4770      	bx	lr
 80062e8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	0800ac08 	.word	0x0800ac08
 80062f4:	0800f598 	.word	0x0800f598
 80062f8:	08018318 	.word	0x08018318

080062fc <arm_rfft_fast_init_f32>:
 80062fc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006300:	d01f      	beq.n	8006342 <arm_rfft_fast_init_f32+0x46>
 8006302:	d90b      	bls.n	800631c <arm_rfft_fast_init_f32+0x20>
 8006304:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8006308:	d019      	beq.n	800633e <arm_rfft_fast_init_f32+0x42>
 800630a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800630e:	d012      	beq.n	8006336 <arm_rfft_fast_init_f32+0x3a>
 8006310:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006314:	d00d      	beq.n	8006332 <arm_rfft_fast_init_f32+0x36>
 8006316:	f04f 30ff 	mov.w	r0, #4294967295
 800631a:	4770      	bx	lr
 800631c:	2940      	cmp	r1, #64	@ 0x40
 800631e:	d00c      	beq.n	800633a <arm_rfft_fast_init_f32+0x3e>
 8006320:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8006324:	d003      	beq.n	800632e <arm_rfft_fast_init_f32+0x32>
 8006326:	2920      	cmp	r1, #32
 8006328:	d1f5      	bne.n	8006316 <arm_rfft_fast_init_f32+0x1a>
 800632a:	4b07      	ldr	r3, [pc, #28]	@ (8006348 <arm_rfft_fast_init_f32+0x4c>)
 800632c:	4718      	bx	r3
 800632e:	4b07      	ldr	r3, [pc, #28]	@ (800634c <arm_rfft_fast_init_f32+0x50>)
 8006330:	4718      	bx	r3
 8006332:	4b07      	ldr	r3, [pc, #28]	@ (8006350 <arm_rfft_fast_init_f32+0x54>)
 8006334:	4718      	bx	r3
 8006336:	4b07      	ldr	r3, [pc, #28]	@ (8006354 <arm_rfft_fast_init_f32+0x58>)
 8006338:	4718      	bx	r3
 800633a:	4b07      	ldr	r3, [pc, #28]	@ (8006358 <arm_rfft_fast_init_f32+0x5c>)
 800633c:	e7f6      	b.n	800632c <arm_rfft_fast_init_f32+0x30>
 800633e:	4b07      	ldr	r3, [pc, #28]	@ (800635c <arm_rfft_fast_init_f32+0x60>)
 8006340:	e7f4      	b.n	800632c <arm_rfft_fast_init_f32+0x30>
 8006342:	4b07      	ldr	r3, [pc, #28]	@ (8006360 <arm_rfft_fast_init_f32+0x64>)
 8006344:	e7f2      	b.n	800632c <arm_rfft_fast_init_f32+0x30>
 8006346:	bf00      	nop
 8006348:	0800616d 	.word	0x0800616d
 800634c:	080061d5 	.word	0x080061d5
 8006350:	08006249 	.word	0x08006249
 8006354:	080062c1 	.word	0x080062c1
 8006358:	080061a1 	.word	0x080061a1
 800635c:	08006285 	.word	0x08006285
 8006360:	0800620d 	.word	0x0800620d

08006364 <stage_rfft_f32>:
 8006364:	b410      	push	{r4}
 8006366:	edd1 7a00 	vldr	s15, [r1]
 800636a:	ed91 7a01 	vldr	s14, [r1, #4]
 800636e:	8804      	ldrh	r4, [r0, #0]
 8006370:	6940      	ldr	r0, [r0, #20]
 8006372:	ee37 7a07 	vadd.f32	s14, s14, s14
 8006376:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800637a:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800637e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8006382:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006386:	3c01      	subs	r4, #1
 8006388:	ee26 7a84 	vmul.f32	s14, s13, s8
 800638c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006390:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8006394:	ed82 7a00 	vstr	s14, [r2]
 8006398:	edc2 7a01 	vstr	s15, [r2, #4]
 800639c:	3010      	adds	r0, #16
 800639e:	3210      	adds	r2, #16
 80063a0:	3b08      	subs	r3, #8
 80063a2:	3110      	adds	r1, #16
 80063a4:	ed11 5a02 	vldr	s10, [r1, #-8]
 80063a8:	ed93 7a02 	vldr	s14, [r3, #8]
 80063ac:	ed50 6a02 	vldr	s13, [r0, #-8]
 80063b0:	edd3 4a03 	vldr	s9, [r3, #12]
 80063b4:	ed51 7a01 	vldr	s15, [r1, #-4]
 80063b8:	ed10 6a01 	vldr	s12, [r0, #-4]
 80063bc:	ee77 5a45 	vsub.f32	s11, s14, s10
 80063c0:	ee37 7a05 	vadd.f32	s14, s14, s10
 80063c4:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80063c8:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80063cc:	ee66 5a25 	vmul.f32	s11, s12, s11
 80063d0:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80063d4:	ee37 7a23 	vadd.f32	s14, s14, s7
 80063d8:	ee66 6a85 	vmul.f32	s13, s13, s10
 80063dc:	ee26 6a05 	vmul.f32	s12, s12, s10
 80063e0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80063e4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80063e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80063ec:	ee27 7a04 	vmul.f32	s14, s14, s8
 80063f0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80063f4:	3c01      	subs	r4, #1
 80063f6:	ed02 7a02 	vstr	s14, [r2, #-8]
 80063fa:	ed42 7a01 	vstr	s15, [r2, #-4]
 80063fe:	f1a3 0308 	sub.w	r3, r3, #8
 8006402:	f101 0108 	add.w	r1, r1, #8
 8006406:	f100 0008 	add.w	r0, r0, #8
 800640a:	f102 0208 	add.w	r2, r2, #8
 800640e:	d1c9      	bne.n	80063a4 <stage_rfft_f32+0x40>
 8006410:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop

08006418 <merge_rfft_f32>:
 8006418:	b410      	push	{r4}
 800641a:	edd1 7a00 	vldr	s15, [r1]
 800641e:	edd1 6a01 	vldr	s13, [r1, #4]
 8006422:	8804      	ldrh	r4, [r0, #0]
 8006424:	6940      	ldr	r0, [r0, #20]
 8006426:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800642a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800642e:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8006432:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006436:	ee67 7a84 	vmul.f32	s15, s15, s8
 800643a:	3c01      	subs	r4, #1
 800643c:	ed82 7a00 	vstr	s14, [r2]
 8006440:	edc2 7a01 	vstr	s15, [r2, #4]
 8006444:	b3dc      	cbz	r4, 80064be <merge_rfft_f32+0xa6>
 8006446:	00e3      	lsls	r3, r4, #3
 8006448:	3b08      	subs	r3, #8
 800644a:	440b      	add	r3, r1
 800644c:	3010      	adds	r0, #16
 800644e:	3210      	adds	r2, #16
 8006450:	3110      	adds	r1, #16
 8006452:	ed11 5a02 	vldr	s10, [r1, #-8]
 8006456:	ed93 7a02 	vldr	s14, [r3, #8]
 800645a:	ed50 6a02 	vldr	s13, [r0, #-8]
 800645e:	edd3 4a03 	vldr	s9, [r3, #12]
 8006462:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006466:	ed10 6a01 	vldr	s12, [r0, #-4]
 800646a:	ee75 5a47 	vsub.f32	s11, s10, s14
 800646e:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006472:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8006476:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800647a:	ee66 5a25 	vmul.f32	s11, s12, s11
 800647e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8006482:	ee37 7a63 	vsub.f32	s14, s14, s7
 8006486:	ee66 6a85 	vmul.f32	s13, s13, s10
 800648a:	ee26 6a05 	vmul.f32	s12, s12, s10
 800648e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006492:	ee37 7a46 	vsub.f32	s14, s14, s12
 8006496:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800649a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800649e:	ee67 7a84 	vmul.f32	s15, s15, s8
 80064a2:	3c01      	subs	r4, #1
 80064a4:	ed02 7a02 	vstr	s14, [r2, #-8]
 80064a8:	ed42 7a01 	vstr	s15, [r2, #-4]
 80064ac:	f1a3 0308 	sub.w	r3, r3, #8
 80064b0:	f101 0108 	add.w	r1, r1, #8
 80064b4:	f100 0008 	add.w	r0, r0, #8
 80064b8:	f102 0208 	add.w	r2, r2, #8
 80064bc:	d1c9      	bne.n	8006452 <merge_rfft_f32+0x3a>
 80064be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <arm_rfft_fast_f32>:
 80064c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064c8:	8a05      	ldrh	r5, [r0, #16]
 80064ca:	086d      	lsrs	r5, r5, #1
 80064cc:	8005      	strh	r5, [r0, #0]
 80064ce:	4604      	mov	r4, r0
 80064d0:	4616      	mov	r6, r2
 80064d2:	461d      	mov	r5, r3
 80064d4:	b14b      	cbz	r3, 80064ea <arm_rfft_fast_f32+0x26>
 80064d6:	f7ff ff9f 	bl	8006418 <merge_rfft_f32>
 80064da:	462a      	mov	r2, r5
 80064dc:	4631      	mov	r1, r6
 80064de:	4620      	mov	r0, r4
 80064e0:	2301      	movs	r3, #1
 80064e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064e6:	f000 bb33 	b.w	8006b50 <arm_cfft_f32>
 80064ea:	460f      	mov	r7, r1
 80064ec:	461a      	mov	r2, r3
 80064ee:	2301      	movs	r3, #1
 80064f0:	f000 fb2e 	bl	8006b50 <arm_cfft_f32>
 80064f4:	4632      	mov	r2, r6
 80064f6:	4639      	mov	r1, r7
 80064f8:	4620      	mov	r0, r4
 80064fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064fe:	f7ff bf31 	b.w	8006364 <stage_rfft_f32>
 8006502:	bf00      	nop

08006504 <arm_cfft_radix8by2_f32>:
 8006504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006508:	ed2d 8b08 	vpush	{d8-d11}
 800650c:	4607      	mov	r7, r0
 800650e:	4608      	mov	r0, r1
 8006510:	f8b7 c000 	ldrh.w	ip, [r7]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800651a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800651e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006522:	f000 80b0 	beq.w	8006686 <arm_cfft_radix8by2_f32+0x182>
 8006526:	008c      	lsls	r4, r1, #2
 8006528:	3410      	adds	r4, #16
 800652a:	f100 0310 	add.w	r3, r0, #16
 800652e:	1906      	adds	r6, r0, r4
 8006530:	3210      	adds	r2, #16
 8006532:	4444      	add	r4, r8
 8006534:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8006538:	f108 0510 	add.w	r5, r8, #16
 800653c:	ed15 2a04 	vldr	s4, [r5, #-16]
 8006540:	ed55 2a03 	vldr	s5, [r5, #-12]
 8006544:	ed54 4a04 	vldr	s9, [r4, #-16]
 8006548:	ed14 4a03 	vldr	s8, [r4, #-12]
 800654c:	ed14 6a02 	vldr	s12, [r4, #-8]
 8006550:	ed54 5a01 	vldr	s11, [r4, #-4]
 8006554:	ed53 3a04 	vldr	s7, [r3, #-16]
 8006558:	ed15 0a02 	vldr	s0, [r5, #-8]
 800655c:	ed55 0a01 	vldr	s1, [r5, #-4]
 8006560:	ed56 6a04 	vldr	s13, [r6, #-16]
 8006564:	ed16 3a03 	vldr	s6, [r6, #-12]
 8006568:	ed13 7a03 	vldr	s14, [r3, #-12]
 800656c:	ed13 5a02 	vldr	s10, [r3, #-8]
 8006570:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006574:	ed16 1a02 	vldr	s2, [r6, #-8]
 8006578:	ed56 1a01 	vldr	s3, [r6, #-4]
 800657c:	ee73 ba82 	vadd.f32	s23, s7, s4
 8006580:	ee37 ba22 	vadd.f32	s22, s14, s5
 8006584:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8006588:	ee33 9a04 	vadd.f32	s18, s6, s8
 800658c:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8006590:	ee75 aa00 	vadd.f32	s21, s10, s0
 8006594:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8006598:	ee71 8a06 	vadd.f32	s17, s2, s12
 800659c:	ed43 ba04 	vstr	s23, [r3, #-16]
 80065a0:	ed03 ba03 	vstr	s22, [r3, #-12]
 80065a4:	ed43 aa02 	vstr	s21, [r3, #-8]
 80065a8:	ed03 aa01 	vstr	s20, [r3, #-4]
 80065ac:	ed06 8a01 	vstr	s16, [r6, #-4]
 80065b0:	ed46 9a04 	vstr	s19, [r6, #-16]
 80065b4:	ed06 9a03 	vstr	s18, [r6, #-12]
 80065b8:	ed46 8a02 	vstr	s17, [r6, #-8]
 80065bc:	ee37 7a62 	vsub.f32	s14, s14, s5
 80065c0:	ee74 4ae6 	vsub.f32	s9, s9, s13
 80065c4:	ee34 4a43 	vsub.f32	s8, s8, s6
 80065c8:	ed52 6a03 	vldr	s13, [r2, #-12]
 80065cc:	ed12 3a04 	vldr	s6, [r2, #-16]
 80065d0:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80065d4:	ee27 8a26 	vmul.f32	s16, s14, s13
 80065d8:	ee64 2aa6 	vmul.f32	s5, s9, s13
 80065dc:	ee23 2a83 	vmul.f32	s4, s7, s6
 80065e0:	ee64 4a83 	vmul.f32	s9, s9, s6
 80065e4:	ee63 3aa6 	vmul.f32	s7, s7, s13
 80065e8:	ee27 7a03 	vmul.f32	s14, s14, s6
 80065ec:	ee64 6a26 	vmul.f32	s13, s8, s13
 80065f0:	ee24 4a03 	vmul.f32	s8, s8, s6
 80065f4:	ee37 7a63 	vsub.f32	s14, s14, s7
 80065f8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80065fc:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8006600:	ee32 3a08 	vadd.f32	s6, s4, s16
 8006604:	ed05 7a03 	vstr	s14, [r5, #-12]
 8006608:	ed05 3a04 	vstr	s6, [r5, #-16]
 800660c:	ed04 4a04 	vstr	s8, [r4, #-16]
 8006610:	ed44 6a03 	vstr	s13, [r4, #-12]
 8006614:	ed12 7a01 	vldr	s14, [r2, #-4]
 8006618:	ee76 6a41 	vsub.f32	s13, s12, s2
 800661c:	ee35 5a40 	vsub.f32	s10, s10, s0
 8006620:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8006624:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8006628:	ed52 5a02 	vldr	s11, [r2, #-8]
 800662c:	ee67 3a87 	vmul.f32	s7, s15, s14
 8006630:	ee66 4a87 	vmul.f32	s9, s13, s14
 8006634:	ee25 4a25 	vmul.f32	s8, s10, s11
 8006638:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800663c:	ee25 5a07 	vmul.f32	s10, s10, s14
 8006640:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8006644:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006648:	ee26 6a25 	vmul.f32	s12, s12, s11
 800664c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8006650:	ee74 5a23 	vadd.f32	s11, s8, s7
 8006654:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8006658:	ee37 7a26 	vadd.f32	s14, s14, s13
 800665c:	3310      	adds	r3, #16
 800665e:	4563      	cmp	r3, ip
 8006660:	ed45 5a02 	vstr	s11, [r5, #-8]
 8006664:	f106 0610 	add.w	r6, r6, #16
 8006668:	ed45 7a01 	vstr	s15, [r5, #-4]
 800666c:	f102 0210 	add.w	r2, r2, #16
 8006670:	ed04 6a02 	vstr	s12, [r4, #-8]
 8006674:	ed04 7a01 	vstr	s14, [r4, #-4]
 8006678:	f105 0510 	add.w	r5, r5, #16
 800667c:	f104 0410 	add.w	r4, r4, #16
 8006680:	f47f af5c 	bne.w	800653c <arm_cfft_radix8by2_f32+0x38>
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	b28c      	uxth	r4, r1
 8006688:	4621      	mov	r1, r4
 800668a:	2302      	movs	r3, #2
 800668c:	f000 fb3c 	bl	8006d08 <arm_radix8_butterfly_f32>
 8006690:	ecbd 8b08 	vpop	{d8-d11}
 8006694:	4621      	mov	r1, r4
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	4640      	mov	r0, r8
 800669a:	2302      	movs	r3, #2
 800669c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066a0:	f000 bb32 	b.w	8006d08 <arm_radix8_butterfly_f32>

080066a4 <arm_cfft_radix8by4_f32>:
 80066a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a8:	ed2d 8b0a 	vpush	{d8-d12}
 80066ac:	b08d      	sub	sp, #52	@ 0x34
 80066ae:	460d      	mov	r5, r1
 80066b0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80066b2:	8801      	ldrh	r1, [r0, #0]
 80066b4:	6842      	ldr	r2, [r0, #4]
 80066b6:	900a      	str	r0, [sp, #40]	@ 0x28
 80066b8:	0849      	lsrs	r1, r1, #1
 80066ba:	008b      	lsls	r3, r1, #2
 80066bc:	18ee      	adds	r6, r5, r3
 80066be:	18f0      	adds	r0, r6, r3
 80066c0:	edd0 5a00 	vldr	s11, [r0]
 80066c4:	edd5 7a00 	vldr	s15, [r5]
 80066c8:	ed96 7a00 	vldr	s14, [r6]
 80066cc:	edd0 3a01 	vldr	s7, [r0, #4]
 80066d0:	ed96 4a01 	vldr	s8, [r6, #4]
 80066d4:	ed95 5a01 	vldr	s10, [r5, #4]
 80066d8:	9008      	str	r0, [sp, #32]
 80066da:	ee37 6aa5 	vadd.f32	s12, s15, s11
 80066de:	18c7      	adds	r7, r0, r3
 80066e0:	edd7 4a00 	vldr	s9, [r7]
 80066e4:	ed97 3a01 	vldr	s6, [r7, #4]
 80066e8:	9701      	str	r7, [sp, #4]
 80066ea:	ee77 6a06 	vadd.f32	s13, s14, s12
 80066ee:	462c      	mov	r4, r5
 80066f0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80066f4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80066f8:	ee16 ca90 	vmov	ip, s13
 80066fc:	f844 cb08 	str.w	ip, [r4], #8
 8006700:	ee75 6a23 	vadd.f32	s13, s10, s7
 8006704:	edd6 5a01 	vldr	s11, [r6, #4]
 8006708:	edd7 2a01 	vldr	s5, [r7, #4]
 800670c:	9404      	str	r4, [sp, #16]
 800670e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8006712:	ee74 3a27 	vadd.f32	s7, s8, s15
 8006716:	ee36 6a47 	vsub.f32	s12, s12, s14
 800671a:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800671e:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8006722:	0849      	lsrs	r1, r1, #1
 8006724:	f102 0e08 	add.w	lr, r2, #8
 8006728:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800672c:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8006730:	9109      	str	r1, [sp, #36]	@ 0x24
 8006732:	ee35 4a47 	vsub.f32	s8, s10, s14
 8006736:	f1a1 0902 	sub.w	r9, r1, #2
 800673a:	f8cd e00c 	str.w	lr, [sp, #12]
 800673e:	4631      	mov	r1, r6
 8006740:	ee13 ea90 	vmov	lr, s7
 8006744:	ee36 6a64 	vsub.f32	s12, s12, s9
 8006748:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800674c:	4604      	mov	r4, r0
 800674e:	edc5 5a01 	vstr	s11, [r5, #4]
 8006752:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006756:	f841 eb08 	str.w	lr, [r1], #8
 800675a:	ee34 5a24 	vadd.f32	s10, s8, s9
 800675e:	ee16 ea10 	vmov	lr, s12
 8006762:	ed86 5a01 	vstr	s10, [r6, #4]
 8006766:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800676a:	f844 eb08 	str.w	lr, [r4], #8
 800676e:	ee77 7a83 	vadd.f32	s15, s15, s6
 8006772:	edc0 6a01 	vstr	s13, [r0, #4]
 8006776:	9405      	str	r4, [sp, #20]
 8006778:	4604      	mov	r4, r0
 800677a:	ee17 0a90 	vmov	r0, s15
 800677e:	9106      	str	r1, [sp, #24]
 8006780:	ee37 7a64 	vsub.f32	s14, s14, s9
 8006784:	f102 0110 	add.w	r1, r2, #16
 8006788:	46bc      	mov	ip, r7
 800678a:	9100      	str	r1, [sp, #0]
 800678c:	f847 0b08 	str.w	r0, [r7], #8
 8006790:	f102 0118 	add.w	r1, r2, #24
 8006794:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8006798:	9102      	str	r1, [sp, #8]
 800679a:	ed8c 7a01 	vstr	s14, [ip, #4]
 800679e:	9007      	str	r0, [sp, #28]
 80067a0:	f000 8134 	beq.w	8006a0c <arm_cfft_radix8by4_f32+0x368>
 80067a4:	f102 0920 	add.w	r9, r2, #32
 80067a8:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 80067ac:	9a01      	ldr	r2, [sp, #4]
 80067ae:	f8dd a000 	ldr.w	sl, [sp]
 80067b2:	3b0c      	subs	r3, #12
 80067b4:	4683      	mov	fp, r0
 80067b6:	4463      	add	r3, ip
 80067b8:	f105 0e10 	add.w	lr, r5, #16
 80067bc:	f1a4 010c 	sub.w	r1, r4, #12
 80067c0:	f104 0510 	add.w	r5, r4, #16
 80067c4:	f1a6 0c0c 	sub.w	ip, r6, #12
 80067c8:	f1a2 040c 	sub.w	r4, r2, #12
 80067cc:	f106 0010 	add.w	r0, r6, #16
 80067d0:	3210      	adds	r2, #16
 80067d2:	ed1e 5a02 	vldr	s10, [lr, #-8]
 80067d6:	ed55 5a02 	vldr	s11, [r5, #-8]
 80067da:	ed50 7a02 	vldr	s15, [r0, #-8]
 80067de:	ed52 1a02 	vldr	s3, [r2, #-8]
 80067e2:	ed55 6a01 	vldr	s13, [r5, #-4]
 80067e6:	ed1e 0a01 	vldr	s0, [lr, #-4]
 80067ea:	ed12 1a01 	vldr	s2, [r2, #-4]
 80067ee:	ed10 8a01 	vldr	s16, [r0, #-4]
 80067f2:	ee35 4a25 	vadd.f32	s8, s10, s11
 80067f6:	ee30 6a26 	vadd.f32	s12, s0, s13
 80067fa:	ee37 7a84 	vadd.f32	s14, s15, s8
 80067fe:	ee30 0a66 	vsub.f32	s0, s0, s13
 8006802:	ee37 7a21 	vadd.f32	s14, s14, s3
 8006806:	ee75 5a65 	vsub.f32	s11, s10, s11
 800680a:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800680e:	ed10 7a01 	vldr	s14, [r0, #-4]
 8006812:	ed52 6a01 	vldr	s13, [r2, #-4]
 8006816:	ee36 7a07 	vadd.f32	s14, s12, s14
 800681a:	ee78 aa25 	vadd.f32	s21, s16, s11
 800681e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006822:	ee70 3a67 	vsub.f32	s7, s0, s15
 8006826:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800682a:	ed94 7a02 	vldr	s14, [r4, #8]
 800682e:	ed9c 2a02 	vldr	s4, [ip, #8]
 8006832:	ed91 ba02 	vldr	s22, [r1, #8]
 8006836:	edd3 9a02 	vldr	s19, [r3, #8]
 800683a:	edd4 2a01 	vldr	s5, [r4, #4]
 800683e:	ed9c 9a01 	vldr	s18, [ip, #4]
 8006842:	ed93 5a01 	vldr	s10, [r3, #4]
 8006846:	edd1 0a01 	vldr	s1, [r1, #4]
 800684a:	ee72 6a07 	vadd.f32	s13, s4, s14
 800684e:	ee32 2a47 	vsub.f32	s4, s4, s14
 8006852:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8006856:	ee79 4a22 	vadd.f32	s9, s18, s5
 800685a:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800685e:	ee79 2a62 	vsub.f32	s5, s18, s5
 8006862:	ed8c 7a02 	vstr	s14, [ip, #8]
 8006866:	ed91 7a01 	vldr	s14, [r1, #4]
 800686a:	edd3 8a01 	vldr	s17, [r3, #4]
 800686e:	ee34 7a87 	vadd.f32	s14, s9, s14
 8006872:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8006876:	ee37 7a28 	vadd.f32	s14, s14, s17
 800687a:	ee32 9a60 	vsub.f32	s18, s4, s1
 800687e:	ed8c 7a01 	vstr	s14, [ip, #4]
 8006882:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8006886:	ed1a aa02 	vldr	s20, [sl, #-8]
 800688a:	ee73 8a22 	vadd.f32	s17, s6, s5
 800688e:	ee39 9a05 	vadd.f32	s18, s18, s10
 8006892:	ee7a aac1 	vsub.f32	s21, s21, s2
 8006896:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800689a:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800689e:	ee69 ba07 	vmul.f32	s23, s18, s14
 80068a2:	ee6a aa87 	vmul.f32	s21, s21, s14
 80068a6:	ee29 9a0a 	vmul.f32	s18, s18, s20
 80068aa:	ee63 ca87 	vmul.f32	s25, s7, s14
 80068ae:	ee63 3a8a 	vmul.f32	s7, s7, s20
 80068b2:	ee28 aa8a 	vmul.f32	s20, s17, s20
 80068b6:	ee68 8a87 	vmul.f32	s17, s17, s14
 80068ba:	ee73 3aea 	vsub.f32	s7, s7, s21
 80068be:	ee78 8a89 	vadd.f32	s17, s17, s18
 80068c2:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 80068c6:	ee3b aaca 	vsub.f32	s20, s23, s20
 80068ca:	ee34 4a67 	vsub.f32	s8, s8, s15
 80068ce:	ee76 6acb 	vsub.f32	s13, s13, s22
 80068d2:	ee36 6a48 	vsub.f32	s12, s12, s16
 80068d6:	ee74 4ae0 	vsub.f32	s9, s9, s1
 80068da:	ed00 7a02 	vstr	s14, [r0, #-8]
 80068de:	ed40 3a01 	vstr	s7, [r0, #-4]
 80068e2:	edc1 8a01 	vstr	s17, [r1, #4]
 80068e6:	ed81 aa02 	vstr	s20, [r1, #8]
 80068ea:	ed59 3a04 	vldr	s7, [r9, #-16]
 80068ee:	ee36 7ae9 	vsub.f32	s14, s13, s19
 80068f2:	ee74 4ac5 	vsub.f32	s9, s9, s10
 80068f6:	ed59 6a03 	vldr	s13, [r9, #-12]
 80068fa:	ee34 4a61 	vsub.f32	s8, s8, s3
 80068fe:	ee36 6a41 	vsub.f32	s12, s12, s2
 8006902:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8006906:	ee66 9a26 	vmul.f32	s19, s12, s13
 800690a:	ee24 9a23 	vmul.f32	s18, s8, s7
 800690e:	ee26 6a23 	vmul.f32	s12, s12, s7
 8006912:	ee24 4a26 	vmul.f32	s8, s8, s13
 8006916:	ee27 7a26 	vmul.f32	s14, s14, s13
 800691a:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800691e:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8006922:	ee36 6a44 	vsub.f32	s12, s12, s8
 8006926:	ee37 7a64 	vsub.f32	s14, s14, s9
 800692a:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800692e:	ee79 3a29 	vadd.f32	s7, s18, s19
 8006932:	ee75 6a60 	vsub.f32	s13, s10, s1
 8006936:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800693a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800693e:	ed45 3a02 	vstr	s7, [r5, #-8]
 8006942:	ed05 6a01 	vstr	s12, [r5, #-4]
 8006946:	ed84 7a01 	vstr	s14, [r4, #4]
 800694a:	ed84 4a02 	vstr	s8, [r4, #8]
 800694e:	ee35 6a81 	vadd.f32	s12, s11, s2
 8006952:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8006956:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 800695a:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 800695e:	ee33 3a62 	vsub.f32	s6, s6, s5
 8006962:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8006966:	ee67 2a26 	vmul.f32	s5, s14, s13
 800696a:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800696e:	ee26 5a25 	vmul.f32	s10, s12, s11
 8006972:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006976:	ee26 6a26 	vmul.f32	s12, s12, s13
 800697a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800697e:	ee63 6a26 	vmul.f32	s13, s6, s13
 8006982:	ee23 3a25 	vmul.f32	s6, s6, s11
 8006986:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800698a:	ee75 5a24 	vadd.f32	s11, s10, s9
 800698e:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8006992:	ee36 7a87 	vadd.f32	s14, s13, s14
 8006996:	f1bb 0b01 	subs.w	fp, fp, #1
 800699a:	ed42 5a02 	vstr	s11, [r2, #-8]
 800699e:	ed42 7a01 	vstr	s15, [r2, #-4]
 80069a2:	f10e 0e08 	add.w	lr, lr, #8
 80069a6:	ed83 3a02 	vstr	s6, [r3, #8]
 80069aa:	ed83 7a01 	vstr	s14, [r3, #4]
 80069ae:	f1ac 0c08 	sub.w	ip, ip, #8
 80069b2:	f10a 0a08 	add.w	sl, sl, #8
 80069b6:	f100 0008 	add.w	r0, r0, #8
 80069ba:	f1a1 0108 	sub.w	r1, r1, #8
 80069be:	f109 0910 	add.w	r9, r9, #16
 80069c2:	f105 0508 	add.w	r5, r5, #8
 80069c6:	f1a4 0408 	sub.w	r4, r4, #8
 80069ca:	f108 0818 	add.w	r8, r8, #24
 80069ce:	f102 0208 	add.w	r2, r2, #8
 80069d2:	f1a3 0308 	sub.w	r3, r3, #8
 80069d6:	f47f aefc 	bne.w	80067d2 <arm_cfft_radix8by4_f32+0x12e>
 80069da:	9907      	ldr	r1, [sp, #28]
 80069dc:	9800      	ldr	r0, [sp, #0]
 80069de:	00cb      	lsls	r3, r1, #3
 80069e0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80069e4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80069e8:	9100      	str	r1, [sp, #0]
 80069ea:	9904      	ldr	r1, [sp, #16]
 80069ec:	4419      	add	r1, r3
 80069ee:	9104      	str	r1, [sp, #16]
 80069f0:	9903      	ldr	r1, [sp, #12]
 80069f2:	4419      	add	r1, r3
 80069f4:	9103      	str	r1, [sp, #12]
 80069f6:	9906      	ldr	r1, [sp, #24]
 80069f8:	4419      	add	r1, r3
 80069fa:	9106      	str	r1, [sp, #24]
 80069fc:	9905      	ldr	r1, [sp, #20]
 80069fe:	441f      	add	r7, r3
 8006a00:	4419      	add	r1, r3
 8006a02:	9b02      	ldr	r3, [sp, #8]
 8006a04:	9105      	str	r1, [sp, #20]
 8006a06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a0a:	9302      	str	r3, [sp, #8]
 8006a0c:	9904      	ldr	r1, [sp, #16]
 8006a0e:	9805      	ldr	r0, [sp, #20]
 8006a10:	ed91 4a00 	vldr	s8, [r1]
 8006a14:	edd0 6a00 	vldr	s13, [r0]
 8006a18:	9b06      	ldr	r3, [sp, #24]
 8006a1a:	ed97 3a00 	vldr	s6, [r7]
 8006a1e:	edd3 7a00 	vldr	s15, [r3]
 8006a22:	edd0 4a01 	vldr	s9, [r0, #4]
 8006a26:	edd1 3a01 	vldr	s7, [r1, #4]
 8006a2a:	ed97 2a01 	vldr	s4, [r7, #4]
 8006a2e:	ed93 7a01 	vldr	s14, [r3, #4]
 8006a32:	9a03      	ldr	r2, [sp, #12]
 8006a34:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8006a38:	ee34 6a26 	vadd.f32	s12, s8, s13
 8006a3c:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8006a40:	ee37 5a86 	vadd.f32	s10, s15, s12
 8006a44:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8006a48:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006a4c:	ee74 6a66 	vsub.f32	s13, s8, s13
 8006a50:	ed81 5a00 	vstr	s10, [r1]
 8006a54:	ed93 5a01 	vldr	s10, [r3, #4]
 8006a58:	edd7 4a01 	vldr	s9, [r7, #4]
 8006a5c:	ee35 5a85 	vadd.f32	s10, s11, s10
 8006a60:	ee37 4a26 	vadd.f32	s8, s14, s13
 8006a64:	ee35 5a24 	vadd.f32	s10, s10, s9
 8006a68:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8006a6c:	ed81 5a01 	vstr	s10, [r1, #4]
 8006a70:	edd2 1a00 	vldr	s3, [r2]
 8006a74:	edd2 2a01 	vldr	s5, [r2, #4]
 8006a78:	ee34 5a83 	vadd.f32	s10, s9, s6
 8006a7c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8006a80:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006a84:	ee64 4a21 	vmul.f32	s9, s8, s3
 8006a88:	ee24 4a22 	vmul.f32	s8, s8, s5
 8006a8c:	ee65 2a22 	vmul.f32	s5, s10, s5
 8006a90:	ee25 5a21 	vmul.f32	s10, s10, s3
 8006a94:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8006a98:	ee35 5a44 	vsub.f32	s10, s10, s8
 8006a9c:	edc3 2a00 	vstr	s5, [r3]
 8006aa0:	ed83 5a01 	vstr	s10, [r3, #4]
 8006aa4:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8006aa8:	9b00      	ldr	r3, [sp, #0]
 8006aaa:	ee36 6a43 	vsub.f32	s12, s12, s6
 8006aae:	ed93 4a01 	vldr	s8, [r3, #4]
 8006ab2:	ed93 5a00 	vldr	s10, [r3]
 8006ab6:	9b02      	ldr	r3, [sp, #8]
 8006ab8:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8006abc:	ee66 4a05 	vmul.f32	s9, s12, s10
 8006ac0:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006ac4:	ee26 6a04 	vmul.f32	s12, s12, s8
 8006ac8:	ee65 5a84 	vmul.f32	s11, s11, s8
 8006acc:	ee35 6a46 	vsub.f32	s12, s10, s12
 8006ad0:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8006ad4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8006ad8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006adc:	ed80 6a01 	vstr	s12, [r0, #4]
 8006ae0:	edc0 5a00 	vstr	s11, [r0]
 8006ae4:	edd3 5a01 	vldr	s11, [r3, #4]
 8006ae8:	edd3 6a00 	vldr	s13, [r3]
 8006aec:	ee37 7a02 	vadd.f32	s14, s14, s4
 8006af0:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8006af4:	ee27 6a26 	vmul.f32	s12, s14, s13
 8006af8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006afc:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006b00:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006b04:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006b08:	ee76 7a27 	vadd.f32	s15, s12, s15
 8006b0c:	ed87 7a01 	vstr	s14, [r7, #4]
 8006b10:	edc7 7a00 	vstr	s15, [r7]
 8006b14:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 8006b18:	4621      	mov	r1, r4
 8006b1a:	686a      	ldr	r2, [r5, #4]
 8006b1c:	2304      	movs	r3, #4
 8006b1e:	f000 f8f3 	bl	8006d08 <arm_radix8_butterfly_f32>
 8006b22:	4630      	mov	r0, r6
 8006b24:	4621      	mov	r1, r4
 8006b26:	686a      	ldr	r2, [r5, #4]
 8006b28:	2304      	movs	r3, #4
 8006b2a:	f000 f8ed 	bl	8006d08 <arm_radix8_butterfly_f32>
 8006b2e:	9808      	ldr	r0, [sp, #32]
 8006b30:	686a      	ldr	r2, [r5, #4]
 8006b32:	4621      	mov	r1, r4
 8006b34:	2304      	movs	r3, #4
 8006b36:	f000 f8e7 	bl	8006d08 <arm_radix8_butterfly_f32>
 8006b3a:	686a      	ldr	r2, [r5, #4]
 8006b3c:	9801      	ldr	r0, [sp, #4]
 8006b3e:	4621      	mov	r1, r4
 8006b40:	2304      	movs	r3, #4
 8006b42:	b00d      	add	sp, #52	@ 0x34
 8006b44:	ecbd 8b0a 	vpop	{d8-d12}
 8006b48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4c:	f000 b8dc 	b.w	8006d08 <arm_radix8_butterfly_f32>

08006b50 <arm_cfft_f32>:
 8006b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b54:	2a01      	cmp	r2, #1
 8006b56:	4606      	mov	r6, r0
 8006b58:	4617      	mov	r7, r2
 8006b5a:	460c      	mov	r4, r1
 8006b5c:	4698      	mov	r8, r3
 8006b5e:	8805      	ldrh	r5, [r0, #0]
 8006b60:	d056      	beq.n	8006c10 <arm_cfft_f32+0xc0>
 8006b62:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8006b66:	d063      	beq.n	8006c30 <arm_cfft_f32+0xe0>
 8006b68:	d916      	bls.n	8006b98 <arm_cfft_f32+0x48>
 8006b6a:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8006b6e:	d01a      	beq.n	8006ba6 <arm_cfft_f32+0x56>
 8006b70:	d947      	bls.n	8006c02 <arm_cfft_f32+0xb2>
 8006b72:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8006b76:	d05b      	beq.n	8006c30 <arm_cfft_f32+0xe0>
 8006b78:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8006b7c:	d105      	bne.n	8006b8a <arm_cfft_f32+0x3a>
 8006b7e:	2301      	movs	r3, #1
 8006b80:	6872      	ldr	r2, [r6, #4]
 8006b82:	4629      	mov	r1, r5
 8006b84:	4620      	mov	r0, r4
 8006b86:	f000 f8bf 	bl	8006d08 <arm_radix8_butterfly_f32>
 8006b8a:	f1b8 0f00 	cmp.w	r8, #0
 8006b8e:	d111      	bne.n	8006bb4 <arm_cfft_f32+0x64>
 8006b90:	2f01      	cmp	r7, #1
 8006b92:	d016      	beq.n	8006bc2 <arm_cfft_f32+0x72>
 8006b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b98:	2d20      	cmp	r5, #32
 8006b9a:	d049      	beq.n	8006c30 <arm_cfft_f32+0xe0>
 8006b9c:	d935      	bls.n	8006c0a <arm_cfft_f32+0xba>
 8006b9e:	2d40      	cmp	r5, #64	@ 0x40
 8006ba0:	d0ed      	beq.n	8006b7e <arm_cfft_f32+0x2e>
 8006ba2:	2d80      	cmp	r5, #128	@ 0x80
 8006ba4:	d1f1      	bne.n	8006b8a <arm_cfft_f32+0x3a>
 8006ba6:	4621      	mov	r1, r4
 8006ba8:	4630      	mov	r0, r6
 8006baa:	f7ff fcab 	bl	8006504 <arm_cfft_radix8by2_f32>
 8006bae:	f1b8 0f00 	cmp.w	r8, #0
 8006bb2:	d0ed      	beq.n	8006b90 <arm_cfft_f32+0x40>
 8006bb4:	68b2      	ldr	r2, [r6, #8]
 8006bb6:	89b1      	ldrh	r1, [r6, #12]
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f000 f841 	bl	8006c40 <arm_bitreversal_32>
 8006bbe:	2f01      	cmp	r7, #1
 8006bc0:	d1e8      	bne.n	8006b94 <arm_cfft_f32+0x44>
 8006bc2:	ee07 5a90 	vmov	s15, r5
 8006bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bce:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006bd2:	2d00      	cmp	r5, #0
 8006bd4:	d0de      	beq.n	8006b94 <arm_cfft_f32+0x44>
 8006bd6:	f104 0108 	add.w	r1, r4, #8
 8006bda:	2300      	movs	r3, #0
 8006bdc:	3301      	adds	r3, #1
 8006bde:	429d      	cmp	r5, r3
 8006be0:	f101 0108 	add.w	r1, r1, #8
 8006be4:	ed11 7a04 	vldr	s14, [r1, #-16]
 8006be8:	ed51 7a03 	vldr	s15, [r1, #-12]
 8006bec:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006bf0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006bf4:	ed01 7a04 	vstr	s14, [r1, #-16]
 8006bf8:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006bfc:	d1ee      	bne.n	8006bdc <arm_cfft_f32+0x8c>
 8006bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c02:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8006c06:	d0ba      	beq.n	8006b7e <arm_cfft_f32+0x2e>
 8006c08:	e7bf      	b.n	8006b8a <arm_cfft_f32+0x3a>
 8006c0a:	2d10      	cmp	r5, #16
 8006c0c:	d0cb      	beq.n	8006ba6 <arm_cfft_f32+0x56>
 8006c0e:	e7bc      	b.n	8006b8a <arm_cfft_f32+0x3a>
 8006c10:	b19d      	cbz	r5, 8006c3a <arm_cfft_f32+0xea>
 8006c12:	f101 030c 	add.w	r3, r1, #12
 8006c16:	2200      	movs	r2, #0
 8006c18:	ed53 7a02 	vldr	s15, [r3, #-8]
 8006c1c:	3201      	adds	r2, #1
 8006c1e:	eef1 7a67 	vneg.f32	s15, s15
 8006c22:	4295      	cmp	r5, r2
 8006c24:	ed43 7a02 	vstr	s15, [r3, #-8]
 8006c28:	f103 0308 	add.w	r3, r3, #8
 8006c2c:	d1f4      	bne.n	8006c18 <arm_cfft_f32+0xc8>
 8006c2e:	e798      	b.n	8006b62 <arm_cfft_f32+0x12>
 8006c30:	4621      	mov	r1, r4
 8006c32:	4630      	mov	r0, r6
 8006c34:	f7ff fd36 	bl	80066a4 <arm_cfft_radix8by4_f32>
 8006c38:	e7a7      	b.n	8006b8a <arm_cfft_f32+0x3a>
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d0aa      	beq.n	8006b94 <arm_cfft_f32+0x44>
 8006c3e:	e7b9      	b.n	8006bb4 <arm_cfft_f32+0x64>

08006c40 <arm_bitreversal_32>:
 8006c40:	b1e9      	cbz	r1, 8006c7e <arm_bitreversal_32+0x3e>
 8006c42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c44:	2500      	movs	r5, #0
 8006c46:	f102 0e02 	add.w	lr, r2, #2
 8006c4a:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8006c4e:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8006c52:	08a4      	lsrs	r4, r4, #2
 8006c54:	089b      	lsrs	r3, r3, #2
 8006c56:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8006c5a:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8006c5e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8006c62:	00a6      	lsls	r6, r4, #2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	1d34      	adds	r4, r6, #4
 8006c6e:	3502      	adds	r5, #2
 8006c70:	58c6      	ldr	r6, [r0, r3]
 8006c72:	5907      	ldr	r7, [r0, r4]
 8006c74:	50c7      	str	r7, [r0, r3]
 8006c76:	428d      	cmp	r5, r1
 8006c78:	5106      	str	r6, [r0, r4]
 8006c7a:	d3e6      	bcc.n	8006c4a <arm_bitreversal_32+0xa>
 8006c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c7e:	4770      	bx	lr

08006c80 <arm_offset_f32>:
 8006c80:	b470      	push	{r4, r5, r6}
 8006c82:	0896      	lsrs	r6, r2, #2
 8006c84:	d025      	beq.n	8006cd2 <arm_offset_f32+0x52>
 8006c86:	f100 0410 	add.w	r4, r0, #16
 8006c8a:	f101 0310 	add.w	r3, r1, #16
 8006c8e:	4635      	mov	r5, r6
 8006c90:	ed54 7a04 	vldr	s15, [r4, #-16]
 8006c94:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006c98:	3d01      	subs	r5, #1
 8006c9a:	ed43 7a04 	vstr	s15, [r3, #-16]
 8006c9e:	ed54 7a03 	vldr	s15, [r4, #-12]
 8006ca2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006ca6:	f104 0410 	add.w	r4, r4, #16
 8006caa:	ed43 7a03 	vstr	s15, [r3, #-12]
 8006cae:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 8006cb2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006cb6:	f103 0310 	add.w	r3, r3, #16
 8006cba:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 8006cbe:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 8006cc2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006cc6:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8006cca:	d1e1      	bne.n	8006c90 <arm_offset_f32+0x10>
 8006ccc:	0136      	lsls	r6, r6, #4
 8006cce:	4430      	add	r0, r6
 8006cd0:	4431      	add	r1, r6
 8006cd2:	f012 0203 	ands.w	r2, r2, #3
 8006cd6:	d015      	beq.n	8006d04 <arm_offset_f32+0x84>
 8006cd8:	edd0 7a00 	vldr	s15, [r0]
 8006cdc:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006ce0:	3a01      	subs	r2, #1
 8006ce2:	edc1 7a00 	vstr	s15, [r1]
 8006ce6:	d00d      	beq.n	8006d04 <arm_offset_f32+0x84>
 8006ce8:	edd0 7a01 	vldr	s15, [r0, #4]
 8006cec:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006cf0:	2a01      	cmp	r2, #1
 8006cf2:	edc1 7a01 	vstr	s15, [r1, #4]
 8006cf6:	d005      	beq.n	8006d04 <arm_offset_f32+0x84>
 8006cf8:	edd0 7a02 	vldr	s15, [r0, #8]
 8006cfc:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006d00:	ed81 0a02 	vstr	s0, [r1, #8]
 8006d04:	bc70      	pop	{r4, r5, r6}
 8006d06:	4770      	bx	lr

08006d08 <arm_radix8_butterfly_f32>:
 8006d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d0c:	ed2d 8b10 	vpush	{d8-d15}
 8006d10:	b095      	sub	sp, #84	@ 0x54
 8006d12:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 8006d16:	4603      	mov	r3, r0
 8006d18:	3304      	adds	r3, #4
 8006d1a:	ed9f bab9 	vldr	s22, [pc, #740]	@ 8007000 <arm_radix8_butterfly_f32+0x2f8>
 8006d1e:	9012      	str	r0, [sp, #72]	@ 0x48
 8006d20:	468b      	mov	fp, r1
 8006d22:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d24:	4689      	mov	r9, r1
 8006d26:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8006d2a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006d2c:	960f      	str	r6, [sp, #60]	@ 0x3c
 8006d2e:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8006d32:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8006d36:	eb03 0508 	add.w	r5, r3, r8
 8006d3a:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8006d3e:	eb05 040e 	add.w	r4, r5, lr
 8006d42:	0137      	lsls	r7, r6, #4
 8006d44:	eba6 030a 	sub.w	r3, r6, sl
 8006d48:	eb04 000e 	add.w	r0, r4, lr
 8006d4c:	44b2      	add	sl, r6
 8006d4e:	1d3a      	adds	r2, r7, #4
 8006d50:	9702      	str	r7, [sp, #8]
 8006d52:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006d56:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8006d5a:	ebae 0c06 	sub.w	ip, lr, r6
 8006d5e:	9703      	str	r7, [sp, #12]
 8006d60:	eb03 0708 	add.w	r7, r3, r8
 8006d64:	9701      	str	r7, [sp, #4]
 8006d66:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8006d6a:	9706      	str	r7, [sp, #24]
 8006d6c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8006d6e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8006d72:	f10e 0104 	add.w	r1, lr, #4
 8006d76:	4439      	add	r1, r7
 8006d78:	443a      	add	r2, r7
 8006d7a:	0137      	lsls	r7, r6, #4
 8006d7c:	00f6      	lsls	r6, r6, #3
 8006d7e:	9704      	str	r7, [sp, #16]
 8006d80:	9605      	str	r6, [sp, #20]
 8006d82:	9f01      	ldr	r7, [sp, #4]
 8006d84:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006d86:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8006d8a:	f04f 0c00 	mov.w	ip, #0
 8006d8e:	edd4 6a00 	vldr	s13, [r4]
 8006d92:	edd7 1a00 	vldr	s3, [r7]
 8006d96:	ed16 aa01 	vldr	s20, [r6, #-4]
 8006d9a:	edd5 5a00 	vldr	s11, [r5]
 8006d9e:	ed52 9a01 	vldr	s19, [r2, #-4]
 8006da2:	ed90 6a00 	vldr	s12, [r0]
 8006da6:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006daa:	ed93 3a00 	vldr	s6, [r3]
 8006dae:	ee39 0a86 	vadd.f32	s0, s19, s12
 8006db2:	ee33 2a21 	vadd.f32	s4, s6, s3
 8006db6:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8006dba:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8006dbe:	ee35 7a02 	vadd.f32	s14, s10, s4
 8006dc2:	ee34 4a80 	vadd.f32	s8, s9, s0
 8006dc6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006dca:	ee74 6a07 	vadd.f32	s13, s8, s14
 8006dce:	ee34 4a47 	vsub.f32	s8, s8, s14
 8006dd2:	ed46 6a01 	vstr	s13, [r6, #-4]
 8006dd6:	ed85 4a00 	vstr	s8, [r5]
 8006dda:	edd1 6a00 	vldr	s13, [r1]
 8006dde:	ed94 9a01 	vldr	s18, [r4, #4]
 8006de2:	edd3 2a01 	vldr	s5, [r3, #4]
 8006de6:	edd7 8a01 	vldr	s17, [r7, #4]
 8006dea:	edd6 0a00 	vldr	s1, [r6]
 8006dee:	edd5 3a01 	vldr	s7, [r5, #4]
 8006df2:	ed90 8a01 	vldr	s16, [r0, #4]
 8006df6:	ed92 7a00 	vldr	s14, [r2]
 8006dfa:	ee33 3a61 	vsub.f32	s6, s6, s3
 8006dfe:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8006e02:	ee72 aae8 	vsub.f32	s21, s5, s17
 8006e06:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8006e0a:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8006e0e:	ee77 7a83 	vadd.f32	s15, s15, s6
 8006e12:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8006e16:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8006e1a:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8006e1e:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8006e22:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8006e26:	ee77 0a08 	vadd.f32	s1, s14, s16
 8006e2a:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8006e2e:	ee37 7a48 	vsub.f32	s14, s14, s16
 8006e32:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8006e36:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8006e3a:	ee76 6a89 	vadd.f32	s13, s13, s18
 8006e3e:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8006e42:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006e46:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8006e4a:	ee35 5a42 	vsub.f32	s10, s10, s4
 8006e4e:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8006e52:	ee33 2a20 	vadd.f32	s4, s6, s1
 8006e56:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8006e5a:	ee33 3a60 	vsub.f32	s6, s6, s1
 8006e5e:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8006e62:	ee77 0a01 	vadd.f32	s1, s14, s2
 8006e66:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8006e6a:	ee37 7a41 	vsub.f32	s14, s14, s2
 8006e6e:	ee73 1a84 	vadd.f32	s3, s7, s8
 8006e72:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8006e76:	ee76 3a27 	vadd.f32	s7, s12, s15
 8006e7a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006e7e:	ee32 8a00 	vadd.f32	s16, s4, s0
 8006e82:	ee33 1a45 	vsub.f32	s2, s6, s10
 8006e86:	ee32 2a40 	vsub.f32	s4, s4, s0
 8006e8a:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006e8e:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8006e92:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8006e96:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8006e9a:	ee34 6a67 	vsub.f32	s12, s8, s15
 8006e9e:	ee75 4a87 	vadd.f32	s9, s11, s14
 8006ea2:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8006ea6:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8006eaa:	ee77 7a84 	vadd.f32	s15, s15, s8
 8006eae:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8006eb2:	44dc      	add	ip, fp
 8006eb4:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8006eb8:	45e1      	cmp	r9, ip
 8006eba:	ed86 8a00 	vstr	s16, [r6]
 8006ebe:	ed85 2a01 	vstr	s4, [r5, #4]
 8006ec2:	4456      	add	r6, sl
 8006ec4:	ed02 0a01 	vstr	s0, [r2, #-4]
 8006ec8:	4455      	add	r5, sl
 8006eca:	edc0 6a00 	vstr	s13, [r0]
 8006ece:	ed82 1a00 	vstr	s2, [r2]
 8006ed2:	ed80 5a01 	vstr	s10, [r0, #4]
 8006ed6:	4452      	add	r2, sl
 8006ed8:	ed01 3a01 	vstr	s6, [r1, #-4]
 8006edc:	4450      	add	r0, sl
 8006ede:	edc7 2a00 	vstr	s5, [r7]
 8006ee2:	edc4 4a00 	vstr	s9, [r4]
 8006ee6:	ed83 7a00 	vstr	s14, [r3]
 8006eea:	edc1 5a00 	vstr	s11, [r1]
 8006eee:	edc7 3a01 	vstr	s7, [r7, #4]
 8006ef2:	4451      	add	r1, sl
 8006ef4:	ed84 6a01 	vstr	s12, [r4, #4]
 8006ef8:	4457      	add	r7, sl
 8006efa:	edc3 7a01 	vstr	s15, [r3, #4]
 8006efe:	4454      	add	r4, sl
 8006f00:	4453      	add	r3, sl
 8006f02:	f63f af44 	bhi.w	8006d8e <arm_radix8_butterfly_f32+0x86>
 8006f06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f08:	2b07      	cmp	r3, #7
 8006f0a:	f240 81b7 	bls.w	800727c <arm_radix8_butterfly_f32+0x574>
 8006f0e:	9b06      	ldr	r3, [sp, #24]
 8006f10:	9903      	ldr	r1, [sp, #12]
 8006f12:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006f14:	9e05      	ldr	r6, [sp, #20]
 8006f16:	9a04      	ldr	r2, [sp, #16]
 8006f18:	f103 0c08 	add.w	ip, r3, #8
 8006f1c:	9b02      	ldr	r3, [sp, #8]
 8006f1e:	3108      	adds	r1, #8
 8006f20:	f108 0808 	add.w	r8, r8, #8
 8006f24:	1841      	adds	r1, r0, r1
 8006f26:	3608      	adds	r6, #8
 8006f28:	330c      	adds	r3, #12
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	4444      	add	r4, r8
 8006f2e:	18c3      	adds	r3, r0, r3
 8006f30:	9109      	str	r1, [sp, #36]	@ 0x24
 8006f32:	1981      	adds	r1, r0, r6
 8006f34:	f10e 0e08 	add.w	lr, lr, #8
 8006f38:	3208      	adds	r2, #8
 8006f3a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006f3c:	9107      	str	r1, [sp, #28]
 8006f3e:	4604      	mov	r4, r0
 8006f40:	4601      	mov	r1, r0
 8006f42:	9304      	str	r3, [sp, #16]
 8006f44:	f100 030c 	add.w	r3, r0, #12
 8006f48:	4474      	add	r4, lr
 8006f4a:	f04f 0801 	mov.w	r8, #1
 8006f4e:	1882      	adds	r2, r0, r2
 8006f50:	4461      	add	r1, ip
 8006f52:	9305      	str	r3, [sp, #20]
 8006f54:	464b      	mov	r3, r9
 8006f56:	940a      	str	r4, [sp, #40]	@ 0x28
 8006f58:	46c1      	mov	r9, r8
 8006f5a:	9208      	str	r2, [sp, #32]
 8006f5c:	46d8      	mov	r8, fp
 8006f5e:	9106      	str	r1, [sp, #24]
 8006f60:	f04f 0e00 	mov.w	lr, #0
 8006f64:	469b      	mov	fp, r3
 8006f66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006f68:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006f6a:	449e      	add	lr, r3
 8006f6c:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8006f70:	441a      	add	r2, r3
 8006f72:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f74:	441a      	add	r2, r3
 8006f76:	18d4      	adds	r4, r2, r3
 8006f78:	18e5      	adds	r5, r4, r3
 8006f7a:	18ee      	adds	r6, r5, r3
 8006f7c:	18f7      	adds	r7, r6, r3
 8006f7e:	eb07 0c03 	add.w	ip, r7, r3
 8006f82:	920d      	str	r2, [sp, #52]	@ 0x34
 8006f84:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8006f88:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8006f8c:	910c      	str	r1, [sp, #48]	@ 0x30
 8006f8e:	4419      	add	r1, r3
 8006f90:	9103      	str	r1, [sp, #12]
 8006f92:	4419      	add	r1, r3
 8006f94:	18ca      	adds	r2, r1, r3
 8006f96:	9202      	str	r2, [sp, #8]
 8006f98:	441a      	add	r2, r3
 8006f9a:	18d0      	adds	r0, r2, r3
 8006f9c:	ed92 ea01 	vldr	s28, [r2, #4]
 8006fa0:	9a02      	ldr	r2, [sp, #8]
 8006fa2:	edd4 7a00 	vldr	s15, [r4]
 8006fa6:	edd2 da01 	vldr	s27, [r2, #4]
 8006faa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006fac:	ed91 da01 	vldr	s26, [r1, #4]
 8006fb0:	ed92 ca01 	vldr	s24, [r2, #4]
 8006fb4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006fb6:	9903      	ldr	r1, [sp, #12]
 8006fb8:	edcd 7a03 	vstr	s15, [sp, #12]
 8006fbc:	edd2 7a00 	vldr	s15, [r2]
 8006fc0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006fc2:	edcd 7a02 	vstr	s15, [sp, #8]
 8006fc6:	edd2 7a00 	vldr	s15, [r2]
 8006fca:	edd0 ea01 	vldr	s29, [r0, #4]
 8006fce:	edd1 ca01 	vldr	s25, [r1, #4]
 8006fd2:	eddc ba00 	vldr	s23, [ip]
 8006fd6:	edd7 aa00 	vldr	s21, [r7]
 8006fda:	ed96 aa00 	vldr	s20, [r6]
 8006fde:	edd5 9a00 	vldr	s19, [r5]
 8006fe2:	edcd 7a01 	vstr	s15, [sp, #4]
 8006fe6:	4403      	add	r3, r0
 8006fe8:	ed93 fa01 	vldr	s30, [r3, #4]
 8006fec:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8006ff0:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8006ff4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006ff8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8006ffc:	46cc      	mov	ip, r9
 8006ffe:	e001      	b.n	8007004 <arm_radix8_butterfly_f32+0x2fc>
 8007000:	3f3504f3 	.word	0x3f3504f3
 8007004:	ed91 6a00 	vldr	s12, [r1]
 8007008:	ed93 5a00 	vldr	s10, [r3]
 800700c:	edd0 fa00 	vldr	s31, [r0]
 8007010:	edd4 7a00 	vldr	s15, [r4]
 8007014:	ed95 7a00 	vldr	s14, [r5]
 8007018:	ed56 3a01 	vldr	s7, [r6, #-4]
 800701c:	ed17 3a01 	vldr	s6, [r7, #-4]
 8007020:	ed92 2a00 	vldr	s4, [r2]
 8007024:	ed96 0a00 	vldr	s0, [r6]
 8007028:	ee33 8a85 	vadd.f32	s16, s7, s10
 800702c:	ee32 1a06 	vadd.f32	s2, s4, s12
 8007030:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8007034:	ee77 4a87 	vadd.f32	s9, s15, s14
 8007038:	ee78 1a04 	vadd.f32	s3, s16, s8
 800703c:	ee71 6a24 	vadd.f32	s13, s2, s9
 8007040:	ee32 2a46 	vsub.f32	s4, s4, s12
 8007044:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8007048:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800704c:	ed06 6a01 	vstr	s12, [r6, #-4]
 8007050:	edd4 8a01 	vldr	s17, [r4, #4]
 8007054:	ed92 9a01 	vldr	s18, [r2, #4]
 8007058:	edd7 0a00 	vldr	s1, [r7]
 800705c:	edd1 2a01 	vldr	s5, [r1, #4]
 8007060:	ed95 7a01 	vldr	s14, [r5, #4]
 8007064:	ed93 6a01 	vldr	s12, [r3, #4]
 8007068:	edd0 5a01 	vldr	s11, [r0, #4]
 800706c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8007070:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8007074:	ee39 5a62 	vsub.f32	s10, s18, s5
 8007078:	ee78 fac7 	vsub.f32	s31, s17, s14
 800707c:	ee38 4a44 	vsub.f32	s8, s16, s8
 8007080:	ee38 7a87 	vadd.f32	s14, s17, s14
 8007084:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8007088:	ee79 2a22 	vadd.f32	s5, s18, s5
 800708c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8007090:	ee72 7a67 	vsub.f32	s15, s4, s15
 8007094:	ee30 2a06 	vadd.f32	s4, s0, s12
 8007098:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800709c:	ee71 4a64 	vsub.f32	s9, s2, s9
 80070a0:	ee35 5a2f 	vadd.f32	s10, s10, s31
 80070a4:	ee32 1a08 	vadd.f32	s2, s4, s16
 80070a8:	ee72 fa87 	vadd.f32	s31, s5, s14
 80070ac:	ee32 2a48 	vsub.f32	s4, s4, s16
 80070b0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80070b4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80070b8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80070bc:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80070c0:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80070c4:	ee29 9a0b 	vmul.f32	s18, s18, s22
 80070c8:	ee71 1a6f 	vsub.f32	s3, s2, s31
 80070cc:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80070d0:	ee30 6a46 	vsub.f32	s12, s0, s12
 80070d4:	ee74 0a22 	vadd.f32	s1, s8, s5
 80070d8:	ee36 0a28 	vadd.f32	s0, s12, s17
 80070dc:	ee74 2a62 	vsub.f32	s5, s8, s5
 80070e0:	ee36 6a68 	vsub.f32	s12, s12, s17
 80070e4:	ee32 4a64 	vsub.f32	s8, s4, s9
 80070e8:	ee73 8a09 	vadd.f32	s17, s6, s18
 80070ec:	ee74 4a82 	vadd.f32	s9, s9, s4
 80070f0:	ee33 9a49 	vsub.f32	s18, s6, s18
 80070f4:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 80070f8:	ee35 3a85 	vadd.f32	s6, s11, s10
 80070fc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8007100:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8007104:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8007108:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800710c:	ee30 7a68 	vsub.f32	s14, s0, s17
 8007110:	ee35 8a03 	vadd.f32	s16, s10, s6
 8007114:	ee38 0a80 	vadd.f32	s0, s17, s0
 8007118:	ee73 3a82 	vadd.f32	s7, s7, s4
 800711c:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8007120:	ed9d 2a01 	vldr	s4, [sp, #4]
 8007124:	eddd 1a02 	vldr	s3, [sp, #8]
 8007128:	ee35 5a43 	vsub.f32	s10, s10, s6
 800712c:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8007130:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8007134:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8007138:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800713c:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8007140:	ee76 5a49 	vsub.f32	s11, s12, s18
 8007144:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8007148:	ee39 6a06 	vadd.f32	s12, s18, s12
 800714c:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8007150:	ee21 4a84 	vmul.f32	s8, s3, s8
 8007154:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8007158:	ee22 7a07 	vmul.f32	s14, s4, s14
 800715c:	ee22 2a08 	vmul.f32	s4, s4, s16
 8007160:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8007164:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8007168:	ee31 1a09 	vadd.f32	s2, s2, s18
 800716c:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8007170:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8007174:	ee74 0a60 	vsub.f32	s1, s8, s1
 8007178:	ee37 7a48 	vsub.f32	s14, s14, s16
 800717c:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8007180:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8007184:	ee72 1a21 	vadd.f32	s3, s4, s3
 8007188:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800718c:	ee38 2a89 	vadd.f32	s4, s17, s18
 8007190:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8007194:	ee38 8a04 	vadd.f32	s16, s16, s8
 8007198:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800719c:	ee2a 4a25 	vmul.f32	s8, s20, s11
 80071a0:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 80071a4:	eddd 5a03 	vldr	s11, [sp, #12]
 80071a8:	edc6 fa00 	vstr	s31, [r6]
 80071ac:	ee2b 0a80 	vmul.f32	s0, s23, s0
 80071b0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80071b4:	ee30 0a45 	vsub.f32	s0, s0, s10
 80071b8:	ee6a 4a03 	vmul.f32	s9, s20, s6
 80071bc:	ee65 8aa7 	vmul.f32	s17, s11, s15
 80071c0:	ee2d 5a06 	vmul.f32	s10, s26, s12
 80071c4:	ee2e 3a03 	vmul.f32	s6, s28, s6
 80071c8:	ee6d 7a27 	vmul.f32	s15, s26, s15
 80071cc:	ee25 6a86 	vmul.f32	s12, s11, s12
 80071d0:	ee74 4a89 	vadd.f32	s9, s9, s18
 80071d4:	ee34 3a43 	vsub.f32	s6, s8, s6
 80071d8:	ee78 8a85 	vadd.f32	s17, s17, s10
 80071dc:	ee36 6a67 	vsub.f32	s12, s12, s15
 80071e0:	44c4      	add	ip, r8
 80071e2:	45e3      	cmp	fp, ip
 80071e4:	edc3 3a00 	vstr	s7, [r3]
 80071e8:	edc3 6a01 	vstr	s13, [r3, #4]
 80071ec:	4456      	add	r6, sl
 80071ee:	ed07 1a01 	vstr	s2, [r7, #-4]
 80071f2:	edc7 0a00 	vstr	s1, [r7]
 80071f6:	4453      	add	r3, sl
 80071f8:	ed80 2a00 	vstr	s4, [r0]
 80071fc:	edc0 2a01 	vstr	s5, [r0, #4]
 8007200:	4457      	add	r7, sl
 8007202:	edc2 1a00 	vstr	s3, [r2]
 8007206:	ed82 7a01 	vstr	s14, [r2, #4]
 800720a:	4450      	add	r0, sl
 800720c:	ed85 8a00 	vstr	s16, [r5]
 8007210:	ed85 0a01 	vstr	s0, [r5, #4]
 8007214:	4452      	add	r2, sl
 8007216:	edc1 4a00 	vstr	s9, [r1]
 800721a:	4455      	add	r5, sl
 800721c:	ed81 3a01 	vstr	s6, [r1, #4]
 8007220:	edc4 8a00 	vstr	s17, [r4]
 8007224:	ed84 6a01 	vstr	s12, [r4, #4]
 8007228:	4451      	add	r1, sl
 800722a:	4454      	add	r4, sl
 800722c:	f63f aeea 	bhi.w	8007004 <arm_radix8_butterfly_f32+0x2fc>
 8007230:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007232:	3308      	adds	r3, #8
 8007234:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007236:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007238:	3308      	adds	r3, #8
 800723a:	930a      	str	r3, [sp, #40]	@ 0x28
 800723c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800723e:	3308      	adds	r3, #8
 8007240:	9309      	str	r3, [sp, #36]	@ 0x24
 8007242:	9b08      	ldr	r3, [sp, #32]
 8007244:	3308      	adds	r3, #8
 8007246:	9308      	str	r3, [sp, #32]
 8007248:	9b07      	ldr	r3, [sp, #28]
 800724a:	3308      	adds	r3, #8
 800724c:	9307      	str	r3, [sp, #28]
 800724e:	9b06      	ldr	r3, [sp, #24]
 8007250:	3308      	adds	r3, #8
 8007252:	9306      	str	r3, [sp, #24]
 8007254:	9b05      	ldr	r3, [sp, #20]
 8007256:	3308      	adds	r3, #8
 8007258:	9305      	str	r3, [sp, #20]
 800725a:	9b04      	ldr	r3, [sp, #16]
 800725c:	3308      	adds	r3, #8
 800725e:	9304      	str	r3, [sp, #16]
 8007260:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007262:	f109 0901 	add.w	r9, r9, #1
 8007266:	454b      	cmp	r3, r9
 8007268:	f47f ae7d 	bne.w	8006f66 <arm_radix8_butterfly_f32+0x25e>
 800726c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800726e:	00db      	lsls	r3, r3, #3
 8007270:	b29b      	uxth	r3, r3
 8007272:	46d9      	mov	r9, fp
 8007274:	9310      	str	r3, [sp, #64]	@ 0x40
 8007276:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800727a:	e554      	b.n	8006d26 <arm_radix8_butterfly_f32+0x1e>
 800727c:	b015      	add	sp, #84	@ 0x54
 800727e:	ecbd 8b10 	vpop	{d8-d15}
 8007282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007286:	bf00      	nop

08007288 <__cvt>:
 8007288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800728c:	ec57 6b10 	vmov	r6, r7, d0
 8007290:	2f00      	cmp	r7, #0
 8007292:	460c      	mov	r4, r1
 8007294:	4619      	mov	r1, r3
 8007296:	463b      	mov	r3, r7
 8007298:	bfbb      	ittet	lt
 800729a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800729e:	461f      	movlt	r7, r3
 80072a0:	2300      	movge	r3, #0
 80072a2:	232d      	movlt	r3, #45	@ 0x2d
 80072a4:	700b      	strb	r3, [r1, #0]
 80072a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80072ac:	4691      	mov	r9, r2
 80072ae:	f023 0820 	bic.w	r8, r3, #32
 80072b2:	bfbc      	itt	lt
 80072b4:	4632      	movlt	r2, r6
 80072b6:	4616      	movlt	r6, r2
 80072b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80072bc:	d005      	beq.n	80072ca <__cvt+0x42>
 80072be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80072c2:	d100      	bne.n	80072c6 <__cvt+0x3e>
 80072c4:	3401      	adds	r4, #1
 80072c6:	2102      	movs	r1, #2
 80072c8:	e000      	b.n	80072cc <__cvt+0x44>
 80072ca:	2103      	movs	r1, #3
 80072cc:	ab03      	add	r3, sp, #12
 80072ce:	9301      	str	r3, [sp, #4]
 80072d0:	ab02      	add	r3, sp, #8
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	ec47 6b10 	vmov	d0, r6, r7
 80072d8:	4653      	mov	r3, sl
 80072da:	4622      	mov	r2, r4
 80072dc:	f000 fe38 	bl	8007f50 <_dtoa_r>
 80072e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80072e4:	4605      	mov	r5, r0
 80072e6:	d119      	bne.n	800731c <__cvt+0x94>
 80072e8:	f019 0f01 	tst.w	r9, #1
 80072ec:	d00e      	beq.n	800730c <__cvt+0x84>
 80072ee:	eb00 0904 	add.w	r9, r0, r4
 80072f2:	2200      	movs	r2, #0
 80072f4:	2300      	movs	r3, #0
 80072f6:	4630      	mov	r0, r6
 80072f8:	4639      	mov	r1, r7
 80072fa:	f7f9 fbe5 	bl	8000ac8 <__aeabi_dcmpeq>
 80072fe:	b108      	cbz	r0, 8007304 <__cvt+0x7c>
 8007300:	f8cd 900c 	str.w	r9, [sp, #12]
 8007304:	2230      	movs	r2, #48	@ 0x30
 8007306:	9b03      	ldr	r3, [sp, #12]
 8007308:	454b      	cmp	r3, r9
 800730a:	d31e      	bcc.n	800734a <__cvt+0xc2>
 800730c:	9b03      	ldr	r3, [sp, #12]
 800730e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007310:	1b5b      	subs	r3, r3, r5
 8007312:	4628      	mov	r0, r5
 8007314:	6013      	str	r3, [r2, #0]
 8007316:	b004      	add	sp, #16
 8007318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800731c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007320:	eb00 0904 	add.w	r9, r0, r4
 8007324:	d1e5      	bne.n	80072f2 <__cvt+0x6a>
 8007326:	7803      	ldrb	r3, [r0, #0]
 8007328:	2b30      	cmp	r3, #48	@ 0x30
 800732a:	d10a      	bne.n	8007342 <__cvt+0xba>
 800732c:	2200      	movs	r2, #0
 800732e:	2300      	movs	r3, #0
 8007330:	4630      	mov	r0, r6
 8007332:	4639      	mov	r1, r7
 8007334:	f7f9 fbc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007338:	b918      	cbnz	r0, 8007342 <__cvt+0xba>
 800733a:	f1c4 0401 	rsb	r4, r4, #1
 800733e:	f8ca 4000 	str.w	r4, [sl]
 8007342:	f8da 3000 	ldr.w	r3, [sl]
 8007346:	4499      	add	r9, r3
 8007348:	e7d3      	b.n	80072f2 <__cvt+0x6a>
 800734a:	1c59      	adds	r1, r3, #1
 800734c:	9103      	str	r1, [sp, #12]
 800734e:	701a      	strb	r2, [r3, #0]
 8007350:	e7d9      	b.n	8007306 <__cvt+0x7e>

08007352 <__exponent>:
 8007352:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007354:	2900      	cmp	r1, #0
 8007356:	bfba      	itte	lt
 8007358:	4249      	neglt	r1, r1
 800735a:	232d      	movlt	r3, #45	@ 0x2d
 800735c:	232b      	movge	r3, #43	@ 0x2b
 800735e:	2909      	cmp	r1, #9
 8007360:	7002      	strb	r2, [r0, #0]
 8007362:	7043      	strb	r3, [r0, #1]
 8007364:	dd29      	ble.n	80073ba <__exponent+0x68>
 8007366:	f10d 0307 	add.w	r3, sp, #7
 800736a:	461d      	mov	r5, r3
 800736c:	270a      	movs	r7, #10
 800736e:	461a      	mov	r2, r3
 8007370:	fbb1 f6f7 	udiv	r6, r1, r7
 8007374:	fb07 1416 	mls	r4, r7, r6, r1
 8007378:	3430      	adds	r4, #48	@ 0x30
 800737a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800737e:	460c      	mov	r4, r1
 8007380:	2c63      	cmp	r4, #99	@ 0x63
 8007382:	f103 33ff 	add.w	r3, r3, #4294967295
 8007386:	4631      	mov	r1, r6
 8007388:	dcf1      	bgt.n	800736e <__exponent+0x1c>
 800738a:	3130      	adds	r1, #48	@ 0x30
 800738c:	1e94      	subs	r4, r2, #2
 800738e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007392:	1c41      	adds	r1, r0, #1
 8007394:	4623      	mov	r3, r4
 8007396:	42ab      	cmp	r3, r5
 8007398:	d30a      	bcc.n	80073b0 <__exponent+0x5e>
 800739a:	f10d 0309 	add.w	r3, sp, #9
 800739e:	1a9b      	subs	r3, r3, r2
 80073a0:	42ac      	cmp	r4, r5
 80073a2:	bf88      	it	hi
 80073a4:	2300      	movhi	r3, #0
 80073a6:	3302      	adds	r3, #2
 80073a8:	4403      	add	r3, r0
 80073aa:	1a18      	subs	r0, r3, r0
 80073ac:	b003      	add	sp, #12
 80073ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80073b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80073b8:	e7ed      	b.n	8007396 <__exponent+0x44>
 80073ba:	2330      	movs	r3, #48	@ 0x30
 80073bc:	3130      	adds	r1, #48	@ 0x30
 80073be:	7083      	strb	r3, [r0, #2]
 80073c0:	70c1      	strb	r1, [r0, #3]
 80073c2:	1d03      	adds	r3, r0, #4
 80073c4:	e7f1      	b.n	80073aa <__exponent+0x58>
	...

080073c8 <_printf_float>:
 80073c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073cc:	b08d      	sub	sp, #52	@ 0x34
 80073ce:	460c      	mov	r4, r1
 80073d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80073d4:	4616      	mov	r6, r2
 80073d6:	461f      	mov	r7, r3
 80073d8:	4605      	mov	r5, r0
 80073da:	f000 fcb9 	bl	8007d50 <_localeconv_r>
 80073de:	6803      	ldr	r3, [r0, #0]
 80073e0:	9304      	str	r3, [sp, #16]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7f8 ff44 	bl	8000270 <strlen>
 80073e8:	2300      	movs	r3, #0
 80073ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80073ec:	f8d8 3000 	ldr.w	r3, [r8]
 80073f0:	9005      	str	r0, [sp, #20]
 80073f2:	3307      	adds	r3, #7
 80073f4:	f023 0307 	bic.w	r3, r3, #7
 80073f8:	f103 0208 	add.w	r2, r3, #8
 80073fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007400:	f8d4 b000 	ldr.w	fp, [r4]
 8007404:	f8c8 2000 	str.w	r2, [r8]
 8007408:	e9d3 8900 	ldrd	r8, r9, [r3]
 800740c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007410:	9307      	str	r3, [sp, #28]
 8007412:	f8cd 8018 	str.w	r8, [sp, #24]
 8007416:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800741a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800741e:	4b9c      	ldr	r3, [pc, #624]	@ (8007690 <_printf_float+0x2c8>)
 8007420:	f04f 32ff 	mov.w	r2, #4294967295
 8007424:	f7f9 fb82 	bl	8000b2c <__aeabi_dcmpun>
 8007428:	bb70      	cbnz	r0, 8007488 <_printf_float+0xc0>
 800742a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800742e:	4b98      	ldr	r3, [pc, #608]	@ (8007690 <_printf_float+0x2c8>)
 8007430:	f04f 32ff 	mov.w	r2, #4294967295
 8007434:	f7f9 fb5c 	bl	8000af0 <__aeabi_dcmple>
 8007438:	bb30      	cbnz	r0, 8007488 <_printf_float+0xc0>
 800743a:	2200      	movs	r2, #0
 800743c:	2300      	movs	r3, #0
 800743e:	4640      	mov	r0, r8
 8007440:	4649      	mov	r1, r9
 8007442:	f7f9 fb4b 	bl	8000adc <__aeabi_dcmplt>
 8007446:	b110      	cbz	r0, 800744e <_printf_float+0x86>
 8007448:	232d      	movs	r3, #45	@ 0x2d
 800744a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800744e:	4a91      	ldr	r2, [pc, #580]	@ (8007694 <_printf_float+0x2cc>)
 8007450:	4b91      	ldr	r3, [pc, #580]	@ (8007698 <_printf_float+0x2d0>)
 8007452:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007456:	bf8c      	ite	hi
 8007458:	4690      	movhi	r8, r2
 800745a:	4698      	movls	r8, r3
 800745c:	2303      	movs	r3, #3
 800745e:	6123      	str	r3, [r4, #16]
 8007460:	f02b 0304 	bic.w	r3, fp, #4
 8007464:	6023      	str	r3, [r4, #0]
 8007466:	f04f 0900 	mov.w	r9, #0
 800746a:	9700      	str	r7, [sp, #0]
 800746c:	4633      	mov	r3, r6
 800746e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007470:	4621      	mov	r1, r4
 8007472:	4628      	mov	r0, r5
 8007474:	f000 f9d2 	bl	800781c <_printf_common>
 8007478:	3001      	adds	r0, #1
 800747a:	f040 808d 	bne.w	8007598 <_printf_float+0x1d0>
 800747e:	f04f 30ff 	mov.w	r0, #4294967295
 8007482:	b00d      	add	sp, #52	@ 0x34
 8007484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007488:	4642      	mov	r2, r8
 800748a:	464b      	mov	r3, r9
 800748c:	4640      	mov	r0, r8
 800748e:	4649      	mov	r1, r9
 8007490:	f7f9 fb4c 	bl	8000b2c <__aeabi_dcmpun>
 8007494:	b140      	cbz	r0, 80074a8 <_printf_float+0xe0>
 8007496:	464b      	mov	r3, r9
 8007498:	2b00      	cmp	r3, #0
 800749a:	bfbc      	itt	lt
 800749c:	232d      	movlt	r3, #45	@ 0x2d
 800749e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80074a2:	4a7e      	ldr	r2, [pc, #504]	@ (800769c <_printf_float+0x2d4>)
 80074a4:	4b7e      	ldr	r3, [pc, #504]	@ (80076a0 <_printf_float+0x2d8>)
 80074a6:	e7d4      	b.n	8007452 <_printf_float+0x8a>
 80074a8:	6863      	ldr	r3, [r4, #4]
 80074aa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80074ae:	9206      	str	r2, [sp, #24]
 80074b0:	1c5a      	adds	r2, r3, #1
 80074b2:	d13b      	bne.n	800752c <_printf_float+0x164>
 80074b4:	2306      	movs	r3, #6
 80074b6:	6063      	str	r3, [r4, #4]
 80074b8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80074bc:	2300      	movs	r3, #0
 80074be:	6022      	str	r2, [r4, #0]
 80074c0:	9303      	str	r3, [sp, #12]
 80074c2:	ab0a      	add	r3, sp, #40	@ 0x28
 80074c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80074c8:	ab09      	add	r3, sp, #36	@ 0x24
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	6861      	ldr	r1, [r4, #4]
 80074ce:	ec49 8b10 	vmov	d0, r8, r9
 80074d2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80074d6:	4628      	mov	r0, r5
 80074d8:	f7ff fed6 	bl	8007288 <__cvt>
 80074dc:	9b06      	ldr	r3, [sp, #24]
 80074de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80074e0:	2b47      	cmp	r3, #71	@ 0x47
 80074e2:	4680      	mov	r8, r0
 80074e4:	d129      	bne.n	800753a <_printf_float+0x172>
 80074e6:	1cc8      	adds	r0, r1, #3
 80074e8:	db02      	blt.n	80074f0 <_printf_float+0x128>
 80074ea:	6863      	ldr	r3, [r4, #4]
 80074ec:	4299      	cmp	r1, r3
 80074ee:	dd41      	ble.n	8007574 <_printf_float+0x1ac>
 80074f0:	f1aa 0a02 	sub.w	sl, sl, #2
 80074f4:	fa5f fa8a 	uxtb.w	sl, sl
 80074f8:	3901      	subs	r1, #1
 80074fa:	4652      	mov	r2, sl
 80074fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007500:	9109      	str	r1, [sp, #36]	@ 0x24
 8007502:	f7ff ff26 	bl	8007352 <__exponent>
 8007506:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007508:	1813      	adds	r3, r2, r0
 800750a:	2a01      	cmp	r2, #1
 800750c:	4681      	mov	r9, r0
 800750e:	6123      	str	r3, [r4, #16]
 8007510:	dc02      	bgt.n	8007518 <_printf_float+0x150>
 8007512:	6822      	ldr	r2, [r4, #0]
 8007514:	07d2      	lsls	r2, r2, #31
 8007516:	d501      	bpl.n	800751c <_printf_float+0x154>
 8007518:	3301      	adds	r3, #1
 800751a:	6123      	str	r3, [r4, #16]
 800751c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007520:	2b00      	cmp	r3, #0
 8007522:	d0a2      	beq.n	800746a <_printf_float+0xa2>
 8007524:	232d      	movs	r3, #45	@ 0x2d
 8007526:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800752a:	e79e      	b.n	800746a <_printf_float+0xa2>
 800752c:	9a06      	ldr	r2, [sp, #24]
 800752e:	2a47      	cmp	r2, #71	@ 0x47
 8007530:	d1c2      	bne.n	80074b8 <_printf_float+0xf0>
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1c0      	bne.n	80074b8 <_printf_float+0xf0>
 8007536:	2301      	movs	r3, #1
 8007538:	e7bd      	b.n	80074b6 <_printf_float+0xee>
 800753a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800753e:	d9db      	bls.n	80074f8 <_printf_float+0x130>
 8007540:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007544:	d118      	bne.n	8007578 <_printf_float+0x1b0>
 8007546:	2900      	cmp	r1, #0
 8007548:	6863      	ldr	r3, [r4, #4]
 800754a:	dd0b      	ble.n	8007564 <_printf_float+0x19c>
 800754c:	6121      	str	r1, [r4, #16]
 800754e:	b913      	cbnz	r3, 8007556 <_printf_float+0x18e>
 8007550:	6822      	ldr	r2, [r4, #0]
 8007552:	07d0      	lsls	r0, r2, #31
 8007554:	d502      	bpl.n	800755c <_printf_float+0x194>
 8007556:	3301      	adds	r3, #1
 8007558:	440b      	add	r3, r1
 800755a:	6123      	str	r3, [r4, #16]
 800755c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800755e:	f04f 0900 	mov.w	r9, #0
 8007562:	e7db      	b.n	800751c <_printf_float+0x154>
 8007564:	b913      	cbnz	r3, 800756c <_printf_float+0x1a4>
 8007566:	6822      	ldr	r2, [r4, #0]
 8007568:	07d2      	lsls	r2, r2, #31
 800756a:	d501      	bpl.n	8007570 <_printf_float+0x1a8>
 800756c:	3302      	adds	r3, #2
 800756e:	e7f4      	b.n	800755a <_printf_float+0x192>
 8007570:	2301      	movs	r3, #1
 8007572:	e7f2      	b.n	800755a <_printf_float+0x192>
 8007574:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007578:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800757a:	4299      	cmp	r1, r3
 800757c:	db05      	blt.n	800758a <_printf_float+0x1c2>
 800757e:	6823      	ldr	r3, [r4, #0]
 8007580:	6121      	str	r1, [r4, #16]
 8007582:	07d8      	lsls	r0, r3, #31
 8007584:	d5ea      	bpl.n	800755c <_printf_float+0x194>
 8007586:	1c4b      	adds	r3, r1, #1
 8007588:	e7e7      	b.n	800755a <_printf_float+0x192>
 800758a:	2900      	cmp	r1, #0
 800758c:	bfd4      	ite	le
 800758e:	f1c1 0202 	rsble	r2, r1, #2
 8007592:	2201      	movgt	r2, #1
 8007594:	4413      	add	r3, r2
 8007596:	e7e0      	b.n	800755a <_printf_float+0x192>
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	055a      	lsls	r2, r3, #21
 800759c:	d407      	bmi.n	80075ae <_printf_float+0x1e6>
 800759e:	6923      	ldr	r3, [r4, #16]
 80075a0:	4642      	mov	r2, r8
 80075a2:	4631      	mov	r1, r6
 80075a4:	4628      	mov	r0, r5
 80075a6:	47b8      	blx	r7
 80075a8:	3001      	adds	r0, #1
 80075aa:	d12b      	bne.n	8007604 <_printf_float+0x23c>
 80075ac:	e767      	b.n	800747e <_printf_float+0xb6>
 80075ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80075b2:	f240 80dd 	bls.w	8007770 <_printf_float+0x3a8>
 80075b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80075ba:	2200      	movs	r2, #0
 80075bc:	2300      	movs	r3, #0
 80075be:	f7f9 fa83 	bl	8000ac8 <__aeabi_dcmpeq>
 80075c2:	2800      	cmp	r0, #0
 80075c4:	d033      	beq.n	800762e <_printf_float+0x266>
 80075c6:	4a37      	ldr	r2, [pc, #220]	@ (80076a4 <_printf_float+0x2dc>)
 80075c8:	2301      	movs	r3, #1
 80075ca:	4631      	mov	r1, r6
 80075cc:	4628      	mov	r0, r5
 80075ce:	47b8      	blx	r7
 80075d0:	3001      	adds	r0, #1
 80075d2:	f43f af54 	beq.w	800747e <_printf_float+0xb6>
 80075d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80075da:	4543      	cmp	r3, r8
 80075dc:	db02      	blt.n	80075e4 <_printf_float+0x21c>
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	07d8      	lsls	r0, r3, #31
 80075e2:	d50f      	bpl.n	8007604 <_printf_float+0x23c>
 80075e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075e8:	4631      	mov	r1, r6
 80075ea:	4628      	mov	r0, r5
 80075ec:	47b8      	blx	r7
 80075ee:	3001      	adds	r0, #1
 80075f0:	f43f af45 	beq.w	800747e <_printf_float+0xb6>
 80075f4:	f04f 0900 	mov.w	r9, #0
 80075f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80075fc:	f104 0a1a 	add.w	sl, r4, #26
 8007600:	45c8      	cmp	r8, r9
 8007602:	dc09      	bgt.n	8007618 <_printf_float+0x250>
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	079b      	lsls	r3, r3, #30
 8007608:	f100 8103 	bmi.w	8007812 <_printf_float+0x44a>
 800760c:	68e0      	ldr	r0, [r4, #12]
 800760e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007610:	4298      	cmp	r0, r3
 8007612:	bfb8      	it	lt
 8007614:	4618      	movlt	r0, r3
 8007616:	e734      	b.n	8007482 <_printf_float+0xba>
 8007618:	2301      	movs	r3, #1
 800761a:	4652      	mov	r2, sl
 800761c:	4631      	mov	r1, r6
 800761e:	4628      	mov	r0, r5
 8007620:	47b8      	blx	r7
 8007622:	3001      	adds	r0, #1
 8007624:	f43f af2b 	beq.w	800747e <_printf_float+0xb6>
 8007628:	f109 0901 	add.w	r9, r9, #1
 800762c:	e7e8      	b.n	8007600 <_printf_float+0x238>
 800762e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007630:	2b00      	cmp	r3, #0
 8007632:	dc39      	bgt.n	80076a8 <_printf_float+0x2e0>
 8007634:	4a1b      	ldr	r2, [pc, #108]	@ (80076a4 <_printf_float+0x2dc>)
 8007636:	2301      	movs	r3, #1
 8007638:	4631      	mov	r1, r6
 800763a:	4628      	mov	r0, r5
 800763c:	47b8      	blx	r7
 800763e:	3001      	adds	r0, #1
 8007640:	f43f af1d 	beq.w	800747e <_printf_float+0xb6>
 8007644:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007648:	ea59 0303 	orrs.w	r3, r9, r3
 800764c:	d102      	bne.n	8007654 <_printf_float+0x28c>
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	07d9      	lsls	r1, r3, #31
 8007652:	d5d7      	bpl.n	8007604 <_printf_float+0x23c>
 8007654:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007658:	4631      	mov	r1, r6
 800765a:	4628      	mov	r0, r5
 800765c:	47b8      	blx	r7
 800765e:	3001      	adds	r0, #1
 8007660:	f43f af0d 	beq.w	800747e <_printf_float+0xb6>
 8007664:	f04f 0a00 	mov.w	sl, #0
 8007668:	f104 0b1a 	add.w	fp, r4, #26
 800766c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800766e:	425b      	negs	r3, r3
 8007670:	4553      	cmp	r3, sl
 8007672:	dc01      	bgt.n	8007678 <_printf_float+0x2b0>
 8007674:	464b      	mov	r3, r9
 8007676:	e793      	b.n	80075a0 <_printf_float+0x1d8>
 8007678:	2301      	movs	r3, #1
 800767a:	465a      	mov	r2, fp
 800767c:	4631      	mov	r1, r6
 800767e:	4628      	mov	r0, r5
 8007680:	47b8      	blx	r7
 8007682:	3001      	adds	r0, #1
 8007684:	f43f aefb 	beq.w	800747e <_printf_float+0xb6>
 8007688:	f10a 0a01 	add.w	sl, sl, #1
 800768c:	e7ee      	b.n	800766c <_printf_float+0x2a4>
 800768e:	bf00      	nop
 8007690:	7fefffff 	.word	0x7fefffff
 8007694:	0801cc1c 	.word	0x0801cc1c
 8007698:	0801cc18 	.word	0x0801cc18
 800769c:	0801cc24 	.word	0x0801cc24
 80076a0:	0801cc20 	.word	0x0801cc20
 80076a4:	0801cc28 	.word	0x0801cc28
 80076a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80076ae:	4553      	cmp	r3, sl
 80076b0:	bfa8      	it	ge
 80076b2:	4653      	movge	r3, sl
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	4699      	mov	r9, r3
 80076b8:	dc36      	bgt.n	8007728 <_printf_float+0x360>
 80076ba:	f04f 0b00 	mov.w	fp, #0
 80076be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076c2:	f104 021a 	add.w	r2, r4, #26
 80076c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076c8:	9306      	str	r3, [sp, #24]
 80076ca:	eba3 0309 	sub.w	r3, r3, r9
 80076ce:	455b      	cmp	r3, fp
 80076d0:	dc31      	bgt.n	8007736 <_printf_float+0x36e>
 80076d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076d4:	459a      	cmp	sl, r3
 80076d6:	dc3a      	bgt.n	800774e <_printf_float+0x386>
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	07da      	lsls	r2, r3, #31
 80076dc:	d437      	bmi.n	800774e <_printf_float+0x386>
 80076de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076e0:	ebaa 0903 	sub.w	r9, sl, r3
 80076e4:	9b06      	ldr	r3, [sp, #24]
 80076e6:	ebaa 0303 	sub.w	r3, sl, r3
 80076ea:	4599      	cmp	r9, r3
 80076ec:	bfa8      	it	ge
 80076ee:	4699      	movge	r9, r3
 80076f0:	f1b9 0f00 	cmp.w	r9, #0
 80076f4:	dc33      	bgt.n	800775e <_printf_float+0x396>
 80076f6:	f04f 0800 	mov.w	r8, #0
 80076fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076fe:	f104 0b1a 	add.w	fp, r4, #26
 8007702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007704:	ebaa 0303 	sub.w	r3, sl, r3
 8007708:	eba3 0309 	sub.w	r3, r3, r9
 800770c:	4543      	cmp	r3, r8
 800770e:	f77f af79 	ble.w	8007604 <_printf_float+0x23c>
 8007712:	2301      	movs	r3, #1
 8007714:	465a      	mov	r2, fp
 8007716:	4631      	mov	r1, r6
 8007718:	4628      	mov	r0, r5
 800771a:	47b8      	blx	r7
 800771c:	3001      	adds	r0, #1
 800771e:	f43f aeae 	beq.w	800747e <_printf_float+0xb6>
 8007722:	f108 0801 	add.w	r8, r8, #1
 8007726:	e7ec      	b.n	8007702 <_printf_float+0x33a>
 8007728:	4642      	mov	r2, r8
 800772a:	4631      	mov	r1, r6
 800772c:	4628      	mov	r0, r5
 800772e:	47b8      	blx	r7
 8007730:	3001      	adds	r0, #1
 8007732:	d1c2      	bne.n	80076ba <_printf_float+0x2f2>
 8007734:	e6a3      	b.n	800747e <_printf_float+0xb6>
 8007736:	2301      	movs	r3, #1
 8007738:	4631      	mov	r1, r6
 800773a:	4628      	mov	r0, r5
 800773c:	9206      	str	r2, [sp, #24]
 800773e:	47b8      	blx	r7
 8007740:	3001      	adds	r0, #1
 8007742:	f43f ae9c 	beq.w	800747e <_printf_float+0xb6>
 8007746:	9a06      	ldr	r2, [sp, #24]
 8007748:	f10b 0b01 	add.w	fp, fp, #1
 800774c:	e7bb      	b.n	80076c6 <_printf_float+0x2fe>
 800774e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007752:	4631      	mov	r1, r6
 8007754:	4628      	mov	r0, r5
 8007756:	47b8      	blx	r7
 8007758:	3001      	adds	r0, #1
 800775a:	d1c0      	bne.n	80076de <_printf_float+0x316>
 800775c:	e68f      	b.n	800747e <_printf_float+0xb6>
 800775e:	9a06      	ldr	r2, [sp, #24]
 8007760:	464b      	mov	r3, r9
 8007762:	4442      	add	r2, r8
 8007764:	4631      	mov	r1, r6
 8007766:	4628      	mov	r0, r5
 8007768:	47b8      	blx	r7
 800776a:	3001      	adds	r0, #1
 800776c:	d1c3      	bne.n	80076f6 <_printf_float+0x32e>
 800776e:	e686      	b.n	800747e <_printf_float+0xb6>
 8007770:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007774:	f1ba 0f01 	cmp.w	sl, #1
 8007778:	dc01      	bgt.n	800777e <_printf_float+0x3b6>
 800777a:	07db      	lsls	r3, r3, #31
 800777c:	d536      	bpl.n	80077ec <_printf_float+0x424>
 800777e:	2301      	movs	r3, #1
 8007780:	4642      	mov	r2, r8
 8007782:	4631      	mov	r1, r6
 8007784:	4628      	mov	r0, r5
 8007786:	47b8      	blx	r7
 8007788:	3001      	adds	r0, #1
 800778a:	f43f ae78 	beq.w	800747e <_printf_float+0xb6>
 800778e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007792:	4631      	mov	r1, r6
 8007794:	4628      	mov	r0, r5
 8007796:	47b8      	blx	r7
 8007798:	3001      	adds	r0, #1
 800779a:	f43f ae70 	beq.w	800747e <_printf_float+0xb6>
 800779e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80077a2:	2200      	movs	r2, #0
 80077a4:	2300      	movs	r3, #0
 80077a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077aa:	f7f9 f98d 	bl	8000ac8 <__aeabi_dcmpeq>
 80077ae:	b9c0      	cbnz	r0, 80077e2 <_printf_float+0x41a>
 80077b0:	4653      	mov	r3, sl
 80077b2:	f108 0201 	add.w	r2, r8, #1
 80077b6:	4631      	mov	r1, r6
 80077b8:	4628      	mov	r0, r5
 80077ba:	47b8      	blx	r7
 80077bc:	3001      	adds	r0, #1
 80077be:	d10c      	bne.n	80077da <_printf_float+0x412>
 80077c0:	e65d      	b.n	800747e <_printf_float+0xb6>
 80077c2:	2301      	movs	r3, #1
 80077c4:	465a      	mov	r2, fp
 80077c6:	4631      	mov	r1, r6
 80077c8:	4628      	mov	r0, r5
 80077ca:	47b8      	blx	r7
 80077cc:	3001      	adds	r0, #1
 80077ce:	f43f ae56 	beq.w	800747e <_printf_float+0xb6>
 80077d2:	f108 0801 	add.w	r8, r8, #1
 80077d6:	45d0      	cmp	r8, sl
 80077d8:	dbf3      	blt.n	80077c2 <_printf_float+0x3fa>
 80077da:	464b      	mov	r3, r9
 80077dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80077e0:	e6df      	b.n	80075a2 <_printf_float+0x1da>
 80077e2:	f04f 0800 	mov.w	r8, #0
 80077e6:	f104 0b1a 	add.w	fp, r4, #26
 80077ea:	e7f4      	b.n	80077d6 <_printf_float+0x40e>
 80077ec:	2301      	movs	r3, #1
 80077ee:	4642      	mov	r2, r8
 80077f0:	e7e1      	b.n	80077b6 <_printf_float+0x3ee>
 80077f2:	2301      	movs	r3, #1
 80077f4:	464a      	mov	r2, r9
 80077f6:	4631      	mov	r1, r6
 80077f8:	4628      	mov	r0, r5
 80077fa:	47b8      	blx	r7
 80077fc:	3001      	adds	r0, #1
 80077fe:	f43f ae3e 	beq.w	800747e <_printf_float+0xb6>
 8007802:	f108 0801 	add.w	r8, r8, #1
 8007806:	68e3      	ldr	r3, [r4, #12]
 8007808:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800780a:	1a5b      	subs	r3, r3, r1
 800780c:	4543      	cmp	r3, r8
 800780e:	dcf0      	bgt.n	80077f2 <_printf_float+0x42a>
 8007810:	e6fc      	b.n	800760c <_printf_float+0x244>
 8007812:	f04f 0800 	mov.w	r8, #0
 8007816:	f104 0919 	add.w	r9, r4, #25
 800781a:	e7f4      	b.n	8007806 <_printf_float+0x43e>

0800781c <_printf_common>:
 800781c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007820:	4616      	mov	r6, r2
 8007822:	4698      	mov	r8, r3
 8007824:	688a      	ldr	r2, [r1, #8]
 8007826:	690b      	ldr	r3, [r1, #16]
 8007828:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800782c:	4293      	cmp	r3, r2
 800782e:	bfb8      	it	lt
 8007830:	4613      	movlt	r3, r2
 8007832:	6033      	str	r3, [r6, #0]
 8007834:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007838:	4607      	mov	r7, r0
 800783a:	460c      	mov	r4, r1
 800783c:	b10a      	cbz	r2, 8007842 <_printf_common+0x26>
 800783e:	3301      	adds	r3, #1
 8007840:	6033      	str	r3, [r6, #0]
 8007842:	6823      	ldr	r3, [r4, #0]
 8007844:	0699      	lsls	r1, r3, #26
 8007846:	bf42      	ittt	mi
 8007848:	6833      	ldrmi	r3, [r6, #0]
 800784a:	3302      	addmi	r3, #2
 800784c:	6033      	strmi	r3, [r6, #0]
 800784e:	6825      	ldr	r5, [r4, #0]
 8007850:	f015 0506 	ands.w	r5, r5, #6
 8007854:	d106      	bne.n	8007864 <_printf_common+0x48>
 8007856:	f104 0a19 	add.w	sl, r4, #25
 800785a:	68e3      	ldr	r3, [r4, #12]
 800785c:	6832      	ldr	r2, [r6, #0]
 800785e:	1a9b      	subs	r3, r3, r2
 8007860:	42ab      	cmp	r3, r5
 8007862:	dc26      	bgt.n	80078b2 <_printf_common+0x96>
 8007864:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007868:	6822      	ldr	r2, [r4, #0]
 800786a:	3b00      	subs	r3, #0
 800786c:	bf18      	it	ne
 800786e:	2301      	movne	r3, #1
 8007870:	0692      	lsls	r2, r2, #26
 8007872:	d42b      	bmi.n	80078cc <_printf_common+0xb0>
 8007874:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007878:	4641      	mov	r1, r8
 800787a:	4638      	mov	r0, r7
 800787c:	47c8      	blx	r9
 800787e:	3001      	adds	r0, #1
 8007880:	d01e      	beq.n	80078c0 <_printf_common+0xa4>
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	6922      	ldr	r2, [r4, #16]
 8007886:	f003 0306 	and.w	r3, r3, #6
 800788a:	2b04      	cmp	r3, #4
 800788c:	bf02      	ittt	eq
 800788e:	68e5      	ldreq	r5, [r4, #12]
 8007890:	6833      	ldreq	r3, [r6, #0]
 8007892:	1aed      	subeq	r5, r5, r3
 8007894:	68a3      	ldr	r3, [r4, #8]
 8007896:	bf0c      	ite	eq
 8007898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800789c:	2500      	movne	r5, #0
 800789e:	4293      	cmp	r3, r2
 80078a0:	bfc4      	itt	gt
 80078a2:	1a9b      	subgt	r3, r3, r2
 80078a4:	18ed      	addgt	r5, r5, r3
 80078a6:	2600      	movs	r6, #0
 80078a8:	341a      	adds	r4, #26
 80078aa:	42b5      	cmp	r5, r6
 80078ac:	d11a      	bne.n	80078e4 <_printf_common+0xc8>
 80078ae:	2000      	movs	r0, #0
 80078b0:	e008      	b.n	80078c4 <_printf_common+0xa8>
 80078b2:	2301      	movs	r3, #1
 80078b4:	4652      	mov	r2, sl
 80078b6:	4641      	mov	r1, r8
 80078b8:	4638      	mov	r0, r7
 80078ba:	47c8      	blx	r9
 80078bc:	3001      	adds	r0, #1
 80078be:	d103      	bne.n	80078c8 <_printf_common+0xac>
 80078c0:	f04f 30ff 	mov.w	r0, #4294967295
 80078c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c8:	3501      	adds	r5, #1
 80078ca:	e7c6      	b.n	800785a <_printf_common+0x3e>
 80078cc:	18e1      	adds	r1, r4, r3
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	2030      	movs	r0, #48	@ 0x30
 80078d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80078d6:	4422      	add	r2, r4
 80078d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80078dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80078e0:	3302      	adds	r3, #2
 80078e2:	e7c7      	b.n	8007874 <_printf_common+0x58>
 80078e4:	2301      	movs	r3, #1
 80078e6:	4622      	mov	r2, r4
 80078e8:	4641      	mov	r1, r8
 80078ea:	4638      	mov	r0, r7
 80078ec:	47c8      	blx	r9
 80078ee:	3001      	adds	r0, #1
 80078f0:	d0e6      	beq.n	80078c0 <_printf_common+0xa4>
 80078f2:	3601      	adds	r6, #1
 80078f4:	e7d9      	b.n	80078aa <_printf_common+0x8e>
	...

080078f8 <_printf_i>:
 80078f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078fc:	7e0f      	ldrb	r7, [r1, #24]
 80078fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007900:	2f78      	cmp	r7, #120	@ 0x78
 8007902:	4691      	mov	r9, r2
 8007904:	4680      	mov	r8, r0
 8007906:	460c      	mov	r4, r1
 8007908:	469a      	mov	sl, r3
 800790a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800790e:	d807      	bhi.n	8007920 <_printf_i+0x28>
 8007910:	2f62      	cmp	r7, #98	@ 0x62
 8007912:	d80a      	bhi.n	800792a <_printf_i+0x32>
 8007914:	2f00      	cmp	r7, #0
 8007916:	f000 80d1 	beq.w	8007abc <_printf_i+0x1c4>
 800791a:	2f58      	cmp	r7, #88	@ 0x58
 800791c:	f000 80b8 	beq.w	8007a90 <_printf_i+0x198>
 8007920:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007924:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007928:	e03a      	b.n	80079a0 <_printf_i+0xa8>
 800792a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800792e:	2b15      	cmp	r3, #21
 8007930:	d8f6      	bhi.n	8007920 <_printf_i+0x28>
 8007932:	a101      	add	r1, pc, #4	@ (adr r1, 8007938 <_printf_i+0x40>)
 8007934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007938:	08007991 	.word	0x08007991
 800793c:	080079a5 	.word	0x080079a5
 8007940:	08007921 	.word	0x08007921
 8007944:	08007921 	.word	0x08007921
 8007948:	08007921 	.word	0x08007921
 800794c:	08007921 	.word	0x08007921
 8007950:	080079a5 	.word	0x080079a5
 8007954:	08007921 	.word	0x08007921
 8007958:	08007921 	.word	0x08007921
 800795c:	08007921 	.word	0x08007921
 8007960:	08007921 	.word	0x08007921
 8007964:	08007aa3 	.word	0x08007aa3
 8007968:	080079cf 	.word	0x080079cf
 800796c:	08007a5d 	.word	0x08007a5d
 8007970:	08007921 	.word	0x08007921
 8007974:	08007921 	.word	0x08007921
 8007978:	08007ac5 	.word	0x08007ac5
 800797c:	08007921 	.word	0x08007921
 8007980:	080079cf 	.word	0x080079cf
 8007984:	08007921 	.word	0x08007921
 8007988:	08007921 	.word	0x08007921
 800798c:	08007a65 	.word	0x08007a65
 8007990:	6833      	ldr	r3, [r6, #0]
 8007992:	1d1a      	adds	r2, r3, #4
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	6032      	str	r2, [r6, #0]
 8007998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800799c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079a0:	2301      	movs	r3, #1
 80079a2:	e09c      	b.n	8007ade <_printf_i+0x1e6>
 80079a4:	6833      	ldr	r3, [r6, #0]
 80079a6:	6820      	ldr	r0, [r4, #0]
 80079a8:	1d19      	adds	r1, r3, #4
 80079aa:	6031      	str	r1, [r6, #0]
 80079ac:	0606      	lsls	r6, r0, #24
 80079ae:	d501      	bpl.n	80079b4 <_printf_i+0xbc>
 80079b0:	681d      	ldr	r5, [r3, #0]
 80079b2:	e003      	b.n	80079bc <_printf_i+0xc4>
 80079b4:	0645      	lsls	r5, r0, #25
 80079b6:	d5fb      	bpl.n	80079b0 <_printf_i+0xb8>
 80079b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80079bc:	2d00      	cmp	r5, #0
 80079be:	da03      	bge.n	80079c8 <_printf_i+0xd0>
 80079c0:	232d      	movs	r3, #45	@ 0x2d
 80079c2:	426d      	negs	r5, r5
 80079c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079c8:	4858      	ldr	r0, [pc, #352]	@ (8007b2c <_printf_i+0x234>)
 80079ca:	230a      	movs	r3, #10
 80079cc:	e011      	b.n	80079f2 <_printf_i+0xfa>
 80079ce:	6821      	ldr	r1, [r4, #0]
 80079d0:	6833      	ldr	r3, [r6, #0]
 80079d2:	0608      	lsls	r0, r1, #24
 80079d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80079d8:	d402      	bmi.n	80079e0 <_printf_i+0xe8>
 80079da:	0649      	lsls	r1, r1, #25
 80079dc:	bf48      	it	mi
 80079de:	b2ad      	uxthmi	r5, r5
 80079e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80079e2:	4852      	ldr	r0, [pc, #328]	@ (8007b2c <_printf_i+0x234>)
 80079e4:	6033      	str	r3, [r6, #0]
 80079e6:	bf14      	ite	ne
 80079e8:	230a      	movne	r3, #10
 80079ea:	2308      	moveq	r3, #8
 80079ec:	2100      	movs	r1, #0
 80079ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80079f2:	6866      	ldr	r6, [r4, #4]
 80079f4:	60a6      	str	r6, [r4, #8]
 80079f6:	2e00      	cmp	r6, #0
 80079f8:	db05      	blt.n	8007a06 <_printf_i+0x10e>
 80079fa:	6821      	ldr	r1, [r4, #0]
 80079fc:	432e      	orrs	r6, r5
 80079fe:	f021 0104 	bic.w	r1, r1, #4
 8007a02:	6021      	str	r1, [r4, #0]
 8007a04:	d04b      	beq.n	8007a9e <_printf_i+0x1a6>
 8007a06:	4616      	mov	r6, r2
 8007a08:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a0c:	fb03 5711 	mls	r7, r3, r1, r5
 8007a10:	5dc7      	ldrb	r7, [r0, r7]
 8007a12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a16:	462f      	mov	r7, r5
 8007a18:	42bb      	cmp	r3, r7
 8007a1a:	460d      	mov	r5, r1
 8007a1c:	d9f4      	bls.n	8007a08 <_printf_i+0x110>
 8007a1e:	2b08      	cmp	r3, #8
 8007a20:	d10b      	bne.n	8007a3a <_printf_i+0x142>
 8007a22:	6823      	ldr	r3, [r4, #0]
 8007a24:	07df      	lsls	r7, r3, #31
 8007a26:	d508      	bpl.n	8007a3a <_printf_i+0x142>
 8007a28:	6923      	ldr	r3, [r4, #16]
 8007a2a:	6861      	ldr	r1, [r4, #4]
 8007a2c:	4299      	cmp	r1, r3
 8007a2e:	bfde      	ittt	le
 8007a30:	2330      	movle	r3, #48	@ 0x30
 8007a32:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a36:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a3a:	1b92      	subs	r2, r2, r6
 8007a3c:	6122      	str	r2, [r4, #16]
 8007a3e:	f8cd a000 	str.w	sl, [sp]
 8007a42:	464b      	mov	r3, r9
 8007a44:	aa03      	add	r2, sp, #12
 8007a46:	4621      	mov	r1, r4
 8007a48:	4640      	mov	r0, r8
 8007a4a:	f7ff fee7 	bl	800781c <_printf_common>
 8007a4e:	3001      	adds	r0, #1
 8007a50:	d14a      	bne.n	8007ae8 <_printf_i+0x1f0>
 8007a52:	f04f 30ff 	mov.w	r0, #4294967295
 8007a56:	b004      	add	sp, #16
 8007a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a5c:	6823      	ldr	r3, [r4, #0]
 8007a5e:	f043 0320 	orr.w	r3, r3, #32
 8007a62:	6023      	str	r3, [r4, #0]
 8007a64:	4832      	ldr	r0, [pc, #200]	@ (8007b30 <_printf_i+0x238>)
 8007a66:	2778      	movs	r7, #120	@ 0x78
 8007a68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a6c:	6823      	ldr	r3, [r4, #0]
 8007a6e:	6831      	ldr	r1, [r6, #0]
 8007a70:	061f      	lsls	r7, r3, #24
 8007a72:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a76:	d402      	bmi.n	8007a7e <_printf_i+0x186>
 8007a78:	065f      	lsls	r7, r3, #25
 8007a7a:	bf48      	it	mi
 8007a7c:	b2ad      	uxthmi	r5, r5
 8007a7e:	6031      	str	r1, [r6, #0]
 8007a80:	07d9      	lsls	r1, r3, #31
 8007a82:	bf44      	itt	mi
 8007a84:	f043 0320 	orrmi.w	r3, r3, #32
 8007a88:	6023      	strmi	r3, [r4, #0]
 8007a8a:	b11d      	cbz	r5, 8007a94 <_printf_i+0x19c>
 8007a8c:	2310      	movs	r3, #16
 8007a8e:	e7ad      	b.n	80079ec <_printf_i+0xf4>
 8007a90:	4826      	ldr	r0, [pc, #152]	@ (8007b2c <_printf_i+0x234>)
 8007a92:	e7e9      	b.n	8007a68 <_printf_i+0x170>
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	f023 0320 	bic.w	r3, r3, #32
 8007a9a:	6023      	str	r3, [r4, #0]
 8007a9c:	e7f6      	b.n	8007a8c <_printf_i+0x194>
 8007a9e:	4616      	mov	r6, r2
 8007aa0:	e7bd      	b.n	8007a1e <_printf_i+0x126>
 8007aa2:	6833      	ldr	r3, [r6, #0]
 8007aa4:	6825      	ldr	r5, [r4, #0]
 8007aa6:	6961      	ldr	r1, [r4, #20]
 8007aa8:	1d18      	adds	r0, r3, #4
 8007aaa:	6030      	str	r0, [r6, #0]
 8007aac:	062e      	lsls	r6, r5, #24
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	d501      	bpl.n	8007ab6 <_printf_i+0x1be>
 8007ab2:	6019      	str	r1, [r3, #0]
 8007ab4:	e002      	b.n	8007abc <_printf_i+0x1c4>
 8007ab6:	0668      	lsls	r0, r5, #25
 8007ab8:	d5fb      	bpl.n	8007ab2 <_printf_i+0x1ba>
 8007aba:	8019      	strh	r1, [r3, #0]
 8007abc:	2300      	movs	r3, #0
 8007abe:	6123      	str	r3, [r4, #16]
 8007ac0:	4616      	mov	r6, r2
 8007ac2:	e7bc      	b.n	8007a3e <_printf_i+0x146>
 8007ac4:	6833      	ldr	r3, [r6, #0]
 8007ac6:	1d1a      	adds	r2, r3, #4
 8007ac8:	6032      	str	r2, [r6, #0]
 8007aca:	681e      	ldr	r6, [r3, #0]
 8007acc:	6862      	ldr	r2, [r4, #4]
 8007ace:	2100      	movs	r1, #0
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	f7f8 fb7d 	bl	80001d0 <memchr>
 8007ad6:	b108      	cbz	r0, 8007adc <_printf_i+0x1e4>
 8007ad8:	1b80      	subs	r0, r0, r6
 8007ada:	6060      	str	r0, [r4, #4]
 8007adc:	6863      	ldr	r3, [r4, #4]
 8007ade:	6123      	str	r3, [r4, #16]
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ae6:	e7aa      	b.n	8007a3e <_printf_i+0x146>
 8007ae8:	6923      	ldr	r3, [r4, #16]
 8007aea:	4632      	mov	r2, r6
 8007aec:	4649      	mov	r1, r9
 8007aee:	4640      	mov	r0, r8
 8007af0:	47d0      	blx	sl
 8007af2:	3001      	adds	r0, #1
 8007af4:	d0ad      	beq.n	8007a52 <_printf_i+0x15a>
 8007af6:	6823      	ldr	r3, [r4, #0]
 8007af8:	079b      	lsls	r3, r3, #30
 8007afa:	d413      	bmi.n	8007b24 <_printf_i+0x22c>
 8007afc:	68e0      	ldr	r0, [r4, #12]
 8007afe:	9b03      	ldr	r3, [sp, #12]
 8007b00:	4298      	cmp	r0, r3
 8007b02:	bfb8      	it	lt
 8007b04:	4618      	movlt	r0, r3
 8007b06:	e7a6      	b.n	8007a56 <_printf_i+0x15e>
 8007b08:	2301      	movs	r3, #1
 8007b0a:	4632      	mov	r2, r6
 8007b0c:	4649      	mov	r1, r9
 8007b0e:	4640      	mov	r0, r8
 8007b10:	47d0      	blx	sl
 8007b12:	3001      	adds	r0, #1
 8007b14:	d09d      	beq.n	8007a52 <_printf_i+0x15a>
 8007b16:	3501      	adds	r5, #1
 8007b18:	68e3      	ldr	r3, [r4, #12]
 8007b1a:	9903      	ldr	r1, [sp, #12]
 8007b1c:	1a5b      	subs	r3, r3, r1
 8007b1e:	42ab      	cmp	r3, r5
 8007b20:	dcf2      	bgt.n	8007b08 <_printf_i+0x210>
 8007b22:	e7eb      	b.n	8007afc <_printf_i+0x204>
 8007b24:	2500      	movs	r5, #0
 8007b26:	f104 0619 	add.w	r6, r4, #25
 8007b2a:	e7f5      	b.n	8007b18 <_printf_i+0x220>
 8007b2c:	0801cc2a 	.word	0x0801cc2a
 8007b30:	0801cc3b 	.word	0x0801cc3b

08007b34 <std>:
 8007b34:	2300      	movs	r3, #0
 8007b36:	b510      	push	{r4, lr}
 8007b38:	4604      	mov	r4, r0
 8007b3a:	e9c0 3300 	strd	r3, r3, [r0]
 8007b3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b42:	6083      	str	r3, [r0, #8]
 8007b44:	8181      	strh	r1, [r0, #12]
 8007b46:	6643      	str	r3, [r0, #100]	@ 0x64
 8007b48:	81c2      	strh	r2, [r0, #14]
 8007b4a:	6183      	str	r3, [r0, #24]
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	2208      	movs	r2, #8
 8007b50:	305c      	adds	r0, #92	@ 0x5c
 8007b52:	f000 f8f4 	bl	8007d3e <memset>
 8007b56:	4b0d      	ldr	r3, [pc, #52]	@ (8007b8c <std+0x58>)
 8007b58:	6263      	str	r3, [r4, #36]	@ 0x24
 8007b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b90 <std+0x5c>)
 8007b5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b94 <std+0x60>)
 8007b60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007b62:	4b0d      	ldr	r3, [pc, #52]	@ (8007b98 <std+0x64>)
 8007b64:	6323      	str	r3, [r4, #48]	@ 0x30
 8007b66:	4b0d      	ldr	r3, [pc, #52]	@ (8007b9c <std+0x68>)
 8007b68:	6224      	str	r4, [r4, #32]
 8007b6a:	429c      	cmp	r4, r3
 8007b6c:	d006      	beq.n	8007b7c <std+0x48>
 8007b6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007b72:	4294      	cmp	r4, r2
 8007b74:	d002      	beq.n	8007b7c <std+0x48>
 8007b76:	33d0      	adds	r3, #208	@ 0xd0
 8007b78:	429c      	cmp	r4, r3
 8007b7a:	d105      	bne.n	8007b88 <std+0x54>
 8007b7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b84:	f000 b958 	b.w	8007e38 <__retarget_lock_init_recursive>
 8007b88:	bd10      	pop	{r4, pc}
 8007b8a:	bf00      	nop
 8007b8c:	08007cb9 	.word	0x08007cb9
 8007b90:	08007cdb 	.word	0x08007cdb
 8007b94:	08007d13 	.word	0x08007d13
 8007b98:	08007d37 	.word	0x08007d37
 8007b9c:	20002034 	.word	0x20002034

08007ba0 <stdio_exit_handler>:
 8007ba0:	4a02      	ldr	r2, [pc, #8]	@ (8007bac <stdio_exit_handler+0xc>)
 8007ba2:	4903      	ldr	r1, [pc, #12]	@ (8007bb0 <stdio_exit_handler+0x10>)
 8007ba4:	4803      	ldr	r0, [pc, #12]	@ (8007bb4 <stdio_exit_handler+0x14>)
 8007ba6:	f000 b869 	b.w	8007c7c <_fwalk_sglue>
 8007baa:	bf00      	nop
 8007bac:	20000014 	.word	0x20000014
 8007bb0:	080094ed 	.word	0x080094ed
 8007bb4:	20000024 	.word	0x20000024

08007bb8 <cleanup_stdio>:
 8007bb8:	6841      	ldr	r1, [r0, #4]
 8007bba:	4b0c      	ldr	r3, [pc, #48]	@ (8007bec <cleanup_stdio+0x34>)
 8007bbc:	4299      	cmp	r1, r3
 8007bbe:	b510      	push	{r4, lr}
 8007bc0:	4604      	mov	r4, r0
 8007bc2:	d001      	beq.n	8007bc8 <cleanup_stdio+0x10>
 8007bc4:	f001 fc92 	bl	80094ec <_fflush_r>
 8007bc8:	68a1      	ldr	r1, [r4, #8]
 8007bca:	4b09      	ldr	r3, [pc, #36]	@ (8007bf0 <cleanup_stdio+0x38>)
 8007bcc:	4299      	cmp	r1, r3
 8007bce:	d002      	beq.n	8007bd6 <cleanup_stdio+0x1e>
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	f001 fc8b 	bl	80094ec <_fflush_r>
 8007bd6:	68e1      	ldr	r1, [r4, #12]
 8007bd8:	4b06      	ldr	r3, [pc, #24]	@ (8007bf4 <cleanup_stdio+0x3c>)
 8007bda:	4299      	cmp	r1, r3
 8007bdc:	d004      	beq.n	8007be8 <cleanup_stdio+0x30>
 8007bde:	4620      	mov	r0, r4
 8007be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007be4:	f001 bc82 	b.w	80094ec <_fflush_r>
 8007be8:	bd10      	pop	{r4, pc}
 8007bea:	bf00      	nop
 8007bec:	20002034 	.word	0x20002034
 8007bf0:	2000209c 	.word	0x2000209c
 8007bf4:	20002104 	.word	0x20002104

08007bf8 <global_stdio_init.part.0>:
 8007bf8:	b510      	push	{r4, lr}
 8007bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8007c28 <global_stdio_init.part.0+0x30>)
 8007bfc:	4c0b      	ldr	r4, [pc, #44]	@ (8007c2c <global_stdio_init.part.0+0x34>)
 8007bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8007c30 <global_stdio_init.part.0+0x38>)
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	4620      	mov	r0, r4
 8007c04:	2200      	movs	r2, #0
 8007c06:	2104      	movs	r1, #4
 8007c08:	f7ff ff94 	bl	8007b34 <std>
 8007c0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c10:	2201      	movs	r2, #1
 8007c12:	2109      	movs	r1, #9
 8007c14:	f7ff ff8e 	bl	8007b34 <std>
 8007c18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c1c:	2202      	movs	r2, #2
 8007c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c22:	2112      	movs	r1, #18
 8007c24:	f7ff bf86 	b.w	8007b34 <std>
 8007c28:	2000216c 	.word	0x2000216c
 8007c2c:	20002034 	.word	0x20002034
 8007c30:	08007ba1 	.word	0x08007ba1

08007c34 <__sfp_lock_acquire>:
 8007c34:	4801      	ldr	r0, [pc, #4]	@ (8007c3c <__sfp_lock_acquire+0x8>)
 8007c36:	f000 b900 	b.w	8007e3a <__retarget_lock_acquire_recursive>
 8007c3a:	bf00      	nop
 8007c3c:	20002175 	.word	0x20002175

08007c40 <__sfp_lock_release>:
 8007c40:	4801      	ldr	r0, [pc, #4]	@ (8007c48 <__sfp_lock_release+0x8>)
 8007c42:	f000 b8fb 	b.w	8007e3c <__retarget_lock_release_recursive>
 8007c46:	bf00      	nop
 8007c48:	20002175 	.word	0x20002175

08007c4c <__sinit>:
 8007c4c:	b510      	push	{r4, lr}
 8007c4e:	4604      	mov	r4, r0
 8007c50:	f7ff fff0 	bl	8007c34 <__sfp_lock_acquire>
 8007c54:	6a23      	ldr	r3, [r4, #32]
 8007c56:	b11b      	cbz	r3, 8007c60 <__sinit+0x14>
 8007c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c5c:	f7ff bff0 	b.w	8007c40 <__sfp_lock_release>
 8007c60:	4b04      	ldr	r3, [pc, #16]	@ (8007c74 <__sinit+0x28>)
 8007c62:	6223      	str	r3, [r4, #32]
 8007c64:	4b04      	ldr	r3, [pc, #16]	@ (8007c78 <__sinit+0x2c>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1f5      	bne.n	8007c58 <__sinit+0xc>
 8007c6c:	f7ff ffc4 	bl	8007bf8 <global_stdio_init.part.0>
 8007c70:	e7f2      	b.n	8007c58 <__sinit+0xc>
 8007c72:	bf00      	nop
 8007c74:	08007bb9 	.word	0x08007bb9
 8007c78:	2000216c 	.word	0x2000216c

08007c7c <_fwalk_sglue>:
 8007c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c80:	4607      	mov	r7, r0
 8007c82:	4688      	mov	r8, r1
 8007c84:	4614      	mov	r4, r2
 8007c86:	2600      	movs	r6, #0
 8007c88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c8c:	f1b9 0901 	subs.w	r9, r9, #1
 8007c90:	d505      	bpl.n	8007c9e <_fwalk_sglue+0x22>
 8007c92:	6824      	ldr	r4, [r4, #0]
 8007c94:	2c00      	cmp	r4, #0
 8007c96:	d1f7      	bne.n	8007c88 <_fwalk_sglue+0xc>
 8007c98:	4630      	mov	r0, r6
 8007c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c9e:	89ab      	ldrh	r3, [r5, #12]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d907      	bls.n	8007cb4 <_fwalk_sglue+0x38>
 8007ca4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	d003      	beq.n	8007cb4 <_fwalk_sglue+0x38>
 8007cac:	4629      	mov	r1, r5
 8007cae:	4638      	mov	r0, r7
 8007cb0:	47c0      	blx	r8
 8007cb2:	4306      	orrs	r6, r0
 8007cb4:	3568      	adds	r5, #104	@ 0x68
 8007cb6:	e7e9      	b.n	8007c8c <_fwalk_sglue+0x10>

08007cb8 <__sread>:
 8007cb8:	b510      	push	{r4, lr}
 8007cba:	460c      	mov	r4, r1
 8007cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cc0:	f000 f86c 	bl	8007d9c <_read_r>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	bfab      	itete	ge
 8007cc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007cca:	89a3      	ldrhlt	r3, [r4, #12]
 8007ccc:	181b      	addge	r3, r3, r0
 8007cce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007cd2:	bfac      	ite	ge
 8007cd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007cd6:	81a3      	strhlt	r3, [r4, #12]
 8007cd8:	bd10      	pop	{r4, pc}

08007cda <__swrite>:
 8007cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cde:	461f      	mov	r7, r3
 8007ce0:	898b      	ldrh	r3, [r1, #12]
 8007ce2:	05db      	lsls	r3, r3, #23
 8007ce4:	4605      	mov	r5, r0
 8007ce6:	460c      	mov	r4, r1
 8007ce8:	4616      	mov	r6, r2
 8007cea:	d505      	bpl.n	8007cf8 <__swrite+0x1e>
 8007cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f000 f840 	bl	8007d78 <_lseek_r>
 8007cf8:	89a3      	ldrh	r3, [r4, #12]
 8007cfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cfe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d02:	81a3      	strh	r3, [r4, #12]
 8007d04:	4632      	mov	r2, r6
 8007d06:	463b      	mov	r3, r7
 8007d08:	4628      	mov	r0, r5
 8007d0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d0e:	f000 b857 	b.w	8007dc0 <_write_r>

08007d12 <__sseek>:
 8007d12:	b510      	push	{r4, lr}
 8007d14:	460c      	mov	r4, r1
 8007d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d1a:	f000 f82d 	bl	8007d78 <_lseek_r>
 8007d1e:	1c43      	adds	r3, r0, #1
 8007d20:	89a3      	ldrh	r3, [r4, #12]
 8007d22:	bf15      	itete	ne
 8007d24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007d26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007d2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007d2e:	81a3      	strheq	r3, [r4, #12]
 8007d30:	bf18      	it	ne
 8007d32:	81a3      	strhne	r3, [r4, #12]
 8007d34:	bd10      	pop	{r4, pc}

08007d36 <__sclose>:
 8007d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d3a:	f000 b80d 	b.w	8007d58 <_close_r>

08007d3e <memset>:
 8007d3e:	4402      	add	r2, r0
 8007d40:	4603      	mov	r3, r0
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d100      	bne.n	8007d48 <memset+0xa>
 8007d46:	4770      	bx	lr
 8007d48:	f803 1b01 	strb.w	r1, [r3], #1
 8007d4c:	e7f9      	b.n	8007d42 <memset+0x4>
	...

08007d50 <_localeconv_r>:
 8007d50:	4800      	ldr	r0, [pc, #0]	@ (8007d54 <_localeconv_r+0x4>)
 8007d52:	4770      	bx	lr
 8007d54:	20000160 	.word	0x20000160

08007d58 <_close_r>:
 8007d58:	b538      	push	{r3, r4, r5, lr}
 8007d5a:	4d06      	ldr	r5, [pc, #24]	@ (8007d74 <_close_r+0x1c>)
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	4604      	mov	r4, r0
 8007d60:	4608      	mov	r0, r1
 8007d62:	602b      	str	r3, [r5, #0]
 8007d64:	f7f9 feea 	bl	8001b3c <_close>
 8007d68:	1c43      	adds	r3, r0, #1
 8007d6a:	d102      	bne.n	8007d72 <_close_r+0x1a>
 8007d6c:	682b      	ldr	r3, [r5, #0]
 8007d6e:	b103      	cbz	r3, 8007d72 <_close_r+0x1a>
 8007d70:	6023      	str	r3, [r4, #0]
 8007d72:	bd38      	pop	{r3, r4, r5, pc}
 8007d74:	20002170 	.word	0x20002170

08007d78 <_lseek_r>:
 8007d78:	b538      	push	{r3, r4, r5, lr}
 8007d7a:	4d07      	ldr	r5, [pc, #28]	@ (8007d98 <_lseek_r+0x20>)
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	4608      	mov	r0, r1
 8007d80:	4611      	mov	r1, r2
 8007d82:	2200      	movs	r2, #0
 8007d84:	602a      	str	r2, [r5, #0]
 8007d86:	461a      	mov	r2, r3
 8007d88:	f7f9 feff 	bl	8001b8a <_lseek>
 8007d8c:	1c43      	adds	r3, r0, #1
 8007d8e:	d102      	bne.n	8007d96 <_lseek_r+0x1e>
 8007d90:	682b      	ldr	r3, [r5, #0]
 8007d92:	b103      	cbz	r3, 8007d96 <_lseek_r+0x1e>
 8007d94:	6023      	str	r3, [r4, #0]
 8007d96:	bd38      	pop	{r3, r4, r5, pc}
 8007d98:	20002170 	.word	0x20002170

08007d9c <_read_r>:
 8007d9c:	b538      	push	{r3, r4, r5, lr}
 8007d9e:	4d07      	ldr	r5, [pc, #28]	@ (8007dbc <_read_r+0x20>)
 8007da0:	4604      	mov	r4, r0
 8007da2:	4608      	mov	r0, r1
 8007da4:	4611      	mov	r1, r2
 8007da6:	2200      	movs	r2, #0
 8007da8:	602a      	str	r2, [r5, #0]
 8007daa:	461a      	mov	r2, r3
 8007dac:	f7f9 fe8d 	bl	8001aca <_read>
 8007db0:	1c43      	adds	r3, r0, #1
 8007db2:	d102      	bne.n	8007dba <_read_r+0x1e>
 8007db4:	682b      	ldr	r3, [r5, #0]
 8007db6:	b103      	cbz	r3, 8007dba <_read_r+0x1e>
 8007db8:	6023      	str	r3, [r4, #0]
 8007dba:	bd38      	pop	{r3, r4, r5, pc}
 8007dbc:	20002170 	.word	0x20002170

08007dc0 <_write_r>:
 8007dc0:	b538      	push	{r3, r4, r5, lr}
 8007dc2:	4d07      	ldr	r5, [pc, #28]	@ (8007de0 <_write_r+0x20>)
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	4608      	mov	r0, r1
 8007dc8:	4611      	mov	r1, r2
 8007dca:	2200      	movs	r2, #0
 8007dcc:	602a      	str	r2, [r5, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	f7f9 fe98 	bl	8001b04 <_write>
 8007dd4:	1c43      	adds	r3, r0, #1
 8007dd6:	d102      	bne.n	8007dde <_write_r+0x1e>
 8007dd8:	682b      	ldr	r3, [r5, #0]
 8007dda:	b103      	cbz	r3, 8007dde <_write_r+0x1e>
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	bd38      	pop	{r3, r4, r5, pc}
 8007de0:	20002170 	.word	0x20002170

08007de4 <__errno>:
 8007de4:	4b01      	ldr	r3, [pc, #4]	@ (8007dec <__errno+0x8>)
 8007de6:	6818      	ldr	r0, [r3, #0]
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	20000020 	.word	0x20000020

08007df0 <__libc_init_array>:
 8007df0:	b570      	push	{r4, r5, r6, lr}
 8007df2:	4d0d      	ldr	r5, [pc, #52]	@ (8007e28 <__libc_init_array+0x38>)
 8007df4:	4c0d      	ldr	r4, [pc, #52]	@ (8007e2c <__libc_init_array+0x3c>)
 8007df6:	1b64      	subs	r4, r4, r5
 8007df8:	10a4      	asrs	r4, r4, #2
 8007dfa:	2600      	movs	r6, #0
 8007dfc:	42a6      	cmp	r6, r4
 8007dfe:	d109      	bne.n	8007e14 <__libc_init_array+0x24>
 8007e00:	4d0b      	ldr	r5, [pc, #44]	@ (8007e30 <__libc_init_array+0x40>)
 8007e02:	4c0c      	ldr	r4, [pc, #48]	@ (8007e34 <__libc_init_array+0x44>)
 8007e04:	f001 fee2 	bl	8009bcc <_init>
 8007e08:	1b64      	subs	r4, r4, r5
 8007e0a:	10a4      	asrs	r4, r4, #2
 8007e0c:	2600      	movs	r6, #0
 8007e0e:	42a6      	cmp	r6, r4
 8007e10:	d105      	bne.n	8007e1e <__libc_init_array+0x2e>
 8007e12:	bd70      	pop	{r4, r5, r6, pc}
 8007e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e18:	4798      	blx	r3
 8007e1a:	3601      	adds	r6, #1
 8007e1c:	e7ee      	b.n	8007dfc <__libc_init_array+0xc>
 8007e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e22:	4798      	blx	r3
 8007e24:	3601      	adds	r6, #1
 8007e26:	e7f2      	b.n	8007e0e <__libc_init_array+0x1e>
 8007e28:	0801cf94 	.word	0x0801cf94
 8007e2c:	0801cf94 	.word	0x0801cf94
 8007e30:	0801cf94 	.word	0x0801cf94
 8007e34:	0801cf98 	.word	0x0801cf98

08007e38 <__retarget_lock_init_recursive>:
 8007e38:	4770      	bx	lr

08007e3a <__retarget_lock_acquire_recursive>:
 8007e3a:	4770      	bx	lr

08007e3c <__retarget_lock_release_recursive>:
 8007e3c:	4770      	bx	lr

08007e3e <quorem>:
 8007e3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e42:	6903      	ldr	r3, [r0, #16]
 8007e44:	690c      	ldr	r4, [r1, #16]
 8007e46:	42a3      	cmp	r3, r4
 8007e48:	4607      	mov	r7, r0
 8007e4a:	db7e      	blt.n	8007f4a <quorem+0x10c>
 8007e4c:	3c01      	subs	r4, #1
 8007e4e:	f101 0814 	add.w	r8, r1, #20
 8007e52:	00a3      	lsls	r3, r4, #2
 8007e54:	f100 0514 	add.w	r5, r0, #20
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e5e:	9301      	str	r3, [sp, #4]
 8007e60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e70:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e74:	d32e      	bcc.n	8007ed4 <quorem+0x96>
 8007e76:	f04f 0a00 	mov.w	sl, #0
 8007e7a:	46c4      	mov	ip, r8
 8007e7c:	46ae      	mov	lr, r5
 8007e7e:	46d3      	mov	fp, sl
 8007e80:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007e84:	b298      	uxth	r0, r3
 8007e86:	fb06 a000 	mla	r0, r6, r0, sl
 8007e8a:	0c02      	lsrs	r2, r0, #16
 8007e8c:	0c1b      	lsrs	r3, r3, #16
 8007e8e:	fb06 2303 	mla	r3, r6, r3, r2
 8007e92:	f8de 2000 	ldr.w	r2, [lr]
 8007e96:	b280      	uxth	r0, r0
 8007e98:	b292      	uxth	r2, r2
 8007e9a:	1a12      	subs	r2, r2, r0
 8007e9c:	445a      	add	r2, fp
 8007e9e:	f8de 0000 	ldr.w	r0, [lr]
 8007ea2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007eac:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007eb0:	b292      	uxth	r2, r2
 8007eb2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007eb6:	45e1      	cmp	r9, ip
 8007eb8:	f84e 2b04 	str.w	r2, [lr], #4
 8007ebc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007ec0:	d2de      	bcs.n	8007e80 <quorem+0x42>
 8007ec2:	9b00      	ldr	r3, [sp, #0]
 8007ec4:	58eb      	ldr	r3, [r5, r3]
 8007ec6:	b92b      	cbnz	r3, 8007ed4 <quorem+0x96>
 8007ec8:	9b01      	ldr	r3, [sp, #4]
 8007eca:	3b04      	subs	r3, #4
 8007ecc:	429d      	cmp	r5, r3
 8007ece:	461a      	mov	r2, r3
 8007ed0:	d32f      	bcc.n	8007f32 <quorem+0xf4>
 8007ed2:	613c      	str	r4, [r7, #16]
 8007ed4:	4638      	mov	r0, r7
 8007ed6:	f001 f97d 	bl	80091d4 <__mcmp>
 8007eda:	2800      	cmp	r0, #0
 8007edc:	db25      	blt.n	8007f2a <quorem+0xec>
 8007ede:	4629      	mov	r1, r5
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ee6:	f8d1 c000 	ldr.w	ip, [r1]
 8007eea:	fa1f fe82 	uxth.w	lr, r2
 8007eee:	fa1f f38c 	uxth.w	r3, ip
 8007ef2:	eba3 030e 	sub.w	r3, r3, lr
 8007ef6:	4403      	add	r3, r0
 8007ef8:	0c12      	lsrs	r2, r2, #16
 8007efa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007efe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f08:	45c1      	cmp	r9, r8
 8007f0a:	f841 3b04 	str.w	r3, [r1], #4
 8007f0e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007f12:	d2e6      	bcs.n	8007ee2 <quorem+0xa4>
 8007f14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f1c:	b922      	cbnz	r2, 8007f28 <quorem+0xea>
 8007f1e:	3b04      	subs	r3, #4
 8007f20:	429d      	cmp	r5, r3
 8007f22:	461a      	mov	r2, r3
 8007f24:	d30b      	bcc.n	8007f3e <quorem+0x100>
 8007f26:	613c      	str	r4, [r7, #16]
 8007f28:	3601      	adds	r6, #1
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	b003      	add	sp, #12
 8007f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f32:	6812      	ldr	r2, [r2, #0]
 8007f34:	3b04      	subs	r3, #4
 8007f36:	2a00      	cmp	r2, #0
 8007f38:	d1cb      	bne.n	8007ed2 <quorem+0x94>
 8007f3a:	3c01      	subs	r4, #1
 8007f3c:	e7c6      	b.n	8007ecc <quorem+0x8e>
 8007f3e:	6812      	ldr	r2, [r2, #0]
 8007f40:	3b04      	subs	r3, #4
 8007f42:	2a00      	cmp	r2, #0
 8007f44:	d1ef      	bne.n	8007f26 <quorem+0xe8>
 8007f46:	3c01      	subs	r4, #1
 8007f48:	e7ea      	b.n	8007f20 <quorem+0xe2>
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	e7ee      	b.n	8007f2c <quorem+0xee>
	...

08007f50 <_dtoa_r>:
 8007f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f54:	69c7      	ldr	r7, [r0, #28]
 8007f56:	b097      	sub	sp, #92	@ 0x5c
 8007f58:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007f5c:	ec55 4b10 	vmov	r4, r5, d0
 8007f60:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007f62:	9107      	str	r1, [sp, #28]
 8007f64:	4681      	mov	r9, r0
 8007f66:	920c      	str	r2, [sp, #48]	@ 0x30
 8007f68:	9311      	str	r3, [sp, #68]	@ 0x44
 8007f6a:	b97f      	cbnz	r7, 8007f8c <_dtoa_r+0x3c>
 8007f6c:	2010      	movs	r0, #16
 8007f6e:	f000 fe09 	bl	8008b84 <malloc>
 8007f72:	4602      	mov	r2, r0
 8007f74:	f8c9 001c 	str.w	r0, [r9, #28]
 8007f78:	b920      	cbnz	r0, 8007f84 <_dtoa_r+0x34>
 8007f7a:	4ba9      	ldr	r3, [pc, #676]	@ (8008220 <_dtoa_r+0x2d0>)
 8007f7c:	21ef      	movs	r1, #239	@ 0xef
 8007f7e:	48a9      	ldr	r0, [pc, #676]	@ (8008224 <_dtoa_r+0x2d4>)
 8007f80:	f001 fafa 	bl	8009578 <__assert_func>
 8007f84:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007f88:	6007      	str	r7, [r0, #0]
 8007f8a:	60c7      	str	r7, [r0, #12]
 8007f8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007f90:	6819      	ldr	r1, [r3, #0]
 8007f92:	b159      	cbz	r1, 8007fac <_dtoa_r+0x5c>
 8007f94:	685a      	ldr	r2, [r3, #4]
 8007f96:	604a      	str	r2, [r1, #4]
 8007f98:	2301      	movs	r3, #1
 8007f9a:	4093      	lsls	r3, r2
 8007f9c:	608b      	str	r3, [r1, #8]
 8007f9e:	4648      	mov	r0, r9
 8007fa0:	f000 fee6 	bl	8008d70 <_Bfree>
 8007fa4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	601a      	str	r2, [r3, #0]
 8007fac:	1e2b      	subs	r3, r5, #0
 8007fae:	bfb9      	ittee	lt
 8007fb0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007fb4:	9305      	strlt	r3, [sp, #20]
 8007fb6:	2300      	movge	r3, #0
 8007fb8:	6033      	strge	r3, [r6, #0]
 8007fba:	9f05      	ldr	r7, [sp, #20]
 8007fbc:	4b9a      	ldr	r3, [pc, #616]	@ (8008228 <_dtoa_r+0x2d8>)
 8007fbe:	bfbc      	itt	lt
 8007fc0:	2201      	movlt	r2, #1
 8007fc2:	6032      	strlt	r2, [r6, #0]
 8007fc4:	43bb      	bics	r3, r7
 8007fc6:	d112      	bne.n	8007fee <_dtoa_r+0x9e>
 8007fc8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007fca:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007fce:	6013      	str	r3, [r2, #0]
 8007fd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007fd4:	4323      	orrs	r3, r4
 8007fd6:	f000 855a 	beq.w	8008a8e <_dtoa_r+0xb3e>
 8007fda:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007fdc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800823c <_dtoa_r+0x2ec>
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f000 855c 	beq.w	8008a9e <_dtoa_r+0xb4e>
 8007fe6:	f10a 0303 	add.w	r3, sl, #3
 8007fea:	f000 bd56 	b.w	8008a9a <_dtoa_r+0xb4a>
 8007fee:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	ec51 0b17 	vmov	r0, r1, d7
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007ffe:	f7f8 fd63 	bl	8000ac8 <__aeabi_dcmpeq>
 8008002:	4680      	mov	r8, r0
 8008004:	b158      	cbz	r0, 800801e <_dtoa_r+0xce>
 8008006:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008008:	2301      	movs	r3, #1
 800800a:	6013      	str	r3, [r2, #0]
 800800c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800800e:	b113      	cbz	r3, 8008016 <_dtoa_r+0xc6>
 8008010:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008012:	4b86      	ldr	r3, [pc, #536]	@ (800822c <_dtoa_r+0x2dc>)
 8008014:	6013      	str	r3, [r2, #0]
 8008016:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008240 <_dtoa_r+0x2f0>
 800801a:	f000 bd40 	b.w	8008a9e <_dtoa_r+0xb4e>
 800801e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008022:	aa14      	add	r2, sp, #80	@ 0x50
 8008024:	a915      	add	r1, sp, #84	@ 0x54
 8008026:	4648      	mov	r0, r9
 8008028:	f001 f984 	bl	8009334 <__d2b>
 800802c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008030:	9002      	str	r0, [sp, #8]
 8008032:	2e00      	cmp	r6, #0
 8008034:	d078      	beq.n	8008128 <_dtoa_r+0x1d8>
 8008036:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008038:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800803c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008040:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008044:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008048:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800804c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008050:	4619      	mov	r1, r3
 8008052:	2200      	movs	r2, #0
 8008054:	4b76      	ldr	r3, [pc, #472]	@ (8008230 <_dtoa_r+0x2e0>)
 8008056:	f7f8 f917 	bl	8000288 <__aeabi_dsub>
 800805a:	a36b      	add	r3, pc, #428	@ (adr r3, 8008208 <_dtoa_r+0x2b8>)
 800805c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008060:	f7f8 faca 	bl	80005f8 <__aeabi_dmul>
 8008064:	a36a      	add	r3, pc, #424	@ (adr r3, 8008210 <_dtoa_r+0x2c0>)
 8008066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806a:	f7f8 f90f 	bl	800028c <__adddf3>
 800806e:	4604      	mov	r4, r0
 8008070:	4630      	mov	r0, r6
 8008072:	460d      	mov	r5, r1
 8008074:	f7f8 fa56 	bl	8000524 <__aeabi_i2d>
 8008078:	a367      	add	r3, pc, #412	@ (adr r3, 8008218 <_dtoa_r+0x2c8>)
 800807a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807e:	f7f8 fabb 	bl	80005f8 <__aeabi_dmul>
 8008082:	4602      	mov	r2, r0
 8008084:	460b      	mov	r3, r1
 8008086:	4620      	mov	r0, r4
 8008088:	4629      	mov	r1, r5
 800808a:	f7f8 f8ff 	bl	800028c <__adddf3>
 800808e:	4604      	mov	r4, r0
 8008090:	460d      	mov	r5, r1
 8008092:	f7f8 fd61 	bl	8000b58 <__aeabi_d2iz>
 8008096:	2200      	movs	r2, #0
 8008098:	4607      	mov	r7, r0
 800809a:	2300      	movs	r3, #0
 800809c:	4620      	mov	r0, r4
 800809e:	4629      	mov	r1, r5
 80080a0:	f7f8 fd1c 	bl	8000adc <__aeabi_dcmplt>
 80080a4:	b140      	cbz	r0, 80080b8 <_dtoa_r+0x168>
 80080a6:	4638      	mov	r0, r7
 80080a8:	f7f8 fa3c 	bl	8000524 <__aeabi_i2d>
 80080ac:	4622      	mov	r2, r4
 80080ae:	462b      	mov	r3, r5
 80080b0:	f7f8 fd0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80080b4:	b900      	cbnz	r0, 80080b8 <_dtoa_r+0x168>
 80080b6:	3f01      	subs	r7, #1
 80080b8:	2f16      	cmp	r7, #22
 80080ba:	d852      	bhi.n	8008162 <_dtoa_r+0x212>
 80080bc:	4b5d      	ldr	r3, [pc, #372]	@ (8008234 <_dtoa_r+0x2e4>)
 80080be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80080c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80080ca:	f7f8 fd07 	bl	8000adc <__aeabi_dcmplt>
 80080ce:	2800      	cmp	r0, #0
 80080d0:	d049      	beq.n	8008166 <_dtoa_r+0x216>
 80080d2:	3f01      	subs	r7, #1
 80080d4:	2300      	movs	r3, #0
 80080d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80080d8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80080da:	1b9b      	subs	r3, r3, r6
 80080dc:	1e5a      	subs	r2, r3, #1
 80080de:	bf45      	ittet	mi
 80080e0:	f1c3 0301 	rsbmi	r3, r3, #1
 80080e4:	9300      	strmi	r3, [sp, #0]
 80080e6:	2300      	movpl	r3, #0
 80080e8:	2300      	movmi	r3, #0
 80080ea:	9206      	str	r2, [sp, #24]
 80080ec:	bf54      	ite	pl
 80080ee:	9300      	strpl	r3, [sp, #0]
 80080f0:	9306      	strmi	r3, [sp, #24]
 80080f2:	2f00      	cmp	r7, #0
 80080f4:	db39      	blt.n	800816a <_dtoa_r+0x21a>
 80080f6:	9b06      	ldr	r3, [sp, #24]
 80080f8:	970d      	str	r7, [sp, #52]	@ 0x34
 80080fa:	443b      	add	r3, r7
 80080fc:	9306      	str	r3, [sp, #24]
 80080fe:	2300      	movs	r3, #0
 8008100:	9308      	str	r3, [sp, #32]
 8008102:	9b07      	ldr	r3, [sp, #28]
 8008104:	2b09      	cmp	r3, #9
 8008106:	d863      	bhi.n	80081d0 <_dtoa_r+0x280>
 8008108:	2b05      	cmp	r3, #5
 800810a:	bfc4      	itt	gt
 800810c:	3b04      	subgt	r3, #4
 800810e:	9307      	strgt	r3, [sp, #28]
 8008110:	9b07      	ldr	r3, [sp, #28]
 8008112:	f1a3 0302 	sub.w	r3, r3, #2
 8008116:	bfcc      	ite	gt
 8008118:	2400      	movgt	r4, #0
 800811a:	2401      	movle	r4, #1
 800811c:	2b03      	cmp	r3, #3
 800811e:	d863      	bhi.n	80081e8 <_dtoa_r+0x298>
 8008120:	e8df f003 	tbb	[pc, r3]
 8008124:	2b375452 	.word	0x2b375452
 8008128:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800812c:	441e      	add	r6, r3
 800812e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008132:	2b20      	cmp	r3, #32
 8008134:	bfc1      	itttt	gt
 8008136:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800813a:	409f      	lslgt	r7, r3
 800813c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008140:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008144:	bfd6      	itet	le
 8008146:	f1c3 0320 	rsble	r3, r3, #32
 800814a:	ea47 0003 	orrgt.w	r0, r7, r3
 800814e:	fa04 f003 	lslle.w	r0, r4, r3
 8008152:	f7f8 f9d7 	bl	8000504 <__aeabi_ui2d>
 8008156:	2201      	movs	r2, #1
 8008158:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800815c:	3e01      	subs	r6, #1
 800815e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008160:	e776      	b.n	8008050 <_dtoa_r+0x100>
 8008162:	2301      	movs	r3, #1
 8008164:	e7b7      	b.n	80080d6 <_dtoa_r+0x186>
 8008166:	9010      	str	r0, [sp, #64]	@ 0x40
 8008168:	e7b6      	b.n	80080d8 <_dtoa_r+0x188>
 800816a:	9b00      	ldr	r3, [sp, #0]
 800816c:	1bdb      	subs	r3, r3, r7
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	427b      	negs	r3, r7
 8008172:	9308      	str	r3, [sp, #32]
 8008174:	2300      	movs	r3, #0
 8008176:	930d      	str	r3, [sp, #52]	@ 0x34
 8008178:	e7c3      	b.n	8008102 <_dtoa_r+0x1b2>
 800817a:	2301      	movs	r3, #1
 800817c:	9309      	str	r3, [sp, #36]	@ 0x24
 800817e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008180:	eb07 0b03 	add.w	fp, r7, r3
 8008184:	f10b 0301 	add.w	r3, fp, #1
 8008188:	2b01      	cmp	r3, #1
 800818a:	9303      	str	r3, [sp, #12]
 800818c:	bfb8      	it	lt
 800818e:	2301      	movlt	r3, #1
 8008190:	e006      	b.n	80081a0 <_dtoa_r+0x250>
 8008192:	2301      	movs	r3, #1
 8008194:	9309      	str	r3, [sp, #36]	@ 0x24
 8008196:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008198:	2b00      	cmp	r3, #0
 800819a:	dd28      	ble.n	80081ee <_dtoa_r+0x29e>
 800819c:	469b      	mov	fp, r3
 800819e:	9303      	str	r3, [sp, #12]
 80081a0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80081a4:	2100      	movs	r1, #0
 80081a6:	2204      	movs	r2, #4
 80081a8:	f102 0514 	add.w	r5, r2, #20
 80081ac:	429d      	cmp	r5, r3
 80081ae:	d926      	bls.n	80081fe <_dtoa_r+0x2ae>
 80081b0:	6041      	str	r1, [r0, #4]
 80081b2:	4648      	mov	r0, r9
 80081b4:	f000 fd9c 	bl	8008cf0 <_Balloc>
 80081b8:	4682      	mov	sl, r0
 80081ba:	2800      	cmp	r0, #0
 80081bc:	d142      	bne.n	8008244 <_dtoa_r+0x2f4>
 80081be:	4b1e      	ldr	r3, [pc, #120]	@ (8008238 <_dtoa_r+0x2e8>)
 80081c0:	4602      	mov	r2, r0
 80081c2:	f240 11af 	movw	r1, #431	@ 0x1af
 80081c6:	e6da      	b.n	8007f7e <_dtoa_r+0x2e>
 80081c8:	2300      	movs	r3, #0
 80081ca:	e7e3      	b.n	8008194 <_dtoa_r+0x244>
 80081cc:	2300      	movs	r3, #0
 80081ce:	e7d5      	b.n	800817c <_dtoa_r+0x22c>
 80081d0:	2401      	movs	r4, #1
 80081d2:	2300      	movs	r3, #0
 80081d4:	9307      	str	r3, [sp, #28]
 80081d6:	9409      	str	r4, [sp, #36]	@ 0x24
 80081d8:	f04f 3bff 	mov.w	fp, #4294967295
 80081dc:	2200      	movs	r2, #0
 80081de:	f8cd b00c 	str.w	fp, [sp, #12]
 80081e2:	2312      	movs	r3, #18
 80081e4:	920c      	str	r2, [sp, #48]	@ 0x30
 80081e6:	e7db      	b.n	80081a0 <_dtoa_r+0x250>
 80081e8:	2301      	movs	r3, #1
 80081ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80081ec:	e7f4      	b.n	80081d8 <_dtoa_r+0x288>
 80081ee:	f04f 0b01 	mov.w	fp, #1
 80081f2:	f8cd b00c 	str.w	fp, [sp, #12]
 80081f6:	465b      	mov	r3, fp
 80081f8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80081fc:	e7d0      	b.n	80081a0 <_dtoa_r+0x250>
 80081fe:	3101      	adds	r1, #1
 8008200:	0052      	lsls	r2, r2, #1
 8008202:	e7d1      	b.n	80081a8 <_dtoa_r+0x258>
 8008204:	f3af 8000 	nop.w
 8008208:	636f4361 	.word	0x636f4361
 800820c:	3fd287a7 	.word	0x3fd287a7
 8008210:	8b60c8b3 	.word	0x8b60c8b3
 8008214:	3fc68a28 	.word	0x3fc68a28
 8008218:	509f79fb 	.word	0x509f79fb
 800821c:	3fd34413 	.word	0x3fd34413
 8008220:	0801cc59 	.word	0x0801cc59
 8008224:	0801cc70 	.word	0x0801cc70
 8008228:	7ff00000 	.word	0x7ff00000
 800822c:	0801cc29 	.word	0x0801cc29
 8008230:	3ff80000 	.word	0x3ff80000
 8008234:	0801cdc0 	.word	0x0801cdc0
 8008238:	0801ccc8 	.word	0x0801ccc8
 800823c:	0801cc55 	.word	0x0801cc55
 8008240:	0801cc28 	.word	0x0801cc28
 8008244:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008248:	6018      	str	r0, [r3, #0]
 800824a:	9b03      	ldr	r3, [sp, #12]
 800824c:	2b0e      	cmp	r3, #14
 800824e:	f200 80a1 	bhi.w	8008394 <_dtoa_r+0x444>
 8008252:	2c00      	cmp	r4, #0
 8008254:	f000 809e 	beq.w	8008394 <_dtoa_r+0x444>
 8008258:	2f00      	cmp	r7, #0
 800825a:	dd33      	ble.n	80082c4 <_dtoa_r+0x374>
 800825c:	4b9c      	ldr	r3, [pc, #624]	@ (80084d0 <_dtoa_r+0x580>)
 800825e:	f007 020f 	and.w	r2, r7, #15
 8008262:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008266:	ed93 7b00 	vldr	d7, [r3]
 800826a:	05f8      	lsls	r0, r7, #23
 800826c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008270:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008274:	d516      	bpl.n	80082a4 <_dtoa_r+0x354>
 8008276:	4b97      	ldr	r3, [pc, #604]	@ (80084d4 <_dtoa_r+0x584>)
 8008278:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800827c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008280:	f7f8 fae4 	bl	800084c <__aeabi_ddiv>
 8008284:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008288:	f004 040f 	and.w	r4, r4, #15
 800828c:	2603      	movs	r6, #3
 800828e:	4d91      	ldr	r5, [pc, #580]	@ (80084d4 <_dtoa_r+0x584>)
 8008290:	b954      	cbnz	r4, 80082a8 <_dtoa_r+0x358>
 8008292:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008296:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800829a:	f7f8 fad7 	bl	800084c <__aeabi_ddiv>
 800829e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082a2:	e028      	b.n	80082f6 <_dtoa_r+0x3a6>
 80082a4:	2602      	movs	r6, #2
 80082a6:	e7f2      	b.n	800828e <_dtoa_r+0x33e>
 80082a8:	07e1      	lsls	r1, r4, #31
 80082aa:	d508      	bpl.n	80082be <_dtoa_r+0x36e>
 80082ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80082b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082b4:	f7f8 f9a0 	bl	80005f8 <__aeabi_dmul>
 80082b8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80082bc:	3601      	adds	r6, #1
 80082be:	1064      	asrs	r4, r4, #1
 80082c0:	3508      	adds	r5, #8
 80082c2:	e7e5      	b.n	8008290 <_dtoa_r+0x340>
 80082c4:	f000 80af 	beq.w	8008426 <_dtoa_r+0x4d6>
 80082c8:	427c      	negs	r4, r7
 80082ca:	4b81      	ldr	r3, [pc, #516]	@ (80084d0 <_dtoa_r+0x580>)
 80082cc:	4d81      	ldr	r5, [pc, #516]	@ (80084d4 <_dtoa_r+0x584>)
 80082ce:	f004 020f 	and.w	r2, r4, #15
 80082d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80082de:	f7f8 f98b 	bl	80005f8 <__aeabi_dmul>
 80082e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082e6:	1124      	asrs	r4, r4, #4
 80082e8:	2300      	movs	r3, #0
 80082ea:	2602      	movs	r6, #2
 80082ec:	2c00      	cmp	r4, #0
 80082ee:	f040 808f 	bne.w	8008410 <_dtoa_r+0x4c0>
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1d3      	bne.n	800829e <_dtoa_r+0x34e>
 80082f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80082f8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f000 8094 	beq.w	800842a <_dtoa_r+0x4da>
 8008302:	4b75      	ldr	r3, [pc, #468]	@ (80084d8 <_dtoa_r+0x588>)
 8008304:	2200      	movs	r2, #0
 8008306:	4620      	mov	r0, r4
 8008308:	4629      	mov	r1, r5
 800830a:	f7f8 fbe7 	bl	8000adc <__aeabi_dcmplt>
 800830e:	2800      	cmp	r0, #0
 8008310:	f000 808b 	beq.w	800842a <_dtoa_r+0x4da>
 8008314:	9b03      	ldr	r3, [sp, #12]
 8008316:	2b00      	cmp	r3, #0
 8008318:	f000 8087 	beq.w	800842a <_dtoa_r+0x4da>
 800831c:	f1bb 0f00 	cmp.w	fp, #0
 8008320:	dd34      	ble.n	800838c <_dtoa_r+0x43c>
 8008322:	4620      	mov	r0, r4
 8008324:	4b6d      	ldr	r3, [pc, #436]	@ (80084dc <_dtoa_r+0x58c>)
 8008326:	2200      	movs	r2, #0
 8008328:	4629      	mov	r1, r5
 800832a:	f7f8 f965 	bl	80005f8 <__aeabi_dmul>
 800832e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008332:	f107 38ff 	add.w	r8, r7, #4294967295
 8008336:	3601      	adds	r6, #1
 8008338:	465c      	mov	r4, fp
 800833a:	4630      	mov	r0, r6
 800833c:	f7f8 f8f2 	bl	8000524 <__aeabi_i2d>
 8008340:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008344:	f7f8 f958 	bl	80005f8 <__aeabi_dmul>
 8008348:	4b65      	ldr	r3, [pc, #404]	@ (80084e0 <_dtoa_r+0x590>)
 800834a:	2200      	movs	r2, #0
 800834c:	f7f7 ff9e 	bl	800028c <__adddf3>
 8008350:	4605      	mov	r5, r0
 8008352:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008356:	2c00      	cmp	r4, #0
 8008358:	d16a      	bne.n	8008430 <_dtoa_r+0x4e0>
 800835a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800835e:	4b61      	ldr	r3, [pc, #388]	@ (80084e4 <_dtoa_r+0x594>)
 8008360:	2200      	movs	r2, #0
 8008362:	f7f7 ff91 	bl	8000288 <__aeabi_dsub>
 8008366:	4602      	mov	r2, r0
 8008368:	460b      	mov	r3, r1
 800836a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800836e:	462a      	mov	r2, r5
 8008370:	4633      	mov	r3, r6
 8008372:	f7f8 fbd1 	bl	8000b18 <__aeabi_dcmpgt>
 8008376:	2800      	cmp	r0, #0
 8008378:	f040 8298 	bne.w	80088ac <_dtoa_r+0x95c>
 800837c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008380:	462a      	mov	r2, r5
 8008382:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008386:	f7f8 fba9 	bl	8000adc <__aeabi_dcmplt>
 800838a:	bb38      	cbnz	r0, 80083dc <_dtoa_r+0x48c>
 800838c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008390:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008394:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008396:	2b00      	cmp	r3, #0
 8008398:	f2c0 8157 	blt.w	800864a <_dtoa_r+0x6fa>
 800839c:	2f0e      	cmp	r7, #14
 800839e:	f300 8154 	bgt.w	800864a <_dtoa_r+0x6fa>
 80083a2:	4b4b      	ldr	r3, [pc, #300]	@ (80084d0 <_dtoa_r+0x580>)
 80083a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80083a8:	ed93 7b00 	vldr	d7, [r3]
 80083ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	ed8d 7b00 	vstr	d7, [sp]
 80083b4:	f280 80e5 	bge.w	8008582 <_dtoa_r+0x632>
 80083b8:	9b03      	ldr	r3, [sp, #12]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f300 80e1 	bgt.w	8008582 <_dtoa_r+0x632>
 80083c0:	d10c      	bne.n	80083dc <_dtoa_r+0x48c>
 80083c2:	4b48      	ldr	r3, [pc, #288]	@ (80084e4 <_dtoa_r+0x594>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	ec51 0b17 	vmov	r0, r1, d7
 80083ca:	f7f8 f915 	bl	80005f8 <__aeabi_dmul>
 80083ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083d2:	f7f8 fb97 	bl	8000b04 <__aeabi_dcmpge>
 80083d6:	2800      	cmp	r0, #0
 80083d8:	f000 8266 	beq.w	80088a8 <_dtoa_r+0x958>
 80083dc:	2400      	movs	r4, #0
 80083de:	4625      	mov	r5, r4
 80083e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80083e2:	4656      	mov	r6, sl
 80083e4:	ea6f 0803 	mvn.w	r8, r3
 80083e8:	2700      	movs	r7, #0
 80083ea:	4621      	mov	r1, r4
 80083ec:	4648      	mov	r0, r9
 80083ee:	f000 fcbf 	bl	8008d70 <_Bfree>
 80083f2:	2d00      	cmp	r5, #0
 80083f4:	f000 80bd 	beq.w	8008572 <_dtoa_r+0x622>
 80083f8:	b12f      	cbz	r7, 8008406 <_dtoa_r+0x4b6>
 80083fa:	42af      	cmp	r7, r5
 80083fc:	d003      	beq.n	8008406 <_dtoa_r+0x4b6>
 80083fe:	4639      	mov	r1, r7
 8008400:	4648      	mov	r0, r9
 8008402:	f000 fcb5 	bl	8008d70 <_Bfree>
 8008406:	4629      	mov	r1, r5
 8008408:	4648      	mov	r0, r9
 800840a:	f000 fcb1 	bl	8008d70 <_Bfree>
 800840e:	e0b0      	b.n	8008572 <_dtoa_r+0x622>
 8008410:	07e2      	lsls	r2, r4, #31
 8008412:	d505      	bpl.n	8008420 <_dtoa_r+0x4d0>
 8008414:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008418:	f7f8 f8ee 	bl	80005f8 <__aeabi_dmul>
 800841c:	3601      	adds	r6, #1
 800841e:	2301      	movs	r3, #1
 8008420:	1064      	asrs	r4, r4, #1
 8008422:	3508      	adds	r5, #8
 8008424:	e762      	b.n	80082ec <_dtoa_r+0x39c>
 8008426:	2602      	movs	r6, #2
 8008428:	e765      	b.n	80082f6 <_dtoa_r+0x3a6>
 800842a:	9c03      	ldr	r4, [sp, #12]
 800842c:	46b8      	mov	r8, r7
 800842e:	e784      	b.n	800833a <_dtoa_r+0x3ea>
 8008430:	4b27      	ldr	r3, [pc, #156]	@ (80084d0 <_dtoa_r+0x580>)
 8008432:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008434:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008438:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800843c:	4454      	add	r4, sl
 800843e:	2900      	cmp	r1, #0
 8008440:	d054      	beq.n	80084ec <_dtoa_r+0x59c>
 8008442:	4929      	ldr	r1, [pc, #164]	@ (80084e8 <_dtoa_r+0x598>)
 8008444:	2000      	movs	r0, #0
 8008446:	f7f8 fa01 	bl	800084c <__aeabi_ddiv>
 800844a:	4633      	mov	r3, r6
 800844c:	462a      	mov	r2, r5
 800844e:	f7f7 ff1b 	bl	8000288 <__aeabi_dsub>
 8008452:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008456:	4656      	mov	r6, sl
 8008458:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800845c:	f7f8 fb7c 	bl	8000b58 <__aeabi_d2iz>
 8008460:	4605      	mov	r5, r0
 8008462:	f7f8 f85f 	bl	8000524 <__aeabi_i2d>
 8008466:	4602      	mov	r2, r0
 8008468:	460b      	mov	r3, r1
 800846a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800846e:	f7f7 ff0b 	bl	8000288 <__aeabi_dsub>
 8008472:	3530      	adds	r5, #48	@ 0x30
 8008474:	4602      	mov	r2, r0
 8008476:	460b      	mov	r3, r1
 8008478:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800847c:	f806 5b01 	strb.w	r5, [r6], #1
 8008480:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008484:	f7f8 fb2a 	bl	8000adc <__aeabi_dcmplt>
 8008488:	2800      	cmp	r0, #0
 800848a:	d172      	bne.n	8008572 <_dtoa_r+0x622>
 800848c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008490:	4911      	ldr	r1, [pc, #68]	@ (80084d8 <_dtoa_r+0x588>)
 8008492:	2000      	movs	r0, #0
 8008494:	f7f7 fef8 	bl	8000288 <__aeabi_dsub>
 8008498:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800849c:	f7f8 fb1e 	bl	8000adc <__aeabi_dcmplt>
 80084a0:	2800      	cmp	r0, #0
 80084a2:	f040 80b4 	bne.w	800860e <_dtoa_r+0x6be>
 80084a6:	42a6      	cmp	r6, r4
 80084a8:	f43f af70 	beq.w	800838c <_dtoa_r+0x43c>
 80084ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80084b0:	4b0a      	ldr	r3, [pc, #40]	@ (80084dc <_dtoa_r+0x58c>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	f7f8 f8a0 	bl	80005f8 <__aeabi_dmul>
 80084b8:	4b08      	ldr	r3, [pc, #32]	@ (80084dc <_dtoa_r+0x58c>)
 80084ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80084be:	2200      	movs	r2, #0
 80084c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084c4:	f7f8 f898 	bl	80005f8 <__aeabi_dmul>
 80084c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084cc:	e7c4      	b.n	8008458 <_dtoa_r+0x508>
 80084ce:	bf00      	nop
 80084d0:	0801cdc0 	.word	0x0801cdc0
 80084d4:	0801cd98 	.word	0x0801cd98
 80084d8:	3ff00000 	.word	0x3ff00000
 80084dc:	40240000 	.word	0x40240000
 80084e0:	401c0000 	.word	0x401c0000
 80084e4:	40140000 	.word	0x40140000
 80084e8:	3fe00000 	.word	0x3fe00000
 80084ec:	4631      	mov	r1, r6
 80084ee:	4628      	mov	r0, r5
 80084f0:	f7f8 f882 	bl	80005f8 <__aeabi_dmul>
 80084f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80084f8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80084fa:	4656      	mov	r6, sl
 80084fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008500:	f7f8 fb2a 	bl	8000b58 <__aeabi_d2iz>
 8008504:	4605      	mov	r5, r0
 8008506:	f7f8 f80d 	bl	8000524 <__aeabi_i2d>
 800850a:	4602      	mov	r2, r0
 800850c:	460b      	mov	r3, r1
 800850e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008512:	f7f7 feb9 	bl	8000288 <__aeabi_dsub>
 8008516:	3530      	adds	r5, #48	@ 0x30
 8008518:	f806 5b01 	strb.w	r5, [r6], #1
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	42a6      	cmp	r6, r4
 8008522:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008526:	f04f 0200 	mov.w	r2, #0
 800852a:	d124      	bne.n	8008576 <_dtoa_r+0x626>
 800852c:	4baf      	ldr	r3, [pc, #700]	@ (80087ec <_dtoa_r+0x89c>)
 800852e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008532:	f7f7 feab 	bl	800028c <__adddf3>
 8008536:	4602      	mov	r2, r0
 8008538:	460b      	mov	r3, r1
 800853a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800853e:	f7f8 faeb 	bl	8000b18 <__aeabi_dcmpgt>
 8008542:	2800      	cmp	r0, #0
 8008544:	d163      	bne.n	800860e <_dtoa_r+0x6be>
 8008546:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800854a:	49a8      	ldr	r1, [pc, #672]	@ (80087ec <_dtoa_r+0x89c>)
 800854c:	2000      	movs	r0, #0
 800854e:	f7f7 fe9b 	bl	8000288 <__aeabi_dsub>
 8008552:	4602      	mov	r2, r0
 8008554:	460b      	mov	r3, r1
 8008556:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800855a:	f7f8 fabf 	bl	8000adc <__aeabi_dcmplt>
 800855e:	2800      	cmp	r0, #0
 8008560:	f43f af14 	beq.w	800838c <_dtoa_r+0x43c>
 8008564:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008566:	1e73      	subs	r3, r6, #1
 8008568:	9313      	str	r3, [sp, #76]	@ 0x4c
 800856a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800856e:	2b30      	cmp	r3, #48	@ 0x30
 8008570:	d0f8      	beq.n	8008564 <_dtoa_r+0x614>
 8008572:	4647      	mov	r7, r8
 8008574:	e03b      	b.n	80085ee <_dtoa_r+0x69e>
 8008576:	4b9e      	ldr	r3, [pc, #632]	@ (80087f0 <_dtoa_r+0x8a0>)
 8008578:	f7f8 f83e 	bl	80005f8 <__aeabi_dmul>
 800857c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008580:	e7bc      	b.n	80084fc <_dtoa_r+0x5ac>
 8008582:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008586:	4656      	mov	r6, sl
 8008588:	e9dd 2300 	ldrd	r2, r3, [sp]
 800858c:	4620      	mov	r0, r4
 800858e:	4629      	mov	r1, r5
 8008590:	f7f8 f95c 	bl	800084c <__aeabi_ddiv>
 8008594:	f7f8 fae0 	bl	8000b58 <__aeabi_d2iz>
 8008598:	4680      	mov	r8, r0
 800859a:	f7f7 ffc3 	bl	8000524 <__aeabi_i2d>
 800859e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085a2:	f7f8 f829 	bl	80005f8 <__aeabi_dmul>
 80085a6:	4602      	mov	r2, r0
 80085a8:	460b      	mov	r3, r1
 80085aa:	4620      	mov	r0, r4
 80085ac:	4629      	mov	r1, r5
 80085ae:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80085b2:	f7f7 fe69 	bl	8000288 <__aeabi_dsub>
 80085b6:	f806 4b01 	strb.w	r4, [r6], #1
 80085ba:	9d03      	ldr	r5, [sp, #12]
 80085bc:	eba6 040a 	sub.w	r4, r6, sl
 80085c0:	42a5      	cmp	r5, r4
 80085c2:	4602      	mov	r2, r0
 80085c4:	460b      	mov	r3, r1
 80085c6:	d133      	bne.n	8008630 <_dtoa_r+0x6e0>
 80085c8:	f7f7 fe60 	bl	800028c <__adddf3>
 80085cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085d0:	4604      	mov	r4, r0
 80085d2:	460d      	mov	r5, r1
 80085d4:	f7f8 faa0 	bl	8000b18 <__aeabi_dcmpgt>
 80085d8:	b9c0      	cbnz	r0, 800860c <_dtoa_r+0x6bc>
 80085da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085de:	4620      	mov	r0, r4
 80085e0:	4629      	mov	r1, r5
 80085e2:	f7f8 fa71 	bl	8000ac8 <__aeabi_dcmpeq>
 80085e6:	b110      	cbz	r0, 80085ee <_dtoa_r+0x69e>
 80085e8:	f018 0f01 	tst.w	r8, #1
 80085ec:	d10e      	bne.n	800860c <_dtoa_r+0x6bc>
 80085ee:	9902      	ldr	r1, [sp, #8]
 80085f0:	4648      	mov	r0, r9
 80085f2:	f000 fbbd 	bl	8008d70 <_Bfree>
 80085f6:	2300      	movs	r3, #0
 80085f8:	7033      	strb	r3, [r6, #0]
 80085fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80085fc:	3701      	adds	r7, #1
 80085fe:	601f      	str	r7, [r3, #0]
 8008600:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008602:	2b00      	cmp	r3, #0
 8008604:	f000 824b 	beq.w	8008a9e <_dtoa_r+0xb4e>
 8008608:	601e      	str	r6, [r3, #0]
 800860a:	e248      	b.n	8008a9e <_dtoa_r+0xb4e>
 800860c:	46b8      	mov	r8, r7
 800860e:	4633      	mov	r3, r6
 8008610:	461e      	mov	r6, r3
 8008612:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008616:	2a39      	cmp	r2, #57	@ 0x39
 8008618:	d106      	bne.n	8008628 <_dtoa_r+0x6d8>
 800861a:	459a      	cmp	sl, r3
 800861c:	d1f8      	bne.n	8008610 <_dtoa_r+0x6c0>
 800861e:	2230      	movs	r2, #48	@ 0x30
 8008620:	f108 0801 	add.w	r8, r8, #1
 8008624:	f88a 2000 	strb.w	r2, [sl]
 8008628:	781a      	ldrb	r2, [r3, #0]
 800862a:	3201      	adds	r2, #1
 800862c:	701a      	strb	r2, [r3, #0]
 800862e:	e7a0      	b.n	8008572 <_dtoa_r+0x622>
 8008630:	4b6f      	ldr	r3, [pc, #444]	@ (80087f0 <_dtoa_r+0x8a0>)
 8008632:	2200      	movs	r2, #0
 8008634:	f7f7 ffe0 	bl	80005f8 <__aeabi_dmul>
 8008638:	2200      	movs	r2, #0
 800863a:	2300      	movs	r3, #0
 800863c:	4604      	mov	r4, r0
 800863e:	460d      	mov	r5, r1
 8008640:	f7f8 fa42 	bl	8000ac8 <__aeabi_dcmpeq>
 8008644:	2800      	cmp	r0, #0
 8008646:	d09f      	beq.n	8008588 <_dtoa_r+0x638>
 8008648:	e7d1      	b.n	80085ee <_dtoa_r+0x69e>
 800864a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800864c:	2a00      	cmp	r2, #0
 800864e:	f000 80ea 	beq.w	8008826 <_dtoa_r+0x8d6>
 8008652:	9a07      	ldr	r2, [sp, #28]
 8008654:	2a01      	cmp	r2, #1
 8008656:	f300 80cd 	bgt.w	80087f4 <_dtoa_r+0x8a4>
 800865a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800865c:	2a00      	cmp	r2, #0
 800865e:	f000 80c1 	beq.w	80087e4 <_dtoa_r+0x894>
 8008662:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008666:	9c08      	ldr	r4, [sp, #32]
 8008668:	9e00      	ldr	r6, [sp, #0]
 800866a:	9a00      	ldr	r2, [sp, #0]
 800866c:	441a      	add	r2, r3
 800866e:	9200      	str	r2, [sp, #0]
 8008670:	9a06      	ldr	r2, [sp, #24]
 8008672:	2101      	movs	r1, #1
 8008674:	441a      	add	r2, r3
 8008676:	4648      	mov	r0, r9
 8008678:	9206      	str	r2, [sp, #24]
 800867a:	f000 fc2d 	bl	8008ed8 <__i2b>
 800867e:	4605      	mov	r5, r0
 8008680:	b166      	cbz	r6, 800869c <_dtoa_r+0x74c>
 8008682:	9b06      	ldr	r3, [sp, #24]
 8008684:	2b00      	cmp	r3, #0
 8008686:	dd09      	ble.n	800869c <_dtoa_r+0x74c>
 8008688:	42b3      	cmp	r3, r6
 800868a:	9a00      	ldr	r2, [sp, #0]
 800868c:	bfa8      	it	ge
 800868e:	4633      	movge	r3, r6
 8008690:	1ad2      	subs	r2, r2, r3
 8008692:	9200      	str	r2, [sp, #0]
 8008694:	9a06      	ldr	r2, [sp, #24]
 8008696:	1af6      	subs	r6, r6, r3
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	9306      	str	r3, [sp, #24]
 800869c:	9b08      	ldr	r3, [sp, #32]
 800869e:	b30b      	cbz	r3, 80086e4 <_dtoa_r+0x794>
 80086a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f000 80c6 	beq.w	8008834 <_dtoa_r+0x8e4>
 80086a8:	2c00      	cmp	r4, #0
 80086aa:	f000 80c0 	beq.w	800882e <_dtoa_r+0x8de>
 80086ae:	4629      	mov	r1, r5
 80086b0:	4622      	mov	r2, r4
 80086b2:	4648      	mov	r0, r9
 80086b4:	f000 fcc8 	bl	8009048 <__pow5mult>
 80086b8:	9a02      	ldr	r2, [sp, #8]
 80086ba:	4601      	mov	r1, r0
 80086bc:	4605      	mov	r5, r0
 80086be:	4648      	mov	r0, r9
 80086c0:	f000 fc20 	bl	8008f04 <__multiply>
 80086c4:	9902      	ldr	r1, [sp, #8]
 80086c6:	4680      	mov	r8, r0
 80086c8:	4648      	mov	r0, r9
 80086ca:	f000 fb51 	bl	8008d70 <_Bfree>
 80086ce:	9b08      	ldr	r3, [sp, #32]
 80086d0:	1b1b      	subs	r3, r3, r4
 80086d2:	9308      	str	r3, [sp, #32]
 80086d4:	f000 80b1 	beq.w	800883a <_dtoa_r+0x8ea>
 80086d8:	9a08      	ldr	r2, [sp, #32]
 80086da:	4641      	mov	r1, r8
 80086dc:	4648      	mov	r0, r9
 80086de:	f000 fcb3 	bl	8009048 <__pow5mult>
 80086e2:	9002      	str	r0, [sp, #8]
 80086e4:	2101      	movs	r1, #1
 80086e6:	4648      	mov	r0, r9
 80086e8:	f000 fbf6 	bl	8008ed8 <__i2b>
 80086ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086ee:	4604      	mov	r4, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f000 81d8 	beq.w	8008aa6 <_dtoa_r+0xb56>
 80086f6:	461a      	mov	r2, r3
 80086f8:	4601      	mov	r1, r0
 80086fa:	4648      	mov	r0, r9
 80086fc:	f000 fca4 	bl	8009048 <__pow5mult>
 8008700:	9b07      	ldr	r3, [sp, #28]
 8008702:	2b01      	cmp	r3, #1
 8008704:	4604      	mov	r4, r0
 8008706:	f300 809f 	bgt.w	8008848 <_dtoa_r+0x8f8>
 800870a:	9b04      	ldr	r3, [sp, #16]
 800870c:	2b00      	cmp	r3, #0
 800870e:	f040 8097 	bne.w	8008840 <_dtoa_r+0x8f0>
 8008712:	9b05      	ldr	r3, [sp, #20]
 8008714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008718:	2b00      	cmp	r3, #0
 800871a:	f040 8093 	bne.w	8008844 <_dtoa_r+0x8f4>
 800871e:	9b05      	ldr	r3, [sp, #20]
 8008720:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008724:	0d1b      	lsrs	r3, r3, #20
 8008726:	051b      	lsls	r3, r3, #20
 8008728:	b133      	cbz	r3, 8008738 <_dtoa_r+0x7e8>
 800872a:	9b00      	ldr	r3, [sp, #0]
 800872c:	3301      	adds	r3, #1
 800872e:	9300      	str	r3, [sp, #0]
 8008730:	9b06      	ldr	r3, [sp, #24]
 8008732:	3301      	adds	r3, #1
 8008734:	9306      	str	r3, [sp, #24]
 8008736:	2301      	movs	r3, #1
 8008738:	9308      	str	r3, [sp, #32]
 800873a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800873c:	2b00      	cmp	r3, #0
 800873e:	f000 81b8 	beq.w	8008ab2 <_dtoa_r+0xb62>
 8008742:	6923      	ldr	r3, [r4, #16]
 8008744:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008748:	6918      	ldr	r0, [r3, #16]
 800874a:	f000 fb79 	bl	8008e40 <__hi0bits>
 800874e:	f1c0 0020 	rsb	r0, r0, #32
 8008752:	9b06      	ldr	r3, [sp, #24]
 8008754:	4418      	add	r0, r3
 8008756:	f010 001f 	ands.w	r0, r0, #31
 800875a:	f000 8082 	beq.w	8008862 <_dtoa_r+0x912>
 800875e:	f1c0 0320 	rsb	r3, r0, #32
 8008762:	2b04      	cmp	r3, #4
 8008764:	dd73      	ble.n	800884e <_dtoa_r+0x8fe>
 8008766:	9b00      	ldr	r3, [sp, #0]
 8008768:	f1c0 001c 	rsb	r0, r0, #28
 800876c:	4403      	add	r3, r0
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	9b06      	ldr	r3, [sp, #24]
 8008772:	4403      	add	r3, r0
 8008774:	4406      	add	r6, r0
 8008776:	9306      	str	r3, [sp, #24]
 8008778:	9b00      	ldr	r3, [sp, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	dd05      	ble.n	800878a <_dtoa_r+0x83a>
 800877e:	9902      	ldr	r1, [sp, #8]
 8008780:	461a      	mov	r2, r3
 8008782:	4648      	mov	r0, r9
 8008784:	f000 fcba 	bl	80090fc <__lshift>
 8008788:	9002      	str	r0, [sp, #8]
 800878a:	9b06      	ldr	r3, [sp, #24]
 800878c:	2b00      	cmp	r3, #0
 800878e:	dd05      	ble.n	800879c <_dtoa_r+0x84c>
 8008790:	4621      	mov	r1, r4
 8008792:	461a      	mov	r2, r3
 8008794:	4648      	mov	r0, r9
 8008796:	f000 fcb1 	bl	80090fc <__lshift>
 800879a:	4604      	mov	r4, r0
 800879c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d061      	beq.n	8008866 <_dtoa_r+0x916>
 80087a2:	9802      	ldr	r0, [sp, #8]
 80087a4:	4621      	mov	r1, r4
 80087a6:	f000 fd15 	bl	80091d4 <__mcmp>
 80087aa:	2800      	cmp	r0, #0
 80087ac:	da5b      	bge.n	8008866 <_dtoa_r+0x916>
 80087ae:	2300      	movs	r3, #0
 80087b0:	9902      	ldr	r1, [sp, #8]
 80087b2:	220a      	movs	r2, #10
 80087b4:	4648      	mov	r0, r9
 80087b6:	f000 fafd 	bl	8008db4 <__multadd>
 80087ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087bc:	9002      	str	r0, [sp, #8]
 80087be:	f107 38ff 	add.w	r8, r7, #4294967295
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f000 8177 	beq.w	8008ab6 <_dtoa_r+0xb66>
 80087c8:	4629      	mov	r1, r5
 80087ca:	2300      	movs	r3, #0
 80087cc:	220a      	movs	r2, #10
 80087ce:	4648      	mov	r0, r9
 80087d0:	f000 faf0 	bl	8008db4 <__multadd>
 80087d4:	f1bb 0f00 	cmp.w	fp, #0
 80087d8:	4605      	mov	r5, r0
 80087da:	dc6f      	bgt.n	80088bc <_dtoa_r+0x96c>
 80087dc:	9b07      	ldr	r3, [sp, #28]
 80087de:	2b02      	cmp	r3, #2
 80087e0:	dc49      	bgt.n	8008876 <_dtoa_r+0x926>
 80087e2:	e06b      	b.n	80088bc <_dtoa_r+0x96c>
 80087e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80087e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80087ea:	e73c      	b.n	8008666 <_dtoa_r+0x716>
 80087ec:	3fe00000 	.word	0x3fe00000
 80087f0:	40240000 	.word	0x40240000
 80087f4:	9b03      	ldr	r3, [sp, #12]
 80087f6:	1e5c      	subs	r4, r3, #1
 80087f8:	9b08      	ldr	r3, [sp, #32]
 80087fa:	42a3      	cmp	r3, r4
 80087fc:	db09      	blt.n	8008812 <_dtoa_r+0x8c2>
 80087fe:	1b1c      	subs	r4, r3, r4
 8008800:	9b03      	ldr	r3, [sp, #12]
 8008802:	2b00      	cmp	r3, #0
 8008804:	f6bf af30 	bge.w	8008668 <_dtoa_r+0x718>
 8008808:	9b00      	ldr	r3, [sp, #0]
 800880a:	9a03      	ldr	r2, [sp, #12]
 800880c:	1a9e      	subs	r6, r3, r2
 800880e:	2300      	movs	r3, #0
 8008810:	e72b      	b.n	800866a <_dtoa_r+0x71a>
 8008812:	9b08      	ldr	r3, [sp, #32]
 8008814:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008816:	9408      	str	r4, [sp, #32]
 8008818:	1ae3      	subs	r3, r4, r3
 800881a:	441a      	add	r2, r3
 800881c:	9e00      	ldr	r6, [sp, #0]
 800881e:	9b03      	ldr	r3, [sp, #12]
 8008820:	920d      	str	r2, [sp, #52]	@ 0x34
 8008822:	2400      	movs	r4, #0
 8008824:	e721      	b.n	800866a <_dtoa_r+0x71a>
 8008826:	9c08      	ldr	r4, [sp, #32]
 8008828:	9e00      	ldr	r6, [sp, #0]
 800882a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800882c:	e728      	b.n	8008680 <_dtoa_r+0x730>
 800882e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008832:	e751      	b.n	80086d8 <_dtoa_r+0x788>
 8008834:	9a08      	ldr	r2, [sp, #32]
 8008836:	9902      	ldr	r1, [sp, #8]
 8008838:	e750      	b.n	80086dc <_dtoa_r+0x78c>
 800883a:	f8cd 8008 	str.w	r8, [sp, #8]
 800883e:	e751      	b.n	80086e4 <_dtoa_r+0x794>
 8008840:	2300      	movs	r3, #0
 8008842:	e779      	b.n	8008738 <_dtoa_r+0x7e8>
 8008844:	9b04      	ldr	r3, [sp, #16]
 8008846:	e777      	b.n	8008738 <_dtoa_r+0x7e8>
 8008848:	2300      	movs	r3, #0
 800884a:	9308      	str	r3, [sp, #32]
 800884c:	e779      	b.n	8008742 <_dtoa_r+0x7f2>
 800884e:	d093      	beq.n	8008778 <_dtoa_r+0x828>
 8008850:	9a00      	ldr	r2, [sp, #0]
 8008852:	331c      	adds	r3, #28
 8008854:	441a      	add	r2, r3
 8008856:	9200      	str	r2, [sp, #0]
 8008858:	9a06      	ldr	r2, [sp, #24]
 800885a:	441a      	add	r2, r3
 800885c:	441e      	add	r6, r3
 800885e:	9206      	str	r2, [sp, #24]
 8008860:	e78a      	b.n	8008778 <_dtoa_r+0x828>
 8008862:	4603      	mov	r3, r0
 8008864:	e7f4      	b.n	8008850 <_dtoa_r+0x900>
 8008866:	9b03      	ldr	r3, [sp, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	46b8      	mov	r8, r7
 800886c:	dc20      	bgt.n	80088b0 <_dtoa_r+0x960>
 800886e:	469b      	mov	fp, r3
 8008870:	9b07      	ldr	r3, [sp, #28]
 8008872:	2b02      	cmp	r3, #2
 8008874:	dd1e      	ble.n	80088b4 <_dtoa_r+0x964>
 8008876:	f1bb 0f00 	cmp.w	fp, #0
 800887a:	f47f adb1 	bne.w	80083e0 <_dtoa_r+0x490>
 800887e:	4621      	mov	r1, r4
 8008880:	465b      	mov	r3, fp
 8008882:	2205      	movs	r2, #5
 8008884:	4648      	mov	r0, r9
 8008886:	f000 fa95 	bl	8008db4 <__multadd>
 800888a:	4601      	mov	r1, r0
 800888c:	4604      	mov	r4, r0
 800888e:	9802      	ldr	r0, [sp, #8]
 8008890:	f000 fca0 	bl	80091d4 <__mcmp>
 8008894:	2800      	cmp	r0, #0
 8008896:	f77f ada3 	ble.w	80083e0 <_dtoa_r+0x490>
 800889a:	4656      	mov	r6, sl
 800889c:	2331      	movs	r3, #49	@ 0x31
 800889e:	f806 3b01 	strb.w	r3, [r6], #1
 80088a2:	f108 0801 	add.w	r8, r8, #1
 80088a6:	e59f      	b.n	80083e8 <_dtoa_r+0x498>
 80088a8:	9c03      	ldr	r4, [sp, #12]
 80088aa:	46b8      	mov	r8, r7
 80088ac:	4625      	mov	r5, r4
 80088ae:	e7f4      	b.n	800889a <_dtoa_r+0x94a>
 80088b0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80088b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f000 8101 	beq.w	8008abe <_dtoa_r+0xb6e>
 80088bc:	2e00      	cmp	r6, #0
 80088be:	dd05      	ble.n	80088cc <_dtoa_r+0x97c>
 80088c0:	4629      	mov	r1, r5
 80088c2:	4632      	mov	r2, r6
 80088c4:	4648      	mov	r0, r9
 80088c6:	f000 fc19 	bl	80090fc <__lshift>
 80088ca:	4605      	mov	r5, r0
 80088cc:	9b08      	ldr	r3, [sp, #32]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d05c      	beq.n	800898c <_dtoa_r+0xa3c>
 80088d2:	6869      	ldr	r1, [r5, #4]
 80088d4:	4648      	mov	r0, r9
 80088d6:	f000 fa0b 	bl	8008cf0 <_Balloc>
 80088da:	4606      	mov	r6, r0
 80088dc:	b928      	cbnz	r0, 80088ea <_dtoa_r+0x99a>
 80088de:	4b82      	ldr	r3, [pc, #520]	@ (8008ae8 <_dtoa_r+0xb98>)
 80088e0:	4602      	mov	r2, r0
 80088e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80088e6:	f7ff bb4a 	b.w	8007f7e <_dtoa_r+0x2e>
 80088ea:	692a      	ldr	r2, [r5, #16]
 80088ec:	3202      	adds	r2, #2
 80088ee:	0092      	lsls	r2, r2, #2
 80088f0:	f105 010c 	add.w	r1, r5, #12
 80088f4:	300c      	adds	r0, #12
 80088f6:	f000 fe31 	bl	800955c <memcpy>
 80088fa:	2201      	movs	r2, #1
 80088fc:	4631      	mov	r1, r6
 80088fe:	4648      	mov	r0, r9
 8008900:	f000 fbfc 	bl	80090fc <__lshift>
 8008904:	f10a 0301 	add.w	r3, sl, #1
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	eb0a 030b 	add.w	r3, sl, fp
 800890e:	9308      	str	r3, [sp, #32]
 8008910:	9b04      	ldr	r3, [sp, #16]
 8008912:	f003 0301 	and.w	r3, r3, #1
 8008916:	462f      	mov	r7, r5
 8008918:	9306      	str	r3, [sp, #24]
 800891a:	4605      	mov	r5, r0
 800891c:	9b00      	ldr	r3, [sp, #0]
 800891e:	9802      	ldr	r0, [sp, #8]
 8008920:	4621      	mov	r1, r4
 8008922:	f103 3bff 	add.w	fp, r3, #4294967295
 8008926:	f7ff fa8a 	bl	8007e3e <quorem>
 800892a:	4603      	mov	r3, r0
 800892c:	3330      	adds	r3, #48	@ 0x30
 800892e:	9003      	str	r0, [sp, #12]
 8008930:	4639      	mov	r1, r7
 8008932:	9802      	ldr	r0, [sp, #8]
 8008934:	9309      	str	r3, [sp, #36]	@ 0x24
 8008936:	f000 fc4d 	bl	80091d4 <__mcmp>
 800893a:	462a      	mov	r2, r5
 800893c:	9004      	str	r0, [sp, #16]
 800893e:	4621      	mov	r1, r4
 8008940:	4648      	mov	r0, r9
 8008942:	f000 fc63 	bl	800920c <__mdiff>
 8008946:	68c2      	ldr	r2, [r0, #12]
 8008948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800894a:	4606      	mov	r6, r0
 800894c:	bb02      	cbnz	r2, 8008990 <_dtoa_r+0xa40>
 800894e:	4601      	mov	r1, r0
 8008950:	9802      	ldr	r0, [sp, #8]
 8008952:	f000 fc3f 	bl	80091d4 <__mcmp>
 8008956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008958:	4602      	mov	r2, r0
 800895a:	4631      	mov	r1, r6
 800895c:	4648      	mov	r0, r9
 800895e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008960:	9309      	str	r3, [sp, #36]	@ 0x24
 8008962:	f000 fa05 	bl	8008d70 <_Bfree>
 8008966:	9b07      	ldr	r3, [sp, #28]
 8008968:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800896a:	9e00      	ldr	r6, [sp, #0]
 800896c:	ea42 0103 	orr.w	r1, r2, r3
 8008970:	9b06      	ldr	r3, [sp, #24]
 8008972:	4319      	orrs	r1, r3
 8008974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008976:	d10d      	bne.n	8008994 <_dtoa_r+0xa44>
 8008978:	2b39      	cmp	r3, #57	@ 0x39
 800897a:	d027      	beq.n	80089cc <_dtoa_r+0xa7c>
 800897c:	9a04      	ldr	r2, [sp, #16]
 800897e:	2a00      	cmp	r2, #0
 8008980:	dd01      	ble.n	8008986 <_dtoa_r+0xa36>
 8008982:	9b03      	ldr	r3, [sp, #12]
 8008984:	3331      	adds	r3, #49	@ 0x31
 8008986:	f88b 3000 	strb.w	r3, [fp]
 800898a:	e52e      	b.n	80083ea <_dtoa_r+0x49a>
 800898c:	4628      	mov	r0, r5
 800898e:	e7b9      	b.n	8008904 <_dtoa_r+0x9b4>
 8008990:	2201      	movs	r2, #1
 8008992:	e7e2      	b.n	800895a <_dtoa_r+0xa0a>
 8008994:	9904      	ldr	r1, [sp, #16]
 8008996:	2900      	cmp	r1, #0
 8008998:	db04      	blt.n	80089a4 <_dtoa_r+0xa54>
 800899a:	9807      	ldr	r0, [sp, #28]
 800899c:	4301      	orrs	r1, r0
 800899e:	9806      	ldr	r0, [sp, #24]
 80089a0:	4301      	orrs	r1, r0
 80089a2:	d120      	bne.n	80089e6 <_dtoa_r+0xa96>
 80089a4:	2a00      	cmp	r2, #0
 80089a6:	ddee      	ble.n	8008986 <_dtoa_r+0xa36>
 80089a8:	9902      	ldr	r1, [sp, #8]
 80089aa:	9300      	str	r3, [sp, #0]
 80089ac:	2201      	movs	r2, #1
 80089ae:	4648      	mov	r0, r9
 80089b0:	f000 fba4 	bl	80090fc <__lshift>
 80089b4:	4621      	mov	r1, r4
 80089b6:	9002      	str	r0, [sp, #8]
 80089b8:	f000 fc0c 	bl	80091d4 <__mcmp>
 80089bc:	2800      	cmp	r0, #0
 80089be:	9b00      	ldr	r3, [sp, #0]
 80089c0:	dc02      	bgt.n	80089c8 <_dtoa_r+0xa78>
 80089c2:	d1e0      	bne.n	8008986 <_dtoa_r+0xa36>
 80089c4:	07da      	lsls	r2, r3, #31
 80089c6:	d5de      	bpl.n	8008986 <_dtoa_r+0xa36>
 80089c8:	2b39      	cmp	r3, #57	@ 0x39
 80089ca:	d1da      	bne.n	8008982 <_dtoa_r+0xa32>
 80089cc:	2339      	movs	r3, #57	@ 0x39
 80089ce:	f88b 3000 	strb.w	r3, [fp]
 80089d2:	4633      	mov	r3, r6
 80089d4:	461e      	mov	r6, r3
 80089d6:	3b01      	subs	r3, #1
 80089d8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80089dc:	2a39      	cmp	r2, #57	@ 0x39
 80089de:	d04e      	beq.n	8008a7e <_dtoa_r+0xb2e>
 80089e0:	3201      	adds	r2, #1
 80089e2:	701a      	strb	r2, [r3, #0]
 80089e4:	e501      	b.n	80083ea <_dtoa_r+0x49a>
 80089e6:	2a00      	cmp	r2, #0
 80089e8:	dd03      	ble.n	80089f2 <_dtoa_r+0xaa2>
 80089ea:	2b39      	cmp	r3, #57	@ 0x39
 80089ec:	d0ee      	beq.n	80089cc <_dtoa_r+0xa7c>
 80089ee:	3301      	adds	r3, #1
 80089f0:	e7c9      	b.n	8008986 <_dtoa_r+0xa36>
 80089f2:	9a00      	ldr	r2, [sp, #0]
 80089f4:	9908      	ldr	r1, [sp, #32]
 80089f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80089fa:	428a      	cmp	r2, r1
 80089fc:	d028      	beq.n	8008a50 <_dtoa_r+0xb00>
 80089fe:	9902      	ldr	r1, [sp, #8]
 8008a00:	2300      	movs	r3, #0
 8008a02:	220a      	movs	r2, #10
 8008a04:	4648      	mov	r0, r9
 8008a06:	f000 f9d5 	bl	8008db4 <__multadd>
 8008a0a:	42af      	cmp	r7, r5
 8008a0c:	9002      	str	r0, [sp, #8]
 8008a0e:	f04f 0300 	mov.w	r3, #0
 8008a12:	f04f 020a 	mov.w	r2, #10
 8008a16:	4639      	mov	r1, r7
 8008a18:	4648      	mov	r0, r9
 8008a1a:	d107      	bne.n	8008a2c <_dtoa_r+0xadc>
 8008a1c:	f000 f9ca 	bl	8008db4 <__multadd>
 8008a20:	4607      	mov	r7, r0
 8008a22:	4605      	mov	r5, r0
 8008a24:	9b00      	ldr	r3, [sp, #0]
 8008a26:	3301      	adds	r3, #1
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	e777      	b.n	800891c <_dtoa_r+0x9cc>
 8008a2c:	f000 f9c2 	bl	8008db4 <__multadd>
 8008a30:	4629      	mov	r1, r5
 8008a32:	4607      	mov	r7, r0
 8008a34:	2300      	movs	r3, #0
 8008a36:	220a      	movs	r2, #10
 8008a38:	4648      	mov	r0, r9
 8008a3a:	f000 f9bb 	bl	8008db4 <__multadd>
 8008a3e:	4605      	mov	r5, r0
 8008a40:	e7f0      	b.n	8008a24 <_dtoa_r+0xad4>
 8008a42:	f1bb 0f00 	cmp.w	fp, #0
 8008a46:	bfcc      	ite	gt
 8008a48:	465e      	movgt	r6, fp
 8008a4a:	2601      	movle	r6, #1
 8008a4c:	4456      	add	r6, sl
 8008a4e:	2700      	movs	r7, #0
 8008a50:	9902      	ldr	r1, [sp, #8]
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	2201      	movs	r2, #1
 8008a56:	4648      	mov	r0, r9
 8008a58:	f000 fb50 	bl	80090fc <__lshift>
 8008a5c:	4621      	mov	r1, r4
 8008a5e:	9002      	str	r0, [sp, #8]
 8008a60:	f000 fbb8 	bl	80091d4 <__mcmp>
 8008a64:	2800      	cmp	r0, #0
 8008a66:	dcb4      	bgt.n	80089d2 <_dtoa_r+0xa82>
 8008a68:	d102      	bne.n	8008a70 <_dtoa_r+0xb20>
 8008a6a:	9b00      	ldr	r3, [sp, #0]
 8008a6c:	07db      	lsls	r3, r3, #31
 8008a6e:	d4b0      	bmi.n	80089d2 <_dtoa_r+0xa82>
 8008a70:	4633      	mov	r3, r6
 8008a72:	461e      	mov	r6, r3
 8008a74:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a78:	2a30      	cmp	r2, #48	@ 0x30
 8008a7a:	d0fa      	beq.n	8008a72 <_dtoa_r+0xb22>
 8008a7c:	e4b5      	b.n	80083ea <_dtoa_r+0x49a>
 8008a7e:	459a      	cmp	sl, r3
 8008a80:	d1a8      	bne.n	80089d4 <_dtoa_r+0xa84>
 8008a82:	2331      	movs	r3, #49	@ 0x31
 8008a84:	f108 0801 	add.w	r8, r8, #1
 8008a88:	f88a 3000 	strb.w	r3, [sl]
 8008a8c:	e4ad      	b.n	80083ea <_dtoa_r+0x49a>
 8008a8e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008a90:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008aec <_dtoa_r+0xb9c>
 8008a94:	b11b      	cbz	r3, 8008a9e <_dtoa_r+0xb4e>
 8008a96:	f10a 0308 	add.w	r3, sl, #8
 8008a9a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008a9c:	6013      	str	r3, [r2, #0]
 8008a9e:	4650      	mov	r0, sl
 8008aa0:	b017      	add	sp, #92	@ 0x5c
 8008aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa6:	9b07      	ldr	r3, [sp, #28]
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	f77f ae2e 	ble.w	800870a <_dtoa_r+0x7ba>
 8008aae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ab0:	9308      	str	r3, [sp, #32]
 8008ab2:	2001      	movs	r0, #1
 8008ab4:	e64d      	b.n	8008752 <_dtoa_r+0x802>
 8008ab6:	f1bb 0f00 	cmp.w	fp, #0
 8008aba:	f77f aed9 	ble.w	8008870 <_dtoa_r+0x920>
 8008abe:	4656      	mov	r6, sl
 8008ac0:	9802      	ldr	r0, [sp, #8]
 8008ac2:	4621      	mov	r1, r4
 8008ac4:	f7ff f9bb 	bl	8007e3e <quorem>
 8008ac8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008acc:	f806 3b01 	strb.w	r3, [r6], #1
 8008ad0:	eba6 020a 	sub.w	r2, r6, sl
 8008ad4:	4593      	cmp	fp, r2
 8008ad6:	ddb4      	ble.n	8008a42 <_dtoa_r+0xaf2>
 8008ad8:	9902      	ldr	r1, [sp, #8]
 8008ada:	2300      	movs	r3, #0
 8008adc:	220a      	movs	r2, #10
 8008ade:	4648      	mov	r0, r9
 8008ae0:	f000 f968 	bl	8008db4 <__multadd>
 8008ae4:	9002      	str	r0, [sp, #8]
 8008ae6:	e7eb      	b.n	8008ac0 <_dtoa_r+0xb70>
 8008ae8:	0801ccc8 	.word	0x0801ccc8
 8008aec:	0801cc4c 	.word	0x0801cc4c

08008af0 <_free_r>:
 8008af0:	b538      	push	{r3, r4, r5, lr}
 8008af2:	4605      	mov	r5, r0
 8008af4:	2900      	cmp	r1, #0
 8008af6:	d041      	beq.n	8008b7c <_free_r+0x8c>
 8008af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008afc:	1f0c      	subs	r4, r1, #4
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	bfb8      	it	lt
 8008b02:	18e4      	addlt	r4, r4, r3
 8008b04:	f000 f8e8 	bl	8008cd8 <__malloc_lock>
 8008b08:	4a1d      	ldr	r2, [pc, #116]	@ (8008b80 <_free_r+0x90>)
 8008b0a:	6813      	ldr	r3, [r2, #0]
 8008b0c:	b933      	cbnz	r3, 8008b1c <_free_r+0x2c>
 8008b0e:	6063      	str	r3, [r4, #4]
 8008b10:	6014      	str	r4, [r2, #0]
 8008b12:	4628      	mov	r0, r5
 8008b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b18:	f000 b8e4 	b.w	8008ce4 <__malloc_unlock>
 8008b1c:	42a3      	cmp	r3, r4
 8008b1e:	d908      	bls.n	8008b32 <_free_r+0x42>
 8008b20:	6820      	ldr	r0, [r4, #0]
 8008b22:	1821      	adds	r1, r4, r0
 8008b24:	428b      	cmp	r3, r1
 8008b26:	bf01      	itttt	eq
 8008b28:	6819      	ldreq	r1, [r3, #0]
 8008b2a:	685b      	ldreq	r3, [r3, #4]
 8008b2c:	1809      	addeq	r1, r1, r0
 8008b2e:	6021      	streq	r1, [r4, #0]
 8008b30:	e7ed      	b.n	8008b0e <_free_r+0x1e>
 8008b32:	461a      	mov	r2, r3
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	b10b      	cbz	r3, 8008b3c <_free_r+0x4c>
 8008b38:	42a3      	cmp	r3, r4
 8008b3a:	d9fa      	bls.n	8008b32 <_free_r+0x42>
 8008b3c:	6811      	ldr	r1, [r2, #0]
 8008b3e:	1850      	adds	r0, r2, r1
 8008b40:	42a0      	cmp	r0, r4
 8008b42:	d10b      	bne.n	8008b5c <_free_r+0x6c>
 8008b44:	6820      	ldr	r0, [r4, #0]
 8008b46:	4401      	add	r1, r0
 8008b48:	1850      	adds	r0, r2, r1
 8008b4a:	4283      	cmp	r3, r0
 8008b4c:	6011      	str	r1, [r2, #0]
 8008b4e:	d1e0      	bne.n	8008b12 <_free_r+0x22>
 8008b50:	6818      	ldr	r0, [r3, #0]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	6053      	str	r3, [r2, #4]
 8008b56:	4408      	add	r0, r1
 8008b58:	6010      	str	r0, [r2, #0]
 8008b5a:	e7da      	b.n	8008b12 <_free_r+0x22>
 8008b5c:	d902      	bls.n	8008b64 <_free_r+0x74>
 8008b5e:	230c      	movs	r3, #12
 8008b60:	602b      	str	r3, [r5, #0]
 8008b62:	e7d6      	b.n	8008b12 <_free_r+0x22>
 8008b64:	6820      	ldr	r0, [r4, #0]
 8008b66:	1821      	adds	r1, r4, r0
 8008b68:	428b      	cmp	r3, r1
 8008b6a:	bf04      	itt	eq
 8008b6c:	6819      	ldreq	r1, [r3, #0]
 8008b6e:	685b      	ldreq	r3, [r3, #4]
 8008b70:	6063      	str	r3, [r4, #4]
 8008b72:	bf04      	itt	eq
 8008b74:	1809      	addeq	r1, r1, r0
 8008b76:	6021      	streq	r1, [r4, #0]
 8008b78:	6054      	str	r4, [r2, #4]
 8008b7a:	e7ca      	b.n	8008b12 <_free_r+0x22>
 8008b7c:	bd38      	pop	{r3, r4, r5, pc}
 8008b7e:	bf00      	nop
 8008b80:	2000217c 	.word	0x2000217c

08008b84 <malloc>:
 8008b84:	4b02      	ldr	r3, [pc, #8]	@ (8008b90 <malloc+0xc>)
 8008b86:	4601      	mov	r1, r0
 8008b88:	6818      	ldr	r0, [r3, #0]
 8008b8a:	f000 b825 	b.w	8008bd8 <_malloc_r>
 8008b8e:	bf00      	nop
 8008b90:	20000020 	.word	0x20000020

08008b94 <sbrk_aligned>:
 8008b94:	b570      	push	{r4, r5, r6, lr}
 8008b96:	4e0f      	ldr	r6, [pc, #60]	@ (8008bd4 <sbrk_aligned+0x40>)
 8008b98:	460c      	mov	r4, r1
 8008b9a:	6831      	ldr	r1, [r6, #0]
 8008b9c:	4605      	mov	r5, r0
 8008b9e:	b911      	cbnz	r1, 8008ba6 <sbrk_aligned+0x12>
 8008ba0:	f000 fccc 	bl	800953c <_sbrk_r>
 8008ba4:	6030      	str	r0, [r6, #0]
 8008ba6:	4621      	mov	r1, r4
 8008ba8:	4628      	mov	r0, r5
 8008baa:	f000 fcc7 	bl	800953c <_sbrk_r>
 8008bae:	1c43      	adds	r3, r0, #1
 8008bb0:	d103      	bne.n	8008bba <sbrk_aligned+0x26>
 8008bb2:	f04f 34ff 	mov.w	r4, #4294967295
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	bd70      	pop	{r4, r5, r6, pc}
 8008bba:	1cc4      	adds	r4, r0, #3
 8008bbc:	f024 0403 	bic.w	r4, r4, #3
 8008bc0:	42a0      	cmp	r0, r4
 8008bc2:	d0f8      	beq.n	8008bb6 <sbrk_aligned+0x22>
 8008bc4:	1a21      	subs	r1, r4, r0
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	f000 fcb8 	bl	800953c <_sbrk_r>
 8008bcc:	3001      	adds	r0, #1
 8008bce:	d1f2      	bne.n	8008bb6 <sbrk_aligned+0x22>
 8008bd0:	e7ef      	b.n	8008bb2 <sbrk_aligned+0x1e>
 8008bd2:	bf00      	nop
 8008bd4:	20002178 	.word	0x20002178

08008bd8 <_malloc_r>:
 8008bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bdc:	1ccd      	adds	r5, r1, #3
 8008bde:	f025 0503 	bic.w	r5, r5, #3
 8008be2:	3508      	adds	r5, #8
 8008be4:	2d0c      	cmp	r5, #12
 8008be6:	bf38      	it	cc
 8008be8:	250c      	movcc	r5, #12
 8008bea:	2d00      	cmp	r5, #0
 8008bec:	4606      	mov	r6, r0
 8008bee:	db01      	blt.n	8008bf4 <_malloc_r+0x1c>
 8008bf0:	42a9      	cmp	r1, r5
 8008bf2:	d904      	bls.n	8008bfe <_malloc_r+0x26>
 8008bf4:	230c      	movs	r3, #12
 8008bf6:	6033      	str	r3, [r6, #0]
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008cd4 <_malloc_r+0xfc>
 8008c02:	f000 f869 	bl	8008cd8 <__malloc_lock>
 8008c06:	f8d8 3000 	ldr.w	r3, [r8]
 8008c0a:	461c      	mov	r4, r3
 8008c0c:	bb44      	cbnz	r4, 8008c60 <_malloc_r+0x88>
 8008c0e:	4629      	mov	r1, r5
 8008c10:	4630      	mov	r0, r6
 8008c12:	f7ff ffbf 	bl	8008b94 <sbrk_aligned>
 8008c16:	1c43      	adds	r3, r0, #1
 8008c18:	4604      	mov	r4, r0
 8008c1a:	d158      	bne.n	8008cce <_malloc_r+0xf6>
 8008c1c:	f8d8 4000 	ldr.w	r4, [r8]
 8008c20:	4627      	mov	r7, r4
 8008c22:	2f00      	cmp	r7, #0
 8008c24:	d143      	bne.n	8008cae <_malloc_r+0xd6>
 8008c26:	2c00      	cmp	r4, #0
 8008c28:	d04b      	beq.n	8008cc2 <_malloc_r+0xea>
 8008c2a:	6823      	ldr	r3, [r4, #0]
 8008c2c:	4639      	mov	r1, r7
 8008c2e:	4630      	mov	r0, r6
 8008c30:	eb04 0903 	add.w	r9, r4, r3
 8008c34:	f000 fc82 	bl	800953c <_sbrk_r>
 8008c38:	4581      	cmp	r9, r0
 8008c3a:	d142      	bne.n	8008cc2 <_malloc_r+0xea>
 8008c3c:	6821      	ldr	r1, [r4, #0]
 8008c3e:	1a6d      	subs	r5, r5, r1
 8008c40:	4629      	mov	r1, r5
 8008c42:	4630      	mov	r0, r6
 8008c44:	f7ff ffa6 	bl	8008b94 <sbrk_aligned>
 8008c48:	3001      	adds	r0, #1
 8008c4a:	d03a      	beq.n	8008cc2 <_malloc_r+0xea>
 8008c4c:	6823      	ldr	r3, [r4, #0]
 8008c4e:	442b      	add	r3, r5
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	f8d8 3000 	ldr.w	r3, [r8]
 8008c56:	685a      	ldr	r2, [r3, #4]
 8008c58:	bb62      	cbnz	r2, 8008cb4 <_malloc_r+0xdc>
 8008c5a:	f8c8 7000 	str.w	r7, [r8]
 8008c5e:	e00f      	b.n	8008c80 <_malloc_r+0xa8>
 8008c60:	6822      	ldr	r2, [r4, #0]
 8008c62:	1b52      	subs	r2, r2, r5
 8008c64:	d420      	bmi.n	8008ca8 <_malloc_r+0xd0>
 8008c66:	2a0b      	cmp	r2, #11
 8008c68:	d917      	bls.n	8008c9a <_malloc_r+0xc2>
 8008c6a:	1961      	adds	r1, r4, r5
 8008c6c:	42a3      	cmp	r3, r4
 8008c6e:	6025      	str	r5, [r4, #0]
 8008c70:	bf18      	it	ne
 8008c72:	6059      	strne	r1, [r3, #4]
 8008c74:	6863      	ldr	r3, [r4, #4]
 8008c76:	bf08      	it	eq
 8008c78:	f8c8 1000 	streq.w	r1, [r8]
 8008c7c:	5162      	str	r2, [r4, r5]
 8008c7e:	604b      	str	r3, [r1, #4]
 8008c80:	4630      	mov	r0, r6
 8008c82:	f000 f82f 	bl	8008ce4 <__malloc_unlock>
 8008c86:	f104 000b 	add.w	r0, r4, #11
 8008c8a:	1d23      	adds	r3, r4, #4
 8008c8c:	f020 0007 	bic.w	r0, r0, #7
 8008c90:	1ac2      	subs	r2, r0, r3
 8008c92:	bf1c      	itt	ne
 8008c94:	1a1b      	subne	r3, r3, r0
 8008c96:	50a3      	strne	r3, [r4, r2]
 8008c98:	e7af      	b.n	8008bfa <_malloc_r+0x22>
 8008c9a:	6862      	ldr	r2, [r4, #4]
 8008c9c:	42a3      	cmp	r3, r4
 8008c9e:	bf0c      	ite	eq
 8008ca0:	f8c8 2000 	streq.w	r2, [r8]
 8008ca4:	605a      	strne	r2, [r3, #4]
 8008ca6:	e7eb      	b.n	8008c80 <_malloc_r+0xa8>
 8008ca8:	4623      	mov	r3, r4
 8008caa:	6864      	ldr	r4, [r4, #4]
 8008cac:	e7ae      	b.n	8008c0c <_malloc_r+0x34>
 8008cae:	463c      	mov	r4, r7
 8008cb0:	687f      	ldr	r7, [r7, #4]
 8008cb2:	e7b6      	b.n	8008c22 <_malloc_r+0x4a>
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	42a3      	cmp	r3, r4
 8008cba:	d1fb      	bne.n	8008cb4 <_malloc_r+0xdc>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	6053      	str	r3, [r2, #4]
 8008cc0:	e7de      	b.n	8008c80 <_malloc_r+0xa8>
 8008cc2:	230c      	movs	r3, #12
 8008cc4:	6033      	str	r3, [r6, #0]
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	f000 f80c 	bl	8008ce4 <__malloc_unlock>
 8008ccc:	e794      	b.n	8008bf8 <_malloc_r+0x20>
 8008cce:	6005      	str	r5, [r0, #0]
 8008cd0:	e7d6      	b.n	8008c80 <_malloc_r+0xa8>
 8008cd2:	bf00      	nop
 8008cd4:	2000217c 	.word	0x2000217c

08008cd8 <__malloc_lock>:
 8008cd8:	4801      	ldr	r0, [pc, #4]	@ (8008ce0 <__malloc_lock+0x8>)
 8008cda:	f7ff b8ae 	b.w	8007e3a <__retarget_lock_acquire_recursive>
 8008cde:	bf00      	nop
 8008ce0:	20002174 	.word	0x20002174

08008ce4 <__malloc_unlock>:
 8008ce4:	4801      	ldr	r0, [pc, #4]	@ (8008cec <__malloc_unlock+0x8>)
 8008ce6:	f7ff b8a9 	b.w	8007e3c <__retarget_lock_release_recursive>
 8008cea:	bf00      	nop
 8008cec:	20002174 	.word	0x20002174

08008cf0 <_Balloc>:
 8008cf0:	b570      	push	{r4, r5, r6, lr}
 8008cf2:	69c6      	ldr	r6, [r0, #28]
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	460d      	mov	r5, r1
 8008cf8:	b976      	cbnz	r6, 8008d18 <_Balloc+0x28>
 8008cfa:	2010      	movs	r0, #16
 8008cfc:	f7ff ff42 	bl	8008b84 <malloc>
 8008d00:	4602      	mov	r2, r0
 8008d02:	61e0      	str	r0, [r4, #28]
 8008d04:	b920      	cbnz	r0, 8008d10 <_Balloc+0x20>
 8008d06:	4b18      	ldr	r3, [pc, #96]	@ (8008d68 <_Balloc+0x78>)
 8008d08:	4818      	ldr	r0, [pc, #96]	@ (8008d6c <_Balloc+0x7c>)
 8008d0a:	216b      	movs	r1, #107	@ 0x6b
 8008d0c:	f000 fc34 	bl	8009578 <__assert_func>
 8008d10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d14:	6006      	str	r6, [r0, #0]
 8008d16:	60c6      	str	r6, [r0, #12]
 8008d18:	69e6      	ldr	r6, [r4, #28]
 8008d1a:	68f3      	ldr	r3, [r6, #12]
 8008d1c:	b183      	cbz	r3, 8008d40 <_Balloc+0x50>
 8008d1e:	69e3      	ldr	r3, [r4, #28]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d26:	b9b8      	cbnz	r0, 8008d58 <_Balloc+0x68>
 8008d28:	2101      	movs	r1, #1
 8008d2a:	fa01 f605 	lsl.w	r6, r1, r5
 8008d2e:	1d72      	adds	r2, r6, #5
 8008d30:	0092      	lsls	r2, r2, #2
 8008d32:	4620      	mov	r0, r4
 8008d34:	f000 fc3e 	bl	80095b4 <_calloc_r>
 8008d38:	b160      	cbz	r0, 8008d54 <_Balloc+0x64>
 8008d3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d3e:	e00e      	b.n	8008d5e <_Balloc+0x6e>
 8008d40:	2221      	movs	r2, #33	@ 0x21
 8008d42:	2104      	movs	r1, #4
 8008d44:	4620      	mov	r0, r4
 8008d46:	f000 fc35 	bl	80095b4 <_calloc_r>
 8008d4a:	69e3      	ldr	r3, [r4, #28]
 8008d4c:	60f0      	str	r0, [r6, #12]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d1e4      	bne.n	8008d1e <_Balloc+0x2e>
 8008d54:	2000      	movs	r0, #0
 8008d56:	bd70      	pop	{r4, r5, r6, pc}
 8008d58:	6802      	ldr	r2, [r0, #0]
 8008d5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d5e:	2300      	movs	r3, #0
 8008d60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d64:	e7f7      	b.n	8008d56 <_Balloc+0x66>
 8008d66:	bf00      	nop
 8008d68:	0801cc59 	.word	0x0801cc59
 8008d6c:	0801ccd9 	.word	0x0801ccd9

08008d70 <_Bfree>:
 8008d70:	b570      	push	{r4, r5, r6, lr}
 8008d72:	69c6      	ldr	r6, [r0, #28]
 8008d74:	4605      	mov	r5, r0
 8008d76:	460c      	mov	r4, r1
 8008d78:	b976      	cbnz	r6, 8008d98 <_Bfree+0x28>
 8008d7a:	2010      	movs	r0, #16
 8008d7c:	f7ff ff02 	bl	8008b84 <malloc>
 8008d80:	4602      	mov	r2, r0
 8008d82:	61e8      	str	r0, [r5, #28]
 8008d84:	b920      	cbnz	r0, 8008d90 <_Bfree+0x20>
 8008d86:	4b09      	ldr	r3, [pc, #36]	@ (8008dac <_Bfree+0x3c>)
 8008d88:	4809      	ldr	r0, [pc, #36]	@ (8008db0 <_Bfree+0x40>)
 8008d8a:	218f      	movs	r1, #143	@ 0x8f
 8008d8c:	f000 fbf4 	bl	8009578 <__assert_func>
 8008d90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d94:	6006      	str	r6, [r0, #0]
 8008d96:	60c6      	str	r6, [r0, #12]
 8008d98:	b13c      	cbz	r4, 8008daa <_Bfree+0x3a>
 8008d9a:	69eb      	ldr	r3, [r5, #28]
 8008d9c:	6862      	ldr	r2, [r4, #4]
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008da4:	6021      	str	r1, [r4, #0]
 8008da6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008daa:	bd70      	pop	{r4, r5, r6, pc}
 8008dac:	0801cc59 	.word	0x0801cc59
 8008db0:	0801ccd9 	.word	0x0801ccd9

08008db4 <__multadd>:
 8008db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008db8:	690d      	ldr	r5, [r1, #16]
 8008dba:	4607      	mov	r7, r0
 8008dbc:	460c      	mov	r4, r1
 8008dbe:	461e      	mov	r6, r3
 8008dc0:	f101 0c14 	add.w	ip, r1, #20
 8008dc4:	2000      	movs	r0, #0
 8008dc6:	f8dc 3000 	ldr.w	r3, [ip]
 8008dca:	b299      	uxth	r1, r3
 8008dcc:	fb02 6101 	mla	r1, r2, r1, r6
 8008dd0:	0c1e      	lsrs	r6, r3, #16
 8008dd2:	0c0b      	lsrs	r3, r1, #16
 8008dd4:	fb02 3306 	mla	r3, r2, r6, r3
 8008dd8:	b289      	uxth	r1, r1
 8008dda:	3001      	adds	r0, #1
 8008ddc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008de0:	4285      	cmp	r5, r0
 8008de2:	f84c 1b04 	str.w	r1, [ip], #4
 8008de6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008dea:	dcec      	bgt.n	8008dc6 <__multadd+0x12>
 8008dec:	b30e      	cbz	r6, 8008e32 <__multadd+0x7e>
 8008dee:	68a3      	ldr	r3, [r4, #8]
 8008df0:	42ab      	cmp	r3, r5
 8008df2:	dc19      	bgt.n	8008e28 <__multadd+0x74>
 8008df4:	6861      	ldr	r1, [r4, #4]
 8008df6:	4638      	mov	r0, r7
 8008df8:	3101      	adds	r1, #1
 8008dfa:	f7ff ff79 	bl	8008cf0 <_Balloc>
 8008dfe:	4680      	mov	r8, r0
 8008e00:	b928      	cbnz	r0, 8008e0e <__multadd+0x5a>
 8008e02:	4602      	mov	r2, r0
 8008e04:	4b0c      	ldr	r3, [pc, #48]	@ (8008e38 <__multadd+0x84>)
 8008e06:	480d      	ldr	r0, [pc, #52]	@ (8008e3c <__multadd+0x88>)
 8008e08:	21ba      	movs	r1, #186	@ 0xba
 8008e0a:	f000 fbb5 	bl	8009578 <__assert_func>
 8008e0e:	6922      	ldr	r2, [r4, #16]
 8008e10:	3202      	adds	r2, #2
 8008e12:	f104 010c 	add.w	r1, r4, #12
 8008e16:	0092      	lsls	r2, r2, #2
 8008e18:	300c      	adds	r0, #12
 8008e1a:	f000 fb9f 	bl	800955c <memcpy>
 8008e1e:	4621      	mov	r1, r4
 8008e20:	4638      	mov	r0, r7
 8008e22:	f7ff ffa5 	bl	8008d70 <_Bfree>
 8008e26:	4644      	mov	r4, r8
 8008e28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e2c:	3501      	adds	r5, #1
 8008e2e:	615e      	str	r6, [r3, #20]
 8008e30:	6125      	str	r5, [r4, #16]
 8008e32:	4620      	mov	r0, r4
 8008e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e38:	0801ccc8 	.word	0x0801ccc8
 8008e3c:	0801ccd9 	.word	0x0801ccd9

08008e40 <__hi0bits>:
 8008e40:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008e44:	4603      	mov	r3, r0
 8008e46:	bf36      	itet	cc
 8008e48:	0403      	lslcc	r3, r0, #16
 8008e4a:	2000      	movcs	r0, #0
 8008e4c:	2010      	movcc	r0, #16
 8008e4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e52:	bf3c      	itt	cc
 8008e54:	021b      	lslcc	r3, r3, #8
 8008e56:	3008      	addcc	r0, #8
 8008e58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e5c:	bf3c      	itt	cc
 8008e5e:	011b      	lslcc	r3, r3, #4
 8008e60:	3004      	addcc	r0, #4
 8008e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e66:	bf3c      	itt	cc
 8008e68:	009b      	lslcc	r3, r3, #2
 8008e6a:	3002      	addcc	r0, #2
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	db05      	blt.n	8008e7c <__hi0bits+0x3c>
 8008e70:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008e74:	f100 0001 	add.w	r0, r0, #1
 8008e78:	bf08      	it	eq
 8008e7a:	2020      	moveq	r0, #32
 8008e7c:	4770      	bx	lr

08008e7e <__lo0bits>:
 8008e7e:	6803      	ldr	r3, [r0, #0]
 8008e80:	4602      	mov	r2, r0
 8008e82:	f013 0007 	ands.w	r0, r3, #7
 8008e86:	d00b      	beq.n	8008ea0 <__lo0bits+0x22>
 8008e88:	07d9      	lsls	r1, r3, #31
 8008e8a:	d421      	bmi.n	8008ed0 <__lo0bits+0x52>
 8008e8c:	0798      	lsls	r0, r3, #30
 8008e8e:	bf49      	itett	mi
 8008e90:	085b      	lsrmi	r3, r3, #1
 8008e92:	089b      	lsrpl	r3, r3, #2
 8008e94:	2001      	movmi	r0, #1
 8008e96:	6013      	strmi	r3, [r2, #0]
 8008e98:	bf5c      	itt	pl
 8008e9a:	6013      	strpl	r3, [r2, #0]
 8008e9c:	2002      	movpl	r0, #2
 8008e9e:	4770      	bx	lr
 8008ea0:	b299      	uxth	r1, r3
 8008ea2:	b909      	cbnz	r1, 8008ea8 <__lo0bits+0x2a>
 8008ea4:	0c1b      	lsrs	r3, r3, #16
 8008ea6:	2010      	movs	r0, #16
 8008ea8:	b2d9      	uxtb	r1, r3
 8008eaa:	b909      	cbnz	r1, 8008eb0 <__lo0bits+0x32>
 8008eac:	3008      	adds	r0, #8
 8008eae:	0a1b      	lsrs	r3, r3, #8
 8008eb0:	0719      	lsls	r1, r3, #28
 8008eb2:	bf04      	itt	eq
 8008eb4:	091b      	lsreq	r3, r3, #4
 8008eb6:	3004      	addeq	r0, #4
 8008eb8:	0799      	lsls	r1, r3, #30
 8008eba:	bf04      	itt	eq
 8008ebc:	089b      	lsreq	r3, r3, #2
 8008ebe:	3002      	addeq	r0, #2
 8008ec0:	07d9      	lsls	r1, r3, #31
 8008ec2:	d403      	bmi.n	8008ecc <__lo0bits+0x4e>
 8008ec4:	085b      	lsrs	r3, r3, #1
 8008ec6:	f100 0001 	add.w	r0, r0, #1
 8008eca:	d003      	beq.n	8008ed4 <__lo0bits+0x56>
 8008ecc:	6013      	str	r3, [r2, #0]
 8008ece:	4770      	bx	lr
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	4770      	bx	lr
 8008ed4:	2020      	movs	r0, #32
 8008ed6:	4770      	bx	lr

08008ed8 <__i2b>:
 8008ed8:	b510      	push	{r4, lr}
 8008eda:	460c      	mov	r4, r1
 8008edc:	2101      	movs	r1, #1
 8008ede:	f7ff ff07 	bl	8008cf0 <_Balloc>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	b928      	cbnz	r0, 8008ef2 <__i2b+0x1a>
 8008ee6:	4b05      	ldr	r3, [pc, #20]	@ (8008efc <__i2b+0x24>)
 8008ee8:	4805      	ldr	r0, [pc, #20]	@ (8008f00 <__i2b+0x28>)
 8008eea:	f240 1145 	movw	r1, #325	@ 0x145
 8008eee:	f000 fb43 	bl	8009578 <__assert_func>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	6144      	str	r4, [r0, #20]
 8008ef6:	6103      	str	r3, [r0, #16]
 8008ef8:	bd10      	pop	{r4, pc}
 8008efa:	bf00      	nop
 8008efc:	0801ccc8 	.word	0x0801ccc8
 8008f00:	0801ccd9 	.word	0x0801ccd9

08008f04 <__multiply>:
 8008f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f08:	4617      	mov	r7, r2
 8008f0a:	690a      	ldr	r2, [r1, #16]
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	bfa8      	it	ge
 8008f12:	463b      	movge	r3, r7
 8008f14:	4689      	mov	r9, r1
 8008f16:	bfa4      	itt	ge
 8008f18:	460f      	movge	r7, r1
 8008f1a:	4699      	movge	r9, r3
 8008f1c:	693d      	ldr	r5, [r7, #16]
 8008f1e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	6879      	ldr	r1, [r7, #4]
 8008f26:	eb05 060a 	add.w	r6, r5, sl
 8008f2a:	42b3      	cmp	r3, r6
 8008f2c:	b085      	sub	sp, #20
 8008f2e:	bfb8      	it	lt
 8008f30:	3101      	addlt	r1, #1
 8008f32:	f7ff fedd 	bl	8008cf0 <_Balloc>
 8008f36:	b930      	cbnz	r0, 8008f46 <__multiply+0x42>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	4b41      	ldr	r3, [pc, #260]	@ (8009040 <__multiply+0x13c>)
 8008f3c:	4841      	ldr	r0, [pc, #260]	@ (8009044 <__multiply+0x140>)
 8008f3e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008f42:	f000 fb19 	bl	8009578 <__assert_func>
 8008f46:	f100 0414 	add.w	r4, r0, #20
 8008f4a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008f4e:	4623      	mov	r3, r4
 8008f50:	2200      	movs	r2, #0
 8008f52:	4573      	cmp	r3, lr
 8008f54:	d320      	bcc.n	8008f98 <__multiply+0x94>
 8008f56:	f107 0814 	add.w	r8, r7, #20
 8008f5a:	f109 0114 	add.w	r1, r9, #20
 8008f5e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008f62:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008f66:	9302      	str	r3, [sp, #8]
 8008f68:	1beb      	subs	r3, r5, r7
 8008f6a:	3b15      	subs	r3, #21
 8008f6c:	f023 0303 	bic.w	r3, r3, #3
 8008f70:	3304      	adds	r3, #4
 8008f72:	3715      	adds	r7, #21
 8008f74:	42bd      	cmp	r5, r7
 8008f76:	bf38      	it	cc
 8008f78:	2304      	movcc	r3, #4
 8008f7a:	9301      	str	r3, [sp, #4]
 8008f7c:	9b02      	ldr	r3, [sp, #8]
 8008f7e:	9103      	str	r1, [sp, #12]
 8008f80:	428b      	cmp	r3, r1
 8008f82:	d80c      	bhi.n	8008f9e <__multiply+0x9a>
 8008f84:	2e00      	cmp	r6, #0
 8008f86:	dd03      	ble.n	8008f90 <__multiply+0x8c>
 8008f88:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d055      	beq.n	800903c <__multiply+0x138>
 8008f90:	6106      	str	r6, [r0, #16]
 8008f92:	b005      	add	sp, #20
 8008f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f98:	f843 2b04 	str.w	r2, [r3], #4
 8008f9c:	e7d9      	b.n	8008f52 <__multiply+0x4e>
 8008f9e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008fa2:	f1ba 0f00 	cmp.w	sl, #0
 8008fa6:	d01f      	beq.n	8008fe8 <__multiply+0xe4>
 8008fa8:	46c4      	mov	ip, r8
 8008faa:	46a1      	mov	r9, r4
 8008fac:	2700      	movs	r7, #0
 8008fae:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008fb2:	f8d9 3000 	ldr.w	r3, [r9]
 8008fb6:	fa1f fb82 	uxth.w	fp, r2
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	fb0a 330b 	mla	r3, sl, fp, r3
 8008fc0:	443b      	add	r3, r7
 8008fc2:	f8d9 7000 	ldr.w	r7, [r9]
 8008fc6:	0c12      	lsrs	r2, r2, #16
 8008fc8:	0c3f      	lsrs	r7, r7, #16
 8008fca:	fb0a 7202 	mla	r2, sl, r2, r7
 8008fce:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fd8:	4565      	cmp	r5, ip
 8008fda:	f849 3b04 	str.w	r3, [r9], #4
 8008fde:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008fe2:	d8e4      	bhi.n	8008fae <__multiply+0xaa>
 8008fe4:	9b01      	ldr	r3, [sp, #4]
 8008fe6:	50e7      	str	r7, [r4, r3]
 8008fe8:	9b03      	ldr	r3, [sp, #12]
 8008fea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008fee:	3104      	adds	r1, #4
 8008ff0:	f1b9 0f00 	cmp.w	r9, #0
 8008ff4:	d020      	beq.n	8009038 <__multiply+0x134>
 8008ff6:	6823      	ldr	r3, [r4, #0]
 8008ff8:	4647      	mov	r7, r8
 8008ffa:	46a4      	mov	ip, r4
 8008ffc:	f04f 0a00 	mov.w	sl, #0
 8009000:	f8b7 b000 	ldrh.w	fp, [r7]
 8009004:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009008:	fb09 220b 	mla	r2, r9, fp, r2
 800900c:	4452      	add	r2, sl
 800900e:	b29b      	uxth	r3, r3
 8009010:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009014:	f84c 3b04 	str.w	r3, [ip], #4
 8009018:	f857 3b04 	ldr.w	r3, [r7], #4
 800901c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009020:	f8bc 3000 	ldrh.w	r3, [ip]
 8009024:	fb09 330a 	mla	r3, r9, sl, r3
 8009028:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800902c:	42bd      	cmp	r5, r7
 800902e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009032:	d8e5      	bhi.n	8009000 <__multiply+0xfc>
 8009034:	9a01      	ldr	r2, [sp, #4]
 8009036:	50a3      	str	r3, [r4, r2]
 8009038:	3404      	adds	r4, #4
 800903a:	e79f      	b.n	8008f7c <__multiply+0x78>
 800903c:	3e01      	subs	r6, #1
 800903e:	e7a1      	b.n	8008f84 <__multiply+0x80>
 8009040:	0801ccc8 	.word	0x0801ccc8
 8009044:	0801ccd9 	.word	0x0801ccd9

08009048 <__pow5mult>:
 8009048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800904c:	4615      	mov	r5, r2
 800904e:	f012 0203 	ands.w	r2, r2, #3
 8009052:	4607      	mov	r7, r0
 8009054:	460e      	mov	r6, r1
 8009056:	d007      	beq.n	8009068 <__pow5mult+0x20>
 8009058:	4c25      	ldr	r4, [pc, #148]	@ (80090f0 <__pow5mult+0xa8>)
 800905a:	3a01      	subs	r2, #1
 800905c:	2300      	movs	r3, #0
 800905e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009062:	f7ff fea7 	bl	8008db4 <__multadd>
 8009066:	4606      	mov	r6, r0
 8009068:	10ad      	asrs	r5, r5, #2
 800906a:	d03d      	beq.n	80090e8 <__pow5mult+0xa0>
 800906c:	69fc      	ldr	r4, [r7, #28]
 800906e:	b97c      	cbnz	r4, 8009090 <__pow5mult+0x48>
 8009070:	2010      	movs	r0, #16
 8009072:	f7ff fd87 	bl	8008b84 <malloc>
 8009076:	4602      	mov	r2, r0
 8009078:	61f8      	str	r0, [r7, #28]
 800907a:	b928      	cbnz	r0, 8009088 <__pow5mult+0x40>
 800907c:	4b1d      	ldr	r3, [pc, #116]	@ (80090f4 <__pow5mult+0xac>)
 800907e:	481e      	ldr	r0, [pc, #120]	@ (80090f8 <__pow5mult+0xb0>)
 8009080:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009084:	f000 fa78 	bl	8009578 <__assert_func>
 8009088:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800908c:	6004      	str	r4, [r0, #0]
 800908e:	60c4      	str	r4, [r0, #12]
 8009090:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009094:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009098:	b94c      	cbnz	r4, 80090ae <__pow5mult+0x66>
 800909a:	f240 2171 	movw	r1, #625	@ 0x271
 800909e:	4638      	mov	r0, r7
 80090a0:	f7ff ff1a 	bl	8008ed8 <__i2b>
 80090a4:	2300      	movs	r3, #0
 80090a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80090aa:	4604      	mov	r4, r0
 80090ac:	6003      	str	r3, [r0, #0]
 80090ae:	f04f 0900 	mov.w	r9, #0
 80090b2:	07eb      	lsls	r3, r5, #31
 80090b4:	d50a      	bpl.n	80090cc <__pow5mult+0x84>
 80090b6:	4631      	mov	r1, r6
 80090b8:	4622      	mov	r2, r4
 80090ba:	4638      	mov	r0, r7
 80090bc:	f7ff ff22 	bl	8008f04 <__multiply>
 80090c0:	4631      	mov	r1, r6
 80090c2:	4680      	mov	r8, r0
 80090c4:	4638      	mov	r0, r7
 80090c6:	f7ff fe53 	bl	8008d70 <_Bfree>
 80090ca:	4646      	mov	r6, r8
 80090cc:	106d      	asrs	r5, r5, #1
 80090ce:	d00b      	beq.n	80090e8 <__pow5mult+0xa0>
 80090d0:	6820      	ldr	r0, [r4, #0]
 80090d2:	b938      	cbnz	r0, 80090e4 <__pow5mult+0x9c>
 80090d4:	4622      	mov	r2, r4
 80090d6:	4621      	mov	r1, r4
 80090d8:	4638      	mov	r0, r7
 80090da:	f7ff ff13 	bl	8008f04 <__multiply>
 80090de:	6020      	str	r0, [r4, #0]
 80090e0:	f8c0 9000 	str.w	r9, [r0]
 80090e4:	4604      	mov	r4, r0
 80090e6:	e7e4      	b.n	80090b2 <__pow5mult+0x6a>
 80090e8:	4630      	mov	r0, r6
 80090ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090ee:	bf00      	nop
 80090f0:	0801cd8c 	.word	0x0801cd8c
 80090f4:	0801cc59 	.word	0x0801cc59
 80090f8:	0801ccd9 	.word	0x0801ccd9

080090fc <__lshift>:
 80090fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009100:	460c      	mov	r4, r1
 8009102:	6849      	ldr	r1, [r1, #4]
 8009104:	6923      	ldr	r3, [r4, #16]
 8009106:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800910a:	68a3      	ldr	r3, [r4, #8]
 800910c:	4607      	mov	r7, r0
 800910e:	4691      	mov	r9, r2
 8009110:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009114:	f108 0601 	add.w	r6, r8, #1
 8009118:	42b3      	cmp	r3, r6
 800911a:	db0b      	blt.n	8009134 <__lshift+0x38>
 800911c:	4638      	mov	r0, r7
 800911e:	f7ff fde7 	bl	8008cf0 <_Balloc>
 8009122:	4605      	mov	r5, r0
 8009124:	b948      	cbnz	r0, 800913a <__lshift+0x3e>
 8009126:	4602      	mov	r2, r0
 8009128:	4b28      	ldr	r3, [pc, #160]	@ (80091cc <__lshift+0xd0>)
 800912a:	4829      	ldr	r0, [pc, #164]	@ (80091d0 <__lshift+0xd4>)
 800912c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009130:	f000 fa22 	bl	8009578 <__assert_func>
 8009134:	3101      	adds	r1, #1
 8009136:	005b      	lsls	r3, r3, #1
 8009138:	e7ee      	b.n	8009118 <__lshift+0x1c>
 800913a:	2300      	movs	r3, #0
 800913c:	f100 0114 	add.w	r1, r0, #20
 8009140:	f100 0210 	add.w	r2, r0, #16
 8009144:	4618      	mov	r0, r3
 8009146:	4553      	cmp	r3, sl
 8009148:	db33      	blt.n	80091b2 <__lshift+0xb6>
 800914a:	6920      	ldr	r0, [r4, #16]
 800914c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009150:	f104 0314 	add.w	r3, r4, #20
 8009154:	f019 091f 	ands.w	r9, r9, #31
 8009158:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800915c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009160:	d02b      	beq.n	80091ba <__lshift+0xbe>
 8009162:	f1c9 0e20 	rsb	lr, r9, #32
 8009166:	468a      	mov	sl, r1
 8009168:	2200      	movs	r2, #0
 800916a:	6818      	ldr	r0, [r3, #0]
 800916c:	fa00 f009 	lsl.w	r0, r0, r9
 8009170:	4310      	orrs	r0, r2
 8009172:	f84a 0b04 	str.w	r0, [sl], #4
 8009176:	f853 2b04 	ldr.w	r2, [r3], #4
 800917a:	459c      	cmp	ip, r3
 800917c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009180:	d8f3      	bhi.n	800916a <__lshift+0x6e>
 8009182:	ebac 0304 	sub.w	r3, ip, r4
 8009186:	3b15      	subs	r3, #21
 8009188:	f023 0303 	bic.w	r3, r3, #3
 800918c:	3304      	adds	r3, #4
 800918e:	f104 0015 	add.w	r0, r4, #21
 8009192:	4560      	cmp	r0, ip
 8009194:	bf88      	it	hi
 8009196:	2304      	movhi	r3, #4
 8009198:	50ca      	str	r2, [r1, r3]
 800919a:	b10a      	cbz	r2, 80091a0 <__lshift+0xa4>
 800919c:	f108 0602 	add.w	r6, r8, #2
 80091a0:	3e01      	subs	r6, #1
 80091a2:	4638      	mov	r0, r7
 80091a4:	612e      	str	r6, [r5, #16]
 80091a6:	4621      	mov	r1, r4
 80091a8:	f7ff fde2 	bl	8008d70 <_Bfree>
 80091ac:	4628      	mov	r0, r5
 80091ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80091b6:	3301      	adds	r3, #1
 80091b8:	e7c5      	b.n	8009146 <__lshift+0x4a>
 80091ba:	3904      	subs	r1, #4
 80091bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80091c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80091c4:	459c      	cmp	ip, r3
 80091c6:	d8f9      	bhi.n	80091bc <__lshift+0xc0>
 80091c8:	e7ea      	b.n	80091a0 <__lshift+0xa4>
 80091ca:	bf00      	nop
 80091cc:	0801ccc8 	.word	0x0801ccc8
 80091d0:	0801ccd9 	.word	0x0801ccd9

080091d4 <__mcmp>:
 80091d4:	690a      	ldr	r2, [r1, #16]
 80091d6:	4603      	mov	r3, r0
 80091d8:	6900      	ldr	r0, [r0, #16]
 80091da:	1a80      	subs	r0, r0, r2
 80091dc:	b530      	push	{r4, r5, lr}
 80091de:	d10e      	bne.n	80091fe <__mcmp+0x2a>
 80091e0:	3314      	adds	r3, #20
 80091e2:	3114      	adds	r1, #20
 80091e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80091e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80091ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80091f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80091f4:	4295      	cmp	r5, r2
 80091f6:	d003      	beq.n	8009200 <__mcmp+0x2c>
 80091f8:	d205      	bcs.n	8009206 <__mcmp+0x32>
 80091fa:	f04f 30ff 	mov.w	r0, #4294967295
 80091fe:	bd30      	pop	{r4, r5, pc}
 8009200:	42a3      	cmp	r3, r4
 8009202:	d3f3      	bcc.n	80091ec <__mcmp+0x18>
 8009204:	e7fb      	b.n	80091fe <__mcmp+0x2a>
 8009206:	2001      	movs	r0, #1
 8009208:	e7f9      	b.n	80091fe <__mcmp+0x2a>
	...

0800920c <__mdiff>:
 800920c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009210:	4689      	mov	r9, r1
 8009212:	4606      	mov	r6, r0
 8009214:	4611      	mov	r1, r2
 8009216:	4648      	mov	r0, r9
 8009218:	4614      	mov	r4, r2
 800921a:	f7ff ffdb 	bl	80091d4 <__mcmp>
 800921e:	1e05      	subs	r5, r0, #0
 8009220:	d112      	bne.n	8009248 <__mdiff+0x3c>
 8009222:	4629      	mov	r1, r5
 8009224:	4630      	mov	r0, r6
 8009226:	f7ff fd63 	bl	8008cf0 <_Balloc>
 800922a:	4602      	mov	r2, r0
 800922c:	b928      	cbnz	r0, 800923a <__mdiff+0x2e>
 800922e:	4b3f      	ldr	r3, [pc, #252]	@ (800932c <__mdiff+0x120>)
 8009230:	f240 2137 	movw	r1, #567	@ 0x237
 8009234:	483e      	ldr	r0, [pc, #248]	@ (8009330 <__mdiff+0x124>)
 8009236:	f000 f99f 	bl	8009578 <__assert_func>
 800923a:	2301      	movs	r3, #1
 800923c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009240:	4610      	mov	r0, r2
 8009242:	b003      	add	sp, #12
 8009244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009248:	bfbc      	itt	lt
 800924a:	464b      	movlt	r3, r9
 800924c:	46a1      	movlt	r9, r4
 800924e:	4630      	mov	r0, r6
 8009250:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009254:	bfba      	itte	lt
 8009256:	461c      	movlt	r4, r3
 8009258:	2501      	movlt	r5, #1
 800925a:	2500      	movge	r5, #0
 800925c:	f7ff fd48 	bl	8008cf0 <_Balloc>
 8009260:	4602      	mov	r2, r0
 8009262:	b918      	cbnz	r0, 800926c <__mdiff+0x60>
 8009264:	4b31      	ldr	r3, [pc, #196]	@ (800932c <__mdiff+0x120>)
 8009266:	f240 2145 	movw	r1, #581	@ 0x245
 800926a:	e7e3      	b.n	8009234 <__mdiff+0x28>
 800926c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009270:	6926      	ldr	r6, [r4, #16]
 8009272:	60c5      	str	r5, [r0, #12]
 8009274:	f109 0310 	add.w	r3, r9, #16
 8009278:	f109 0514 	add.w	r5, r9, #20
 800927c:	f104 0e14 	add.w	lr, r4, #20
 8009280:	f100 0b14 	add.w	fp, r0, #20
 8009284:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009288:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800928c:	9301      	str	r3, [sp, #4]
 800928e:	46d9      	mov	r9, fp
 8009290:	f04f 0c00 	mov.w	ip, #0
 8009294:	9b01      	ldr	r3, [sp, #4]
 8009296:	f85e 0b04 	ldr.w	r0, [lr], #4
 800929a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800929e:	9301      	str	r3, [sp, #4]
 80092a0:	fa1f f38a 	uxth.w	r3, sl
 80092a4:	4619      	mov	r1, r3
 80092a6:	b283      	uxth	r3, r0
 80092a8:	1acb      	subs	r3, r1, r3
 80092aa:	0c00      	lsrs	r0, r0, #16
 80092ac:	4463      	add	r3, ip
 80092ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80092b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80092bc:	4576      	cmp	r6, lr
 80092be:	f849 3b04 	str.w	r3, [r9], #4
 80092c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80092c6:	d8e5      	bhi.n	8009294 <__mdiff+0x88>
 80092c8:	1b33      	subs	r3, r6, r4
 80092ca:	3b15      	subs	r3, #21
 80092cc:	f023 0303 	bic.w	r3, r3, #3
 80092d0:	3415      	adds	r4, #21
 80092d2:	3304      	adds	r3, #4
 80092d4:	42a6      	cmp	r6, r4
 80092d6:	bf38      	it	cc
 80092d8:	2304      	movcc	r3, #4
 80092da:	441d      	add	r5, r3
 80092dc:	445b      	add	r3, fp
 80092de:	461e      	mov	r6, r3
 80092e0:	462c      	mov	r4, r5
 80092e2:	4544      	cmp	r4, r8
 80092e4:	d30e      	bcc.n	8009304 <__mdiff+0xf8>
 80092e6:	f108 0103 	add.w	r1, r8, #3
 80092ea:	1b49      	subs	r1, r1, r5
 80092ec:	f021 0103 	bic.w	r1, r1, #3
 80092f0:	3d03      	subs	r5, #3
 80092f2:	45a8      	cmp	r8, r5
 80092f4:	bf38      	it	cc
 80092f6:	2100      	movcc	r1, #0
 80092f8:	440b      	add	r3, r1
 80092fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80092fe:	b191      	cbz	r1, 8009326 <__mdiff+0x11a>
 8009300:	6117      	str	r7, [r2, #16]
 8009302:	e79d      	b.n	8009240 <__mdiff+0x34>
 8009304:	f854 1b04 	ldr.w	r1, [r4], #4
 8009308:	46e6      	mov	lr, ip
 800930a:	0c08      	lsrs	r0, r1, #16
 800930c:	fa1c fc81 	uxtah	ip, ip, r1
 8009310:	4471      	add	r1, lr
 8009312:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009316:	b289      	uxth	r1, r1
 8009318:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800931c:	f846 1b04 	str.w	r1, [r6], #4
 8009320:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009324:	e7dd      	b.n	80092e2 <__mdiff+0xd6>
 8009326:	3f01      	subs	r7, #1
 8009328:	e7e7      	b.n	80092fa <__mdiff+0xee>
 800932a:	bf00      	nop
 800932c:	0801ccc8 	.word	0x0801ccc8
 8009330:	0801ccd9 	.word	0x0801ccd9

08009334 <__d2b>:
 8009334:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009338:	460f      	mov	r7, r1
 800933a:	2101      	movs	r1, #1
 800933c:	ec59 8b10 	vmov	r8, r9, d0
 8009340:	4616      	mov	r6, r2
 8009342:	f7ff fcd5 	bl	8008cf0 <_Balloc>
 8009346:	4604      	mov	r4, r0
 8009348:	b930      	cbnz	r0, 8009358 <__d2b+0x24>
 800934a:	4602      	mov	r2, r0
 800934c:	4b23      	ldr	r3, [pc, #140]	@ (80093dc <__d2b+0xa8>)
 800934e:	4824      	ldr	r0, [pc, #144]	@ (80093e0 <__d2b+0xac>)
 8009350:	f240 310f 	movw	r1, #783	@ 0x30f
 8009354:	f000 f910 	bl	8009578 <__assert_func>
 8009358:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800935c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009360:	b10d      	cbz	r5, 8009366 <__d2b+0x32>
 8009362:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009366:	9301      	str	r3, [sp, #4]
 8009368:	f1b8 0300 	subs.w	r3, r8, #0
 800936c:	d023      	beq.n	80093b6 <__d2b+0x82>
 800936e:	4668      	mov	r0, sp
 8009370:	9300      	str	r3, [sp, #0]
 8009372:	f7ff fd84 	bl	8008e7e <__lo0bits>
 8009376:	e9dd 1200 	ldrd	r1, r2, [sp]
 800937a:	b1d0      	cbz	r0, 80093b2 <__d2b+0x7e>
 800937c:	f1c0 0320 	rsb	r3, r0, #32
 8009380:	fa02 f303 	lsl.w	r3, r2, r3
 8009384:	430b      	orrs	r3, r1
 8009386:	40c2      	lsrs	r2, r0
 8009388:	6163      	str	r3, [r4, #20]
 800938a:	9201      	str	r2, [sp, #4]
 800938c:	9b01      	ldr	r3, [sp, #4]
 800938e:	61a3      	str	r3, [r4, #24]
 8009390:	2b00      	cmp	r3, #0
 8009392:	bf0c      	ite	eq
 8009394:	2201      	moveq	r2, #1
 8009396:	2202      	movne	r2, #2
 8009398:	6122      	str	r2, [r4, #16]
 800939a:	b1a5      	cbz	r5, 80093c6 <__d2b+0x92>
 800939c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80093a0:	4405      	add	r5, r0
 80093a2:	603d      	str	r5, [r7, #0]
 80093a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80093a8:	6030      	str	r0, [r6, #0]
 80093aa:	4620      	mov	r0, r4
 80093ac:	b003      	add	sp, #12
 80093ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093b2:	6161      	str	r1, [r4, #20]
 80093b4:	e7ea      	b.n	800938c <__d2b+0x58>
 80093b6:	a801      	add	r0, sp, #4
 80093b8:	f7ff fd61 	bl	8008e7e <__lo0bits>
 80093bc:	9b01      	ldr	r3, [sp, #4]
 80093be:	6163      	str	r3, [r4, #20]
 80093c0:	3020      	adds	r0, #32
 80093c2:	2201      	movs	r2, #1
 80093c4:	e7e8      	b.n	8009398 <__d2b+0x64>
 80093c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80093ce:	6038      	str	r0, [r7, #0]
 80093d0:	6918      	ldr	r0, [r3, #16]
 80093d2:	f7ff fd35 	bl	8008e40 <__hi0bits>
 80093d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80093da:	e7e5      	b.n	80093a8 <__d2b+0x74>
 80093dc:	0801ccc8 	.word	0x0801ccc8
 80093e0:	0801ccd9 	.word	0x0801ccd9

080093e4 <__sflush_r>:
 80093e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80093e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ec:	0716      	lsls	r6, r2, #28
 80093ee:	4605      	mov	r5, r0
 80093f0:	460c      	mov	r4, r1
 80093f2:	d454      	bmi.n	800949e <__sflush_r+0xba>
 80093f4:	684b      	ldr	r3, [r1, #4]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	dc02      	bgt.n	8009400 <__sflush_r+0x1c>
 80093fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	dd48      	ble.n	8009492 <__sflush_r+0xae>
 8009400:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009402:	2e00      	cmp	r6, #0
 8009404:	d045      	beq.n	8009492 <__sflush_r+0xae>
 8009406:	2300      	movs	r3, #0
 8009408:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800940c:	682f      	ldr	r7, [r5, #0]
 800940e:	6a21      	ldr	r1, [r4, #32]
 8009410:	602b      	str	r3, [r5, #0]
 8009412:	d030      	beq.n	8009476 <__sflush_r+0x92>
 8009414:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009416:	89a3      	ldrh	r3, [r4, #12]
 8009418:	0759      	lsls	r1, r3, #29
 800941a:	d505      	bpl.n	8009428 <__sflush_r+0x44>
 800941c:	6863      	ldr	r3, [r4, #4]
 800941e:	1ad2      	subs	r2, r2, r3
 8009420:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009422:	b10b      	cbz	r3, 8009428 <__sflush_r+0x44>
 8009424:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009426:	1ad2      	subs	r2, r2, r3
 8009428:	2300      	movs	r3, #0
 800942a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800942c:	6a21      	ldr	r1, [r4, #32]
 800942e:	4628      	mov	r0, r5
 8009430:	47b0      	blx	r6
 8009432:	1c43      	adds	r3, r0, #1
 8009434:	89a3      	ldrh	r3, [r4, #12]
 8009436:	d106      	bne.n	8009446 <__sflush_r+0x62>
 8009438:	6829      	ldr	r1, [r5, #0]
 800943a:	291d      	cmp	r1, #29
 800943c:	d82b      	bhi.n	8009496 <__sflush_r+0xb2>
 800943e:	4a2a      	ldr	r2, [pc, #168]	@ (80094e8 <__sflush_r+0x104>)
 8009440:	40ca      	lsrs	r2, r1
 8009442:	07d6      	lsls	r6, r2, #31
 8009444:	d527      	bpl.n	8009496 <__sflush_r+0xb2>
 8009446:	2200      	movs	r2, #0
 8009448:	6062      	str	r2, [r4, #4]
 800944a:	04d9      	lsls	r1, r3, #19
 800944c:	6922      	ldr	r2, [r4, #16]
 800944e:	6022      	str	r2, [r4, #0]
 8009450:	d504      	bpl.n	800945c <__sflush_r+0x78>
 8009452:	1c42      	adds	r2, r0, #1
 8009454:	d101      	bne.n	800945a <__sflush_r+0x76>
 8009456:	682b      	ldr	r3, [r5, #0]
 8009458:	b903      	cbnz	r3, 800945c <__sflush_r+0x78>
 800945a:	6560      	str	r0, [r4, #84]	@ 0x54
 800945c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800945e:	602f      	str	r7, [r5, #0]
 8009460:	b1b9      	cbz	r1, 8009492 <__sflush_r+0xae>
 8009462:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009466:	4299      	cmp	r1, r3
 8009468:	d002      	beq.n	8009470 <__sflush_r+0x8c>
 800946a:	4628      	mov	r0, r5
 800946c:	f7ff fb40 	bl	8008af0 <_free_r>
 8009470:	2300      	movs	r3, #0
 8009472:	6363      	str	r3, [r4, #52]	@ 0x34
 8009474:	e00d      	b.n	8009492 <__sflush_r+0xae>
 8009476:	2301      	movs	r3, #1
 8009478:	4628      	mov	r0, r5
 800947a:	47b0      	blx	r6
 800947c:	4602      	mov	r2, r0
 800947e:	1c50      	adds	r0, r2, #1
 8009480:	d1c9      	bne.n	8009416 <__sflush_r+0x32>
 8009482:	682b      	ldr	r3, [r5, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d0c6      	beq.n	8009416 <__sflush_r+0x32>
 8009488:	2b1d      	cmp	r3, #29
 800948a:	d001      	beq.n	8009490 <__sflush_r+0xac>
 800948c:	2b16      	cmp	r3, #22
 800948e:	d11e      	bne.n	80094ce <__sflush_r+0xea>
 8009490:	602f      	str	r7, [r5, #0]
 8009492:	2000      	movs	r0, #0
 8009494:	e022      	b.n	80094dc <__sflush_r+0xf8>
 8009496:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800949a:	b21b      	sxth	r3, r3
 800949c:	e01b      	b.n	80094d6 <__sflush_r+0xf2>
 800949e:	690f      	ldr	r7, [r1, #16]
 80094a0:	2f00      	cmp	r7, #0
 80094a2:	d0f6      	beq.n	8009492 <__sflush_r+0xae>
 80094a4:	0793      	lsls	r3, r2, #30
 80094a6:	680e      	ldr	r6, [r1, #0]
 80094a8:	bf08      	it	eq
 80094aa:	694b      	ldreq	r3, [r1, #20]
 80094ac:	600f      	str	r7, [r1, #0]
 80094ae:	bf18      	it	ne
 80094b0:	2300      	movne	r3, #0
 80094b2:	eba6 0807 	sub.w	r8, r6, r7
 80094b6:	608b      	str	r3, [r1, #8]
 80094b8:	f1b8 0f00 	cmp.w	r8, #0
 80094bc:	dde9      	ble.n	8009492 <__sflush_r+0xae>
 80094be:	6a21      	ldr	r1, [r4, #32]
 80094c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80094c2:	4643      	mov	r3, r8
 80094c4:	463a      	mov	r2, r7
 80094c6:	4628      	mov	r0, r5
 80094c8:	47b0      	blx	r6
 80094ca:	2800      	cmp	r0, #0
 80094cc:	dc08      	bgt.n	80094e0 <__sflush_r+0xfc>
 80094ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094d6:	81a3      	strh	r3, [r4, #12]
 80094d8:	f04f 30ff 	mov.w	r0, #4294967295
 80094dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094e0:	4407      	add	r7, r0
 80094e2:	eba8 0800 	sub.w	r8, r8, r0
 80094e6:	e7e7      	b.n	80094b8 <__sflush_r+0xd4>
 80094e8:	20400001 	.word	0x20400001

080094ec <_fflush_r>:
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	690b      	ldr	r3, [r1, #16]
 80094f0:	4605      	mov	r5, r0
 80094f2:	460c      	mov	r4, r1
 80094f4:	b913      	cbnz	r3, 80094fc <_fflush_r+0x10>
 80094f6:	2500      	movs	r5, #0
 80094f8:	4628      	mov	r0, r5
 80094fa:	bd38      	pop	{r3, r4, r5, pc}
 80094fc:	b118      	cbz	r0, 8009506 <_fflush_r+0x1a>
 80094fe:	6a03      	ldr	r3, [r0, #32]
 8009500:	b90b      	cbnz	r3, 8009506 <_fflush_r+0x1a>
 8009502:	f7fe fba3 	bl	8007c4c <__sinit>
 8009506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d0f3      	beq.n	80094f6 <_fflush_r+0xa>
 800950e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009510:	07d0      	lsls	r0, r2, #31
 8009512:	d404      	bmi.n	800951e <_fflush_r+0x32>
 8009514:	0599      	lsls	r1, r3, #22
 8009516:	d402      	bmi.n	800951e <_fflush_r+0x32>
 8009518:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800951a:	f7fe fc8e 	bl	8007e3a <__retarget_lock_acquire_recursive>
 800951e:	4628      	mov	r0, r5
 8009520:	4621      	mov	r1, r4
 8009522:	f7ff ff5f 	bl	80093e4 <__sflush_r>
 8009526:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009528:	07da      	lsls	r2, r3, #31
 800952a:	4605      	mov	r5, r0
 800952c:	d4e4      	bmi.n	80094f8 <_fflush_r+0xc>
 800952e:	89a3      	ldrh	r3, [r4, #12]
 8009530:	059b      	lsls	r3, r3, #22
 8009532:	d4e1      	bmi.n	80094f8 <_fflush_r+0xc>
 8009534:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009536:	f7fe fc81 	bl	8007e3c <__retarget_lock_release_recursive>
 800953a:	e7dd      	b.n	80094f8 <_fflush_r+0xc>

0800953c <_sbrk_r>:
 800953c:	b538      	push	{r3, r4, r5, lr}
 800953e:	4d06      	ldr	r5, [pc, #24]	@ (8009558 <_sbrk_r+0x1c>)
 8009540:	2300      	movs	r3, #0
 8009542:	4604      	mov	r4, r0
 8009544:	4608      	mov	r0, r1
 8009546:	602b      	str	r3, [r5, #0]
 8009548:	f7f8 fb2c 	bl	8001ba4 <_sbrk>
 800954c:	1c43      	adds	r3, r0, #1
 800954e:	d102      	bne.n	8009556 <_sbrk_r+0x1a>
 8009550:	682b      	ldr	r3, [r5, #0]
 8009552:	b103      	cbz	r3, 8009556 <_sbrk_r+0x1a>
 8009554:	6023      	str	r3, [r4, #0]
 8009556:	bd38      	pop	{r3, r4, r5, pc}
 8009558:	20002170 	.word	0x20002170

0800955c <memcpy>:
 800955c:	440a      	add	r2, r1
 800955e:	4291      	cmp	r1, r2
 8009560:	f100 33ff 	add.w	r3, r0, #4294967295
 8009564:	d100      	bne.n	8009568 <memcpy+0xc>
 8009566:	4770      	bx	lr
 8009568:	b510      	push	{r4, lr}
 800956a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800956e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009572:	4291      	cmp	r1, r2
 8009574:	d1f9      	bne.n	800956a <memcpy+0xe>
 8009576:	bd10      	pop	{r4, pc}

08009578 <__assert_func>:
 8009578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800957a:	4614      	mov	r4, r2
 800957c:	461a      	mov	r2, r3
 800957e:	4b09      	ldr	r3, [pc, #36]	@ (80095a4 <__assert_func+0x2c>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4605      	mov	r5, r0
 8009584:	68d8      	ldr	r0, [r3, #12]
 8009586:	b14c      	cbz	r4, 800959c <__assert_func+0x24>
 8009588:	4b07      	ldr	r3, [pc, #28]	@ (80095a8 <__assert_func+0x30>)
 800958a:	9100      	str	r1, [sp, #0]
 800958c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009590:	4906      	ldr	r1, [pc, #24]	@ (80095ac <__assert_func+0x34>)
 8009592:	462b      	mov	r3, r5
 8009594:	f000 f842 	bl	800961c <fiprintf>
 8009598:	f000 f852 	bl	8009640 <abort>
 800959c:	4b04      	ldr	r3, [pc, #16]	@ (80095b0 <__assert_func+0x38>)
 800959e:	461c      	mov	r4, r3
 80095a0:	e7f3      	b.n	800958a <__assert_func+0x12>
 80095a2:	bf00      	nop
 80095a4:	20000020 	.word	0x20000020
 80095a8:	0801cd3c 	.word	0x0801cd3c
 80095ac:	0801cd49 	.word	0x0801cd49
 80095b0:	0801cd77 	.word	0x0801cd77

080095b4 <_calloc_r>:
 80095b4:	b570      	push	{r4, r5, r6, lr}
 80095b6:	fba1 5402 	umull	r5, r4, r1, r2
 80095ba:	b934      	cbnz	r4, 80095ca <_calloc_r+0x16>
 80095bc:	4629      	mov	r1, r5
 80095be:	f7ff fb0b 	bl	8008bd8 <_malloc_r>
 80095c2:	4606      	mov	r6, r0
 80095c4:	b928      	cbnz	r0, 80095d2 <_calloc_r+0x1e>
 80095c6:	4630      	mov	r0, r6
 80095c8:	bd70      	pop	{r4, r5, r6, pc}
 80095ca:	220c      	movs	r2, #12
 80095cc:	6002      	str	r2, [r0, #0]
 80095ce:	2600      	movs	r6, #0
 80095d0:	e7f9      	b.n	80095c6 <_calloc_r+0x12>
 80095d2:	462a      	mov	r2, r5
 80095d4:	4621      	mov	r1, r4
 80095d6:	f7fe fbb2 	bl	8007d3e <memset>
 80095da:	e7f4      	b.n	80095c6 <_calloc_r+0x12>

080095dc <__ascii_mbtowc>:
 80095dc:	b082      	sub	sp, #8
 80095de:	b901      	cbnz	r1, 80095e2 <__ascii_mbtowc+0x6>
 80095e0:	a901      	add	r1, sp, #4
 80095e2:	b142      	cbz	r2, 80095f6 <__ascii_mbtowc+0x1a>
 80095e4:	b14b      	cbz	r3, 80095fa <__ascii_mbtowc+0x1e>
 80095e6:	7813      	ldrb	r3, [r2, #0]
 80095e8:	600b      	str	r3, [r1, #0]
 80095ea:	7812      	ldrb	r2, [r2, #0]
 80095ec:	1e10      	subs	r0, r2, #0
 80095ee:	bf18      	it	ne
 80095f0:	2001      	movne	r0, #1
 80095f2:	b002      	add	sp, #8
 80095f4:	4770      	bx	lr
 80095f6:	4610      	mov	r0, r2
 80095f8:	e7fb      	b.n	80095f2 <__ascii_mbtowc+0x16>
 80095fa:	f06f 0001 	mvn.w	r0, #1
 80095fe:	e7f8      	b.n	80095f2 <__ascii_mbtowc+0x16>

08009600 <__ascii_wctomb>:
 8009600:	4603      	mov	r3, r0
 8009602:	4608      	mov	r0, r1
 8009604:	b141      	cbz	r1, 8009618 <__ascii_wctomb+0x18>
 8009606:	2aff      	cmp	r2, #255	@ 0xff
 8009608:	d904      	bls.n	8009614 <__ascii_wctomb+0x14>
 800960a:	228a      	movs	r2, #138	@ 0x8a
 800960c:	601a      	str	r2, [r3, #0]
 800960e:	f04f 30ff 	mov.w	r0, #4294967295
 8009612:	4770      	bx	lr
 8009614:	700a      	strb	r2, [r1, #0]
 8009616:	2001      	movs	r0, #1
 8009618:	4770      	bx	lr
	...

0800961c <fiprintf>:
 800961c:	b40e      	push	{r1, r2, r3}
 800961e:	b503      	push	{r0, r1, lr}
 8009620:	4601      	mov	r1, r0
 8009622:	ab03      	add	r3, sp, #12
 8009624:	4805      	ldr	r0, [pc, #20]	@ (800963c <fiprintf+0x20>)
 8009626:	f853 2b04 	ldr.w	r2, [r3], #4
 800962a:	6800      	ldr	r0, [r0, #0]
 800962c:	9301      	str	r3, [sp, #4]
 800962e:	f000 f837 	bl	80096a0 <_vfiprintf_r>
 8009632:	b002      	add	sp, #8
 8009634:	f85d eb04 	ldr.w	lr, [sp], #4
 8009638:	b003      	add	sp, #12
 800963a:	4770      	bx	lr
 800963c:	20000020 	.word	0x20000020

08009640 <abort>:
 8009640:	b508      	push	{r3, lr}
 8009642:	2006      	movs	r0, #6
 8009644:	f000 fa00 	bl	8009a48 <raise>
 8009648:	2001      	movs	r0, #1
 800964a:	f7f8 fa33 	bl	8001ab4 <_exit>

0800964e <__sfputc_r>:
 800964e:	6893      	ldr	r3, [r2, #8]
 8009650:	3b01      	subs	r3, #1
 8009652:	2b00      	cmp	r3, #0
 8009654:	b410      	push	{r4}
 8009656:	6093      	str	r3, [r2, #8]
 8009658:	da08      	bge.n	800966c <__sfputc_r+0x1e>
 800965a:	6994      	ldr	r4, [r2, #24]
 800965c:	42a3      	cmp	r3, r4
 800965e:	db01      	blt.n	8009664 <__sfputc_r+0x16>
 8009660:	290a      	cmp	r1, #10
 8009662:	d103      	bne.n	800966c <__sfputc_r+0x1e>
 8009664:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009668:	f000 b932 	b.w	80098d0 <__swbuf_r>
 800966c:	6813      	ldr	r3, [r2, #0]
 800966e:	1c58      	adds	r0, r3, #1
 8009670:	6010      	str	r0, [r2, #0]
 8009672:	7019      	strb	r1, [r3, #0]
 8009674:	4608      	mov	r0, r1
 8009676:	f85d 4b04 	ldr.w	r4, [sp], #4
 800967a:	4770      	bx	lr

0800967c <__sfputs_r>:
 800967c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800967e:	4606      	mov	r6, r0
 8009680:	460f      	mov	r7, r1
 8009682:	4614      	mov	r4, r2
 8009684:	18d5      	adds	r5, r2, r3
 8009686:	42ac      	cmp	r4, r5
 8009688:	d101      	bne.n	800968e <__sfputs_r+0x12>
 800968a:	2000      	movs	r0, #0
 800968c:	e007      	b.n	800969e <__sfputs_r+0x22>
 800968e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009692:	463a      	mov	r2, r7
 8009694:	4630      	mov	r0, r6
 8009696:	f7ff ffda 	bl	800964e <__sfputc_r>
 800969a:	1c43      	adds	r3, r0, #1
 800969c:	d1f3      	bne.n	8009686 <__sfputs_r+0xa>
 800969e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080096a0 <_vfiprintf_r>:
 80096a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a4:	460d      	mov	r5, r1
 80096a6:	b09d      	sub	sp, #116	@ 0x74
 80096a8:	4614      	mov	r4, r2
 80096aa:	4698      	mov	r8, r3
 80096ac:	4606      	mov	r6, r0
 80096ae:	b118      	cbz	r0, 80096b8 <_vfiprintf_r+0x18>
 80096b0:	6a03      	ldr	r3, [r0, #32]
 80096b2:	b90b      	cbnz	r3, 80096b8 <_vfiprintf_r+0x18>
 80096b4:	f7fe faca 	bl	8007c4c <__sinit>
 80096b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80096ba:	07d9      	lsls	r1, r3, #31
 80096bc:	d405      	bmi.n	80096ca <_vfiprintf_r+0x2a>
 80096be:	89ab      	ldrh	r3, [r5, #12]
 80096c0:	059a      	lsls	r2, r3, #22
 80096c2:	d402      	bmi.n	80096ca <_vfiprintf_r+0x2a>
 80096c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80096c6:	f7fe fbb8 	bl	8007e3a <__retarget_lock_acquire_recursive>
 80096ca:	89ab      	ldrh	r3, [r5, #12]
 80096cc:	071b      	lsls	r3, r3, #28
 80096ce:	d501      	bpl.n	80096d4 <_vfiprintf_r+0x34>
 80096d0:	692b      	ldr	r3, [r5, #16]
 80096d2:	b99b      	cbnz	r3, 80096fc <_vfiprintf_r+0x5c>
 80096d4:	4629      	mov	r1, r5
 80096d6:	4630      	mov	r0, r6
 80096d8:	f000 f938 	bl	800994c <__swsetup_r>
 80096dc:	b170      	cbz	r0, 80096fc <_vfiprintf_r+0x5c>
 80096de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80096e0:	07dc      	lsls	r4, r3, #31
 80096e2:	d504      	bpl.n	80096ee <_vfiprintf_r+0x4e>
 80096e4:	f04f 30ff 	mov.w	r0, #4294967295
 80096e8:	b01d      	add	sp, #116	@ 0x74
 80096ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ee:	89ab      	ldrh	r3, [r5, #12]
 80096f0:	0598      	lsls	r0, r3, #22
 80096f2:	d4f7      	bmi.n	80096e4 <_vfiprintf_r+0x44>
 80096f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80096f6:	f7fe fba1 	bl	8007e3c <__retarget_lock_release_recursive>
 80096fa:	e7f3      	b.n	80096e4 <_vfiprintf_r+0x44>
 80096fc:	2300      	movs	r3, #0
 80096fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009700:	2320      	movs	r3, #32
 8009702:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009706:	f8cd 800c 	str.w	r8, [sp, #12]
 800970a:	2330      	movs	r3, #48	@ 0x30
 800970c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80098bc <_vfiprintf_r+0x21c>
 8009710:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009714:	f04f 0901 	mov.w	r9, #1
 8009718:	4623      	mov	r3, r4
 800971a:	469a      	mov	sl, r3
 800971c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009720:	b10a      	cbz	r2, 8009726 <_vfiprintf_r+0x86>
 8009722:	2a25      	cmp	r2, #37	@ 0x25
 8009724:	d1f9      	bne.n	800971a <_vfiprintf_r+0x7a>
 8009726:	ebba 0b04 	subs.w	fp, sl, r4
 800972a:	d00b      	beq.n	8009744 <_vfiprintf_r+0xa4>
 800972c:	465b      	mov	r3, fp
 800972e:	4622      	mov	r2, r4
 8009730:	4629      	mov	r1, r5
 8009732:	4630      	mov	r0, r6
 8009734:	f7ff ffa2 	bl	800967c <__sfputs_r>
 8009738:	3001      	adds	r0, #1
 800973a:	f000 80a7 	beq.w	800988c <_vfiprintf_r+0x1ec>
 800973e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009740:	445a      	add	r2, fp
 8009742:	9209      	str	r2, [sp, #36]	@ 0x24
 8009744:	f89a 3000 	ldrb.w	r3, [sl]
 8009748:	2b00      	cmp	r3, #0
 800974a:	f000 809f 	beq.w	800988c <_vfiprintf_r+0x1ec>
 800974e:	2300      	movs	r3, #0
 8009750:	f04f 32ff 	mov.w	r2, #4294967295
 8009754:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009758:	f10a 0a01 	add.w	sl, sl, #1
 800975c:	9304      	str	r3, [sp, #16]
 800975e:	9307      	str	r3, [sp, #28]
 8009760:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009764:	931a      	str	r3, [sp, #104]	@ 0x68
 8009766:	4654      	mov	r4, sl
 8009768:	2205      	movs	r2, #5
 800976a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800976e:	4853      	ldr	r0, [pc, #332]	@ (80098bc <_vfiprintf_r+0x21c>)
 8009770:	f7f6 fd2e 	bl	80001d0 <memchr>
 8009774:	9a04      	ldr	r2, [sp, #16]
 8009776:	b9d8      	cbnz	r0, 80097b0 <_vfiprintf_r+0x110>
 8009778:	06d1      	lsls	r1, r2, #27
 800977a:	bf44      	itt	mi
 800977c:	2320      	movmi	r3, #32
 800977e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009782:	0713      	lsls	r3, r2, #28
 8009784:	bf44      	itt	mi
 8009786:	232b      	movmi	r3, #43	@ 0x2b
 8009788:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800978c:	f89a 3000 	ldrb.w	r3, [sl]
 8009790:	2b2a      	cmp	r3, #42	@ 0x2a
 8009792:	d015      	beq.n	80097c0 <_vfiprintf_r+0x120>
 8009794:	9a07      	ldr	r2, [sp, #28]
 8009796:	4654      	mov	r4, sl
 8009798:	2000      	movs	r0, #0
 800979a:	f04f 0c0a 	mov.w	ip, #10
 800979e:	4621      	mov	r1, r4
 80097a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097a4:	3b30      	subs	r3, #48	@ 0x30
 80097a6:	2b09      	cmp	r3, #9
 80097a8:	d94b      	bls.n	8009842 <_vfiprintf_r+0x1a2>
 80097aa:	b1b0      	cbz	r0, 80097da <_vfiprintf_r+0x13a>
 80097ac:	9207      	str	r2, [sp, #28]
 80097ae:	e014      	b.n	80097da <_vfiprintf_r+0x13a>
 80097b0:	eba0 0308 	sub.w	r3, r0, r8
 80097b4:	fa09 f303 	lsl.w	r3, r9, r3
 80097b8:	4313      	orrs	r3, r2
 80097ba:	9304      	str	r3, [sp, #16]
 80097bc:	46a2      	mov	sl, r4
 80097be:	e7d2      	b.n	8009766 <_vfiprintf_r+0xc6>
 80097c0:	9b03      	ldr	r3, [sp, #12]
 80097c2:	1d19      	adds	r1, r3, #4
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	9103      	str	r1, [sp, #12]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	bfbb      	ittet	lt
 80097cc:	425b      	neglt	r3, r3
 80097ce:	f042 0202 	orrlt.w	r2, r2, #2
 80097d2:	9307      	strge	r3, [sp, #28]
 80097d4:	9307      	strlt	r3, [sp, #28]
 80097d6:	bfb8      	it	lt
 80097d8:	9204      	strlt	r2, [sp, #16]
 80097da:	7823      	ldrb	r3, [r4, #0]
 80097dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80097de:	d10a      	bne.n	80097f6 <_vfiprintf_r+0x156>
 80097e0:	7863      	ldrb	r3, [r4, #1]
 80097e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80097e4:	d132      	bne.n	800984c <_vfiprintf_r+0x1ac>
 80097e6:	9b03      	ldr	r3, [sp, #12]
 80097e8:	1d1a      	adds	r2, r3, #4
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	9203      	str	r2, [sp, #12]
 80097ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80097f2:	3402      	adds	r4, #2
 80097f4:	9305      	str	r3, [sp, #20]
 80097f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80098cc <_vfiprintf_r+0x22c>
 80097fa:	7821      	ldrb	r1, [r4, #0]
 80097fc:	2203      	movs	r2, #3
 80097fe:	4650      	mov	r0, sl
 8009800:	f7f6 fce6 	bl	80001d0 <memchr>
 8009804:	b138      	cbz	r0, 8009816 <_vfiprintf_r+0x176>
 8009806:	9b04      	ldr	r3, [sp, #16]
 8009808:	eba0 000a 	sub.w	r0, r0, sl
 800980c:	2240      	movs	r2, #64	@ 0x40
 800980e:	4082      	lsls	r2, r0
 8009810:	4313      	orrs	r3, r2
 8009812:	3401      	adds	r4, #1
 8009814:	9304      	str	r3, [sp, #16]
 8009816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800981a:	4829      	ldr	r0, [pc, #164]	@ (80098c0 <_vfiprintf_r+0x220>)
 800981c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009820:	2206      	movs	r2, #6
 8009822:	f7f6 fcd5 	bl	80001d0 <memchr>
 8009826:	2800      	cmp	r0, #0
 8009828:	d03f      	beq.n	80098aa <_vfiprintf_r+0x20a>
 800982a:	4b26      	ldr	r3, [pc, #152]	@ (80098c4 <_vfiprintf_r+0x224>)
 800982c:	bb1b      	cbnz	r3, 8009876 <_vfiprintf_r+0x1d6>
 800982e:	9b03      	ldr	r3, [sp, #12]
 8009830:	3307      	adds	r3, #7
 8009832:	f023 0307 	bic.w	r3, r3, #7
 8009836:	3308      	adds	r3, #8
 8009838:	9303      	str	r3, [sp, #12]
 800983a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800983c:	443b      	add	r3, r7
 800983e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009840:	e76a      	b.n	8009718 <_vfiprintf_r+0x78>
 8009842:	fb0c 3202 	mla	r2, ip, r2, r3
 8009846:	460c      	mov	r4, r1
 8009848:	2001      	movs	r0, #1
 800984a:	e7a8      	b.n	800979e <_vfiprintf_r+0xfe>
 800984c:	2300      	movs	r3, #0
 800984e:	3401      	adds	r4, #1
 8009850:	9305      	str	r3, [sp, #20]
 8009852:	4619      	mov	r1, r3
 8009854:	f04f 0c0a 	mov.w	ip, #10
 8009858:	4620      	mov	r0, r4
 800985a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800985e:	3a30      	subs	r2, #48	@ 0x30
 8009860:	2a09      	cmp	r2, #9
 8009862:	d903      	bls.n	800986c <_vfiprintf_r+0x1cc>
 8009864:	2b00      	cmp	r3, #0
 8009866:	d0c6      	beq.n	80097f6 <_vfiprintf_r+0x156>
 8009868:	9105      	str	r1, [sp, #20]
 800986a:	e7c4      	b.n	80097f6 <_vfiprintf_r+0x156>
 800986c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009870:	4604      	mov	r4, r0
 8009872:	2301      	movs	r3, #1
 8009874:	e7f0      	b.n	8009858 <_vfiprintf_r+0x1b8>
 8009876:	ab03      	add	r3, sp, #12
 8009878:	9300      	str	r3, [sp, #0]
 800987a:	462a      	mov	r2, r5
 800987c:	4b12      	ldr	r3, [pc, #72]	@ (80098c8 <_vfiprintf_r+0x228>)
 800987e:	a904      	add	r1, sp, #16
 8009880:	4630      	mov	r0, r6
 8009882:	f7fd fda1 	bl	80073c8 <_printf_float>
 8009886:	4607      	mov	r7, r0
 8009888:	1c78      	adds	r0, r7, #1
 800988a:	d1d6      	bne.n	800983a <_vfiprintf_r+0x19a>
 800988c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800988e:	07d9      	lsls	r1, r3, #31
 8009890:	d405      	bmi.n	800989e <_vfiprintf_r+0x1fe>
 8009892:	89ab      	ldrh	r3, [r5, #12]
 8009894:	059a      	lsls	r2, r3, #22
 8009896:	d402      	bmi.n	800989e <_vfiprintf_r+0x1fe>
 8009898:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800989a:	f7fe facf 	bl	8007e3c <__retarget_lock_release_recursive>
 800989e:	89ab      	ldrh	r3, [r5, #12]
 80098a0:	065b      	lsls	r3, r3, #25
 80098a2:	f53f af1f 	bmi.w	80096e4 <_vfiprintf_r+0x44>
 80098a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098a8:	e71e      	b.n	80096e8 <_vfiprintf_r+0x48>
 80098aa:	ab03      	add	r3, sp, #12
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	462a      	mov	r2, r5
 80098b0:	4b05      	ldr	r3, [pc, #20]	@ (80098c8 <_vfiprintf_r+0x228>)
 80098b2:	a904      	add	r1, sp, #16
 80098b4:	4630      	mov	r0, r6
 80098b6:	f7fe f81f 	bl	80078f8 <_printf_i>
 80098ba:	e7e4      	b.n	8009886 <_vfiprintf_r+0x1e6>
 80098bc:	0801cd78 	.word	0x0801cd78
 80098c0:	0801cd82 	.word	0x0801cd82
 80098c4:	080073c9 	.word	0x080073c9
 80098c8:	0800967d 	.word	0x0800967d
 80098cc:	0801cd7e 	.word	0x0801cd7e

080098d0 <__swbuf_r>:
 80098d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d2:	460e      	mov	r6, r1
 80098d4:	4614      	mov	r4, r2
 80098d6:	4605      	mov	r5, r0
 80098d8:	b118      	cbz	r0, 80098e2 <__swbuf_r+0x12>
 80098da:	6a03      	ldr	r3, [r0, #32]
 80098dc:	b90b      	cbnz	r3, 80098e2 <__swbuf_r+0x12>
 80098de:	f7fe f9b5 	bl	8007c4c <__sinit>
 80098e2:	69a3      	ldr	r3, [r4, #24]
 80098e4:	60a3      	str	r3, [r4, #8]
 80098e6:	89a3      	ldrh	r3, [r4, #12]
 80098e8:	071a      	lsls	r2, r3, #28
 80098ea:	d501      	bpl.n	80098f0 <__swbuf_r+0x20>
 80098ec:	6923      	ldr	r3, [r4, #16]
 80098ee:	b943      	cbnz	r3, 8009902 <__swbuf_r+0x32>
 80098f0:	4621      	mov	r1, r4
 80098f2:	4628      	mov	r0, r5
 80098f4:	f000 f82a 	bl	800994c <__swsetup_r>
 80098f8:	b118      	cbz	r0, 8009902 <__swbuf_r+0x32>
 80098fa:	f04f 37ff 	mov.w	r7, #4294967295
 80098fe:	4638      	mov	r0, r7
 8009900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009902:	6823      	ldr	r3, [r4, #0]
 8009904:	6922      	ldr	r2, [r4, #16]
 8009906:	1a98      	subs	r0, r3, r2
 8009908:	6963      	ldr	r3, [r4, #20]
 800990a:	b2f6      	uxtb	r6, r6
 800990c:	4283      	cmp	r3, r0
 800990e:	4637      	mov	r7, r6
 8009910:	dc05      	bgt.n	800991e <__swbuf_r+0x4e>
 8009912:	4621      	mov	r1, r4
 8009914:	4628      	mov	r0, r5
 8009916:	f7ff fde9 	bl	80094ec <_fflush_r>
 800991a:	2800      	cmp	r0, #0
 800991c:	d1ed      	bne.n	80098fa <__swbuf_r+0x2a>
 800991e:	68a3      	ldr	r3, [r4, #8]
 8009920:	3b01      	subs	r3, #1
 8009922:	60a3      	str	r3, [r4, #8]
 8009924:	6823      	ldr	r3, [r4, #0]
 8009926:	1c5a      	adds	r2, r3, #1
 8009928:	6022      	str	r2, [r4, #0]
 800992a:	701e      	strb	r6, [r3, #0]
 800992c:	6962      	ldr	r2, [r4, #20]
 800992e:	1c43      	adds	r3, r0, #1
 8009930:	429a      	cmp	r2, r3
 8009932:	d004      	beq.n	800993e <__swbuf_r+0x6e>
 8009934:	89a3      	ldrh	r3, [r4, #12]
 8009936:	07db      	lsls	r3, r3, #31
 8009938:	d5e1      	bpl.n	80098fe <__swbuf_r+0x2e>
 800993a:	2e0a      	cmp	r6, #10
 800993c:	d1df      	bne.n	80098fe <__swbuf_r+0x2e>
 800993e:	4621      	mov	r1, r4
 8009940:	4628      	mov	r0, r5
 8009942:	f7ff fdd3 	bl	80094ec <_fflush_r>
 8009946:	2800      	cmp	r0, #0
 8009948:	d0d9      	beq.n	80098fe <__swbuf_r+0x2e>
 800994a:	e7d6      	b.n	80098fa <__swbuf_r+0x2a>

0800994c <__swsetup_r>:
 800994c:	b538      	push	{r3, r4, r5, lr}
 800994e:	4b29      	ldr	r3, [pc, #164]	@ (80099f4 <__swsetup_r+0xa8>)
 8009950:	4605      	mov	r5, r0
 8009952:	6818      	ldr	r0, [r3, #0]
 8009954:	460c      	mov	r4, r1
 8009956:	b118      	cbz	r0, 8009960 <__swsetup_r+0x14>
 8009958:	6a03      	ldr	r3, [r0, #32]
 800995a:	b90b      	cbnz	r3, 8009960 <__swsetup_r+0x14>
 800995c:	f7fe f976 	bl	8007c4c <__sinit>
 8009960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009964:	0719      	lsls	r1, r3, #28
 8009966:	d422      	bmi.n	80099ae <__swsetup_r+0x62>
 8009968:	06da      	lsls	r2, r3, #27
 800996a:	d407      	bmi.n	800997c <__swsetup_r+0x30>
 800996c:	2209      	movs	r2, #9
 800996e:	602a      	str	r2, [r5, #0]
 8009970:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009974:	81a3      	strh	r3, [r4, #12]
 8009976:	f04f 30ff 	mov.w	r0, #4294967295
 800997a:	e033      	b.n	80099e4 <__swsetup_r+0x98>
 800997c:	0758      	lsls	r0, r3, #29
 800997e:	d512      	bpl.n	80099a6 <__swsetup_r+0x5a>
 8009980:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009982:	b141      	cbz	r1, 8009996 <__swsetup_r+0x4a>
 8009984:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009988:	4299      	cmp	r1, r3
 800998a:	d002      	beq.n	8009992 <__swsetup_r+0x46>
 800998c:	4628      	mov	r0, r5
 800998e:	f7ff f8af 	bl	8008af0 <_free_r>
 8009992:	2300      	movs	r3, #0
 8009994:	6363      	str	r3, [r4, #52]	@ 0x34
 8009996:	89a3      	ldrh	r3, [r4, #12]
 8009998:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800999c:	81a3      	strh	r3, [r4, #12]
 800999e:	2300      	movs	r3, #0
 80099a0:	6063      	str	r3, [r4, #4]
 80099a2:	6923      	ldr	r3, [r4, #16]
 80099a4:	6023      	str	r3, [r4, #0]
 80099a6:	89a3      	ldrh	r3, [r4, #12]
 80099a8:	f043 0308 	orr.w	r3, r3, #8
 80099ac:	81a3      	strh	r3, [r4, #12]
 80099ae:	6923      	ldr	r3, [r4, #16]
 80099b0:	b94b      	cbnz	r3, 80099c6 <__swsetup_r+0x7a>
 80099b2:	89a3      	ldrh	r3, [r4, #12]
 80099b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80099b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099bc:	d003      	beq.n	80099c6 <__swsetup_r+0x7a>
 80099be:	4621      	mov	r1, r4
 80099c0:	4628      	mov	r0, r5
 80099c2:	f000 f883 	bl	8009acc <__smakebuf_r>
 80099c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099ca:	f013 0201 	ands.w	r2, r3, #1
 80099ce:	d00a      	beq.n	80099e6 <__swsetup_r+0x9a>
 80099d0:	2200      	movs	r2, #0
 80099d2:	60a2      	str	r2, [r4, #8]
 80099d4:	6962      	ldr	r2, [r4, #20]
 80099d6:	4252      	negs	r2, r2
 80099d8:	61a2      	str	r2, [r4, #24]
 80099da:	6922      	ldr	r2, [r4, #16]
 80099dc:	b942      	cbnz	r2, 80099f0 <__swsetup_r+0xa4>
 80099de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80099e2:	d1c5      	bne.n	8009970 <__swsetup_r+0x24>
 80099e4:	bd38      	pop	{r3, r4, r5, pc}
 80099e6:	0799      	lsls	r1, r3, #30
 80099e8:	bf58      	it	pl
 80099ea:	6962      	ldrpl	r2, [r4, #20]
 80099ec:	60a2      	str	r2, [r4, #8]
 80099ee:	e7f4      	b.n	80099da <__swsetup_r+0x8e>
 80099f0:	2000      	movs	r0, #0
 80099f2:	e7f7      	b.n	80099e4 <__swsetup_r+0x98>
 80099f4:	20000020 	.word	0x20000020

080099f8 <_raise_r>:
 80099f8:	291f      	cmp	r1, #31
 80099fa:	b538      	push	{r3, r4, r5, lr}
 80099fc:	4605      	mov	r5, r0
 80099fe:	460c      	mov	r4, r1
 8009a00:	d904      	bls.n	8009a0c <_raise_r+0x14>
 8009a02:	2316      	movs	r3, #22
 8009a04:	6003      	str	r3, [r0, #0]
 8009a06:	f04f 30ff 	mov.w	r0, #4294967295
 8009a0a:	bd38      	pop	{r3, r4, r5, pc}
 8009a0c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009a0e:	b112      	cbz	r2, 8009a16 <_raise_r+0x1e>
 8009a10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a14:	b94b      	cbnz	r3, 8009a2a <_raise_r+0x32>
 8009a16:	4628      	mov	r0, r5
 8009a18:	f000 f830 	bl	8009a7c <_getpid_r>
 8009a1c:	4622      	mov	r2, r4
 8009a1e:	4601      	mov	r1, r0
 8009a20:	4628      	mov	r0, r5
 8009a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a26:	f000 b817 	b.w	8009a58 <_kill_r>
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d00a      	beq.n	8009a44 <_raise_r+0x4c>
 8009a2e:	1c59      	adds	r1, r3, #1
 8009a30:	d103      	bne.n	8009a3a <_raise_r+0x42>
 8009a32:	2316      	movs	r3, #22
 8009a34:	6003      	str	r3, [r0, #0]
 8009a36:	2001      	movs	r0, #1
 8009a38:	e7e7      	b.n	8009a0a <_raise_r+0x12>
 8009a3a:	2100      	movs	r1, #0
 8009a3c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009a40:	4620      	mov	r0, r4
 8009a42:	4798      	blx	r3
 8009a44:	2000      	movs	r0, #0
 8009a46:	e7e0      	b.n	8009a0a <_raise_r+0x12>

08009a48 <raise>:
 8009a48:	4b02      	ldr	r3, [pc, #8]	@ (8009a54 <raise+0xc>)
 8009a4a:	4601      	mov	r1, r0
 8009a4c:	6818      	ldr	r0, [r3, #0]
 8009a4e:	f7ff bfd3 	b.w	80099f8 <_raise_r>
 8009a52:	bf00      	nop
 8009a54:	20000020 	.word	0x20000020

08009a58 <_kill_r>:
 8009a58:	b538      	push	{r3, r4, r5, lr}
 8009a5a:	4d07      	ldr	r5, [pc, #28]	@ (8009a78 <_kill_r+0x20>)
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	4604      	mov	r4, r0
 8009a60:	4608      	mov	r0, r1
 8009a62:	4611      	mov	r1, r2
 8009a64:	602b      	str	r3, [r5, #0]
 8009a66:	f7f8 f815 	bl	8001a94 <_kill>
 8009a6a:	1c43      	adds	r3, r0, #1
 8009a6c:	d102      	bne.n	8009a74 <_kill_r+0x1c>
 8009a6e:	682b      	ldr	r3, [r5, #0]
 8009a70:	b103      	cbz	r3, 8009a74 <_kill_r+0x1c>
 8009a72:	6023      	str	r3, [r4, #0]
 8009a74:	bd38      	pop	{r3, r4, r5, pc}
 8009a76:	bf00      	nop
 8009a78:	20002170 	.word	0x20002170

08009a7c <_getpid_r>:
 8009a7c:	f7f8 b802 	b.w	8001a84 <_getpid>

08009a80 <__swhatbuf_r>:
 8009a80:	b570      	push	{r4, r5, r6, lr}
 8009a82:	460c      	mov	r4, r1
 8009a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a88:	2900      	cmp	r1, #0
 8009a8a:	b096      	sub	sp, #88	@ 0x58
 8009a8c:	4615      	mov	r5, r2
 8009a8e:	461e      	mov	r6, r3
 8009a90:	da0d      	bge.n	8009aae <__swhatbuf_r+0x2e>
 8009a92:	89a3      	ldrh	r3, [r4, #12]
 8009a94:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009a98:	f04f 0100 	mov.w	r1, #0
 8009a9c:	bf14      	ite	ne
 8009a9e:	2340      	movne	r3, #64	@ 0x40
 8009aa0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	6031      	str	r1, [r6, #0]
 8009aa8:	602b      	str	r3, [r5, #0]
 8009aaa:	b016      	add	sp, #88	@ 0x58
 8009aac:	bd70      	pop	{r4, r5, r6, pc}
 8009aae:	466a      	mov	r2, sp
 8009ab0:	f000 f848 	bl	8009b44 <_fstat_r>
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	dbec      	blt.n	8009a92 <__swhatbuf_r+0x12>
 8009ab8:	9901      	ldr	r1, [sp, #4]
 8009aba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009abe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009ac2:	4259      	negs	r1, r3
 8009ac4:	4159      	adcs	r1, r3
 8009ac6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009aca:	e7eb      	b.n	8009aa4 <__swhatbuf_r+0x24>

08009acc <__smakebuf_r>:
 8009acc:	898b      	ldrh	r3, [r1, #12]
 8009ace:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ad0:	079d      	lsls	r5, r3, #30
 8009ad2:	4606      	mov	r6, r0
 8009ad4:	460c      	mov	r4, r1
 8009ad6:	d507      	bpl.n	8009ae8 <__smakebuf_r+0x1c>
 8009ad8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009adc:	6023      	str	r3, [r4, #0]
 8009ade:	6123      	str	r3, [r4, #16]
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	6163      	str	r3, [r4, #20]
 8009ae4:	b003      	add	sp, #12
 8009ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ae8:	ab01      	add	r3, sp, #4
 8009aea:	466a      	mov	r2, sp
 8009aec:	f7ff ffc8 	bl	8009a80 <__swhatbuf_r>
 8009af0:	9f00      	ldr	r7, [sp, #0]
 8009af2:	4605      	mov	r5, r0
 8009af4:	4639      	mov	r1, r7
 8009af6:	4630      	mov	r0, r6
 8009af8:	f7ff f86e 	bl	8008bd8 <_malloc_r>
 8009afc:	b948      	cbnz	r0, 8009b12 <__smakebuf_r+0x46>
 8009afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b02:	059a      	lsls	r2, r3, #22
 8009b04:	d4ee      	bmi.n	8009ae4 <__smakebuf_r+0x18>
 8009b06:	f023 0303 	bic.w	r3, r3, #3
 8009b0a:	f043 0302 	orr.w	r3, r3, #2
 8009b0e:	81a3      	strh	r3, [r4, #12]
 8009b10:	e7e2      	b.n	8009ad8 <__smakebuf_r+0xc>
 8009b12:	89a3      	ldrh	r3, [r4, #12]
 8009b14:	6020      	str	r0, [r4, #0]
 8009b16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b1a:	81a3      	strh	r3, [r4, #12]
 8009b1c:	9b01      	ldr	r3, [sp, #4]
 8009b1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009b22:	b15b      	cbz	r3, 8009b3c <__smakebuf_r+0x70>
 8009b24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b28:	4630      	mov	r0, r6
 8009b2a:	f000 f81d 	bl	8009b68 <_isatty_r>
 8009b2e:	b128      	cbz	r0, 8009b3c <__smakebuf_r+0x70>
 8009b30:	89a3      	ldrh	r3, [r4, #12]
 8009b32:	f023 0303 	bic.w	r3, r3, #3
 8009b36:	f043 0301 	orr.w	r3, r3, #1
 8009b3a:	81a3      	strh	r3, [r4, #12]
 8009b3c:	89a3      	ldrh	r3, [r4, #12]
 8009b3e:	431d      	orrs	r5, r3
 8009b40:	81a5      	strh	r5, [r4, #12]
 8009b42:	e7cf      	b.n	8009ae4 <__smakebuf_r+0x18>

08009b44 <_fstat_r>:
 8009b44:	b538      	push	{r3, r4, r5, lr}
 8009b46:	4d07      	ldr	r5, [pc, #28]	@ (8009b64 <_fstat_r+0x20>)
 8009b48:	2300      	movs	r3, #0
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	4608      	mov	r0, r1
 8009b4e:	4611      	mov	r1, r2
 8009b50:	602b      	str	r3, [r5, #0]
 8009b52:	f7f7 ffff 	bl	8001b54 <_fstat>
 8009b56:	1c43      	adds	r3, r0, #1
 8009b58:	d102      	bne.n	8009b60 <_fstat_r+0x1c>
 8009b5a:	682b      	ldr	r3, [r5, #0]
 8009b5c:	b103      	cbz	r3, 8009b60 <_fstat_r+0x1c>
 8009b5e:	6023      	str	r3, [r4, #0]
 8009b60:	bd38      	pop	{r3, r4, r5, pc}
 8009b62:	bf00      	nop
 8009b64:	20002170 	.word	0x20002170

08009b68 <_isatty_r>:
 8009b68:	b538      	push	{r3, r4, r5, lr}
 8009b6a:	4d06      	ldr	r5, [pc, #24]	@ (8009b84 <_isatty_r+0x1c>)
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	4604      	mov	r4, r0
 8009b70:	4608      	mov	r0, r1
 8009b72:	602b      	str	r3, [r5, #0]
 8009b74:	f7f7 fffe 	bl	8001b74 <_isatty>
 8009b78:	1c43      	adds	r3, r0, #1
 8009b7a:	d102      	bne.n	8009b82 <_isatty_r+0x1a>
 8009b7c:	682b      	ldr	r3, [r5, #0]
 8009b7e:	b103      	cbz	r3, 8009b82 <_isatty_r+0x1a>
 8009b80:	6023      	str	r3, [r4, #0]
 8009b82:	bd38      	pop	{r3, r4, r5, pc}
 8009b84:	20002170 	.word	0x20002170

08009b88 <sqrtf>:
 8009b88:	b508      	push	{r3, lr}
 8009b8a:	ed2d 8b02 	vpush	{d8}
 8009b8e:	eeb0 8a40 	vmov.f32	s16, s0
 8009b92:	f000 f817 	bl	8009bc4 <__ieee754_sqrtf>
 8009b96:	eeb4 8a48 	vcmp.f32	s16, s16
 8009b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b9e:	d60c      	bvs.n	8009bba <sqrtf+0x32>
 8009ba0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8009bc0 <sqrtf+0x38>
 8009ba4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bac:	d505      	bpl.n	8009bba <sqrtf+0x32>
 8009bae:	f7fe f919 	bl	8007de4 <__errno>
 8009bb2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009bb6:	2321      	movs	r3, #33	@ 0x21
 8009bb8:	6003      	str	r3, [r0, #0]
 8009bba:	ecbd 8b02 	vpop	{d8}
 8009bbe:	bd08      	pop	{r3, pc}
 8009bc0:	00000000 	.word	0x00000000

08009bc4 <__ieee754_sqrtf>:
 8009bc4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009bc8:	4770      	bx	lr
	...

08009bcc <_init>:
 8009bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bce:	bf00      	nop
 8009bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bd2:	bc08      	pop	{r3}
 8009bd4:	469e      	mov	lr, r3
 8009bd6:	4770      	bx	lr

08009bd8 <_fini>:
 8009bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bda:	bf00      	nop
 8009bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bde:	bc08      	pop	{r3}
 8009be0:	469e      	mov	lr, r3
 8009be2:	4770      	bx	lr
