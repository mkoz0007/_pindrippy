
pindrop_fft_better.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fb4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000133d4  0800a148  0800a148  0000b148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d51c  0801d51c  0001f1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801d51c  0801d51c  0001e51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d524  0801d524  0001f1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d524  0801d524  0001e524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801d528  0801d528  0001e528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0801d52c  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000063a4  200001dc  0801d708  0001f1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006580  0801d708  0001f580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001f1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc89  00000000  00000000  0001f20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003997  00000000  00000000  0003be95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0003f830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e3a  00000000  00000000  00040bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000239fb  00000000  00000000  00041a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000175eb  00000000  00000000  0006540d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de790  00000000  00000000  0007c9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0015b188  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006328  00000000  00000000  0015b240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00161568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000032a6  00000000  00000000  001615dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000000d8  00000000  00000000  00164882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a12c 	.word	0x0800a12c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800a12c 	.word	0x0800a12c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed8:	f000 ff3b 	bl	8001d52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000edc:	f000 f836 	bl	8000f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee0:	f000 fa1c 	bl	800131c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ee4:	f000 f9f4 	bl	80012d0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ee8:	f000 f9c2 	bl	8001270 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000eec:	f000 f890 	bl	8001010 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000ef0:	f000 f948 	bl	8001184 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000ef4:	f000 f8f2 	bl	80010dc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  // Initialize FFT
  arm_rfft_fast_init_f32(&fft_instance, FFT_SIZE);
 8000ef8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000efc:	480d      	ldr	r0, [pc, #52]	@ (8000f34 <main+0x60>)
 8000efe:	f005 fae3 	bl	80064c8 <arm_rfft_fast_init_f32>

  // Start ADC with DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, AUDIO_BUFFER_SIZE);
 8000f02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f06:	490c      	ldr	r1, [pc, #48]	@ (8000f38 <main+0x64>)
 8000f08:	480c      	ldr	r0, [pc, #48]	@ (8000f3c <main+0x68>)
 8000f0a:	f001 fac5 	bl	8002498 <HAL_ADC_Start_DMA>

  // Start timer for sampling rate and fft timer
  HAL_TIM_Base_Start(&htim1);
 8000f0e:	480c      	ldr	r0, [pc, #48]	@ (8000f40 <main+0x6c>)
 8000f10:	f003 fed4 	bl	8004cbc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 8000f14:	480b      	ldr	r0, [pc, #44]	@ (8000f44 <main+0x70>)
 8000f16:	f003 fed1 	bl	8004cbc <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (buffer_ready) {
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <main+0x74>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d0fb      	beq.n	8000f1a <main+0x46>
	        process_fft(buffer_ready);
 8000f22:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <main+0x74>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fadc 	bl	80014e4 <process_fft>
	        buffer_ready = 0;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <main+0x74>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
	  if (buffer_ready) {
 8000f32:	e7f2      	b.n	8000f1a <main+0x46>
 8000f34:	20006414 	.word	0x20006414
 8000f38:	2000040c 	.word	0x2000040c
 8000f3c:	200001f8 	.word	0x200001f8
 8000f40:	200002a4 	.word	0x200002a4
 8000f44:	200002f0 	.word	0x200002f0
 8000f48:	2000140c 	.word	0x2000140c

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b096      	sub	sp, #88	@ 0x58
 8000f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	2244      	movs	r2, #68	@ 0x44
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f006 fff7 	bl	8007f4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f60:	463b      	mov	r3, r7
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f6e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f72:	f002 fcc5 	bl	8003900 <HAL_PWREx_ControlVoltageScaling>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f7c:	f000 fbea 	bl	8001754 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f80:	f002 fca0 	bl	80038c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f84:	4b21      	ldr	r3, [pc, #132]	@ (800100c <SystemClock_Config+0xc0>)
 8000f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f8a:	4a20      	ldr	r2, [pc, #128]	@ (800100c <SystemClock_Config+0xc0>)
 8000f8c:	f023 0318 	bic.w	r3, r3, #24
 8000f90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000f94:	2314      	movs	r3, #20
 8000f96:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fa4:	2360      	movs	r3, #96	@ 0x60
 8000fa6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000fac:	2301      	movs	r3, #1
 8000fae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f002 fcef 	bl	80039ac <HAL_RCC_OscConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000fd4:	f000 fbbe 	bl	8001754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd8:	230f      	movs	r3, #15
 8000fda:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fec:	463b      	mov	r3, r7
 8000fee:	2101      	movs	r1, #1
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f003 f8ef 	bl	80041d4 <HAL_RCC_ClockConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000ffc:	f000 fbaa 	bl	8001754 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001000:	f003 fd02 	bl	8004a08 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001004:	bf00      	nop
 8001006:	3758      	adds	r7, #88	@ 0x58
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40021000 	.word	0x40021000

08001010 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001016:	463b      	mov	r3, r7
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
 8001024:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001026:	4b2a      	ldr	r3, [pc, #168]	@ (80010d0 <MX_ADC1_Init+0xc0>)
 8001028:	4a2a      	ldr	r2, [pc, #168]	@ (80010d4 <MX_ADC1_Init+0xc4>)
 800102a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800102c:	4b28      	ldr	r3, [pc, #160]	@ (80010d0 <MX_ADC1_Init+0xc0>)
 800102e:	2200      	movs	r2, #0
 8001030:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001032:	4b27      	ldr	r3, [pc, #156]	@ (80010d0 <MX_ADC1_Init+0xc0>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001038:	4b25      	ldr	r3, [pc, #148]	@ (80010d0 <MX_ADC1_Init+0xc0>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800103e:	4b24      	ldr	r3, [pc, #144]	@ (80010d0 <MX_ADC1_Init+0xc0>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001044:	4b22      	ldr	r3, [pc, #136]	@ (80010d0 <MX_ADC1_Init+0xc0>)
 8001046:	2204      	movs	r2, #4
 8001048:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800104a:	4b21      	ldr	r3, [pc, #132]	@ (80010d0 <MX_ADC1_Init+0xc0>)
 800104c:	2200      	movs	r2, #0
 800104e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001050:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <MX_ADC1_Init+0xc0>)
 8001052:	2200      	movs	r2, #0
 8001054:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001056:	4b1e      	ldr	r3, [pc, #120]	@ (80010d0 <MX_ADC1_Init+0xc0>)
 8001058:	2201      	movs	r2, #1
 800105a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800105c:	4b1c      	ldr	r3, [pc, #112]	@ (80010d0 <MX_ADC1_Init+0xc0>)
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001064:	4b1a      	ldr	r3, [pc, #104]	@ (80010d0 <MX_ADC1_Init+0xc0>)
 8001066:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 800106a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800106c:	4b18      	ldr	r3, [pc, #96]	@ (80010d0 <MX_ADC1_Init+0xc0>)
 800106e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001072:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001074:	4b16      	ldr	r3, [pc, #88]	@ (80010d0 <MX_ADC1_Init+0xc0>)
 8001076:	2201      	movs	r2, #1
 8001078:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800107c:	4b14      	ldr	r3, [pc, #80]	@ (80010d0 <MX_ADC1_Init+0xc0>)
 800107e:	2200      	movs	r2, #0
 8001080:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001082:	4b13      	ldr	r3, [pc, #76]	@ (80010d0 <MX_ADC1_Init+0xc0>)
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800108a:	4811      	ldr	r0, [pc, #68]	@ (80010d0 <MX_ADC1_Init+0xc0>)
 800108c:	f001 f8c2 	bl	8002214 <HAL_ADC_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001096:	f000 fb5d 	bl	8001754 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800109a:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <MX_ADC1_Init+0xc8>)
 800109c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800109e:	2306      	movs	r3, #6
 80010a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010a6:	237f      	movs	r3, #127	@ 0x7f
 80010a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010aa:	2304      	movs	r3, #4
 80010ac:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b2:	463b      	mov	r3, r7
 80010b4:	4619      	mov	r1, r3
 80010b6:	4806      	ldr	r0, [pc, #24]	@ (80010d0 <MX_ADC1_Init+0xc0>)
 80010b8:	f001 fa7c 	bl	80025b4 <HAL_ADC_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80010c2:	f000 fb47 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200001f8 	.word	0x200001f8
 80010d4:	50040000 	.word	0x50040000
 80010d8:	21800100 	.word	0x21800100

080010dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e2:	f107 0310 	add.w	r3, r7, #16
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010fa:	4b20      	ldr	r3, [pc, #128]	@ (800117c <MX_TIM1_Init+0xa0>)
 80010fc:	4a20      	ldr	r2, [pc, #128]	@ (8001180 <MX_TIM1_Init+0xa4>)
 80010fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8001100:	4b1e      	ldr	r3, [pc, #120]	@ (800117c <MX_TIM1_Init+0xa0>)
 8001102:	221f      	movs	r2, #31
 8001104:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001106:	4b1d      	ldr	r3, [pc, #116]	@ (800117c <MX_TIM1_Init+0xa0>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800110c:	4b1b      	ldr	r3, [pc, #108]	@ (800117c <MX_TIM1_Init+0xa0>)
 800110e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001112:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001114:	4b19      	ldr	r3, [pc, #100]	@ (800117c <MX_TIM1_Init+0xa0>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800111a:	4b18      	ldr	r3, [pc, #96]	@ (800117c <MX_TIM1_Init+0xa0>)
 800111c:	2200      	movs	r2, #0
 800111e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001120:	4b16      	ldr	r3, [pc, #88]	@ (800117c <MX_TIM1_Init+0xa0>)
 8001122:	2200      	movs	r2, #0
 8001124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001126:	4815      	ldr	r0, [pc, #84]	@ (800117c <MX_TIM1_Init+0xa0>)
 8001128:	f003 fd70 	bl	8004c0c <HAL_TIM_Base_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001132:	f000 fb0f 	bl	8001754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001136:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800113a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	4619      	mov	r1, r3
 8001142:	480e      	ldr	r0, [pc, #56]	@ (800117c <MX_TIM1_Init+0xa0>)
 8001144:	f003 fee2 	bl	8004f0c <HAL_TIM_ConfigClockSource>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800114e:	f000 fb01 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	4619      	mov	r1, r3
 8001162:	4806      	ldr	r0, [pc, #24]	@ (800117c <MX_TIM1_Init+0xa0>)
 8001164:	f004 fb24 	bl	80057b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800116e:	f000 faf1 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	3720      	adds	r7, #32
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200002a4 	.word	0x200002a4
 8001180:	40012c00 	.word	0x40012c00

08001184 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08e      	sub	sp, #56	@ 0x38
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001198:	f107 031c 	add.w	r3, r7, #28
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a4:	463b      	mov	r3, r7
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]
 80011b2:	615a      	str	r2, [r3, #20]
 80011b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011b6:	4b2d      	ldr	r3, [pc, #180]	@ (800126c <MX_TIM2_Init+0xe8>)
 80011b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011be:	4b2b      	ldr	r3, [pc, #172]	@ (800126c <MX_TIM2_Init+0xe8>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c4:	4b29      	ldr	r3, [pc, #164]	@ (800126c <MX_TIM2_Init+0xe8>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 80011ca:	4b28      	ldr	r3, [pc, #160]	@ (800126c <MX_TIM2_Init+0xe8>)
 80011cc:	f240 128f 	movw	r2, #399	@ 0x18f
 80011d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d2:	4b26      	ldr	r3, [pc, #152]	@ (800126c <MX_TIM2_Init+0xe8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011d8:	4b24      	ldr	r3, [pc, #144]	@ (800126c <MX_TIM2_Init+0xe8>)
 80011da:	2280      	movs	r2, #128	@ 0x80
 80011dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011de:	4823      	ldr	r0, [pc, #140]	@ (800126c <MX_TIM2_Init+0xe8>)
 80011e0:	f003 fd14 	bl	8004c0c <HAL_TIM_Base_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80011ea:	f000 fab3 	bl	8001754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011f8:	4619      	mov	r1, r3
 80011fa:	481c      	ldr	r0, [pc, #112]	@ (800126c <MX_TIM2_Init+0xe8>)
 80011fc:	f003 fe86 	bl	8004f0c <HAL_TIM_ConfigClockSource>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001206:	f000 faa5 	bl	8001754 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800120a:	4818      	ldr	r0, [pc, #96]	@ (800126c <MX_TIM2_Init+0xe8>)
 800120c:	f003 fda2 	bl	8004d54 <HAL_TIM_OC_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001216:	f000 fa9d 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800121a:	2320      	movs	r3, #32
 800121c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800121e:	2380      	movs	r3, #128	@ 0x80
 8001220:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	4619      	mov	r1, r3
 8001228:	4810      	ldr	r0, [pc, #64]	@ (800126c <MX_TIM2_Init+0xe8>)
 800122a:	f004 fac1 	bl	80057b0 <HAL_TIMEx_MasterConfigSynchronization>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001234:	f000 fa8e 	bl	8001754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001238:	2330      	movs	r3, #48	@ 0x30
 800123a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001248:	463b      	mov	r3, r7
 800124a:	2200      	movs	r2, #0
 800124c:	4619      	mov	r1, r3
 800124e:	4807      	ldr	r0, [pc, #28]	@ (800126c <MX_TIM2_Init+0xe8>)
 8001250:	f003 fde2 	bl	8004e18 <HAL_TIM_OC_ConfigChannel>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800125a:	f000 fa7b 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800125e:	4803      	ldr	r0, [pc, #12]	@ (800126c <MX_TIM2_Init+0xe8>)
 8001260:	f000 fb68 	bl	8001934 <HAL_TIM_MspPostInit>

}
 8001264:	bf00      	nop
 8001266:	3738      	adds	r7, #56	@ 0x38
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200002f0 	.word	0x200002f0

08001270 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001274:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 8001276:	4a15      	ldr	r2, [pc, #84]	@ (80012cc <MX_USART2_UART_Init+0x5c>)
 8001278:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800127a:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 800127c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001280:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001282:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001288:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800128e:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 8001296:	220c      	movs	r2, #12
 8001298:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129a:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a0:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012a6:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ac:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012b2:	4805      	ldr	r0, [pc, #20]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 80012b4:	f004 fae2 	bl	800587c <HAL_UART_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012be:	f000 fa49 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	2000033c 	.word	0x2000033c
 80012cc:	40004400 	.word	0x40004400

080012d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012d6:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <MX_DMA_Init+0x48>)
 80012d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012da:	4a0f      	ldr	r2, [pc, #60]	@ (8001318 <MX_DMA_Init+0x48>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6493      	str	r3, [r2, #72]	@ 0x48
 80012e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001318 <MX_DMA_Init+0x48>)
 80012e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	200b      	movs	r0, #11
 80012f4:	f001 ff35 	bl	8003162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012f8:	200b      	movs	r0, #11
 80012fa:	f001 ff4e 	bl	800319a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	2011      	movs	r0, #17
 8001304:	f001 ff2d 	bl	8003162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001308:	2011      	movs	r0, #17
 800130a:	f001 ff46 	bl	800319a <HAL_NVIC_EnableIRQ>

}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000

0800131c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001332:	4b29      	ldr	r3, [pc, #164]	@ (80013d8 <MX_GPIO_Init+0xbc>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	4a28      	ldr	r2, [pc, #160]	@ (80013d8 <MX_GPIO_Init+0xbc>)
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133e:	4b26      	ldr	r3, [pc, #152]	@ (80013d8 <MX_GPIO_Init+0xbc>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	4b23      	ldr	r3, [pc, #140]	@ (80013d8 <MX_GPIO_Init+0xbc>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134e:	4a22      	ldr	r2, [pc, #136]	@ (80013d8 <MX_GPIO_Init+0xbc>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001356:	4b20      	ldr	r3, [pc, #128]	@ (80013d8 <MX_GPIO_Init+0xbc>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	4b1d      	ldr	r3, [pc, #116]	@ (80013d8 <MX_GPIO_Init+0xbc>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	4a1c      	ldr	r2, [pc, #112]	@ (80013d8 <MX_GPIO_Init+0xbc>)
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800136e:	4b1a      	ldr	r3, [pc, #104]	@ (80013d8 <MX_GPIO_Init+0xbc>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001380:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001384:	f002 fa86 	bl	8003894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	2108      	movs	r1, #8
 800138c:	4813      	ldr	r0, [pc, #76]	@ (80013dc <MX_GPIO_Init+0xc0>)
 800138e:	f002 fa81 	bl	8003894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001392:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001396:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001398:	2301      	movs	r3, #1
 800139a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	4619      	mov	r1, r3
 80013aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ae:	f002 f907 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80013b2:	2308      	movs	r3, #8
 80013b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b6:	2301      	movs	r3, #1
 80013b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2300      	movs	r3, #0
 80013c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 030c 	add.w	r3, r7, #12
 80013c6:	4619      	mov	r1, r3
 80013c8:	4804      	ldr	r0, [pc, #16]	@ (80013dc <MX_GPIO_Init+0xc0>)
 80013ca:	f002 f8f9 	bl	80035c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013ce:	bf00      	nop
 80013d0:	3720      	adds	r7, #32
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000
 80013dc:	48000400 	.word	0x48000400

080013e0 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
/* ADC conversion complete callback */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  buffer_ready = 1;
 80013e8:	4b26      	ldr	r3, [pc, #152]	@ (8001484 <HAL_ADC_ConvHalfCpltCallback+0xa4>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	601a      	str	r2, [r3, #0]
  // If event detected add buffer to transmit window
  if (transmit_signal) {
 80013ee:	4b26      	ldr	r3, [pc, #152]	@ (8001488 <HAL_ADC_ConvHalfCpltCallback+0xa8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d042      	beq.n	800147c <HAL_ADC_ConvHalfCpltCallback+0x9c>
	  // If event was just detected, also add the previous samples (front half) to the transmission
	  if (transmit_signal == TRANS_WINDOWS) {
 80013f6:	4b24      	ldr	r3, [pc, #144]	@ (8001488 <HAL_ADC_ConvHalfCpltCallback+0xa8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d11a      	bne.n	8001434 <HAL_ADC_ConvHalfCpltCallback+0x54>
		  for (int i = 0; i < FFT_SIZE; i++) {
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	e00e      	b.n	8001422 <HAL_ADC_ConvHalfCpltCallback+0x42>
			  trans_arr[i] = adc_buffer[i+FFT_SIZE];
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800140a:	4a20      	ldr	r2, [pc, #128]	@ (800148c <HAL_ADC_ConvHalfCpltCallback+0xac>)
 800140c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001410:	b29b      	uxth	r3, r3
 8001412:	4619      	mov	r1, r3
 8001414:	4a1e      	ldr	r2, [pc, #120]	@ (8001490 <HAL_ADC_ConvHalfCpltCallback+0xb0>)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  for (int i = 0; i < FFT_SIZE; i++) {
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3301      	adds	r3, #1
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001428:	dbec      	blt.n	8001404 <HAL_ADC_ConvHalfCpltCallback+0x24>
		  }
		  transmit_signal--; // Decrement Counter
 800142a:	4b17      	ldr	r3, [pc, #92]	@ (8001488 <HAL_ADC_ConvHalfCpltCallback+0xa8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	3b01      	subs	r3, #1
 8001430:	4a15      	ldr	r2, [pc, #84]	@ (8001488 <HAL_ADC_ConvHalfCpltCallback+0xa8>)
 8001432:	6013      	str	r3, [r2, #0]
	  }
	  // Add buffer just filled
	  for (int i = 0; i < FFT_SIZE; i++) {
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	e011      	b.n	800145e <HAL_ADC_ConvHalfCpltCallback+0x7e>
		  trans_arr[i+(TRANS_WINDOWS-transmit_signal)*FFT_SIZE] = adc_buffer[i];
 800143a:	4a14      	ldr	r2, [pc, #80]	@ (800148c <HAL_ADC_ConvHalfCpltCallback+0xac>)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001442:	b299      	uxth	r1, r3
 8001444:	4b10      	ldr	r3, [pc, #64]	@ (8001488 <HAL_ADC_ConvHalfCpltCallback+0xa8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f1c3 0302 	rsb	r3, r3, #2
 800144c:	029a      	lsls	r2, r3, #10
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	4413      	add	r3, r2
 8001452:	4a0f      	ldr	r2, [pc, #60]	@ (8001490 <HAL_ADC_ConvHalfCpltCallback+0xb0>)
 8001454:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for (int i = 0; i < FFT_SIZE; i++) {
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	3301      	adds	r3, #1
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001464:	dbe9      	blt.n	800143a <HAL_ADC_ConvHalfCpltCallback+0x5a>
	  }
	  transmit_signal--; // Decrement Counter
 8001466:	4b08      	ldr	r3, [pc, #32]	@ (8001488 <HAL_ADC_ConvHalfCpltCallback+0xa8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	3b01      	subs	r3, #1
 800146c:	4a06      	ldr	r2, [pc, #24]	@ (8001488 <HAL_ADC_ConvHalfCpltCallback+0xa8>)
 800146e:	6013      	str	r3, [r2, #0]
	  // If counter now 0 then transmit
	  if (transmit_signal <= 0) {
 8001470:	4b05      	ldr	r3, [pc, #20]	@ (8001488 <HAL_ADC_ConvHalfCpltCallback+0xa8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	dc01      	bgt.n	800147c <HAL_ADC_ConvHalfCpltCallback+0x9c>
		  transmit_adc_data();
 8001478:	f000 f920 	bl	80016bc <transmit_adc_data>
	  	  }
	  }
  }
 800147c:	bf00      	nop
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	2000140c 	.word	0x2000140c
 8001488:	20001410 	.word	0x20001410
 800148c:	2000040c 	.word	0x2000040c
 8001490:	20004414 	.word	0x20004414

08001494 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  buffer_ready = 2;
 800149c:	4b04      	ldr	r3, [pc, #16]	@ (80014b0 <HAL_ADC_ConvCpltCallback+0x1c>)
 800149e:	2202      	movs	r2, #2
 80014a0:	601a      	str	r2, [r3, #0]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	2000140c 	.word	0x2000140c

080014b4 <swap_buffers>:

// Code to swap output buffers
void swap_buffers() {
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
    float32_t* temp = fft_mag_prev;
 80014ba:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <swap_buffers+0x28>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	607b      	str	r3, [r7, #4]
    fft_mag_prev = fft_mag;
 80014c0:	4b07      	ldr	r3, [pc, #28]	@ (80014e0 <swap_buffers+0x2c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a05      	ldr	r2, [pc, #20]	@ (80014dc <swap_buffers+0x28>)
 80014c6:	6013      	str	r3, [r2, #0]
    fft_mag = temp;
 80014c8:	4a05      	ldr	r2, [pc, #20]	@ (80014e0 <swap_buffers+0x2c>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6013      	str	r3, [r2, #0]
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000004 	.word	0x20000004
 80014e0:	20000000 	.word	0x20000000

080014e4 <process_fft>:

/* Process FFT */
void process_fft(int buffer_ready) {
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b089      	sub	sp, #36	@ 0x24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  // Convert ADC samples to float32 (-1 to 1)
  for (int i = 0; i < FFT_SIZE; i++) {
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
 80014f0:	e01b      	b.n	800152a <process_fft+0x46>
    fft_input[i] = (float32_t)(adc_buffer[i+(buffer_ready-1)*FFT_SIZE] - 2048) / 2048.0f;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	029a      	lsls	r2, r3, #10
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	4413      	add	r3, r2
 80014fc:	4a66      	ldr	r2, [pc, #408]	@ (8001698 <process_fft+0x1b4>)
 80014fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001502:	b29b      	uxth	r3, r3
 8001504:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001508:	ee07 3a90 	vmov	s15, r3
 800150c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001510:	eddf 6a62 	vldr	s13, [pc, #392]	@ 800169c <process_fft+0x1b8>
 8001514:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001518:	4a61      	ldr	r2, [pc, #388]	@ (80016a0 <process_fft+0x1bc>)
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < FFT_SIZE; i++) {
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	3301      	adds	r3, #1
 8001528:	61fb      	str	r3, [r7, #28]
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001530:	dbdf      	blt.n	80014f2 <process_fft+0xe>
  }
  // Calculate and remove mean
  float32_t mean;
  arm_mean_f32(fft_input, FFT_SIZE, &mean);
 8001532:	f107 030c 	add.w	r3, r7, #12
 8001536:	461a      	mov	r2, r3
 8001538:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800153c:	4858      	ldr	r0, [pc, #352]	@ (80016a0 <process_fft+0x1bc>)
 800153e:	f004 febd 	bl	80062bc <arm_mean_f32>
  arm_offset_f32(fft_input, -mean, fft_input, FFT_SIZE);
 8001542:	edd7 7a03 	vldr	s15, [r7, #12]
 8001546:	eef1 7a67 	vneg.f32	s15, s15
 800154a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800154e:	4954      	ldr	r1, [pc, #336]	@ (80016a0 <process_fft+0x1bc>)
 8001550:	eeb0 0a67 	vmov.f32	s0, s15
 8001554:	4852      	ldr	r0, [pc, #328]	@ (80016a0 <process_fft+0x1bc>)
 8001556:	f005 fc79 	bl	8006e4c <arm_offset_f32>

  // Get time since last fft
  //uint32_t time = __HAL_TIM_GET_COUNTER(&htim1)*0.001; // Time in ms
  //__HAL_TIM_SET_COUNTER(&htim1, 0);
  // Perform FFT
  arm_rfft_fast_f32(&fft_instance, fft_input, fft_output, 0);
 800155a:	2300      	movs	r3, #0
 800155c:	4a51      	ldr	r2, [pc, #324]	@ (80016a4 <process_fft+0x1c0>)
 800155e:	4950      	ldr	r1, [pc, #320]	@ (80016a0 <process_fft+0x1bc>)
 8001560:	4851      	ldr	r0, [pc, #324]	@ (80016a8 <process_fft+0x1c4>)
 8001562:	f005 f895 	bl	8006690 <arm_rfft_fast_f32>

  // Swap pointers to magnitudes to find difference between current and previous fft
  swap_buffers();
 8001566:	f7ff ffa5 	bl	80014b4 <swap_buffers>
  float32_t fft_mag_diffsqr_sum = 0;
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	61bb      	str	r3, [r7, #24]
  // Calculate magnitude and find difference from previous
  for (int i = 0; i < FFT_SIZE/2; i++) {
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	e05b      	b.n	800162e <process_fft+0x14a>
    fft_mag[i] = sqrtf(fft_output[2*i]*fft_output[2*i] +
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4a4a      	ldr	r2, [pc, #296]	@ (80016a4 <process_fft+0x1c0>)
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	ed93 7a00 	vldr	s14, [r3]
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4a46      	ldr	r2, [pc, #280]	@ (80016a4 <process_fft+0x1c0>)
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	edd3 7a00 	vldr	s15, [r3]
 8001592:	ee27 7a27 	vmul.f32	s14, s14, s15
                       fft_output[2*i+1]*fft_output[2*i+1]);
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	3301      	adds	r3, #1
 800159c:	4a41      	ldr	r2, [pc, #260]	@ (80016a4 <process_fft+0x1c0>)
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	edd3 6a00 	vldr	s13, [r3]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	3301      	adds	r3, #1
 80015ac:	4a3d      	ldr	r2, [pc, #244]	@ (80016a4 <process_fft+0x1c0>)
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	edd3 7a00 	vldr	s15, [r3]
 80015b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    fft_mag[i] = sqrtf(fft_output[2*i]*fft_output[2*i] +
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	4b3b      	ldr	r3, [pc, #236]	@ (80016ac <process_fft+0x1c8>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	18d4      	adds	r4, r2, r3
 80015c8:	eeb0 0a67 	vmov.f32	s0, s15
 80015cc:	f008 fd8c 	bl	800a0e8 <sqrtf>
 80015d0:	eef0 7a40 	vmov.f32	s15, s0
 80015d4:	edc4 7a00 	vstr	s15, [r4]
    fft_mag_diffsqr_sum += (fft_mag[i] - fft_mag_prev[i])*(fft_mag[i] - fft_mag_prev[i]);
 80015d8:	4b34      	ldr	r3, [pc, #208]	@ (80016ac <process_fft+0x1c8>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	ed93 7a00 	vldr	s14, [r3]
 80015e6:	4b32      	ldr	r3, [pc, #200]	@ (80016b0 <process_fft+0x1cc>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	edd3 7a00 	vldr	s15, [r3]
 80015f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015f8:	4b2c      	ldr	r3, [pc, #176]	@ (80016ac <process_fft+0x1c8>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	edd3 6a00 	vldr	s13, [r3]
 8001606:	4b2a      	ldr	r3, [pc, #168]	@ (80016b0 <process_fft+0x1cc>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001624:	edc7 7a06 	vstr	s15, [r7, #24]
  for (int i = 0; i < FFT_SIZE/2; i++) {
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	3301      	adds	r3, #1
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001634:	db9f      	blt.n	8001576 <process_fft+0x92>
  }

  float32_t fft_change = sqrtf(fft_mag_diffsqr_sum);
 8001636:	ed97 0a06 	vldr	s0, [r7, #24]
 800163a:	f008 fd55 	bl	800a0e8 <sqrtf>
 800163e:	ed87 0a04 	vstr	s0, [r7, #16]

  if (fft_change > CHANGE_THRESHOLD) {
 8001642:	edd7 7a04 	vldr	s15, [r7, #16]
 8001646:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800164a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800164e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001652:	dd12      	ble.n	800167a <process_fft+0x196>
	  // Turn ON the LED
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001654:	2201      	movs	r2, #1
 8001656:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800165a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800165e:	f002 f919 	bl	8003894 <HAL_GPIO_WritePin>
	  transmit_signal = TRANS_WINDOWS;
 8001662:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <process_fft+0x1d0>)
 8001664:	2202      	movs	r2, #2
 8001666:	601a      	str	r2, [r3, #0]
	  HAL_Delay(1000);
 8001668:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800166c:	f000 fbe6 	bl	8001e3c <HAL_Delay>
	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001670:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <process_fft+0x1d4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2200      	movs	r2, #0
 8001676:	625a      	str	r2, [r3, #36]	@ 0x24
//  }
  else {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
	   transmit_signal = 0;
  }
}
 8001678:	e009      	b.n	800168e <process_fft+0x1aa>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001680:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001684:	f002 f906 	bl	8003894 <HAL_GPIO_WritePin>
	   transmit_signal = 0;
 8001688:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <process_fft+0x1d0>)
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
}
 800168e:	bf00      	nop
 8001690:	3724      	adds	r7, #36	@ 0x24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd90      	pop	{r4, r7, pc}
 8001696:	bf00      	nop
 8001698:	2000040c 	.word	0x2000040c
 800169c:	45000000 	.word	0x45000000
 80016a0:	20001414 	.word	0x20001414
 80016a4:	20002414 	.word	0x20002414
 80016a8:	20006414 	.word	0x20006414
 80016ac:	20000000 	.word	0x20000000
 80016b0:	20000004 	.word	0x20000004
 80016b4:	20001410 	.word	0x20001410
 80016b8:	200002a4 	.word	0x200002a4

080016bc <transmit_adc_data>:

/* Transmit ADC time series data via UART */
void transmit_adc_data(void) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b092      	sub	sp, #72	@ 0x48
 80016c0:	af00      	add	r7, sp, #0
  char uart_buf[64];
  int len;

  // Send header with sample count
  len = sprintf(uart_buf, "ADC_DATA_START,%d\r\n", FFT_SIZE*TRANS_WINDOWS);
 80016c2:	463b      	mov	r3, r7
 80016c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016c8:	491d      	ldr	r1, [pc, #116]	@ (8001740 <transmit_adc_data+0x84>)
 80016ca:	4618      	mov	r0, r3
 80016cc:	f006 fbda 	bl	8007e84 <siprintf>
 80016d0:	6438      	str	r0, [r7, #64]	@ 0x40
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, len, HAL_MAX_DELAY);
 80016d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	4639      	mov	r1, r7
 80016d8:	f04f 33ff 	mov.w	r3, #4294967295
 80016dc:	4819      	ldr	r0, [pc, #100]	@ (8001744 <transmit_adc_data+0x88>)
 80016de:	f004 f91b 	bl	8005918 <HAL_UART_Transmit>

  // Send ADC data points
  for (int i = 0; i < FFT_SIZE*TRANS_WINDOWS; i++) {
 80016e2:	2300      	movs	r3, #0
 80016e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80016e6:	e014      	b.n	8001712 <transmit_adc_data+0x56>
    len = sprintf(uart_buf, "%d,%d\r\n", i, trans_arr[i]);
 80016e8:	4a17      	ldr	r2, [pc, #92]	@ (8001748 <transmit_adc_data+0x8c>)
 80016ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f0:	4638      	mov	r0, r7
 80016f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80016f4:	4915      	ldr	r1, [pc, #84]	@ (800174c <transmit_adc_data+0x90>)
 80016f6:	f006 fbc5 	bl	8007e84 <siprintf>
 80016fa:	6438      	str	r0, [r7, #64]	@ 0x40
    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, len, HAL_MAX_DELAY);
 80016fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016fe:	b29a      	uxth	r2, r3
 8001700:	4639      	mov	r1, r7
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	480f      	ldr	r0, [pc, #60]	@ (8001744 <transmit_adc_data+0x88>)
 8001708:	f004 f906 	bl	8005918 <HAL_UART_Transmit>
  for (int i = 0; i < FFT_SIZE*TRANS_WINDOWS; i++) {
 800170c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800170e:	3301      	adds	r3, #1
 8001710:	647b      	str	r3, [r7, #68]	@ 0x44
 8001712:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001714:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001718:	dbe6      	blt.n	80016e8 <transmit_adc_data+0x2c>
  }

  // Send footer
  len = sprintf(uart_buf, "ADC_DATA_END\r\n");
 800171a:	463b      	mov	r3, r7
 800171c:	490c      	ldr	r1, [pc, #48]	@ (8001750 <transmit_adc_data+0x94>)
 800171e:	4618      	mov	r0, r3
 8001720:	f006 fbb0 	bl	8007e84 <siprintf>
 8001724:	6438      	str	r0, [r7, #64]	@ 0x40
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, len, HAL_MAX_DELAY);
 8001726:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001728:	b29a      	uxth	r2, r3
 800172a:	4639      	mov	r1, r7
 800172c:	f04f 33ff 	mov.w	r3, #4294967295
 8001730:	4804      	ldr	r0, [pc, #16]	@ (8001744 <transmit_adc_data+0x88>)
 8001732:	f004 f8f1 	bl	8005918 <HAL_UART_Transmit>
}
 8001736:	bf00      	nop
 8001738:	3748      	adds	r7, #72	@ 0x48
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	0800a148 	.word	0x0800a148
 8001744:	2000033c 	.word	0x2000033c
 8001748:	20004414 	.word	0x20004414
 800174c:	0800a15c 	.word	0x0800a15c
 8001750:	0800a164 	.word	0x0800a164

08001754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001758:	b672      	cpsid	i
}
 800175a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <Error_Handler+0x8>

08001760 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	4b0f      	ldr	r3, [pc, #60]	@ (80017a4 <HAL_MspInit+0x44>)
 8001768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800176a:	4a0e      	ldr	r2, [pc, #56]	@ (80017a4 <HAL_MspInit+0x44>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6613      	str	r3, [r2, #96]	@ 0x60
 8001772:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <HAL_MspInit+0x44>)
 8001774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <HAL_MspInit+0x44>)
 8001780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001782:	4a08      	ldr	r2, [pc, #32]	@ (80017a4 <HAL_MspInit+0x44>)
 8001784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001788:	6593      	str	r3, [r2, #88]	@ 0x58
 800178a:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <HAL_MspInit+0x44>)
 800178c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000

080017a8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b09e      	sub	sp, #120	@ 0x78
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017c0:	f107 0310 	add.w	r3, r7, #16
 80017c4:	2254      	movs	r2, #84	@ 0x54
 80017c6:	2100      	movs	r1, #0
 80017c8:	4618      	mov	r0, r3
 80017ca:	f006 fbc0 	bl	8007f4e <memset>
  if(hadc->Instance==ADC1)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a3b      	ldr	r2, [pc, #236]	@ (80018c0 <HAL_ADC_MspInit+0x118>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d16e      	bne.n	80018b6 <HAL_ADC_MspInit+0x10e>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80017d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017dc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80017de:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80017e2:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80017e4:	2301      	movs	r3, #1
 80017e6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80017e8:	2301      	movs	r3, #1
 80017ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80017ec:	2310      	movs	r3, #16
 80017ee:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80017f0:	2307      	movs	r3, #7
 80017f2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80017f4:	2302      	movs	r3, #2
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80017f8:	2302      	movs	r3, #2
 80017fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80017fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001800:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001802:	f107 0310 	add.w	r3, r7, #16
 8001806:	4618      	mov	r0, r3
 8001808:	f002 ff08 	bl	800461c <HAL_RCCEx_PeriphCLKConfig>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001812:	f7ff ff9f 	bl	8001754 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001816:	4b2b      	ldr	r3, [pc, #172]	@ (80018c4 <HAL_ADC_MspInit+0x11c>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181a:	4a2a      	ldr	r2, [pc, #168]	@ (80018c4 <HAL_ADC_MspInit+0x11c>)
 800181c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001822:	4b28      	ldr	r3, [pc, #160]	@ (80018c4 <HAL_ADC_MspInit+0x11c>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001826:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	4b25      	ldr	r3, [pc, #148]	@ (80018c4 <HAL_ADC_MspInit+0x11c>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001832:	4a24      	ldr	r2, [pc, #144]	@ (80018c4 <HAL_ADC_MspInit+0x11c>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800183a:	4b22      	ldr	r3, [pc, #136]	@ (80018c4 <HAL_ADC_MspInit+0x11c>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001846:	2308      	movs	r3, #8
 8001848:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800184a:	230b      	movs	r3, #11
 800184c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001852:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001856:	4619      	mov	r1, r3
 8001858:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800185c:	f001 feb0 	bl	80035c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001860:	4b19      	ldr	r3, [pc, #100]	@ (80018c8 <HAL_ADC_MspInit+0x120>)
 8001862:	4a1a      	ldr	r2, [pc, #104]	@ (80018cc <HAL_ADC_MspInit+0x124>)
 8001864:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001866:	4b18      	ldr	r3, [pc, #96]	@ (80018c8 <HAL_ADC_MspInit+0x120>)
 8001868:	2200      	movs	r2, #0
 800186a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800186c:	4b16      	ldr	r3, [pc, #88]	@ (80018c8 <HAL_ADC_MspInit+0x120>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001872:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <HAL_ADC_MspInit+0x120>)
 8001874:	2200      	movs	r2, #0
 8001876:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001878:	4b13      	ldr	r3, [pc, #76]	@ (80018c8 <HAL_ADC_MspInit+0x120>)
 800187a:	2280      	movs	r2, #128	@ 0x80
 800187c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800187e:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <HAL_ADC_MspInit+0x120>)
 8001880:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001884:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001886:	4b10      	ldr	r3, [pc, #64]	@ (80018c8 <HAL_ADC_MspInit+0x120>)
 8001888:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800188c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800188e:	4b0e      	ldr	r3, [pc, #56]	@ (80018c8 <HAL_ADC_MspInit+0x120>)
 8001890:	2220      	movs	r2, #32
 8001892:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001894:	4b0c      	ldr	r3, [pc, #48]	@ (80018c8 <HAL_ADC_MspInit+0x120>)
 8001896:	2200      	movs	r2, #0
 8001898:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800189a:	480b      	ldr	r0, [pc, #44]	@ (80018c8 <HAL_ADC_MspInit+0x120>)
 800189c:	f001 fc98 	bl	80031d0 <HAL_DMA_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 80018a6:	f7ff ff55 	bl	8001754 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a06      	ldr	r2, [pc, #24]	@ (80018c8 <HAL_ADC_MspInit+0x120>)
 80018ae:	64da      	str	r2, [r3, #76]	@ 0x4c
 80018b0:	4a05      	ldr	r2, [pc, #20]	@ (80018c8 <HAL_ADC_MspInit+0x120>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80018b6:	bf00      	nop
 80018b8:	3778      	adds	r7, #120	@ 0x78
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	50040000 	.word	0x50040000
 80018c4:	40021000 	.word	0x40021000
 80018c8:	2000025c 	.word	0x2000025c
 80018cc:	40020008 	.word	0x40020008

080018d0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a13      	ldr	r2, [pc, #76]	@ (800192c <HAL_TIM_Base_MspInit+0x5c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d10c      	bne.n	80018fc <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018e2:	4b13      	ldr	r3, [pc, #76]	@ (8001930 <HAL_TIM_Base_MspInit+0x60>)
 80018e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018e6:	4a12      	ldr	r2, [pc, #72]	@ (8001930 <HAL_TIM_Base_MspInit+0x60>)
 80018e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80018ee:	4b10      	ldr	r3, [pc, #64]	@ (8001930 <HAL_TIM_Base_MspInit+0x60>)
 80018f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018fa:	e010      	b.n	800191e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001904:	d10b      	bne.n	800191e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001906:	4b0a      	ldr	r3, [pc, #40]	@ (8001930 <HAL_TIM_Base_MspInit+0x60>)
 8001908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800190a:	4a09      	ldr	r2, [pc, #36]	@ (8001930 <HAL_TIM_Base_MspInit+0x60>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6593      	str	r3, [r2, #88]	@ 0x58
 8001912:	4b07      	ldr	r3, [pc, #28]	@ (8001930 <HAL_TIM_Base_MspInit+0x60>)
 8001914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
}
 800191e:	bf00      	nop
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40012c00 	.word	0x40012c00
 8001930:	40021000 	.word	0x40021000

08001934 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 030c 	add.w	r3, r7, #12
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001954:	d11c      	bne.n	8001990 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <HAL_TIM_MspPostInit+0x64>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195a:	4a0f      	ldr	r2, [pc, #60]	@ (8001998 <HAL_TIM_MspPostInit+0x64>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001962:	4b0d      	ldr	r3, [pc, #52]	@ (8001998 <HAL_TIM_MspPostInit+0x64>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800196e:	2320      	movs	r3, #32
 8001970:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197a:	2300      	movs	r3, #0
 800197c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800197e:	2301      	movs	r3, #1
 8001980:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001982:	f107 030c 	add.w	r3, r7, #12
 8001986:	4619      	mov	r1, r3
 8001988:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800198c:	f001 fe18 	bl	80035c0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001990:	bf00      	nop
 8001992:	3720      	adds	r7, #32
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40021000 	.word	0x40021000

0800199c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b09e      	sub	sp, #120	@ 0x78
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019b4:	f107 0310 	add.w	r3, r7, #16
 80019b8:	2254      	movs	r2, #84	@ 0x54
 80019ba:	2100      	movs	r1, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f006 fac6 	bl	8007f4e <memset>
  if(huart->Instance==USART2)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a3c      	ldr	r2, [pc, #240]	@ (8001ab8 <HAL_UART_MspInit+0x11c>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d171      	bne.n	8001ab0 <HAL_UART_MspInit+0x114>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019cc:	2302      	movs	r3, #2
 80019ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019d0:	2300      	movs	r3, #0
 80019d2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d4:	f107 0310 	add.w	r3, r7, #16
 80019d8:	4618      	mov	r0, r3
 80019da:	f002 fe1f 	bl	800461c <HAL_RCCEx_PeriphCLKConfig>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019e4:	f7ff feb6 	bl	8001754 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019e8:	4b34      	ldr	r3, [pc, #208]	@ (8001abc <HAL_UART_MspInit+0x120>)
 80019ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ec:	4a33      	ldr	r2, [pc, #204]	@ (8001abc <HAL_UART_MspInit+0x120>)
 80019ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80019f4:	4b31      	ldr	r3, [pc, #196]	@ (8001abc <HAL_UART_MspInit+0x120>)
 80019f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a00:	4b2e      	ldr	r3, [pc, #184]	@ (8001abc <HAL_UART_MspInit+0x120>)
 8001a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a04:	4a2d      	ldr	r2, [pc, #180]	@ (8001abc <HAL_UART_MspInit+0x120>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001abc <HAL_UART_MspInit+0x120>)
 8001a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001a18:	2304      	movs	r3, #4
 8001a1a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a24:	2303      	movs	r3, #3
 8001a26:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a28:	2307      	movs	r3, #7
 8001a2a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001a2c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a30:	4619      	mov	r1, r3
 8001a32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a36:	f001 fdc3 	bl	80035c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001a3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a3e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a40:	2302      	movs	r3, #2
 8001a42:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001a50:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a54:	4619      	mov	r1, r3
 8001a56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a5a:	f001 fdb1 	bl	80035c0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001a5e:	4b18      	ldr	r3, [pc, #96]	@ (8001ac0 <HAL_UART_MspInit+0x124>)
 8001a60:	4a18      	ldr	r2, [pc, #96]	@ (8001ac4 <HAL_UART_MspInit+0x128>)
 8001a62:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001a64:	4b16      	ldr	r3, [pc, #88]	@ (8001ac0 <HAL_UART_MspInit+0x124>)
 8001a66:	2202      	movs	r2, #2
 8001a68:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ac0 <HAL_UART_MspInit+0x124>)
 8001a6c:	2210      	movs	r2, #16
 8001a6e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a70:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <HAL_UART_MspInit+0x124>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a76:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <HAL_UART_MspInit+0x124>)
 8001a78:	2280      	movs	r2, #128	@ 0x80
 8001a7a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a7c:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <HAL_UART_MspInit+0x124>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a82:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac0 <HAL_UART_MspInit+0x124>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001a88:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac0 <HAL_UART_MspInit+0x124>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac0 <HAL_UART_MspInit+0x124>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001a94:	480a      	ldr	r0, [pc, #40]	@ (8001ac0 <HAL_UART_MspInit+0x124>)
 8001a96:	f001 fb9b 	bl	80031d0 <HAL_DMA_Init>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8001aa0:	f7ff fe58 	bl	8001754 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a06      	ldr	r2, [pc, #24]	@ (8001ac0 <HAL_UART_MspInit+0x124>)
 8001aa8:	671a      	str	r2, [r3, #112]	@ 0x70
 8001aaa:	4a05      	ldr	r2, [pc, #20]	@ (8001ac0 <HAL_UART_MspInit+0x124>)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001ab0:	bf00      	nop
 8001ab2:	3778      	adds	r7, #120	@ 0x78
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40004400 	.word	0x40004400
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	200003c4 	.word	0x200003c4
 8001ac4:	40020080 	.word	0x40020080

08001ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <NMI_Handler+0x4>

08001ad0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <HardFault_Handler+0x4>

08001ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <MemManage_Handler+0x4>

08001ae0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <BusFault_Handler+0x4>

08001ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <UsageFault_Handler+0x4>

08001af0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b1e:	f000 f96d 	bl	8001dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b2c:	4802      	ldr	r0, [pc, #8]	@ (8001b38 <DMA1_Channel1_IRQHandler+0x10>)
 8001b2e:	f001 fc67 	bl	8003400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	2000025c 	.word	0x2000025c

08001b3c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001b40:	4802      	ldr	r0, [pc, #8]	@ (8001b4c <DMA1_Channel7_IRQHandler+0x10>)
 8001b42:	f001 fc5d 	bl	8003400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200003c4 	.word	0x200003c4

08001b50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return 1;
 8001b54:	2301      	movs	r3, #1
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <_kill>:

int _kill(int pid, int sig)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b6a:	f006 fa43 	bl	8007ff4 <__errno>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2216      	movs	r2, #22
 8001b72:	601a      	str	r2, [r3, #0]
  return -1;
 8001b74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <_exit>:

void _exit (int status)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b88:	f04f 31ff 	mov.w	r1, #4294967295
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ffe7 	bl	8001b60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b92:	bf00      	nop
 8001b94:	e7fd      	b.n	8001b92 <_exit+0x12>

08001b96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	60f8      	str	r0, [r7, #12]
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	e00a      	b.n	8001bbe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ba8:	f3af 8000 	nop.w
 8001bac:	4601      	mov	r1, r0
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	60ba      	str	r2, [r7, #8]
 8001bb4:	b2ca      	uxtb	r2, r1
 8001bb6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	dbf0      	blt.n	8001ba8 <_read+0x12>
  }

  return len;
 8001bc6:	687b      	ldr	r3, [r7, #4]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	e009      	b.n	8001bf6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	1c5a      	adds	r2, r3, #1
 8001be6:	60ba      	str	r2, [r7, #8]
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	dbf1      	blt.n	8001be2 <_write+0x12>
  }
  return len;
 8001bfe:	687b      	ldr	r3, [r7, #4]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <_close>:

int _close(int file)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c30:	605a      	str	r2, [r3, #4]
  return 0;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <_isatty>:

int _isatty(int file)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c48:	2301      	movs	r3, #1
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b085      	sub	sp, #20
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	60f8      	str	r0, [r7, #12]
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c78:	4a14      	ldr	r2, [pc, #80]	@ (8001ccc <_sbrk+0x5c>)
 8001c7a:	4b15      	ldr	r3, [pc, #84]	@ (8001cd0 <_sbrk+0x60>)
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c84:	4b13      	ldr	r3, [pc, #76]	@ (8001cd4 <_sbrk+0x64>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d102      	bne.n	8001c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c8c:	4b11      	ldr	r3, [pc, #68]	@ (8001cd4 <_sbrk+0x64>)
 8001c8e:	4a12      	ldr	r2, [pc, #72]	@ (8001cd8 <_sbrk+0x68>)
 8001c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c92:	4b10      	ldr	r3, [pc, #64]	@ (8001cd4 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d207      	bcs.n	8001cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca0:	f006 f9a8 	bl	8007ff4 <__errno>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001caa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cae:	e009      	b.n	8001cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb0:	4b08      	ldr	r3, [pc, #32]	@ (8001cd4 <_sbrk+0x64>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cb6:	4b07      	ldr	r3, [pc, #28]	@ (8001cd4 <_sbrk+0x64>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	4a05      	ldr	r2, [pc, #20]	@ (8001cd4 <_sbrk+0x64>)
 8001cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	2000c000 	.word	0x2000c000
 8001cd0:	00000400 	.word	0x00000400
 8001cd4:	2000642c 	.word	0x2000642c
 8001cd8:	20006580 	.word	0x20006580

08001cdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ce0:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <SystemInit+0x20>)
 8001ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ce6:	4a05      	ldr	r2, [pc, #20]	@ (8001cfc <SystemInit+0x20>)
 8001ce8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d04:	f7ff ffea 	bl	8001cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d08:	480c      	ldr	r0, [pc, #48]	@ (8001d3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001d0a:	490d      	ldr	r1, [pc, #52]	@ (8001d40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d44 <LoopForever+0xe>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d10:	e002      	b.n	8001d18 <LoopCopyDataInit>

08001d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d16:	3304      	adds	r3, #4

08001d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d1c:	d3f9      	bcc.n	8001d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d20:	4c0a      	ldr	r4, [pc, #40]	@ (8001d4c <LoopForever+0x16>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d24:	e001      	b.n	8001d2a <LoopFillZerobss>

08001d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d28:	3204      	adds	r2, #4

08001d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d2c:	d3fb      	bcc.n	8001d26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d2e:	f006 f967 	bl	8008000 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d32:	f7ff f8cf 	bl	8000ed4 <main>

08001d36 <LoopForever>:

LoopForever:
    b LoopForever
 8001d36:	e7fe      	b.n	8001d36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d38:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d40:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001d44:	0801d52c 	.word	0x0801d52c
  ldr r2, =_sbss
 8001d48:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001d4c:	20006580 	.word	0x20006580

08001d50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d50:	e7fe      	b.n	8001d50 <ADC1_IRQHandler>

08001d52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d5c:	2003      	movs	r0, #3
 8001d5e:	f001 f9f5 	bl	800314c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d62:	2000      	movs	r0, #0
 8001d64:	f000 f80e 	bl	8001d84 <HAL_InitTick>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d002      	beq.n	8001d74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	71fb      	strb	r3, [r7, #7]
 8001d72:	e001      	b.n	8001d78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d74:	f7ff fcf4 	bl	8001760 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d78:	79fb      	ldrb	r3, [r7, #7]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d90:	4b17      	ldr	r3, [pc, #92]	@ (8001df0 <HAL_InitTick+0x6c>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d023      	beq.n	8001de0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d98:	4b16      	ldr	r3, [pc, #88]	@ (8001df4 <HAL_InitTick+0x70>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b14      	ldr	r3, [pc, #80]	@ (8001df0 <HAL_InitTick+0x6c>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	4619      	mov	r1, r3
 8001da2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dae:	4618      	mov	r0, r3
 8001db0:	f001 fa01 	bl	80031b6 <HAL_SYSTICK_Config>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10f      	bne.n	8001dda <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b0f      	cmp	r3, #15
 8001dbe:	d809      	bhi.n	8001dd4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc8:	f001 f9cb 	bl	8003162 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8001df8 <HAL_InitTick+0x74>)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	e007      	b.n	8001de4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	73fb      	strb	r3, [r7, #15]
 8001dd8:	e004      	b.n	8001de4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	73fb      	strb	r3, [r7, #15]
 8001dde:	e001      	b.n	8001de4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000010 	.word	0x20000010
 8001df4:	20000008 	.word	0x20000008
 8001df8:	2000000c 	.word	0x2000000c

08001dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e00:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <HAL_IncTick+0x20>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <HAL_IncTick+0x24>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	4a04      	ldr	r2, [pc, #16]	@ (8001e20 <HAL_IncTick+0x24>)
 8001e0e:	6013      	str	r3, [r2, #0]
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000010 	.word	0x20000010
 8001e20:	20006430 	.word	0x20006430

08001e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return uwTick;
 8001e28:	4b03      	ldr	r3, [pc, #12]	@ (8001e38 <HAL_GetTick+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20006430 	.word	0x20006430

08001e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff ffee 	bl	8001e24 <HAL_GetTick>
 8001e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e54:	d005      	beq.n	8001e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e56:	4b0a      	ldr	r3, [pc, #40]	@ (8001e80 <HAL_Delay+0x44>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4413      	add	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e62:	bf00      	nop
 8001e64:	f7ff ffde 	bl	8001e24 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d8f7      	bhi.n	8001e64 <HAL_Delay+0x28>
  {
  }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000010 	.word	0x20000010

08001e84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
 8001ef8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	3360      	adds	r3, #96	@ 0x60
 8001efe:	461a      	mov	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b08      	ldr	r3, [pc, #32]	@ (8001f30 <LL_ADC_SetOffset+0x44>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f24:	bf00      	nop
 8001f26:	371c      	adds	r7, #28
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	03fff000 	.word	0x03fff000

08001f34 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3360      	adds	r3, #96	@ 0x60
 8001f42:	461a      	mov	r2, r3
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b087      	sub	sp, #28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	3360      	adds	r3, #96	@ 0x60
 8001f70:	461a      	mov	r2, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	431a      	orrs	r2, r3
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f8a:	bf00      	nop
 8001f8c:	371c      	adds	r7, #28
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	3330      	adds	r3, #48	@ 0x30
 8001fcc:	461a      	mov	r2, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	0a1b      	lsrs	r3, r3, #8
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	f003 030c 	and.w	r3, r3, #12
 8001fd8:	4413      	add	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f003 031f 	and.w	r3, r3, #31
 8001fe6:	211f      	movs	r1, #31
 8001fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	401a      	ands	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	0e9b      	lsrs	r3, r3, #26
 8001ff4:	f003 011f 	and.w	r1, r3, #31
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	f003 031f 	and.w	r3, r3, #31
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	431a      	orrs	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002008:	bf00      	nop
 800200a:	371c      	adds	r7, #28
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	3314      	adds	r3, #20
 8002024:	461a      	mov	r2, r3
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	0e5b      	lsrs	r3, r3, #25
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	4413      	add	r3, r2
 8002032:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	0d1b      	lsrs	r3, r3, #20
 800203c:	f003 031f 	and.w	r3, r3, #31
 8002040:	2107      	movs	r1, #7
 8002042:	fa01 f303 	lsl.w	r3, r1, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	401a      	ands	r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	0d1b      	lsrs	r3, r3, #20
 800204e:	f003 031f 	and.w	r3, r3, #31
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	fa01 f303 	lsl.w	r3, r1, r3
 8002058:	431a      	orrs	r2, r3
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800205e:	bf00      	nop
 8002060:	371c      	adds	r7, #28
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002084:	43db      	mvns	r3, r3
 8002086:	401a      	ands	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f003 0318 	and.w	r3, r3, #24
 800208e:	4908      	ldr	r1, [pc, #32]	@ (80020b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002090:	40d9      	lsrs	r1, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	400b      	ands	r3, r1
 8002096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800209a:	431a      	orrs	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	0007ffff 	.word	0x0007ffff

080020b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80020c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6093      	str	r3, [r2, #8]
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80020e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020ec:	d101      	bne.n	80020f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002110:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002114:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002138:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800213c:	d101      	bne.n	8002142 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002160:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002164:	f043 0201 	orr.w	r2, r3, #1
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <LL_ADC_IsEnabled+0x18>
 800218c:	2301      	movs	r3, #1
 800218e:	e000      	b.n	8002192 <LL_ADC_IsEnabled+0x1a>
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80021ae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021b2:	f043 0204 	orr.w	r2, r3, #4
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d101      	bne.n	80021de <LL_ADC_REG_IsConversionOngoing+0x18>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d101      	bne.n	8002204 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002200:	2301      	movs	r3, #1
 8002202:	e000      	b.n	8002206 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800221c:	2300      	movs	r3, #0
 800221e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e126      	b.n	800247c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002238:	2b00      	cmp	r3, #0
 800223a:	d109      	bne.n	8002250 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff fab3 	bl	80017a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff ff3f 	bl	80020d8 <LL_ADC_IsDeepPowerDownEnabled>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d004      	beq.n	800226a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff25 	bl	80020b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff ff5a 	bl	8002128 <LL_ADC_IsInternalRegulatorEnabled>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d115      	bne.n	80022a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff ff3e 	bl	8002100 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002284:	4b7f      	ldr	r3, [pc, #508]	@ (8002484 <HAL_ADC_Init+0x270>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	099b      	lsrs	r3, r3, #6
 800228a:	4a7f      	ldr	r2, [pc, #508]	@ (8002488 <HAL_ADC_Init+0x274>)
 800228c:	fba2 2303 	umull	r2, r3, r2, r3
 8002290:	099b      	lsrs	r3, r3, #6
 8002292:	3301      	adds	r3, #1
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002298:	e002      	b.n	80022a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	3b01      	subs	r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f9      	bne.n	800229a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff ff3c 	bl	8002128 <LL_ADC_IsInternalRegulatorEnabled>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10d      	bne.n	80022d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ba:	f043 0210 	orr.w	r2, r3, #16
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c6:	f043 0201 	orr.w	r2, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff ff75 	bl	80021c6 <LL_ADC_REG_IsConversionOngoing>
 80022dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f040 80bf 	bne.w	800246a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f040 80bb 	bne.w	800246a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80022fc:	f043 0202 	orr.w	r2, r3, #2
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff ff35 	bl	8002178 <LL_ADC_IsEnabled>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10b      	bne.n	800232c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002314:	485d      	ldr	r0, [pc, #372]	@ (800248c <HAL_ADC_Init+0x278>)
 8002316:	f7ff ff2f 	bl	8002178 <LL_ADC_IsEnabled>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d105      	bne.n	800232c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	4619      	mov	r1, r3
 8002326:	485a      	ldr	r0, [pc, #360]	@ (8002490 <HAL_ADC_Init+0x27c>)
 8002328:	f7ff fdac 	bl	8001e84 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	7e5b      	ldrb	r3, [r3, #25]
 8002330:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002336:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800233c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002342:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3020 	ldrb.w	r3, [r3, #32]
 800234a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d106      	bne.n	8002368 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235e:	3b01      	subs	r3, #1
 8002360:	045b      	lsls	r3, r3, #17
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236c:	2b00      	cmp	r3, #0
 800236e:	d009      	beq.n	8002384 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002374:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	4b42      	ldr	r3, [pc, #264]	@ (8002494 <HAL_ADC_Init+0x280>)
 800238c:	4013      	ands	r3, r2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6812      	ldr	r2, [r2, #0]
 8002392:	69b9      	ldr	r1, [r7, #24]
 8002394:	430b      	orrs	r3, r1
 8002396:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff25 	bl	80021ec <LL_ADC_INJ_IsConversionOngoing>
 80023a2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d13d      	bne.n	8002426 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d13a      	bne.n	8002426 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023b4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023bc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80023cc:	f023 0302 	bic.w	r3, r3, #2
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	69b9      	ldr	r1, [r7, #24]
 80023d6:	430b      	orrs	r3, r1
 80023d8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d118      	bne.n	8002416 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80023ee:	f023 0304 	bic.w	r3, r3, #4
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80023fa:	4311      	orrs	r1, r2
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002400:	4311      	orrs	r1, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002406:	430a      	orrs	r2, r1
 8002408:	431a      	orrs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0201 	orr.w	r2, r2, #1
 8002412:	611a      	str	r2, [r3, #16]
 8002414:	e007      	b.n	8002426 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0201 	bic.w	r2, r2, #1
 8002424:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d10c      	bne.n	8002448 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002434:	f023 010f 	bic.w	r1, r3, #15
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	1e5a      	subs	r2, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	631a      	str	r2, [r3, #48]	@ 0x30
 8002446:	e007      	b.n	8002458 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 020f 	bic.w	r2, r2, #15
 8002456:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245c:	f023 0303 	bic.w	r3, r3, #3
 8002460:	f043 0201 	orr.w	r2, r3, #1
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	655a      	str	r2, [r3, #84]	@ 0x54
 8002468:	e007      	b.n	800247a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800246e:	f043 0210 	orr.w	r2, r3, #16
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800247a:	7ffb      	ldrb	r3, [r7, #31]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3720      	adds	r7, #32
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000008 	.word	0x20000008
 8002488:	053e2d63 	.word	0x053e2d63
 800248c:	50040000 	.word	0x50040000
 8002490:	50040300 	.word	0x50040300
 8002494:	fff0c007 	.word	0xfff0c007

08002498 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fe8c 	bl	80021c6 <LL_ADC_REG_IsConversionOngoing>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d167      	bne.n	8002584 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_ADC_Start_DMA+0x2a>
 80024be:	2302      	movs	r3, #2
 80024c0:	e063      	b.n	800258a <HAL_ADC_Start_DMA+0xf2>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 fc54 	bl	8002d78 <ADC_Enable>
 80024d0:	4603      	mov	r3, r0
 80024d2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80024d4:	7dfb      	ldrb	r3, [r7, #23]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d14f      	bne.n	800257a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024de:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80024e2:	f023 0301 	bic.w	r3, r3, #1
 80024e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d006      	beq.n	8002508 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fe:	f023 0206 	bic.w	r2, r3, #6
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	659a      	str	r2, [r3, #88]	@ 0x58
 8002506:	e002      	b.n	800250e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002512:	4a20      	ldr	r2, [pc, #128]	@ (8002594 <HAL_ADC_Start_DMA+0xfc>)
 8002514:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800251a:	4a1f      	ldr	r2, [pc, #124]	@ (8002598 <HAL_ADC_Start_DMA+0x100>)
 800251c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002522:	4a1e      	ldr	r2, [pc, #120]	@ (800259c <HAL_ADC_Start_DMA+0x104>)
 8002524:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	221c      	movs	r2, #28
 800252c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f042 0210 	orr.w	r2, r2, #16
 8002544:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0201 	orr.w	r2, r2, #1
 8002554:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	3340      	adds	r3, #64	@ 0x40
 8002560:	4619      	mov	r1, r3
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f000 feeb 	bl	8003340 <HAL_DMA_Start_IT>
 800256a:	4603      	mov	r3, r0
 800256c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff fe13 	bl	800219e <LL_ADC_REG_StartConversion>
 8002578:	e006      	b.n	8002588 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002582:	e001      	b.n	8002588 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002584:	2302      	movs	r3, #2
 8002586:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002588:	7dfb      	ldrb	r3, [r7, #23]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	08002e85 	.word	0x08002e85
 8002598:	08002f5d 	.word	0x08002f5d
 800259c:	08002f79 	.word	0x08002f79

080025a0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b0b6      	sub	sp, #216	@ 0xd8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x22>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e3bb      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x79a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fdef 	bl	80021c6 <LL_ADC_REG_IsConversionOngoing>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f040 83a0 	bne.w	8002d30 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b05      	cmp	r3, #5
 80025fe:	d824      	bhi.n	800264a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	3b02      	subs	r3, #2
 8002606:	2b03      	cmp	r3, #3
 8002608:	d81b      	bhi.n	8002642 <HAL_ADC_ConfigChannel+0x8e>
 800260a:	a201      	add	r2, pc, #4	@ (adr r2, 8002610 <HAL_ADC_ConfigChannel+0x5c>)
 800260c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002610:	08002621 	.word	0x08002621
 8002614:	08002629 	.word	0x08002629
 8002618:	08002631 	.word	0x08002631
 800261c:	08002639 	.word	0x08002639
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002620:	230c      	movs	r3, #12
 8002622:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002626:	e010      	b.n	800264a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002628:	2312      	movs	r3, #18
 800262a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800262e:	e00c      	b.n	800264a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002630:	2318      	movs	r3, #24
 8002632:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002636:	e008      	b.n	800264a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002638:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800263c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002640:	e003      	b.n	800264a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002642:	2306      	movs	r3, #6
 8002644:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002648:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002658:	f7ff fcb0 	bl	8001fbc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff fdb0 	bl	80021c6 <LL_ADC_REG_IsConversionOngoing>
 8002666:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fdbc 	bl	80021ec <LL_ADC_INJ_IsConversionOngoing>
 8002674:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002678:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800267c:	2b00      	cmp	r3, #0
 800267e:	f040 81a4 	bne.w	80029ca <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002682:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002686:	2b00      	cmp	r3, #0
 8002688:	f040 819f 	bne.w	80029ca <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	6819      	ldr	r1, [r3, #0]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	461a      	mov	r2, r3
 800269a:	f7ff fcbb 	bl	8002014 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	695a      	ldr	r2, [r3, #20]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	08db      	lsrs	r3, r3, #3
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d00a      	beq.n	80026d6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	6919      	ldr	r1, [r3, #16]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026d0:	f7ff fc0c 	bl	8001eec <LL_ADC_SetOffset>
 80026d4:	e179      	b.n	80029ca <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2100      	movs	r1, #0
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fc29 	bl	8001f34 <LL_ADC_GetOffsetChannel>
 80026e2:	4603      	mov	r3, r0
 80026e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10a      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x14e>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2100      	movs	r1, #0
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fc1e 	bl	8001f34 <LL_ADC_GetOffsetChannel>
 80026f8:	4603      	mov	r3, r0
 80026fa:	0e9b      	lsrs	r3, r3, #26
 80026fc:	f003 021f 	and.w	r2, r3, #31
 8002700:	e01e      	b.n	8002740 <HAL_ADC_ConfigChannel+0x18c>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2100      	movs	r1, #0
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fc13 	bl	8001f34 <LL_ADC_GetOffsetChannel>
 800270e:	4603      	mov	r3, r0
 8002710:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002714:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002718:	fa93 f3a3 	rbit	r3, r3
 800271c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002720:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002724:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002728:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002730:	2320      	movs	r3, #32
 8002732:	e004      	b.n	800273e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002734:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002738:	fab3 f383 	clz	r3, r3
 800273c:	b2db      	uxtb	r3, r3
 800273e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002748:	2b00      	cmp	r3, #0
 800274a:	d105      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x1a4>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	0e9b      	lsrs	r3, r3, #26
 8002752:	f003 031f 	and.w	r3, r3, #31
 8002756:	e018      	b.n	800278a <HAL_ADC_ConfigChannel+0x1d6>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002764:	fa93 f3a3 	rbit	r3, r3
 8002768:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800276c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002770:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002774:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800277c:	2320      	movs	r3, #32
 800277e:	e004      	b.n	800278a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002780:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002784:	fab3 f383 	clz	r3, r3
 8002788:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800278a:	429a      	cmp	r2, r3
 800278c:	d106      	bne.n	800279c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2200      	movs	r2, #0
 8002794:	2100      	movs	r1, #0
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fbe2 	bl	8001f60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2101      	movs	r1, #1
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff fbc6 	bl	8001f34 <LL_ADC_GetOffsetChannel>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10a      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x214>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2101      	movs	r1, #1
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fbbb 	bl	8001f34 <LL_ADC_GetOffsetChannel>
 80027be:	4603      	mov	r3, r0
 80027c0:	0e9b      	lsrs	r3, r3, #26
 80027c2:	f003 021f 	and.w	r2, r3, #31
 80027c6:	e01e      	b.n	8002806 <HAL_ADC_ConfigChannel+0x252>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2101      	movs	r1, #1
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fbb0 	bl	8001f34 <LL_ADC_GetOffsetChannel>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80027e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80027ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80027f6:	2320      	movs	r3, #32
 80027f8:	e004      	b.n	8002804 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80027fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800280e:	2b00      	cmp	r3, #0
 8002810:	d105      	bne.n	800281e <HAL_ADC_ConfigChannel+0x26a>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	0e9b      	lsrs	r3, r3, #26
 8002818:	f003 031f 	and.w	r3, r3, #31
 800281c:	e018      	b.n	8002850 <HAL_ADC_ConfigChannel+0x29c>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800282a:	fa93 f3a3 	rbit	r3, r3
 800282e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002832:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002836:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800283a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002842:	2320      	movs	r3, #32
 8002844:	e004      	b.n	8002850 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002846:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800284a:	fab3 f383 	clz	r3, r3
 800284e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002850:	429a      	cmp	r2, r3
 8002852:	d106      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2200      	movs	r2, #0
 800285a:	2101      	movs	r1, #1
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fb7f 	bl	8001f60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2102      	movs	r1, #2
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fb63 	bl	8001f34 <LL_ADC_GetOffsetChannel>
 800286e:	4603      	mov	r3, r0
 8002870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10a      	bne.n	800288e <HAL_ADC_ConfigChannel+0x2da>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2102      	movs	r1, #2
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fb58 	bl	8001f34 <LL_ADC_GetOffsetChannel>
 8002884:	4603      	mov	r3, r0
 8002886:	0e9b      	lsrs	r3, r3, #26
 8002888:	f003 021f 	and.w	r2, r3, #31
 800288c:	e01e      	b.n	80028cc <HAL_ADC_ConfigChannel+0x318>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2102      	movs	r1, #2
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff fb4d 	bl	8001f34 <LL_ADC_GetOffsetChannel>
 800289a:	4603      	mov	r3, r0
 800289c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028a4:	fa93 f3a3 	rbit	r3, r3
 80028a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80028ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80028b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80028bc:	2320      	movs	r3, #32
 80028be:	e004      	b.n	80028ca <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80028c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028c4:	fab3 f383 	clz	r3, r3
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d105      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x330>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	0e9b      	lsrs	r3, r3, #26
 80028de:	f003 031f 	and.w	r3, r3, #31
 80028e2:	e014      	b.n	800290e <HAL_ADC_ConfigChannel+0x35a>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028ec:	fa93 f3a3 	rbit	r3, r3
 80028f0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80028f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80028f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002900:	2320      	movs	r3, #32
 8002902:	e004      	b.n	800290e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002904:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002908:	fab3 f383 	clz	r3, r3
 800290c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800290e:	429a      	cmp	r2, r3
 8002910:	d106      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2200      	movs	r2, #0
 8002918:	2102      	movs	r1, #2
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fb20 	bl	8001f60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2103      	movs	r1, #3
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fb04 	bl	8001f34 <LL_ADC_GetOffsetChannel>
 800292c:	4603      	mov	r3, r0
 800292e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10a      	bne.n	800294c <HAL_ADC_ConfigChannel+0x398>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2103      	movs	r1, #3
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff faf9 	bl	8001f34 <LL_ADC_GetOffsetChannel>
 8002942:	4603      	mov	r3, r0
 8002944:	0e9b      	lsrs	r3, r3, #26
 8002946:	f003 021f 	and.w	r2, r3, #31
 800294a:	e017      	b.n	800297c <HAL_ADC_ConfigChannel+0x3c8>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2103      	movs	r1, #3
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff faee 	bl	8001f34 <LL_ADC_GetOffsetChannel>
 8002958:	4603      	mov	r3, r0
 800295a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002964:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002966:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002968:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800296e:	2320      	movs	r3, #32
 8002970:	e003      	b.n	800297a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002972:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002974:	fab3 f383 	clz	r3, r3
 8002978:	b2db      	uxtb	r3, r3
 800297a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002984:	2b00      	cmp	r3, #0
 8002986:	d105      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x3e0>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	0e9b      	lsrs	r3, r3, #26
 800298e:	f003 031f 	and.w	r3, r3, #31
 8002992:	e011      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x404>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800299c:	fa93 f3a3 	rbit	r3, r3
 80029a0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80029a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029a4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80029a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80029ac:	2320      	movs	r3, #32
 80029ae:	e003      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80029b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d106      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2200      	movs	r2, #0
 80029c2:	2103      	movs	r1, #3
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff facb 	bl	8001f60 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fbd2 	bl	8002178 <LL_ADC_IsEnabled>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f040 8140 	bne.w	8002c5c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6818      	ldr	r0, [r3, #0]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	6819      	ldr	r1, [r3, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	461a      	mov	r2, r3
 80029ea:	f7ff fb3f 	bl	800206c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	4a8f      	ldr	r2, [pc, #572]	@ (8002c30 <HAL_ADC_ConfigChannel+0x67c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	f040 8131 	bne.w	8002c5c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10b      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x46e>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	0e9b      	lsrs	r3, r3, #26
 8002a10:	3301      	adds	r3, #1
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	2b09      	cmp	r3, #9
 8002a18:	bf94      	ite	ls
 8002a1a:	2301      	movls	r3, #1
 8002a1c:	2300      	movhi	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	e019      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x4a2>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a2a:	fa93 f3a3 	rbit	r3, r3
 8002a2e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a32:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002a34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002a3a:	2320      	movs	r3, #32
 8002a3c:	e003      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002a3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	3301      	adds	r3, #1
 8002a48:	f003 031f 	and.w	r3, r3, #31
 8002a4c:	2b09      	cmp	r3, #9
 8002a4e:	bf94      	ite	ls
 8002a50:	2301      	movls	r3, #1
 8002a52:	2300      	movhi	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d079      	beq.n	8002b4e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d107      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x4c2>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	0e9b      	lsrs	r3, r3, #26
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	069b      	lsls	r3, r3, #26
 8002a70:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a74:	e015      	b.n	8002aa2 <HAL_ADC_ConfigChannel+0x4ee>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a7e:	fa93 f3a3 	rbit	r3, r3
 8002a82:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002a84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a86:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002a88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002a8e:	2320      	movs	r3, #32
 8002a90:	e003      	b.n	8002a9a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002a92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a94:	fab3 f383 	clz	r3, r3
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	069b      	lsls	r3, r3, #26
 8002a9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x50e>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	0e9b      	lsrs	r3, r3, #26
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	f003 031f 	and.w	r3, r3, #31
 8002aba:	2101      	movs	r1, #1
 8002abc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac0:	e017      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x53e>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ad2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002ad4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002ada:	2320      	movs	r3, #32
 8002adc:	e003      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002ade:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ae0:	fab3 f383 	clz	r3, r3
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	f003 031f 	and.w	r3, r3, #31
 8002aec:	2101      	movs	r1, #1
 8002aee:	fa01 f303 	lsl.w	r3, r1, r3
 8002af2:	ea42 0103 	orr.w	r1, r2, r3
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10a      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x564>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	0e9b      	lsrs	r3, r3, #26
 8002b08:	3301      	adds	r3, #1
 8002b0a:	f003 021f 	and.w	r2, r3, #31
 8002b0e:	4613      	mov	r3, r2
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	4413      	add	r3, r2
 8002b14:	051b      	lsls	r3, r3, #20
 8002b16:	e018      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x596>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b20:	fa93 f3a3 	rbit	r3, r3
 8002b24:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b28:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002b30:	2320      	movs	r3, #32
 8002b32:	e003      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	f003 021f 	and.w	r2, r3, #31
 8002b42:	4613      	mov	r3, r2
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	4413      	add	r3, r2
 8002b48:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b4a:	430b      	orrs	r3, r1
 8002b4c:	e081      	b.n	8002c52 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d107      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x5b6>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	0e9b      	lsrs	r3, r3, #26
 8002b60:	3301      	adds	r3, #1
 8002b62:	069b      	lsls	r3, r3, #26
 8002b64:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b68:	e015      	b.n	8002b96 <HAL_ADC_ConfigChannel+0x5e2>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b72:	fa93 f3a3 	rbit	r3, r3
 8002b76:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002b82:	2320      	movs	r3, #32
 8002b84:	e003      	b.n	8002b8e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b88:	fab3 f383 	clz	r3, r3
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	3301      	adds	r3, #1
 8002b90:	069b      	lsls	r3, r3, #26
 8002b92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x602>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	0e9b      	lsrs	r3, r3, #26
 8002ba8:	3301      	adds	r3, #1
 8002baa:	f003 031f 	and.w	r3, r3, #31
 8002bae:	2101      	movs	r1, #1
 8002bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb4:	e017      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x632>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	fa93 f3a3 	rbit	r3, r3
 8002bc2:	61bb      	str	r3, [r7, #24]
  return result;
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002bce:	2320      	movs	r3, #32
 8002bd0:	e003      	b.n	8002bda <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	fab3 f383 	clz	r3, r3
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	3301      	adds	r3, #1
 8002bdc:	f003 031f 	and.w	r3, r3, #31
 8002be0:	2101      	movs	r1, #1
 8002be2:	fa01 f303 	lsl.w	r3, r1, r3
 8002be6:	ea42 0103 	orr.w	r1, r2, r3
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10d      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x65e>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	0e9b      	lsrs	r3, r3, #26
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	f003 021f 	and.w	r2, r3, #31
 8002c02:	4613      	mov	r3, r2
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	4413      	add	r3, r2
 8002c08:	3b1e      	subs	r3, #30
 8002c0a:	051b      	lsls	r3, r3, #20
 8002c0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c10:	e01e      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x69c>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	fa93 f3a3 	rbit	r3, r3
 8002c1e:	60fb      	str	r3, [r7, #12]
  return result;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d104      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002c2a:	2320      	movs	r3, #32
 8002c2c:	e006      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x688>
 8002c2e:	bf00      	nop
 8002c30:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	f003 021f 	and.w	r2, r3, #31
 8002c42:	4613      	mov	r3, r2
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	4413      	add	r3, r2
 8002c48:	3b1e      	subs	r3, #30
 8002c4a:	051b      	lsls	r3, r3, #20
 8002c4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c50:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c56:	4619      	mov	r1, r3
 8002c58:	f7ff f9dc 	bl	8002014 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4b3d      	ldr	r3, [pc, #244]	@ (8002d58 <HAL_ADC_ConfigChannel+0x7a4>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d06c      	beq.n	8002d42 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c68:	483c      	ldr	r0, [pc, #240]	@ (8002d5c <HAL_ADC_ConfigChannel+0x7a8>)
 8002c6a:	f7ff f931 	bl	8001ed0 <LL_ADC_GetCommonPathInternalCh>
 8002c6e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a3a      	ldr	r2, [pc, #232]	@ (8002d60 <HAL_ADC_ConfigChannel+0x7ac>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d127      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d121      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a35      	ldr	r2, [pc, #212]	@ (8002d64 <HAL_ADC_ConfigChannel+0x7b0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d157      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c96:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	482f      	ldr	r0, [pc, #188]	@ (8002d5c <HAL_ADC_ConfigChannel+0x7a8>)
 8002c9e:	f7ff f904 	bl	8001eaa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ca2:	4b31      	ldr	r3, [pc, #196]	@ (8002d68 <HAL_ADC_ConfigChannel+0x7b4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	099b      	lsrs	r3, r3, #6
 8002ca8:	4a30      	ldr	r2, [pc, #192]	@ (8002d6c <HAL_ADC_ConfigChannel+0x7b8>)
 8002caa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cae:	099b      	lsrs	r3, r3, #6
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002cbc:	e002      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f9      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cca:	e03a      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a27      	ldr	r2, [pc, #156]	@ (8002d70 <HAL_ADC_ConfigChannel+0x7bc>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d113      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10d      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a1f      	ldr	r2, [pc, #124]	@ (8002d64 <HAL_ADC_ConfigChannel+0x7b0>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d12a      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cf0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4819      	ldr	r0, [pc, #100]	@ (8002d5c <HAL_ADC_ConfigChannel+0x7a8>)
 8002cf8:	f7ff f8d7 	bl	8001eaa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cfc:	e021      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a1c      	ldr	r2, [pc, #112]	@ (8002d74 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d11c      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d116      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a12      	ldr	r2, [pc, #72]	@ (8002d64 <HAL_ADC_ConfigChannel+0x7b0>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d111      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d26:	4619      	mov	r1, r3
 8002d28:	480c      	ldr	r0, [pc, #48]	@ (8002d5c <HAL_ADC_ConfigChannel+0x7a8>)
 8002d2a:	f7ff f8be 	bl	8001eaa <LL_ADC_SetCommonPathInternalCh>
 8002d2e:	e008      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d34:	f043 0220 	orr.w	r2, r3, #32
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d4a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	37d8      	adds	r7, #216	@ 0xd8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	80080000 	.word	0x80080000
 8002d5c:	50040300 	.word	0x50040300
 8002d60:	c7520000 	.word	0xc7520000
 8002d64:	50040000 	.word	0x50040000
 8002d68:	20000008 	.word	0x20000008
 8002d6c:	053e2d63 	.word	0x053e2d63
 8002d70:	cb840000 	.word	0xcb840000
 8002d74:	80000001 	.word	0x80000001

08002d78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff f9f5 	bl	8002178 <LL_ADC_IsEnabled>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d169      	bne.n	8002e68 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	4b36      	ldr	r3, [pc, #216]	@ (8002e74 <ADC_Enable+0xfc>)
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00d      	beq.n	8002dbe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da6:	f043 0210 	orr.w	r2, r3, #16
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db2:	f043 0201 	orr.w	r2, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e055      	b.n	8002e6a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff f9c4 	bl	8002150 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002dc8:	482b      	ldr	r0, [pc, #172]	@ (8002e78 <ADC_Enable+0x100>)
 8002dca:	f7ff f881 	bl	8001ed0 <LL_ADC_GetCommonPathInternalCh>
 8002dce:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002dd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d013      	beq.n	8002e00 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dd8:	4b28      	ldr	r3, [pc, #160]	@ (8002e7c <ADC_Enable+0x104>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	099b      	lsrs	r3, r3, #6
 8002dde:	4a28      	ldr	r2, [pc, #160]	@ (8002e80 <ADC_Enable+0x108>)
 8002de0:	fba2 2303 	umull	r2, r3, r2, r3
 8002de4:	099b      	lsrs	r3, r3, #6
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	4613      	mov	r3, r2
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002df2:	e002      	b.n	8002dfa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f9      	bne.n	8002df4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e00:	f7ff f810 	bl	8001e24 <HAL_GetTick>
 8002e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e06:	e028      	b.n	8002e5a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff f9b3 	bl	8002178 <LL_ADC_IsEnabled>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d104      	bne.n	8002e22 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff f997 	bl	8002150 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e22:	f7fe ffff 	bl	8001e24 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d914      	bls.n	8002e5a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d00d      	beq.n	8002e5a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e42:	f043 0210 	orr.w	r2, r3, #16
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4e:	f043 0201 	orr.w	r2, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e007      	b.n	8002e6a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d1cf      	bne.n	8002e08 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	8000003f 	.word	0x8000003f
 8002e78:	50040300 	.word	0x50040300
 8002e7c:	20000008 	.word	0x20000008
 8002e80:	053e2d63 	.word	0x053e2d63

08002e84 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e90:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e96:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d14b      	bne.n	8002f36 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0308 	and.w	r3, r3, #8
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d021      	beq.n	8002efc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff f86a 	bl	8001f96 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d032      	beq.n	8002f2e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d12b      	bne.n	8002f2e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eda:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d11f      	bne.n	8002f2e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef2:	f043 0201 	orr.w	r2, r3, #1
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	655a      	str	r2, [r3, #84]	@ 0x54
 8002efa:	e018      	b.n	8002f2e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d111      	bne.n	8002f2e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d105      	bne.n	8002f2e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f26:	f043 0201 	orr.w	r2, r3, #1
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f7fe fab0 	bl	8001494 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f34:	e00e      	b.n	8002f54 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3a:	f003 0310 	and.w	r3, r3, #16
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f7ff fb2c 	bl	80025a0 <HAL_ADC_ErrorCallback>
}
 8002f48:	e004      	b.n	8002f54 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	4798      	blx	r3
}
 8002f54:	bf00      	nop
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f68:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f7fe fa38 	bl	80013e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f70:	bf00      	nop
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f84:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f96:	f043 0204 	orr.w	r2, r3, #4
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f7ff fafe 	bl	80025a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fa4:	bf00      	nop
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fc8:	4013      	ands	r3, r2
 8002fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fde:	4a04      	ldr	r2, [pc, #16]	@ (8002ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	60d3      	str	r3, [r2, #12]
}
 8002fe4:	bf00      	nop
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ff8:	4b04      	ldr	r3, [pc, #16]	@ (800300c <__NVIC_GetPriorityGrouping+0x18>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	0a1b      	lsrs	r3, r3, #8
 8002ffe:	f003 0307 	and.w	r3, r3, #7
}
 8003002:	4618      	mov	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301e:	2b00      	cmp	r3, #0
 8003020:	db0b      	blt.n	800303a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	f003 021f 	and.w	r2, r3, #31
 8003028:	4907      	ldr	r1, [pc, #28]	@ (8003048 <__NVIC_EnableIRQ+0x38>)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	2001      	movs	r0, #1
 8003032:	fa00 f202 	lsl.w	r2, r0, r2
 8003036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	e000e100 	.word	0xe000e100

0800304c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	6039      	str	r1, [r7, #0]
 8003056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305c:	2b00      	cmp	r3, #0
 800305e:	db0a      	blt.n	8003076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	b2da      	uxtb	r2, r3
 8003064:	490c      	ldr	r1, [pc, #48]	@ (8003098 <__NVIC_SetPriority+0x4c>)
 8003066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306a:	0112      	lsls	r2, r2, #4
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	440b      	add	r3, r1
 8003070:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003074:	e00a      	b.n	800308c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	b2da      	uxtb	r2, r3
 800307a:	4908      	ldr	r1, [pc, #32]	@ (800309c <__NVIC_SetPriority+0x50>)
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	3b04      	subs	r3, #4
 8003084:	0112      	lsls	r2, r2, #4
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	440b      	add	r3, r1
 800308a:	761a      	strb	r2, [r3, #24]
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	e000e100 	.word	0xe000e100
 800309c:	e000ed00 	.word	0xe000ed00

080030a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b089      	sub	sp, #36	@ 0x24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f1c3 0307 	rsb	r3, r3, #7
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	bf28      	it	cs
 80030be:	2304      	movcs	r3, #4
 80030c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	3304      	adds	r3, #4
 80030c6:	2b06      	cmp	r3, #6
 80030c8:	d902      	bls.n	80030d0 <NVIC_EncodePriority+0x30>
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	3b03      	subs	r3, #3
 80030ce:	e000      	b.n	80030d2 <NVIC_EncodePriority+0x32>
 80030d0:	2300      	movs	r3, #0
 80030d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d4:	f04f 32ff 	mov.w	r2, #4294967295
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43da      	mvns	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	401a      	ands	r2, r3
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030e8:	f04f 31ff 	mov.w	r1, #4294967295
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	fa01 f303 	lsl.w	r3, r1, r3
 80030f2:	43d9      	mvns	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f8:	4313      	orrs	r3, r2
         );
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3724      	adds	r7, #36	@ 0x24
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
	...

08003108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3b01      	subs	r3, #1
 8003114:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003118:	d301      	bcc.n	800311e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800311a:	2301      	movs	r3, #1
 800311c:	e00f      	b.n	800313e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800311e:	4a0a      	ldr	r2, [pc, #40]	@ (8003148 <SysTick_Config+0x40>)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3b01      	subs	r3, #1
 8003124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003126:	210f      	movs	r1, #15
 8003128:	f04f 30ff 	mov.w	r0, #4294967295
 800312c:	f7ff ff8e 	bl	800304c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003130:	4b05      	ldr	r3, [pc, #20]	@ (8003148 <SysTick_Config+0x40>)
 8003132:	2200      	movs	r2, #0
 8003134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003136:	4b04      	ldr	r3, [pc, #16]	@ (8003148 <SysTick_Config+0x40>)
 8003138:	2207      	movs	r2, #7
 800313a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	e000e010 	.word	0xe000e010

0800314c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff ff29 	bl	8002fac <__NVIC_SetPriorityGrouping>
}
 800315a:	bf00      	nop
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b086      	sub	sp, #24
 8003166:	af00      	add	r7, sp, #0
 8003168:	4603      	mov	r3, r0
 800316a:	60b9      	str	r1, [r7, #8]
 800316c:	607a      	str	r2, [r7, #4]
 800316e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003174:	f7ff ff3e 	bl	8002ff4 <__NVIC_GetPriorityGrouping>
 8003178:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	68b9      	ldr	r1, [r7, #8]
 800317e:	6978      	ldr	r0, [r7, #20]
 8003180:	f7ff ff8e 	bl	80030a0 <NVIC_EncodePriority>
 8003184:	4602      	mov	r2, r0
 8003186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800318a:	4611      	mov	r1, r2
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff ff5d 	bl	800304c <__NVIC_SetPriority>
}
 8003192:	bf00      	nop
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b082      	sub	sp, #8
 800319e:	af00      	add	r7, sp, #0
 80031a0:	4603      	mov	r3, r0
 80031a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff ff31 	bl	8003010 <__NVIC_EnableIRQ>
}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b082      	sub	sp, #8
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff ffa2 	bl	8003108 <SysTick_Config>
 80031c4:	4603      	mov	r3, r0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e098      	b.n	8003314 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	461a      	mov	r2, r3
 80031e8:	4b4d      	ldr	r3, [pc, #308]	@ (8003320 <HAL_DMA_Init+0x150>)
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d80f      	bhi.n	800320e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	4b4b      	ldr	r3, [pc, #300]	@ (8003324 <HAL_DMA_Init+0x154>)
 80031f6:	4413      	add	r3, r2
 80031f8:	4a4b      	ldr	r2, [pc, #300]	@ (8003328 <HAL_DMA_Init+0x158>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	091b      	lsrs	r3, r3, #4
 8003200:	009a      	lsls	r2, r3, #2
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a48      	ldr	r2, [pc, #288]	@ (800332c <HAL_DMA_Init+0x15c>)
 800320a:	641a      	str	r2, [r3, #64]	@ 0x40
 800320c:	e00e      	b.n	800322c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	4b46      	ldr	r3, [pc, #280]	@ (8003330 <HAL_DMA_Init+0x160>)
 8003216:	4413      	add	r3, r2
 8003218:	4a43      	ldr	r2, [pc, #268]	@ (8003328 <HAL_DMA_Init+0x158>)
 800321a:	fba2 2303 	umull	r2, r3, r2, r3
 800321e:	091b      	lsrs	r3, r3, #4
 8003220:	009a      	lsls	r2, r3, #2
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a42      	ldr	r2, [pc, #264]	@ (8003334 <HAL_DMA_Init+0x164>)
 800322a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003246:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003250:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800325c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003268:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003286:	d039      	beq.n	80032fc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328c:	4a27      	ldr	r2, [pc, #156]	@ (800332c <HAL_DMA_Init+0x15c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d11a      	bne.n	80032c8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003292:	4b29      	ldr	r3, [pc, #164]	@ (8003338 <HAL_DMA_Init+0x168>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329a:	f003 031c 	and.w	r3, r3, #28
 800329e:	210f      	movs	r1, #15
 80032a0:	fa01 f303 	lsl.w	r3, r1, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	4924      	ldr	r1, [pc, #144]	@ (8003338 <HAL_DMA_Init+0x168>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80032ac:	4b22      	ldr	r3, [pc, #136]	@ (8003338 <HAL_DMA_Init+0x168>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6859      	ldr	r1, [r3, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b8:	f003 031c 	and.w	r3, r3, #28
 80032bc:	fa01 f303 	lsl.w	r3, r1, r3
 80032c0:	491d      	ldr	r1, [pc, #116]	@ (8003338 <HAL_DMA_Init+0x168>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	600b      	str	r3, [r1, #0]
 80032c6:	e019      	b.n	80032fc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80032c8:	4b1c      	ldr	r3, [pc, #112]	@ (800333c <HAL_DMA_Init+0x16c>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d0:	f003 031c 	and.w	r3, r3, #28
 80032d4:	210f      	movs	r1, #15
 80032d6:	fa01 f303 	lsl.w	r3, r1, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	4917      	ldr	r1, [pc, #92]	@ (800333c <HAL_DMA_Init+0x16c>)
 80032de:	4013      	ands	r3, r2
 80032e0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80032e2:	4b16      	ldr	r3, [pc, #88]	@ (800333c <HAL_DMA_Init+0x16c>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6859      	ldr	r1, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ee:	f003 031c 	and.w	r3, r3, #28
 80032f2:	fa01 f303 	lsl.w	r3, r1, r3
 80032f6:	4911      	ldr	r1, [pc, #68]	@ (800333c <HAL_DMA_Init+0x16c>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	40020407 	.word	0x40020407
 8003324:	bffdfff8 	.word	0xbffdfff8
 8003328:	cccccccd 	.word	0xcccccccd
 800332c:	40020000 	.word	0x40020000
 8003330:	bffdfbf8 	.word	0xbffdfbf8
 8003334:	40020400 	.word	0x40020400
 8003338:	400200a8 	.word	0x400200a8
 800333c:	400204a8 	.word	0x400204a8

08003340 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
 800334c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_DMA_Start_IT+0x20>
 800335c:	2302      	movs	r3, #2
 800335e:	e04b      	b.n	80033f8 <HAL_DMA_Start_IT+0xb8>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b01      	cmp	r3, #1
 8003372:	d13a      	bne.n	80033ea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0201 	bic.w	r2, r2, #1
 8003390:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	68b9      	ldr	r1, [r7, #8]
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f8e0 	bl	800355e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d008      	beq.n	80033b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 020e 	orr.w	r2, r2, #14
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	e00f      	b.n	80033d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0204 	bic.w	r2, r2, #4
 80033c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 020a 	orr.w	r2, r2, #10
 80033d6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0201 	orr.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	e005      	b.n	80033f6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80033f2:	2302      	movs	r3, #2
 80033f4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80033f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341c:	f003 031c 	and.w	r3, r3, #28
 8003420:	2204      	movs	r2, #4
 8003422:	409a      	lsls	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4013      	ands	r3, r2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d026      	beq.n	800347a <HAL_DMA_IRQHandler+0x7a>
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	2b00      	cmp	r3, #0
 8003434:	d021      	beq.n	800347a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0320 	and.w	r3, r3, #32
 8003440:	2b00      	cmp	r3, #0
 8003442:	d107      	bne.n	8003454 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0204 	bic.w	r2, r2, #4
 8003452:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003458:	f003 021c 	and.w	r2, r3, #28
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003460:	2104      	movs	r1, #4
 8003462:	fa01 f202 	lsl.w	r2, r1, r2
 8003466:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346c:	2b00      	cmp	r3, #0
 800346e:	d071      	beq.n	8003554 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003478:	e06c      	b.n	8003554 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347e:	f003 031c 	and.w	r3, r3, #28
 8003482:	2202      	movs	r2, #2
 8003484:	409a      	lsls	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4013      	ands	r3, r2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d02e      	beq.n	80034ec <HAL_DMA_IRQHandler+0xec>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d029      	beq.n	80034ec <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10b      	bne.n	80034be <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 020a 	bic.w	r2, r2, #10
 80034b4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c2:	f003 021c 	and.w	r2, r3, #28
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ca:	2102      	movs	r1, #2
 80034cc:	fa01 f202 	lsl.w	r2, r1, r2
 80034d0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d038      	beq.n	8003554 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80034ea:	e033      	b.n	8003554 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f0:	f003 031c 	and.w	r3, r3, #28
 80034f4:	2208      	movs	r2, #8
 80034f6:	409a      	lsls	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d02a      	beq.n	8003556 <HAL_DMA_IRQHandler+0x156>
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d025      	beq.n	8003556 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 020e 	bic.w	r2, r2, #14
 8003518:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351e:	f003 021c 	and.w	r2, r3, #28
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	2101      	movs	r1, #1
 8003528:	fa01 f202 	lsl.w	r2, r1, r2
 800352c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003548:	2b00      	cmp	r3, #0
 800354a:	d004      	beq.n	8003556 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003554:	bf00      	nop
 8003556:	bf00      	nop
}
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800355e:	b480      	push	{r7}
 8003560:	b085      	sub	sp, #20
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
 800356a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003570:	f003 021c 	and.w	r2, r3, #28
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003578:	2101      	movs	r1, #1
 800357a:	fa01 f202 	lsl.w	r2, r1, r2
 800357e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	2b10      	cmp	r3, #16
 800358e:	d108      	bne.n	80035a2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80035a0:	e007      	b.n	80035b2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	60da      	str	r2, [r3, #12]
}
 80035b2:	bf00      	nop
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
	...

080035c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035ce:	e148      	b.n	8003862 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	2101      	movs	r1, #1
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	fa01 f303 	lsl.w	r3, r1, r3
 80035dc:	4013      	ands	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 813a 	beq.w	800385c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d005      	beq.n	8003600 <HAL_GPIO_Init+0x40>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f003 0303 	and.w	r3, r3, #3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d130      	bne.n	8003662 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	2203      	movs	r2, #3
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	43db      	mvns	r3, r3
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	4013      	ands	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003636:	2201      	movs	r2, #1
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43db      	mvns	r3, r3
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4013      	ands	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	091b      	lsrs	r3, r3, #4
 800364c:	f003 0201 	and.w	r2, r3, #1
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	2b03      	cmp	r3, #3
 800366c:	d017      	beq.n	800369e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	2203      	movs	r2, #3
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	43db      	mvns	r3, r3
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4013      	ands	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d123      	bne.n	80036f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	08da      	lsrs	r2, r3, #3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3208      	adds	r2, #8
 80036b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	220f      	movs	r2, #15
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	43db      	mvns	r3, r3
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	4013      	ands	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	691a      	ldr	r2, [r3, #16]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	08da      	lsrs	r2, r3, #3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3208      	adds	r2, #8
 80036ec:	6939      	ldr	r1, [r7, #16]
 80036ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	2203      	movs	r2, #3
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43db      	mvns	r3, r3
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	4013      	ands	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f003 0203 	and.w	r2, r3, #3
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 8094 	beq.w	800385c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003734:	4b52      	ldr	r3, [pc, #328]	@ (8003880 <HAL_GPIO_Init+0x2c0>)
 8003736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003738:	4a51      	ldr	r2, [pc, #324]	@ (8003880 <HAL_GPIO_Init+0x2c0>)
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003740:	4b4f      	ldr	r3, [pc, #316]	@ (8003880 <HAL_GPIO_Init+0x2c0>)
 8003742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	60bb      	str	r3, [r7, #8]
 800374a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800374c:	4a4d      	ldr	r2, [pc, #308]	@ (8003884 <HAL_GPIO_Init+0x2c4>)
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	089b      	lsrs	r3, r3, #2
 8003752:	3302      	adds	r3, #2
 8003754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003758:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f003 0303 	and.w	r3, r3, #3
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	220f      	movs	r2, #15
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	43db      	mvns	r3, r3
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4013      	ands	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003776:	d00d      	beq.n	8003794 <HAL_GPIO_Init+0x1d4>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a43      	ldr	r2, [pc, #268]	@ (8003888 <HAL_GPIO_Init+0x2c8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d007      	beq.n	8003790 <HAL_GPIO_Init+0x1d0>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a42      	ldr	r2, [pc, #264]	@ (800388c <HAL_GPIO_Init+0x2cc>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d101      	bne.n	800378c <HAL_GPIO_Init+0x1cc>
 8003788:	2302      	movs	r3, #2
 800378a:	e004      	b.n	8003796 <HAL_GPIO_Init+0x1d6>
 800378c:	2307      	movs	r3, #7
 800378e:	e002      	b.n	8003796 <HAL_GPIO_Init+0x1d6>
 8003790:	2301      	movs	r3, #1
 8003792:	e000      	b.n	8003796 <HAL_GPIO_Init+0x1d6>
 8003794:	2300      	movs	r3, #0
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	f002 0203 	and.w	r2, r2, #3
 800379c:	0092      	lsls	r2, r2, #2
 800379e:	4093      	lsls	r3, r2
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037a6:	4937      	ldr	r1, [pc, #220]	@ (8003884 <HAL_GPIO_Init+0x2c4>)
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	089b      	lsrs	r3, r3, #2
 80037ac:	3302      	adds	r3, #2
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037b4:	4b36      	ldr	r3, [pc, #216]	@ (8003890 <HAL_GPIO_Init+0x2d0>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	43db      	mvns	r3, r3
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4013      	ands	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037d8:	4a2d      	ldr	r2, [pc, #180]	@ (8003890 <HAL_GPIO_Init+0x2d0>)
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037de:	4b2c      	ldr	r3, [pc, #176]	@ (8003890 <HAL_GPIO_Init+0x2d0>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	43db      	mvns	r3, r3
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4013      	ands	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003802:	4a23      	ldr	r2, [pc, #140]	@ (8003890 <HAL_GPIO_Init+0x2d0>)
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003808:	4b21      	ldr	r3, [pc, #132]	@ (8003890 <HAL_GPIO_Init+0x2d0>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	43db      	mvns	r3, r3
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	4013      	ands	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800382c:	4a18      	ldr	r2, [pc, #96]	@ (8003890 <HAL_GPIO_Init+0x2d0>)
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003832:	4b17      	ldr	r3, [pc, #92]	@ (8003890 <HAL_GPIO_Init+0x2d0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	43db      	mvns	r3, r3
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4013      	ands	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4313      	orrs	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003856:	4a0e      	ldr	r2, [pc, #56]	@ (8003890 <HAL_GPIO_Init+0x2d0>)
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	3301      	adds	r3, #1
 8003860:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	fa22 f303 	lsr.w	r3, r2, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	f47f aeaf 	bne.w	80035d0 <HAL_GPIO_Init+0x10>
  }
}
 8003872:	bf00      	nop
 8003874:	bf00      	nop
 8003876:	371c      	adds	r7, #28
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	40021000 	.word	0x40021000
 8003884:	40010000 	.word	0x40010000
 8003888:	48000400 	.word	0x48000400
 800388c:	48000800 	.word	0x48000800
 8003890:	40010400 	.word	0x40010400

08003894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	807b      	strh	r3, [r7, #2]
 80038a0:	4613      	mov	r3, r2
 80038a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038a4:	787b      	ldrb	r3, [r7, #1]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038aa:	887a      	ldrh	r2, [r7, #2]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038b0:	e002      	b.n	80038b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038b2:	887a      	ldrh	r2, [r7, #2]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038c8:	4b05      	ldr	r3, [pc, #20]	@ (80038e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a04      	ldr	r2, [pc, #16]	@ (80038e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038d2:	6013      	str	r3, [r2, #0]
}
 80038d4:	bf00      	nop
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40007000 	.word	0x40007000

080038e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038e8:	4b04      	ldr	r3, [pc, #16]	@ (80038fc <HAL_PWREx_GetVoltageRange+0x18>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40007000 	.word	0x40007000

08003900 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800390e:	d130      	bne.n	8003972 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003910:	4b23      	ldr	r3, [pc, #140]	@ (80039a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800391c:	d038      	beq.n	8003990 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800391e:	4b20      	ldr	r3, [pc, #128]	@ (80039a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003926:	4a1e      	ldr	r2, [pc, #120]	@ (80039a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003928:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800392c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800392e:	4b1d      	ldr	r3, [pc, #116]	@ (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2232      	movs	r2, #50	@ 0x32
 8003934:	fb02 f303 	mul.w	r3, r2, r3
 8003938:	4a1b      	ldr	r2, [pc, #108]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800393a:	fba2 2303 	umull	r2, r3, r2, r3
 800393e:	0c9b      	lsrs	r3, r3, #18
 8003940:	3301      	adds	r3, #1
 8003942:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003944:	e002      	b.n	800394c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	3b01      	subs	r3, #1
 800394a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800394c:	4b14      	ldr	r3, [pc, #80]	@ (80039a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003954:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003958:	d102      	bne.n	8003960 <HAL_PWREx_ControlVoltageScaling+0x60>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1f2      	bne.n	8003946 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003960:	4b0f      	ldr	r3, [pc, #60]	@ (80039a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003968:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800396c:	d110      	bne.n	8003990 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e00f      	b.n	8003992 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003972:	4b0b      	ldr	r3, [pc, #44]	@ (80039a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800397a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800397e:	d007      	beq.n	8003990 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003980:	4b07      	ldr	r3, [pc, #28]	@ (80039a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003988:	4a05      	ldr	r2, [pc, #20]	@ (80039a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800398a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800398e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40007000 	.word	0x40007000
 80039a4:	20000008 	.word	0x20000008
 80039a8:	431bde83 	.word	0x431bde83

080039ac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d102      	bne.n	80039c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	f000 bc02 	b.w	80041c4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039c0:	4b96      	ldr	r3, [pc, #600]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 030c 	and.w	r3, r3, #12
 80039c8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039ca:	4b94      	ldr	r3, [pc, #592]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80e4 	beq.w	8003baa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d007      	beq.n	80039f8 <HAL_RCC_OscConfig+0x4c>
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	2b0c      	cmp	r3, #12
 80039ec:	f040 808b 	bne.w	8003b06 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	f040 8087 	bne.w	8003b06 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039f8:	4b88      	ldr	r3, [pc, #544]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_OscConfig+0x64>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e3d9      	b.n	80041c4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1a      	ldr	r2, [r3, #32]
 8003a14:	4b81      	ldr	r3, [pc, #516]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d004      	beq.n	8003a2a <HAL_RCC_OscConfig+0x7e>
 8003a20:	4b7e      	ldr	r3, [pc, #504]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a28:	e005      	b.n	8003a36 <HAL_RCC_OscConfig+0x8a>
 8003a2a:	4b7c      	ldr	r3, [pc, #496]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a30:	091b      	lsrs	r3, r3, #4
 8003a32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d223      	bcs.n	8003a82 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fd8c 	bl	800455c <RCC_SetFlashLatencyFromMSIRange>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e3ba      	b.n	80041c4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a4e:	4b73      	ldr	r3, [pc, #460]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a72      	ldr	r2, [pc, #456]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003a54:	f043 0308 	orr.w	r3, r3, #8
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	4b70      	ldr	r3, [pc, #448]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	496d      	ldr	r1, [pc, #436]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a6c:	4b6b      	ldr	r3, [pc, #428]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	021b      	lsls	r3, r3, #8
 8003a7a:	4968      	ldr	r1, [pc, #416]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	604b      	str	r3, [r1, #4]
 8003a80:	e025      	b.n	8003ace <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a82:	4b66      	ldr	r3, [pc, #408]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a65      	ldr	r2, [pc, #404]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003a88:	f043 0308 	orr.w	r3, r3, #8
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	4b63      	ldr	r3, [pc, #396]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	4960      	ldr	r1, [pc, #384]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aa0:	4b5e      	ldr	r3, [pc, #376]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	021b      	lsls	r3, r3, #8
 8003aae:	495b      	ldr	r1, [pc, #364]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d109      	bne.n	8003ace <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fd4c 	bl	800455c <RCC_SetFlashLatencyFromMSIRange>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e37a      	b.n	80041c4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ace:	f000 fc81 	bl	80043d4 <HAL_RCC_GetSysClockFreq>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	4b51      	ldr	r3, [pc, #324]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	091b      	lsrs	r3, r3, #4
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	4950      	ldr	r1, [pc, #320]	@ (8003c20 <HAL_RCC_OscConfig+0x274>)
 8003ae0:	5ccb      	ldrb	r3, [r1, r3]
 8003ae2:	f003 031f 	and.w	r3, r3, #31
 8003ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aea:	4a4e      	ldr	r2, [pc, #312]	@ (8003c24 <HAL_RCC_OscConfig+0x278>)
 8003aec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003aee:	4b4e      	ldr	r3, [pc, #312]	@ (8003c28 <HAL_RCC_OscConfig+0x27c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fe f946 	bl	8001d84 <HAL_InitTick>
 8003af8:	4603      	mov	r3, r0
 8003afa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d052      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	e35e      	b.n	80041c4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d032      	beq.n	8003b74 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b0e:	4b43      	ldr	r3, [pc, #268]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a42      	ldr	r2, [pc, #264]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b1a:	f7fe f983 	bl	8001e24 <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b22:	f7fe f97f 	bl	8001e24 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e347      	b.n	80041c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b34:	4b39      	ldr	r3, [pc, #228]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0f0      	beq.n	8003b22 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b40:	4b36      	ldr	r3, [pc, #216]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a35      	ldr	r2, [pc, #212]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003b46:	f043 0308 	orr.w	r3, r3, #8
 8003b4a:	6013      	str	r3, [r2, #0]
 8003b4c:	4b33      	ldr	r3, [pc, #204]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	4930      	ldr	r1, [pc, #192]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	021b      	lsls	r3, r3, #8
 8003b6c:	492b      	ldr	r1, [pc, #172]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	604b      	str	r3, [r1, #4]
 8003b72:	e01a      	b.n	8003baa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b74:	4b29      	ldr	r3, [pc, #164]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a28      	ldr	r2, [pc, #160]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003b7a:	f023 0301 	bic.w	r3, r3, #1
 8003b7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b80:	f7fe f950 	bl	8001e24 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b88:	f7fe f94c 	bl	8001e24 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e314      	b.n	80041c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b9a:	4b20      	ldr	r3, [pc, #128]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f0      	bne.n	8003b88 <HAL_RCC_OscConfig+0x1dc>
 8003ba6:	e000      	b.n	8003baa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ba8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d073      	beq.n	8003c9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d005      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x21c>
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	2b0c      	cmp	r3, #12
 8003bc0:	d10e      	bne.n	8003be0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2b03      	cmp	r3, #3
 8003bc6:	d10b      	bne.n	8003be0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc8:	4b14      	ldr	r3, [pc, #80]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d063      	beq.n	8003c9c <HAL_RCC_OscConfig+0x2f0>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d15f      	bne.n	8003c9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e2f1      	b.n	80041c4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003be8:	d106      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x24c>
 8003bea:	4b0c      	ldr	r3, [pc, #48]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a0b      	ldr	r2, [pc, #44]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	e025      	b.n	8003c44 <HAL_RCC_OscConfig+0x298>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c00:	d114      	bne.n	8003c2c <HAL_RCC_OscConfig+0x280>
 8003c02:	4b06      	ldr	r3, [pc, #24]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a05      	ldr	r2, [pc, #20]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003c08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	4b03      	ldr	r3, [pc, #12]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a02      	ldr	r2, [pc, #8]	@ (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	e013      	b.n	8003c44 <HAL_RCC_OscConfig+0x298>
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	0800a174 	.word	0x0800a174
 8003c24:	20000008 	.word	0x20000008
 8003c28:	2000000c 	.word	0x2000000c
 8003c2c:	4ba0      	ldr	r3, [pc, #640]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a9f      	ldr	r2, [pc, #636]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003c32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	4b9d      	ldr	r3, [pc, #628]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a9c      	ldr	r2, [pc, #624]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003c3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d013      	beq.n	8003c74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4c:	f7fe f8ea 	bl	8001e24 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c54:	f7fe f8e6 	bl	8001e24 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	@ 0x64
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e2ae      	b.n	80041c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c66:	4b92      	ldr	r3, [pc, #584]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCC_OscConfig+0x2a8>
 8003c72:	e014      	b.n	8003c9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fe f8d6 	bl	8001e24 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c7c:	f7fe f8d2 	bl	8001e24 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b64      	cmp	r3, #100	@ 0x64
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e29a      	b.n	80041c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c8e:	4b88      	ldr	r3, [pc, #544]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x2d0>
 8003c9a:	e000      	b.n	8003c9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d060      	beq.n	8003d6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d005      	beq.n	8003cbc <HAL_RCC_OscConfig+0x310>
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	2b0c      	cmp	r3, #12
 8003cb4:	d119      	bne.n	8003cea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d116      	bne.n	8003cea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cbc:	4b7c      	ldr	r3, [pc, #496]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x328>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e277      	b.n	80041c4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd4:	4b76      	ldr	r3, [pc, #472]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	061b      	lsls	r3, r3, #24
 8003ce2:	4973      	ldr	r1, [pc, #460]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ce8:	e040      	b.n	8003d6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d023      	beq.n	8003d3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cf2:	4b6f      	ldr	r3, [pc, #444]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a6e      	ldr	r2, [pc, #440]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003cf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfe:	f7fe f891 	bl	8001e24 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d06:	f7fe f88d 	bl	8001e24 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e255      	b.n	80041c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d18:	4b65      	ldr	r3, [pc, #404]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f0      	beq.n	8003d06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d24:	4b62      	ldr	r3, [pc, #392]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	061b      	lsls	r3, r3, #24
 8003d32:	495f      	ldr	r1, [pc, #380]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	604b      	str	r3, [r1, #4]
 8003d38:	e018      	b.n	8003d6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d3a:	4b5d      	ldr	r3, [pc, #372]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a5c      	ldr	r2, [pc, #368]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003d40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d46:	f7fe f86d 	bl	8001e24 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d4e:	f7fe f869 	bl	8001e24 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e231      	b.n	80041c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d60:	4b53      	ldr	r3, [pc, #332]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1f0      	bne.n	8003d4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d03c      	beq.n	8003df2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01c      	beq.n	8003dba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d80:	4b4b      	ldr	r3, [pc, #300]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d86:	4a4a      	ldr	r2, [pc, #296]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d90:	f7fe f848 	bl	8001e24 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d98:	f7fe f844 	bl	8001e24 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e20c      	b.n	80041c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003daa:	4b41      	ldr	r3, [pc, #260]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0ef      	beq.n	8003d98 <HAL_RCC_OscConfig+0x3ec>
 8003db8:	e01b      	b.n	8003df2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dba:	4b3d      	ldr	r3, [pc, #244]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dc0:	4a3b      	ldr	r2, [pc, #236]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003dc2:	f023 0301 	bic.w	r3, r3, #1
 8003dc6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dca:	f7fe f82b 	bl	8001e24 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dd2:	f7fe f827 	bl	8001e24 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e1ef      	b.n	80041c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003de4:	4b32      	ldr	r3, [pc, #200]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1ef      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 80a6 	beq.w	8003f4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e00:	2300      	movs	r3, #0
 8003e02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e04:	4b2a      	ldr	r3, [pc, #168]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10d      	bne.n	8003e2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e10:	4b27      	ldr	r3, [pc, #156]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e14:	4a26      	ldr	r2, [pc, #152]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003e16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e1c:	4b24      	ldr	r3, [pc, #144]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e2c:	4b21      	ldr	r3, [pc, #132]	@ (8003eb4 <HAL_RCC_OscConfig+0x508>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d118      	bne.n	8003e6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e38:	4b1e      	ldr	r3, [pc, #120]	@ (8003eb4 <HAL_RCC_OscConfig+0x508>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8003eb4 <HAL_RCC_OscConfig+0x508>)
 8003e3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e44:	f7fd ffee 	bl	8001e24 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e4c:	f7fd ffea 	bl	8001e24 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e1b2      	b.n	80041c4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e5e:	4b15      	ldr	r3, [pc, #84]	@ (8003eb4 <HAL_RCC_OscConfig+0x508>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0f0      	beq.n	8003e4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d108      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4d8>
 8003e72:	4b0f      	ldr	r3, [pc, #60]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e78:	4a0d      	ldr	r2, [pc, #52]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003e7a:	f043 0301 	orr.w	r3, r3, #1
 8003e7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e82:	e029      	b.n	8003ed8 <HAL_RCC_OscConfig+0x52c>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b05      	cmp	r3, #5
 8003e8a:	d115      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x50c>
 8003e8c:	4b08      	ldr	r3, [pc, #32]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e92:	4a07      	ldr	r2, [pc, #28]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003e94:	f043 0304 	orr.w	r3, r3, #4
 8003e98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e9c:	4b04      	ldr	r3, [pc, #16]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea2:	4a03      	ldr	r2, [pc, #12]	@ (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003ea4:	f043 0301 	orr.w	r3, r3, #1
 8003ea8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003eac:	e014      	b.n	8003ed8 <HAL_RCC_OscConfig+0x52c>
 8003eae:	bf00      	nop
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	40007000 	.word	0x40007000
 8003eb8:	4b9a      	ldr	r3, [pc, #616]	@ (8004124 <HAL_RCC_OscConfig+0x778>)
 8003eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ebe:	4a99      	ldr	r2, [pc, #612]	@ (8004124 <HAL_RCC_OscConfig+0x778>)
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ec8:	4b96      	ldr	r3, [pc, #600]	@ (8004124 <HAL_RCC_OscConfig+0x778>)
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ece:	4a95      	ldr	r2, [pc, #596]	@ (8004124 <HAL_RCC_OscConfig+0x778>)
 8003ed0:	f023 0304 	bic.w	r3, r3, #4
 8003ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d016      	beq.n	8003f0e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee0:	f7fd ffa0 	bl	8001e24 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ee6:	e00a      	b.n	8003efe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee8:	f7fd ff9c 	bl	8001e24 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e162      	b.n	80041c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003efe:	4b89      	ldr	r3, [pc, #548]	@ (8004124 <HAL_RCC_OscConfig+0x778>)
 8003f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0ed      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x53c>
 8003f0c:	e015      	b.n	8003f3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0e:	f7fd ff89 	bl	8001e24 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f14:	e00a      	b.n	8003f2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f16:	f7fd ff85 	bl	8001e24 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e14b      	b.n	80041c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f2c:	4b7d      	ldr	r3, [pc, #500]	@ (8004124 <HAL_RCC_OscConfig+0x778>)
 8003f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1ed      	bne.n	8003f16 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f3a:	7ffb      	ldrb	r3, [r7, #31]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d105      	bne.n	8003f4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f40:	4b78      	ldr	r3, [pc, #480]	@ (8004124 <HAL_RCC_OscConfig+0x778>)
 8003f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f44:	4a77      	ldr	r2, [pc, #476]	@ (8004124 <HAL_RCC_OscConfig+0x778>)
 8003f46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f4a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d03c      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01c      	beq.n	8003f9a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f60:	4b70      	ldr	r3, [pc, #448]	@ (8004124 <HAL_RCC_OscConfig+0x778>)
 8003f62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f66:	4a6f      	ldr	r2, [pc, #444]	@ (8004124 <HAL_RCC_OscConfig+0x778>)
 8003f68:	f043 0301 	orr.w	r3, r3, #1
 8003f6c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f70:	f7fd ff58 	bl	8001e24 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f78:	f7fd ff54 	bl	8001e24 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e11c      	b.n	80041c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f8a:	4b66      	ldr	r3, [pc, #408]	@ (8004124 <HAL_RCC_OscConfig+0x778>)
 8003f8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0ef      	beq.n	8003f78 <HAL_RCC_OscConfig+0x5cc>
 8003f98:	e01b      	b.n	8003fd2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f9a:	4b62      	ldr	r3, [pc, #392]	@ (8004124 <HAL_RCC_OscConfig+0x778>)
 8003f9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fa0:	4a60      	ldr	r2, [pc, #384]	@ (8004124 <HAL_RCC_OscConfig+0x778>)
 8003fa2:	f023 0301 	bic.w	r3, r3, #1
 8003fa6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003faa:	f7fd ff3b 	bl	8001e24 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fb2:	f7fd ff37 	bl	8001e24 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e0ff      	b.n	80041c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fc4:	4b57      	ldr	r3, [pc, #348]	@ (8004124 <HAL_RCC_OscConfig+0x778>)
 8003fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1ef      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 80f3 	beq.w	80041c2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	f040 80c9 	bne.w	8004178 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003fe6:	4b4f      	ldr	r3, [pc, #316]	@ (8004124 <HAL_RCC_OscConfig+0x778>)
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f003 0203 	and.w	r2, r3, #3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d12c      	bne.n	8004054 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004004:	3b01      	subs	r3, #1
 8004006:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d123      	bne.n	8004054 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004016:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004018:	429a      	cmp	r2, r3
 800401a:	d11b      	bne.n	8004054 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004026:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004028:	429a      	cmp	r2, r3
 800402a:	d113      	bne.n	8004054 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004036:	085b      	lsrs	r3, r3, #1
 8004038:	3b01      	subs	r3, #1
 800403a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800403c:	429a      	cmp	r2, r3
 800403e:	d109      	bne.n	8004054 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404a:	085b      	lsrs	r3, r3, #1
 800404c:	3b01      	subs	r3, #1
 800404e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004050:	429a      	cmp	r2, r3
 8004052:	d06b      	beq.n	800412c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	2b0c      	cmp	r3, #12
 8004058:	d062      	beq.n	8004120 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800405a:	4b32      	ldr	r3, [pc, #200]	@ (8004124 <HAL_RCC_OscConfig+0x778>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e0ac      	b.n	80041c4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800406a:	4b2e      	ldr	r3, [pc, #184]	@ (8004124 <HAL_RCC_OscConfig+0x778>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a2d      	ldr	r2, [pc, #180]	@ (8004124 <HAL_RCC_OscConfig+0x778>)
 8004070:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004074:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004076:	f7fd fed5 	bl	8001e24 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800407e:	f7fd fed1 	bl	8001e24 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e099      	b.n	80041c4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004090:	4b24      	ldr	r3, [pc, #144]	@ (8004124 <HAL_RCC_OscConfig+0x778>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1f0      	bne.n	800407e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800409c:	4b21      	ldr	r3, [pc, #132]	@ (8004124 <HAL_RCC_OscConfig+0x778>)
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	4b21      	ldr	r3, [pc, #132]	@ (8004128 <HAL_RCC_OscConfig+0x77c>)
 80040a2:	4013      	ands	r3, r2
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80040ac:	3a01      	subs	r2, #1
 80040ae:	0112      	lsls	r2, r2, #4
 80040b0:	4311      	orrs	r1, r2
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80040b6:	0212      	lsls	r2, r2, #8
 80040b8:	4311      	orrs	r1, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80040be:	0852      	lsrs	r2, r2, #1
 80040c0:	3a01      	subs	r2, #1
 80040c2:	0552      	lsls	r2, r2, #21
 80040c4:	4311      	orrs	r1, r2
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80040ca:	0852      	lsrs	r2, r2, #1
 80040cc:	3a01      	subs	r2, #1
 80040ce:	0652      	lsls	r2, r2, #25
 80040d0:	4311      	orrs	r1, r2
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80040d6:	06d2      	lsls	r2, r2, #27
 80040d8:	430a      	orrs	r2, r1
 80040da:	4912      	ldr	r1, [pc, #72]	@ (8004124 <HAL_RCC_OscConfig+0x778>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040e0:	4b10      	ldr	r3, [pc, #64]	@ (8004124 <HAL_RCC_OscConfig+0x778>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a0f      	ldr	r2, [pc, #60]	@ (8004124 <HAL_RCC_OscConfig+0x778>)
 80040e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004124 <HAL_RCC_OscConfig+0x778>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	4a0c      	ldr	r2, [pc, #48]	@ (8004124 <HAL_RCC_OscConfig+0x778>)
 80040f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040f8:	f7fd fe94 	bl	8001e24 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004100:	f7fd fe90 	bl	8001e24 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e058      	b.n	80041c4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004112:	4b04      	ldr	r3, [pc, #16]	@ (8004124 <HAL_RCC_OscConfig+0x778>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0f0      	beq.n	8004100 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800411e:	e050      	b.n	80041c2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e04f      	b.n	80041c4 <HAL_RCC_OscConfig+0x818>
 8004124:	40021000 	.word	0x40021000
 8004128:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800412c:	4b27      	ldr	r3, [pc, #156]	@ (80041cc <HAL_RCC_OscConfig+0x820>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d144      	bne.n	80041c2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004138:	4b24      	ldr	r3, [pc, #144]	@ (80041cc <HAL_RCC_OscConfig+0x820>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a23      	ldr	r2, [pc, #140]	@ (80041cc <HAL_RCC_OscConfig+0x820>)
 800413e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004142:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004144:	4b21      	ldr	r3, [pc, #132]	@ (80041cc <HAL_RCC_OscConfig+0x820>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	4a20      	ldr	r2, [pc, #128]	@ (80041cc <HAL_RCC_OscConfig+0x820>)
 800414a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800414e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004150:	f7fd fe68 	bl	8001e24 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004158:	f7fd fe64 	bl	8001e24 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e02c      	b.n	80041c4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800416a:	4b18      	ldr	r3, [pc, #96]	@ (80041cc <HAL_RCC_OscConfig+0x820>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f0      	beq.n	8004158 <HAL_RCC_OscConfig+0x7ac>
 8004176:	e024      	b.n	80041c2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	2b0c      	cmp	r3, #12
 800417c:	d01f      	beq.n	80041be <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417e:	4b13      	ldr	r3, [pc, #76]	@ (80041cc <HAL_RCC_OscConfig+0x820>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a12      	ldr	r2, [pc, #72]	@ (80041cc <HAL_RCC_OscConfig+0x820>)
 8004184:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418a:	f7fd fe4b 	bl	8001e24 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004192:	f7fd fe47 	bl	8001e24 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e00f      	b.n	80041c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041a4:	4b09      	ldr	r3, [pc, #36]	@ (80041cc <HAL_RCC_OscConfig+0x820>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1f0      	bne.n	8004192 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80041b0:	4b06      	ldr	r3, [pc, #24]	@ (80041cc <HAL_RCC_OscConfig+0x820>)
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	4905      	ldr	r1, [pc, #20]	@ (80041cc <HAL_RCC_OscConfig+0x820>)
 80041b6:	4b06      	ldr	r3, [pc, #24]	@ (80041d0 <HAL_RCC_OscConfig+0x824>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	60cb      	str	r3, [r1, #12]
 80041bc:	e001      	b.n	80041c2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3720      	adds	r7, #32
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40021000 	.word	0x40021000
 80041d0:	feeefffc 	.word	0xfeeefffc

080041d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e0e7      	b.n	80043b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041e8:	4b75      	ldr	r3, [pc, #468]	@ (80043c0 <HAL_RCC_ClockConfig+0x1ec>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d910      	bls.n	8004218 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f6:	4b72      	ldr	r3, [pc, #456]	@ (80043c0 <HAL_RCC_ClockConfig+0x1ec>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f023 0207 	bic.w	r2, r3, #7
 80041fe:	4970      	ldr	r1, [pc, #448]	@ (80043c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	4313      	orrs	r3, r2
 8004204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004206:	4b6e      	ldr	r3, [pc, #440]	@ (80043c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0307 	and.w	r3, r3, #7
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d001      	beq.n	8004218 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e0cf      	b.n	80043b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d010      	beq.n	8004246 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	4b66      	ldr	r3, [pc, #408]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004230:	429a      	cmp	r2, r3
 8004232:	d908      	bls.n	8004246 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004234:	4b63      	ldr	r3, [pc, #396]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	4960      	ldr	r1, [pc, #384]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004242:	4313      	orrs	r3, r2
 8004244:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d04c      	beq.n	80042ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b03      	cmp	r3, #3
 8004258:	d107      	bne.n	800426a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800425a:	4b5a      	ldr	r3, [pc, #360]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d121      	bne.n	80042aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e0a6      	b.n	80043b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d107      	bne.n	8004282 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004272:	4b54      	ldr	r3, [pc, #336]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d115      	bne.n	80042aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e09a      	b.n	80043b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d107      	bne.n	800429a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800428a:	4b4e      	ldr	r3, [pc, #312]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d109      	bne.n	80042aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e08e      	b.n	80043b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800429a:	4b4a      	ldr	r3, [pc, #296]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e086      	b.n	80043b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042aa:	4b46      	ldr	r3, [pc, #280]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f023 0203 	bic.w	r2, r3, #3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	4943      	ldr	r1, [pc, #268]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042bc:	f7fd fdb2 	bl	8001e24 <HAL_GetTick>
 80042c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c2:	e00a      	b.n	80042da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c4:	f7fd fdae 	bl	8001e24 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e06e      	b.n	80043b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042da:	4b3a      	ldr	r3, [pc, #232]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 020c 	and.w	r2, r3, #12
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d1eb      	bne.n	80042c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d010      	beq.n	800431a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	4b31      	ldr	r3, [pc, #196]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004304:	429a      	cmp	r2, r3
 8004306:	d208      	bcs.n	800431a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004308:	4b2e      	ldr	r3, [pc, #184]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	492b      	ldr	r1, [pc, #172]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004316:	4313      	orrs	r3, r2
 8004318:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800431a:	4b29      	ldr	r3, [pc, #164]	@ (80043c0 <HAL_RCC_ClockConfig+0x1ec>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d210      	bcs.n	800434a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004328:	4b25      	ldr	r3, [pc, #148]	@ (80043c0 <HAL_RCC_ClockConfig+0x1ec>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f023 0207 	bic.w	r2, r3, #7
 8004330:	4923      	ldr	r1, [pc, #140]	@ (80043c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	4313      	orrs	r3, r2
 8004336:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004338:	4b21      	ldr	r3, [pc, #132]	@ (80043c0 <HAL_RCC_ClockConfig+0x1ec>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d001      	beq.n	800434a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e036      	b.n	80043b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b00      	cmp	r3, #0
 8004354:	d008      	beq.n	8004368 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004356:	4b1b      	ldr	r3, [pc, #108]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	4918      	ldr	r1, [pc, #96]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004364:	4313      	orrs	r3, r2
 8004366:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	2b00      	cmp	r3, #0
 8004372:	d009      	beq.n	8004388 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004374:	4b13      	ldr	r3, [pc, #76]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	4910      	ldr	r1, [pc, #64]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004384:	4313      	orrs	r3, r2
 8004386:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004388:	f000 f824 	bl	80043d4 <HAL_RCC_GetSysClockFreq>
 800438c:	4602      	mov	r2, r0
 800438e:	4b0d      	ldr	r3, [pc, #52]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	091b      	lsrs	r3, r3, #4
 8004394:	f003 030f 	and.w	r3, r3, #15
 8004398:	490b      	ldr	r1, [pc, #44]	@ (80043c8 <HAL_RCC_ClockConfig+0x1f4>)
 800439a:	5ccb      	ldrb	r3, [r1, r3]
 800439c:	f003 031f 	and.w	r3, r3, #31
 80043a0:	fa22 f303 	lsr.w	r3, r2, r3
 80043a4:	4a09      	ldr	r2, [pc, #36]	@ (80043cc <HAL_RCC_ClockConfig+0x1f8>)
 80043a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043a8:	4b09      	ldr	r3, [pc, #36]	@ (80043d0 <HAL_RCC_ClockConfig+0x1fc>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fd fce9 	bl	8001d84 <HAL_InitTick>
 80043b2:	4603      	mov	r3, r0
 80043b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80043b6:	7afb      	ldrb	r3, [r7, #11]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40022000 	.word	0x40022000
 80043c4:	40021000 	.word	0x40021000
 80043c8:	0800a174 	.word	0x0800a174
 80043cc:	20000008 	.word	0x20000008
 80043d0:	2000000c 	.word	0x2000000c

080043d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b089      	sub	sp, #36	@ 0x24
 80043d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80043da:	2300      	movs	r3, #0
 80043dc:	61fb      	str	r3, [r7, #28]
 80043de:	2300      	movs	r3, #0
 80043e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043e2:	4b3e      	ldr	r3, [pc, #248]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x108>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 030c 	and.w	r3, r3, #12
 80043ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043ec:	4b3b      	ldr	r3, [pc, #236]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x108>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f003 0303 	and.w	r3, r3, #3
 80043f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <HAL_RCC_GetSysClockFreq+0x34>
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	2b0c      	cmp	r3, #12
 8004400:	d121      	bne.n	8004446 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d11e      	bne.n	8004446 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004408:	4b34      	ldr	r3, [pc, #208]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x108>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b00      	cmp	r3, #0
 8004412:	d107      	bne.n	8004424 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004414:	4b31      	ldr	r3, [pc, #196]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004416:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800441a:	0a1b      	lsrs	r3, r3, #8
 800441c:	f003 030f 	and.w	r3, r3, #15
 8004420:	61fb      	str	r3, [r7, #28]
 8004422:	e005      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004424:	4b2d      	ldr	r3, [pc, #180]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	091b      	lsrs	r3, r3, #4
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004430:	4a2b      	ldr	r2, [pc, #172]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004438:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10d      	bne.n	800445c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004444:	e00a      	b.n	800445c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	2b04      	cmp	r3, #4
 800444a:	d102      	bne.n	8004452 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800444c:	4b25      	ldr	r3, [pc, #148]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800444e:	61bb      	str	r3, [r7, #24]
 8004450:	e004      	b.n	800445c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	2b08      	cmp	r3, #8
 8004456:	d101      	bne.n	800445c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004458:	4b23      	ldr	r3, [pc, #140]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800445a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	2b0c      	cmp	r3, #12
 8004460:	d134      	bne.n	80044cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004462:	4b1e      	ldr	r3, [pc, #120]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b02      	cmp	r3, #2
 8004470:	d003      	beq.n	800447a <HAL_RCC_GetSysClockFreq+0xa6>
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2b03      	cmp	r3, #3
 8004476:	d003      	beq.n	8004480 <HAL_RCC_GetSysClockFreq+0xac>
 8004478:	e005      	b.n	8004486 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800447a:	4b1a      	ldr	r3, [pc, #104]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800447c:	617b      	str	r3, [r7, #20]
      break;
 800447e:	e005      	b.n	800448c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004480:	4b19      	ldr	r3, [pc, #100]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004482:	617b      	str	r3, [r7, #20]
      break;
 8004484:	e002      	b.n	800448c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	617b      	str	r3, [r7, #20]
      break;
 800448a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800448c:	4b13      	ldr	r3, [pc, #76]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x108>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	091b      	lsrs	r3, r3, #4
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	3301      	adds	r3, #1
 8004498:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800449a:	4b10      	ldr	r3, [pc, #64]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x108>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	0a1b      	lsrs	r3, r3, #8
 80044a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	fb03 f202 	mul.w	r2, r3, r2
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044b2:	4b0a      	ldr	r3, [pc, #40]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x108>)
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	0e5b      	lsrs	r3, r3, #25
 80044b8:	f003 0303 	and.w	r3, r3, #3
 80044bc:	3301      	adds	r3, #1
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80044cc:	69bb      	ldr	r3, [r7, #24]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3724      	adds	r7, #36	@ 0x24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40021000 	.word	0x40021000
 80044e0:	0800a18c 	.word	0x0800a18c
 80044e4:	00f42400 	.word	0x00f42400
 80044e8:	007a1200 	.word	0x007a1200

080044ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044f0:	4b03      	ldr	r3, [pc, #12]	@ (8004500 <HAL_RCC_GetHCLKFreq+0x14>)
 80044f2:	681b      	ldr	r3, [r3, #0]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	20000008 	.word	0x20000008

08004504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004508:	f7ff fff0 	bl	80044ec <HAL_RCC_GetHCLKFreq>
 800450c:	4602      	mov	r2, r0
 800450e:	4b06      	ldr	r3, [pc, #24]	@ (8004528 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	0a1b      	lsrs	r3, r3, #8
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	4904      	ldr	r1, [pc, #16]	@ (800452c <HAL_RCC_GetPCLK1Freq+0x28>)
 800451a:	5ccb      	ldrb	r3, [r1, r3]
 800451c:	f003 031f 	and.w	r3, r3, #31
 8004520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004524:	4618      	mov	r0, r3
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40021000 	.word	0x40021000
 800452c:	0800a184 	.word	0x0800a184

08004530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004534:	f7ff ffda 	bl	80044ec <HAL_RCC_GetHCLKFreq>
 8004538:	4602      	mov	r2, r0
 800453a:	4b06      	ldr	r3, [pc, #24]	@ (8004554 <HAL_RCC_GetPCLK2Freq+0x24>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	0adb      	lsrs	r3, r3, #11
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	4904      	ldr	r1, [pc, #16]	@ (8004558 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004546:	5ccb      	ldrb	r3, [r1, r3]
 8004548:	f003 031f 	and.w	r3, r3, #31
 800454c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004550:	4618      	mov	r0, r3
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40021000 	.word	0x40021000
 8004558:	0800a184 	.word	0x0800a184

0800455c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004564:	2300      	movs	r3, #0
 8004566:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004568:	4b2a      	ldr	r3, [pc, #168]	@ (8004614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800456a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004574:	f7ff f9b6 	bl	80038e4 <HAL_PWREx_GetVoltageRange>
 8004578:	6178      	str	r0, [r7, #20]
 800457a:	e014      	b.n	80045a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800457c:	4b25      	ldr	r3, [pc, #148]	@ (8004614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800457e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004580:	4a24      	ldr	r2, [pc, #144]	@ (8004614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004586:	6593      	str	r3, [r2, #88]	@ 0x58
 8004588:	4b22      	ldr	r3, [pc, #136]	@ (8004614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800458a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004594:	f7ff f9a6 	bl	80038e4 <HAL_PWREx_GetVoltageRange>
 8004598:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800459a:	4b1e      	ldr	r3, [pc, #120]	@ (8004614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800459c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800459e:	4a1d      	ldr	r2, [pc, #116]	@ (8004614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045ac:	d10b      	bne.n	80045c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b80      	cmp	r3, #128	@ 0x80
 80045b2:	d919      	bls.n	80045e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2ba0      	cmp	r3, #160	@ 0xa0
 80045b8:	d902      	bls.n	80045c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045ba:	2302      	movs	r3, #2
 80045bc:	613b      	str	r3, [r7, #16]
 80045be:	e013      	b.n	80045e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045c0:	2301      	movs	r3, #1
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	e010      	b.n	80045e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b80      	cmp	r3, #128	@ 0x80
 80045ca:	d902      	bls.n	80045d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80045cc:	2303      	movs	r3, #3
 80045ce:	613b      	str	r3, [r7, #16]
 80045d0:	e00a      	b.n	80045e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b80      	cmp	r3, #128	@ 0x80
 80045d6:	d102      	bne.n	80045de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045d8:	2302      	movs	r3, #2
 80045da:	613b      	str	r3, [r7, #16]
 80045dc:	e004      	b.n	80045e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b70      	cmp	r3, #112	@ 0x70
 80045e2:	d101      	bne.n	80045e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045e4:	2301      	movs	r3, #1
 80045e6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004618 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f023 0207 	bic.w	r2, r3, #7
 80045f0:	4909      	ldr	r1, [pc, #36]	@ (8004618 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045f8:	4b07      	ldr	r3, [pc, #28]	@ (8004618 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	429a      	cmp	r2, r3
 8004604:	d001      	beq.n	800460a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e000      	b.n	800460c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40021000 	.word	0x40021000
 8004618:	40022000 	.word	0x40022000

0800461c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004624:	2300      	movs	r3, #0
 8004626:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004628:	2300      	movs	r3, #0
 800462a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004634:	2b00      	cmp	r3, #0
 8004636:	d031      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800463c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004640:	d01a      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004642:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004646:	d814      	bhi.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004648:	2b00      	cmp	r3, #0
 800464a:	d009      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800464c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004650:	d10f      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004652:	4b5d      	ldr	r3, [pc, #372]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	4a5c      	ldr	r2, [pc, #368]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800465c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800465e:	e00c      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3304      	adds	r3, #4
 8004664:	2100      	movs	r1, #0
 8004666:	4618      	mov	r0, r3
 8004668:	f000 f9de 	bl	8004a28 <RCCEx_PLLSAI1_Config>
 800466c:	4603      	mov	r3, r0
 800466e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004670:	e003      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	74fb      	strb	r3, [r7, #19]
      break;
 8004676:	e000      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004678:	bf00      	nop
    }

    if(ret == HAL_OK)
 800467a:	7cfb      	ldrb	r3, [r7, #19]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10b      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004680:	4b51      	ldr	r3, [pc, #324]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004686:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800468e:	494e      	ldr	r1, [pc, #312]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004696:	e001      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004698:	7cfb      	ldrb	r3, [r7, #19]
 800469a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 809e 	beq.w	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046aa:	2300      	movs	r3, #0
 80046ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046ae:	4b46      	ldr	r3, [pc, #280]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80046be:	2300      	movs	r3, #0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00d      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046c4:	4b40      	ldr	r3, [pc, #256]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c8:	4a3f      	ldr	r2, [pc, #252]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80046d0:	4b3d      	ldr	r3, [pc, #244]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046d8:	60bb      	str	r3, [r7, #8]
 80046da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046dc:	2301      	movs	r3, #1
 80046de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046e0:	4b3a      	ldr	r3, [pc, #232]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a39      	ldr	r2, [pc, #228]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80046e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046ec:	f7fd fb9a 	bl	8001e24 <HAL_GetTick>
 80046f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046f2:	e009      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f4:	f7fd fb96 	bl	8001e24 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d902      	bls.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	74fb      	strb	r3, [r7, #19]
        break;
 8004706:	e005      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004708:	4b30      	ldr	r3, [pc, #192]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0ef      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004714:	7cfb      	ldrb	r3, [r7, #19]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d15a      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800471a:	4b2b      	ldr	r3, [pc, #172]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800471c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004720:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004724:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01e      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	429a      	cmp	r2, r3
 8004734:	d019      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004736:	4b24      	ldr	r3, [pc, #144]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800473c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004740:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004742:	4b21      	ldr	r3, [pc, #132]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004748:	4a1f      	ldr	r2, [pc, #124]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800474a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800474e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004752:	4b1d      	ldr	r3, [pc, #116]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004758:	4a1b      	ldr	r2, [pc, #108]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800475a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800475e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004762:	4a19      	ldr	r2, [pc, #100]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d016      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004774:	f7fd fb56 	bl	8001e24 <HAL_GetTick>
 8004778:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800477a:	e00b      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800477c:	f7fd fb52 	bl	8001e24 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800478a:	4293      	cmp	r3, r2
 800478c:	d902      	bls.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	74fb      	strb	r3, [r7, #19]
            break;
 8004792:	e006      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004794:	4b0c      	ldr	r3, [pc, #48]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0ec      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80047a2:	7cfb      	ldrb	r3, [r7, #19]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10b      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047a8:	4b07      	ldr	r3, [pc, #28]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047b6:	4904      	ldr	r1, [pc, #16]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80047be:	e009      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047c0:	7cfb      	ldrb	r3, [r7, #19]
 80047c2:	74bb      	strb	r3, [r7, #18]
 80047c4:	e006      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80047c6:	bf00      	nop
 80047c8:	40021000 	.word	0x40021000
 80047cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d0:	7cfb      	ldrb	r3, [r7, #19]
 80047d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047d4:	7c7b      	ldrb	r3, [r7, #17]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d105      	bne.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047da:	4b8a      	ldr	r3, [pc, #552]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047de:	4a89      	ldr	r2, [pc, #548]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047f2:	4b84      	ldr	r3, [pc, #528]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f8:	f023 0203 	bic.w	r2, r3, #3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	4980      	ldr	r1, [pc, #512]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004814:	4b7b      	ldr	r3, [pc, #492]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800481a:	f023 020c 	bic.w	r2, r3, #12
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004822:	4978      	ldr	r1, [pc, #480]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004824:	4313      	orrs	r3, r2
 8004826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0320 	and.w	r3, r3, #32
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004836:	4b73      	ldr	r3, [pc, #460]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800483c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004844:	496f      	ldr	r1, [pc, #444]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004858:	4b6a      	ldr	r3, [pc, #424]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800485e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004866:	4967      	ldr	r1, [pc, #412]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800487a:	4b62      	ldr	r3, [pc, #392]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800487c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004880:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004888:	495e      	ldr	r1, [pc, #376]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00a      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800489c:	4b59      	ldr	r3, [pc, #356]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800489e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048aa:	4956      	ldr	r1, [pc, #344]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048be:	4b51      	ldr	r3, [pc, #324]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048cc:	494d      	ldr	r1, [pc, #308]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d028      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048e0:	4b48      	ldr	r3, [pc, #288]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ee:	4945      	ldr	r1, [pc, #276]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048fe:	d106      	bne.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004900:	4b40      	ldr	r3, [pc, #256]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4a3f      	ldr	r2, [pc, #252]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004906:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800490a:	60d3      	str	r3, [r2, #12]
 800490c:	e011      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004912:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004916:	d10c      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3304      	adds	r3, #4
 800491c:	2101      	movs	r1, #1
 800491e:	4618      	mov	r0, r3
 8004920:	f000 f882 	bl	8004a28 <RCCEx_PLLSAI1_Config>
 8004924:	4603      	mov	r3, r0
 8004926:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004928:	7cfb      	ldrb	r3, [r7, #19]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800492e:	7cfb      	ldrb	r3, [r7, #19]
 8004930:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d028      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800493e:	4b31      	ldr	r3, [pc, #196]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004944:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800494c:	492d      	ldr	r1, [pc, #180]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800494e:	4313      	orrs	r3, r2
 8004950:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004958:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800495c:	d106      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800495e:	4b29      	ldr	r3, [pc, #164]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	4a28      	ldr	r2, [pc, #160]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004964:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004968:	60d3      	str	r3, [r2, #12]
 800496a:	e011      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004970:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004974:	d10c      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	3304      	adds	r3, #4
 800497a:	2101      	movs	r1, #1
 800497c:	4618      	mov	r0, r3
 800497e:	f000 f853 	bl	8004a28 <RCCEx_PLLSAI1_Config>
 8004982:	4603      	mov	r3, r0
 8004984:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004986:	7cfb      	ldrb	r3, [r7, #19]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800498c:	7cfb      	ldrb	r3, [r7, #19]
 800498e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01c      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800499c:	4b19      	ldr	r3, [pc, #100]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800499e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049aa:	4916      	ldr	r1, [pc, #88]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049ba:	d10c      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3304      	adds	r3, #4
 80049c0:	2102      	movs	r1, #2
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 f830 	bl	8004a28 <RCCEx_PLLSAI1_Config>
 80049c8:	4603      	mov	r3, r0
 80049ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049cc:	7cfb      	ldrb	r3, [r7, #19]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80049d2:	7cfb      	ldrb	r3, [r7, #19]
 80049d4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049e2:	4b08      	ldr	r3, [pc, #32]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049f0:	4904      	ldr	r1, [pc, #16]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80049f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40021000 	.word	0x40021000

08004a08 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004a0c:	4b05      	ldr	r3, [pc, #20]	@ (8004a24 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a04      	ldr	r2, [pc, #16]	@ (8004a24 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a12:	f043 0304 	orr.w	r3, r3, #4
 8004a16:	6013      	str	r3, [r2, #0]
}
 8004a18:	bf00      	nop
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	40021000 	.word	0x40021000

08004a28 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a36:	4b74      	ldr	r3, [pc, #464]	@ (8004c08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d018      	beq.n	8004a74 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a42:	4b71      	ldr	r3, [pc, #452]	@ (8004c08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f003 0203 	and.w	r2, r3, #3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d10d      	bne.n	8004a6e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
       ||
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d009      	beq.n	8004a6e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a5a:	4b6b      	ldr	r3, [pc, #428]	@ (8004c08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	091b      	lsrs	r3, r3, #4
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
       ||
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d047      	beq.n	8004afe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	73fb      	strb	r3, [r7, #15]
 8004a72:	e044      	b.n	8004afe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d018      	beq.n	8004aae <RCCEx_PLLSAI1_Config+0x86>
 8004a7c:	2b03      	cmp	r3, #3
 8004a7e:	d825      	bhi.n	8004acc <RCCEx_PLLSAI1_Config+0xa4>
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d002      	beq.n	8004a8a <RCCEx_PLLSAI1_Config+0x62>
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d009      	beq.n	8004a9c <RCCEx_PLLSAI1_Config+0x74>
 8004a88:	e020      	b.n	8004acc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a8a:	4b5f      	ldr	r3, [pc, #380]	@ (8004c08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d11d      	bne.n	8004ad2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a9a:	e01a      	b.n	8004ad2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a9c:	4b5a      	ldr	r3, [pc, #360]	@ (8004c08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d116      	bne.n	8004ad6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aac:	e013      	b.n	8004ad6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004aae:	4b56      	ldr	r3, [pc, #344]	@ (8004c08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10f      	bne.n	8004ada <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004aba:	4b53      	ldr	r3, [pc, #332]	@ (8004c08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d109      	bne.n	8004ada <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004aca:	e006      	b.n	8004ada <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	73fb      	strb	r3, [r7, #15]
      break;
 8004ad0:	e004      	b.n	8004adc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ad2:	bf00      	nop
 8004ad4:	e002      	b.n	8004adc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ad6:	bf00      	nop
 8004ad8:	e000      	b.n	8004adc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ada:	bf00      	nop
    }

    if(status == HAL_OK)
 8004adc:	7bfb      	ldrb	r3, [r7, #15]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10d      	bne.n	8004afe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ae2:	4b49      	ldr	r3, [pc, #292]	@ (8004c08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6819      	ldr	r1, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	3b01      	subs	r3, #1
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	430b      	orrs	r3, r1
 8004af8:	4943      	ldr	r1, [pc, #268]	@ (8004c08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d17c      	bne.n	8004bfe <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b04:	4b40      	ldr	r3, [pc, #256]	@ (8004c08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a3f      	ldr	r2, [pc, #252]	@ (8004c08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b10:	f7fd f988 	bl	8001e24 <HAL_GetTick>
 8004b14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b16:	e009      	b.n	8004b2c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b18:	f7fd f984 	bl	8001e24 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d902      	bls.n	8004b2c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	73fb      	strb	r3, [r7, #15]
        break;
 8004b2a:	e005      	b.n	8004b38 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b2c:	4b36      	ldr	r3, [pc, #216]	@ (8004c08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1ef      	bne.n	8004b18 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b38:	7bfb      	ldrb	r3, [r7, #15]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d15f      	bne.n	8004bfe <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d110      	bne.n	8004b66 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b44:	4b30      	ldr	r3, [pc, #192]	@ (8004c08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004b4c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6892      	ldr	r2, [r2, #8]
 8004b54:	0211      	lsls	r1, r2, #8
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	68d2      	ldr	r2, [r2, #12]
 8004b5a:	06d2      	lsls	r2, r2, #27
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	492a      	ldr	r1, [pc, #168]	@ (8004c08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	610b      	str	r3, [r1, #16]
 8004b64:	e027      	b.n	8004bb6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d112      	bne.n	8004b92 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b6c:	4b26      	ldr	r3, [pc, #152]	@ (8004c08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004b74:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6892      	ldr	r2, [r2, #8]
 8004b7c:	0211      	lsls	r1, r2, #8
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6912      	ldr	r2, [r2, #16]
 8004b82:	0852      	lsrs	r2, r2, #1
 8004b84:	3a01      	subs	r2, #1
 8004b86:	0552      	lsls	r2, r2, #21
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	491f      	ldr	r1, [pc, #124]	@ (8004c08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	610b      	str	r3, [r1, #16]
 8004b90:	e011      	b.n	8004bb6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b92:	4b1d      	ldr	r3, [pc, #116]	@ (8004c08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004b9a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	6892      	ldr	r2, [r2, #8]
 8004ba2:	0211      	lsls	r1, r2, #8
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6952      	ldr	r2, [r2, #20]
 8004ba8:	0852      	lsrs	r2, r2, #1
 8004baa:	3a01      	subs	r2, #1
 8004bac:	0652      	lsls	r2, r2, #25
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	4915      	ldr	r1, [pc, #84]	@ (8004c08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004bb6:	4b14      	ldr	r3, [pc, #80]	@ (8004c08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a13      	ldr	r2, [pc, #76]	@ (8004c08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bbc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bc0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc2:	f7fd f92f 	bl	8001e24 <HAL_GetTick>
 8004bc6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bc8:	e009      	b.n	8004bde <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bca:	f7fd f92b 	bl	8001e24 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d902      	bls.n	8004bde <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	73fb      	strb	r3, [r7, #15]
          break;
 8004bdc:	e005      	b.n	8004bea <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bde:	4b0a      	ldr	r3, [pc, #40]	@ (8004c08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0ef      	beq.n	8004bca <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004bea:	7bfb      	ldrb	r3, [r7, #15]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d106      	bne.n	8004bfe <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004bf0:	4b05      	ldr	r3, [pc, #20]	@ (8004c08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	4903      	ldr	r1, [pc, #12]	@ (8004c08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40021000 	.word	0x40021000

08004c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e049      	b.n	8004cb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7fc fe4c 	bl	80018d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3304      	adds	r3, #4
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f000 fa28 	bl	80050a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d001      	beq.n	8004cd4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e033      	b.n	8004d3c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a19      	ldr	r2, [pc, #100]	@ (8004d48 <HAL_TIM_Base_Start+0x8c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d009      	beq.n	8004cfa <HAL_TIM_Base_Start+0x3e>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cee:	d004      	beq.n	8004cfa <HAL_TIM_Base_Start+0x3e>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a15      	ldr	r2, [pc, #84]	@ (8004d4c <HAL_TIM_Base_Start+0x90>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d115      	bne.n	8004d26 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	4b13      	ldr	r3, [pc, #76]	@ (8004d50 <HAL_TIM_Base_Start+0x94>)
 8004d02:	4013      	ands	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2b06      	cmp	r3, #6
 8004d0a:	d015      	beq.n	8004d38 <HAL_TIM_Base_Start+0x7c>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d12:	d011      	beq.n	8004d38 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0201 	orr.w	r2, r2, #1
 8004d22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d24:	e008      	b.n	8004d38 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0201 	orr.w	r2, r2, #1
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	e000      	b.n	8004d3a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	40012c00 	.word	0x40012c00
 8004d4c:	40014000 	.word	0x40014000
 8004d50:	00010007 	.word	0x00010007

08004d54 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e049      	b.n	8004dfa <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d106      	bne.n	8004d80 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f841 	bl	8004e02 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3304      	adds	r3, #4
 8004d90:	4619      	mov	r1, r3
 8004d92:	4610      	mov	r0, r2
 8004d94:	f000 f984 	bl	80050a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004e0a:	bf00      	nop
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
	...

08004e18 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d101      	bne.n	8004e36 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004e32:	2302      	movs	r3, #2
 8004e34:	e066      	b.n	8004f04 <HAL_TIM_OC_ConfigChannel+0xec>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b14      	cmp	r3, #20
 8004e42:	d857      	bhi.n	8004ef4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004e44:	a201      	add	r2, pc, #4	@ (adr r2, 8004e4c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4a:	bf00      	nop
 8004e4c:	08004ea1 	.word	0x08004ea1
 8004e50:	08004ef5 	.word	0x08004ef5
 8004e54:	08004ef5 	.word	0x08004ef5
 8004e58:	08004ef5 	.word	0x08004ef5
 8004e5c:	08004eaf 	.word	0x08004eaf
 8004e60:	08004ef5 	.word	0x08004ef5
 8004e64:	08004ef5 	.word	0x08004ef5
 8004e68:	08004ef5 	.word	0x08004ef5
 8004e6c:	08004ebd 	.word	0x08004ebd
 8004e70:	08004ef5 	.word	0x08004ef5
 8004e74:	08004ef5 	.word	0x08004ef5
 8004e78:	08004ef5 	.word	0x08004ef5
 8004e7c:	08004ecb 	.word	0x08004ecb
 8004e80:	08004ef5 	.word	0x08004ef5
 8004e84:	08004ef5 	.word	0x08004ef5
 8004e88:	08004ef5 	.word	0x08004ef5
 8004e8c:	08004ed9 	.word	0x08004ed9
 8004e90:	08004ef5 	.word	0x08004ef5
 8004e94:	08004ef5 	.word	0x08004ef5
 8004e98:	08004ef5 	.word	0x08004ef5
 8004e9c:	08004ee7 	.word	0x08004ee7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 f96a 	bl	8005180 <TIM_OC1_SetConfig>
      break;
 8004eac:	e025      	b.n	8004efa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 f9df 	bl	8005278 <TIM_OC2_SetConfig>
      break;
 8004eba:	e01e      	b.n	8004efa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68b9      	ldr	r1, [r7, #8]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fa52 	bl	800536c <TIM_OC3_SetConfig>
      break;
 8004ec8:	e017      	b.n	8004efa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68b9      	ldr	r1, [r7, #8]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 fac3 	bl	800545c <TIM_OC4_SetConfig>
      break;
 8004ed6:	e010      	b.n	8004efa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68b9      	ldr	r1, [r7, #8]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fb1a 	bl	8005518 <TIM_OC5_SetConfig>
      break;
 8004ee4:	e009      	b.n	8004efa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68b9      	ldr	r1, [r7, #8]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 fb6b 	bl	80055c8 <TIM_OC6_SetConfig>
      break;
 8004ef2:	e002      	b.n	8004efa <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ef8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3718      	adds	r7, #24
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_TIM_ConfigClockSource+0x1c>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e0b6      	b.n	8005096 <HAL_TIM_ConfigClockSource+0x18a>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f64:	d03e      	beq.n	8004fe4 <HAL_TIM_ConfigClockSource+0xd8>
 8004f66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f6a:	f200 8087 	bhi.w	800507c <HAL_TIM_ConfigClockSource+0x170>
 8004f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f72:	f000 8086 	beq.w	8005082 <HAL_TIM_ConfigClockSource+0x176>
 8004f76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f7a:	d87f      	bhi.n	800507c <HAL_TIM_ConfigClockSource+0x170>
 8004f7c:	2b70      	cmp	r3, #112	@ 0x70
 8004f7e:	d01a      	beq.n	8004fb6 <HAL_TIM_ConfigClockSource+0xaa>
 8004f80:	2b70      	cmp	r3, #112	@ 0x70
 8004f82:	d87b      	bhi.n	800507c <HAL_TIM_ConfigClockSource+0x170>
 8004f84:	2b60      	cmp	r3, #96	@ 0x60
 8004f86:	d050      	beq.n	800502a <HAL_TIM_ConfigClockSource+0x11e>
 8004f88:	2b60      	cmp	r3, #96	@ 0x60
 8004f8a:	d877      	bhi.n	800507c <HAL_TIM_ConfigClockSource+0x170>
 8004f8c:	2b50      	cmp	r3, #80	@ 0x50
 8004f8e:	d03c      	beq.n	800500a <HAL_TIM_ConfigClockSource+0xfe>
 8004f90:	2b50      	cmp	r3, #80	@ 0x50
 8004f92:	d873      	bhi.n	800507c <HAL_TIM_ConfigClockSource+0x170>
 8004f94:	2b40      	cmp	r3, #64	@ 0x40
 8004f96:	d058      	beq.n	800504a <HAL_TIM_ConfigClockSource+0x13e>
 8004f98:	2b40      	cmp	r3, #64	@ 0x40
 8004f9a:	d86f      	bhi.n	800507c <HAL_TIM_ConfigClockSource+0x170>
 8004f9c:	2b30      	cmp	r3, #48	@ 0x30
 8004f9e:	d064      	beq.n	800506a <HAL_TIM_ConfigClockSource+0x15e>
 8004fa0:	2b30      	cmp	r3, #48	@ 0x30
 8004fa2:	d86b      	bhi.n	800507c <HAL_TIM_ConfigClockSource+0x170>
 8004fa4:	2b20      	cmp	r3, #32
 8004fa6:	d060      	beq.n	800506a <HAL_TIM_ConfigClockSource+0x15e>
 8004fa8:	2b20      	cmp	r3, #32
 8004faa:	d867      	bhi.n	800507c <HAL_TIM_ConfigClockSource+0x170>
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d05c      	beq.n	800506a <HAL_TIM_ConfigClockSource+0x15e>
 8004fb0:	2b10      	cmp	r3, #16
 8004fb2:	d05a      	beq.n	800506a <HAL_TIM_ConfigClockSource+0x15e>
 8004fb4:	e062      	b.n	800507c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fc6:	f000 fbd3 	bl	8005770 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004fd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	609a      	str	r2, [r3, #8]
      break;
 8004fe2:	e04f      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ff4:	f000 fbbc 	bl	8005770 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689a      	ldr	r2, [r3, #8]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005006:	609a      	str	r2, [r3, #8]
      break;
 8005008:	e03c      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005016:	461a      	mov	r2, r3
 8005018:	f000 fb30 	bl	800567c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2150      	movs	r1, #80	@ 0x50
 8005022:	4618      	mov	r0, r3
 8005024:	f000 fb89 	bl	800573a <TIM_ITRx_SetConfig>
      break;
 8005028:	e02c      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005036:	461a      	mov	r2, r3
 8005038:	f000 fb4f 	bl	80056da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2160      	movs	r1, #96	@ 0x60
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fb79 	bl	800573a <TIM_ITRx_SetConfig>
      break;
 8005048:	e01c      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005056:	461a      	mov	r2, r3
 8005058:	f000 fb10 	bl	800567c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2140      	movs	r1, #64	@ 0x40
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fb69 	bl	800573a <TIM_ITRx_SetConfig>
      break;
 8005068:	e00c      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4619      	mov	r1, r3
 8005074:	4610      	mov	r0, r2
 8005076:	f000 fb60 	bl	800573a <TIM_ITRx_SetConfig>
      break;
 800507a:	e003      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	73fb      	strb	r3, [r7, #15]
      break;
 8005080:	e000      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005082:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005094:	7bfb      	ldrb	r3, [r7, #15]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
	...

080050a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a30      	ldr	r2, [pc, #192]	@ (8005174 <TIM_Base_SetConfig+0xd4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d003      	beq.n	80050c0 <TIM_Base_SetConfig+0x20>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050be:	d108      	bne.n	80050d2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a27      	ldr	r2, [pc, #156]	@ (8005174 <TIM_Base_SetConfig+0xd4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d00b      	beq.n	80050f2 <TIM_Base_SetConfig+0x52>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050e0:	d007      	beq.n	80050f2 <TIM_Base_SetConfig+0x52>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a24      	ldr	r2, [pc, #144]	@ (8005178 <TIM_Base_SetConfig+0xd8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d003      	beq.n	80050f2 <TIM_Base_SetConfig+0x52>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a23      	ldr	r2, [pc, #140]	@ (800517c <TIM_Base_SetConfig+0xdc>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d108      	bne.n	8005104 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	4313      	orrs	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a12      	ldr	r2, [pc, #72]	@ (8005174 <TIM_Base_SetConfig+0xd4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d007      	beq.n	8005140 <TIM_Base_SetConfig+0xa0>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a11      	ldr	r2, [pc, #68]	@ (8005178 <TIM_Base_SetConfig+0xd8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d003      	beq.n	8005140 <TIM_Base_SetConfig+0xa0>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a10      	ldr	r2, [pc, #64]	@ (800517c <TIM_Base_SetConfig+0xdc>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d103      	bne.n	8005148 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	691a      	ldr	r2, [r3, #16]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b01      	cmp	r3, #1
 8005158:	d105      	bne.n	8005166 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f023 0201 	bic.w	r2, r3, #1
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	611a      	str	r2, [r3, #16]
  }
}
 8005166:	bf00      	nop
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	40012c00 	.word	0x40012c00
 8005178:	40014000 	.word	0x40014000
 800517c:	40014400 	.word	0x40014400

08005180 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	f023 0201 	bic.w	r2, r3, #1
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 0303 	bic.w	r3, r3, #3
 80051ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f023 0302 	bic.w	r3, r3, #2
 80051cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a24      	ldr	r2, [pc, #144]	@ (800526c <TIM_OC1_SetConfig+0xec>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d007      	beq.n	80051f0 <TIM_OC1_SetConfig+0x70>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a23      	ldr	r2, [pc, #140]	@ (8005270 <TIM_OC1_SetConfig+0xf0>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d003      	beq.n	80051f0 <TIM_OC1_SetConfig+0x70>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a22      	ldr	r2, [pc, #136]	@ (8005274 <TIM_OC1_SetConfig+0xf4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d10c      	bne.n	800520a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f023 0308 	bic.w	r3, r3, #8
 80051f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	4313      	orrs	r3, r2
 8005200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f023 0304 	bic.w	r3, r3, #4
 8005208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a17      	ldr	r2, [pc, #92]	@ (800526c <TIM_OC1_SetConfig+0xec>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d007      	beq.n	8005222 <TIM_OC1_SetConfig+0xa2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a16      	ldr	r2, [pc, #88]	@ (8005270 <TIM_OC1_SetConfig+0xf0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d003      	beq.n	8005222 <TIM_OC1_SetConfig+0xa2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a15      	ldr	r2, [pc, #84]	@ (8005274 <TIM_OC1_SetConfig+0xf4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d111      	bne.n	8005246 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	4313      	orrs	r3, r2
 800523a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	4313      	orrs	r3, r2
 8005244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	621a      	str	r2, [r3, #32]
}
 8005260:	bf00      	nop
 8005262:	371c      	adds	r7, #28
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	40012c00 	.word	0x40012c00
 8005270:	40014000 	.word	0x40014000
 8005274:	40014400 	.word	0x40014400

08005278 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	f023 0210 	bic.w	r2, r3, #16
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	021b      	lsls	r3, r3, #8
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	4313      	orrs	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f023 0320 	bic.w	r3, r3, #32
 80052c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	011b      	lsls	r3, r3, #4
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a22      	ldr	r2, [pc, #136]	@ (8005360 <TIM_OC2_SetConfig+0xe8>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d10d      	bne.n	80052f8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	011b      	lsls	r3, r3, #4
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a19      	ldr	r2, [pc, #100]	@ (8005360 <TIM_OC2_SetConfig+0xe8>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d007      	beq.n	8005310 <TIM_OC2_SetConfig+0x98>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a18      	ldr	r2, [pc, #96]	@ (8005364 <TIM_OC2_SetConfig+0xec>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d003      	beq.n	8005310 <TIM_OC2_SetConfig+0x98>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a17      	ldr	r2, [pc, #92]	@ (8005368 <TIM_OC2_SetConfig+0xf0>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d113      	bne.n	8005338 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005316:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800531e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	4313      	orrs	r3, r2
 8005336:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	621a      	str	r2, [r3, #32]
}
 8005352:	bf00      	nop
 8005354:	371c      	adds	r7, #28
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	40012c00 	.word	0x40012c00
 8005364:	40014000 	.word	0x40014000
 8005368:	40014400 	.word	0x40014400

0800536c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800539a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800539e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0303 	bic.w	r3, r3, #3
 80053a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	021b      	lsls	r3, r3, #8
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a21      	ldr	r2, [pc, #132]	@ (8005450 <TIM_OC3_SetConfig+0xe4>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d10d      	bne.n	80053ea <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	021b      	lsls	r3, r3, #8
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	4313      	orrs	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a18      	ldr	r2, [pc, #96]	@ (8005450 <TIM_OC3_SetConfig+0xe4>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d007      	beq.n	8005402 <TIM_OC3_SetConfig+0x96>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a17      	ldr	r2, [pc, #92]	@ (8005454 <TIM_OC3_SetConfig+0xe8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d003      	beq.n	8005402 <TIM_OC3_SetConfig+0x96>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a16      	ldr	r2, [pc, #88]	@ (8005458 <TIM_OC3_SetConfig+0xec>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d113      	bne.n	800542a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	011b      	lsls	r3, r3, #4
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	4313      	orrs	r3, r2
 8005428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	621a      	str	r2, [r3, #32]
}
 8005444:	bf00      	nop
 8005446:	371c      	adds	r7, #28
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	40012c00 	.word	0x40012c00
 8005454:	40014000 	.word	0x40014000
 8005458:	40014400 	.word	0x40014400

0800545c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800548a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800548e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	021b      	lsls	r3, r3, #8
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	031b      	lsls	r3, r3, #12
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a14      	ldr	r2, [pc, #80]	@ (800550c <TIM_OC4_SetConfig+0xb0>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d007      	beq.n	80054d0 <TIM_OC4_SetConfig+0x74>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a13      	ldr	r2, [pc, #76]	@ (8005510 <TIM_OC4_SetConfig+0xb4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d003      	beq.n	80054d0 <TIM_OC4_SetConfig+0x74>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a12      	ldr	r2, [pc, #72]	@ (8005514 <TIM_OC4_SetConfig+0xb8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d109      	bne.n	80054e4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	019b      	lsls	r3, r3, #6
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	621a      	str	r2, [r3, #32]
}
 80054fe:	bf00      	nop
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	40012c00 	.word	0x40012c00
 8005510:	40014000 	.word	0x40014000
 8005514:	40014400 	.word	0x40014400

08005518 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800553e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005546:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800554a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800555c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	041b      	lsls	r3, r3, #16
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	4313      	orrs	r3, r2
 8005568:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a13      	ldr	r2, [pc, #76]	@ (80055bc <TIM_OC5_SetConfig+0xa4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d007      	beq.n	8005582 <TIM_OC5_SetConfig+0x6a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a12      	ldr	r2, [pc, #72]	@ (80055c0 <TIM_OC5_SetConfig+0xa8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d003      	beq.n	8005582 <TIM_OC5_SetConfig+0x6a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a11      	ldr	r2, [pc, #68]	@ (80055c4 <TIM_OC5_SetConfig+0xac>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d109      	bne.n	8005596 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005588:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	021b      	lsls	r3, r3, #8
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	4313      	orrs	r3, r2
 8005594:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	621a      	str	r2, [r3, #32]
}
 80055b0:	bf00      	nop
 80055b2:	371c      	adds	r7, #28
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	40012c00 	.word	0x40012c00
 80055c0:	40014000 	.word	0x40014000
 80055c4:	40014400 	.word	0x40014400

080055c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	021b      	lsls	r3, r3, #8
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	4313      	orrs	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800560e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	051b      	lsls	r3, r3, #20
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	4313      	orrs	r3, r2
 800561a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a14      	ldr	r2, [pc, #80]	@ (8005670 <TIM_OC6_SetConfig+0xa8>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d007      	beq.n	8005634 <TIM_OC6_SetConfig+0x6c>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a13      	ldr	r2, [pc, #76]	@ (8005674 <TIM_OC6_SetConfig+0xac>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d003      	beq.n	8005634 <TIM_OC6_SetConfig+0x6c>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a12      	ldr	r2, [pc, #72]	@ (8005678 <TIM_OC6_SetConfig+0xb0>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d109      	bne.n	8005648 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800563a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	029b      	lsls	r3, r3, #10
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	4313      	orrs	r3, r2
 8005646:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	621a      	str	r2, [r3, #32]
}
 8005662:	bf00      	nop
 8005664:	371c      	adds	r7, #28
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	40012c00 	.word	0x40012c00
 8005674:	40014000 	.word	0x40014000
 8005678:	40014400 	.word	0x40014400

0800567c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	f023 0201 	bic.w	r2, r3, #1
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f023 030a 	bic.w	r3, r3, #10
 80056b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	4313      	orrs	r3, r2
 80056c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	621a      	str	r2, [r3, #32]
}
 80056ce:	bf00      	nop
 80056d0:	371c      	adds	r7, #28
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056da:	b480      	push	{r7}
 80056dc:	b087      	sub	sp, #28
 80056de:	af00      	add	r7, sp, #0
 80056e0:	60f8      	str	r0, [r7, #12]
 80056e2:	60b9      	str	r1, [r7, #8]
 80056e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	f023 0210 	bic.w	r2, r3, #16
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005704:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	031b      	lsls	r3, r3, #12
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005716:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	4313      	orrs	r3, r2
 8005720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	621a      	str	r2, [r3, #32]
}
 800572e:	bf00      	nop
 8005730:	371c      	adds	r7, #28
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800573a:	b480      	push	{r7}
 800573c:	b085      	sub	sp, #20
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005750:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	4313      	orrs	r3, r2
 8005758:	f043 0307 	orr.w	r3, r3, #7
 800575c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	609a      	str	r2, [r3, #8]
}
 8005764:	bf00      	nop
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
 800577c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800578a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	021a      	lsls	r2, r3, #8
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	431a      	orrs	r2, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4313      	orrs	r3, r2
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	4313      	orrs	r3, r2
 800579c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	609a      	str	r2, [r3, #8]
}
 80057a4:	bf00      	nop
 80057a6:	371c      	adds	r7, #28
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057c4:	2302      	movs	r3, #2
 80057c6:	e04f      	b.n	8005868 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a21      	ldr	r2, [pc, #132]	@ (8005874 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d108      	bne.n	8005804 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80057f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4313      	orrs	r3, r2
 8005802:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800580a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a14      	ldr	r2, [pc, #80]	@ (8005874 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d009      	beq.n	800583c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005830:	d004      	beq.n	800583c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a10      	ldr	r2, [pc, #64]	@ (8005878 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d10c      	bne.n	8005856 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005842:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	4313      	orrs	r3, r2
 800584c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	40012c00 	.word	0x40012c00
 8005878:	40014000 	.word	0x40014000

0800587c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e040      	b.n	8005910 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005892:	2b00      	cmp	r3, #0
 8005894:	d106      	bne.n	80058a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7fc f87c 	bl	800199c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2224      	movs	r2, #36	@ 0x24
 80058a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0201 	bic.w	r2, r2, #1
 80058b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fade 	bl	8005e84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f8af 	bl	8005a2c <UART_SetConfig>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d101      	bne.n	80058d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e01b      	b.n	8005910 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689a      	ldr	r2, [r3, #8]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0201 	orr.w	r2, r2, #1
 8005906:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 fb5d 	bl	8005fc8 <UART_CheckIdleState>
 800590e:	4603      	mov	r3, r0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b08a      	sub	sp, #40	@ 0x28
 800591c:	af02      	add	r7, sp, #8
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	603b      	str	r3, [r7, #0]
 8005924:	4613      	mov	r3, r2
 8005926:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800592c:	2b20      	cmp	r3, #32
 800592e:	d177      	bne.n	8005a20 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <HAL_UART_Transmit+0x24>
 8005936:	88fb      	ldrh	r3, [r7, #6]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d101      	bne.n	8005940 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e070      	b.n	8005a22 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2221      	movs	r2, #33	@ 0x21
 800594c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800594e:	f7fc fa69 	bl	8001e24 <HAL_GetTick>
 8005952:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	88fa      	ldrh	r2, [r7, #6]
 8005958:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	88fa      	ldrh	r2, [r7, #6]
 8005960:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800596c:	d108      	bne.n	8005980 <HAL_UART_Transmit+0x68>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d104      	bne.n	8005980 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005976:	2300      	movs	r3, #0
 8005978:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	61bb      	str	r3, [r7, #24]
 800597e:	e003      	b.n	8005988 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005984:	2300      	movs	r3, #0
 8005986:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005988:	e02f      	b.n	80059ea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	2200      	movs	r2, #0
 8005992:	2180      	movs	r1, #128	@ 0x80
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 fbbf 	bl	8006118 <UART_WaitOnFlagUntilTimeout>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d004      	beq.n	80059aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2220      	movs	r2, #32
 80059a4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e03b      	b.n	8005a22 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10b      	bne.n	80059c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	881a      	ldrh	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059bc:	b292      	uxth	r2, r2
 80059be:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	3302      	adds	r3, #2
 80059c4:	61bb      	str	r3, [r7, #24]
 80059c6:	e007      	b.n	80059d8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	781a      	ldrb	r2, [r3, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	3301      	adds	r3, #1
 80059d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1c9      	bne.n	800598a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2200      	movs	r2, #0
 80059fe:	2140      	movs	r1, #64	@ 0x40
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 fb89 	bl	8006118 <UART_WaitOnFlagUntilTimeout>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d004      	beq.n	8005a16 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e005      	b.n	8005a22 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	e000      	b.n	8005a22 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005a20:	2302      	movs	r3, #2
  }
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3720      	adds	r7, #32
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
	...

08005a2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a30:	b08a      	sub	sp, #40	@ 0x28
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	431a      	orrs	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	4bb4      	ldr	r3, [pc, #720]	@ (8005d2c <UART_SetConfig+0x300>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	6812      	ldr	r2, [r2, #0]
 8005a62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a64:	430b      	orrs	r3, r1
 8005a66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	68da      	ldr	r2, [r3, #12]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4aa9      	ldr	r2, [pc, #676]	@ (8005d30 <UART_SetConfig+0x304>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d004      	beq.n	8005a98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a94:	4313      	orrs	r3, r2
 8005a96:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4aa0      	ldr	r2, [pc, #640]	@ (8005d34 <UART_SetConfig+0x308>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d126      	bne.n	8005b04 <UART_SetConfig+0xd8>
 8005ab6:	4ba0      	ldr	r3, [pc, #640]	@ (8005d38 <UART_SetConfig+0x30c>)
 8005ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005abc:	f003 0303 	and.w	r3, r3, #3
 8005ac0:	2b03      	cmp	r3, #3
 8005ac2:	d81b      	bhi.n	8005afc <UART_SetConfig+0xd0>
 8005ac4:	a201      	add	r2, pc, #4	@ (adr r2, 8005acc <UART_SetConfig+0xa0>)
 8005ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aca:	bf00      	nop
 8005acc:	08005add 	.word	0x08005add
 8005ad0:	08005aed 	.word	0x08005aed
 8005ad4:	08005ae5 	.word	0x08005ae5
 8005ad8:	08005af5 	.word	0x08005af5
 8005adc:	2301      	movs	r3, #1
 8005ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ae2:	e080      	b.n	8005be6 <UART_SetConfig+0x1ba>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aea:	e07c      	b.n	8005be6 <UART_SetConfig+0x1ba>
 8005aec:	2304      	movs	r3, #4
 8005aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005af2:	e078      	b.n	8005be6 <UART_SetConfig+0x1ba>
 8005af4:	2308      	movs	r3, #8
 8005af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005afa:	e074      	b.n	8005be6 <UART_SetConfig+0x1ba>
 8005afc:	2310      	movs	r3, #16
 8005afe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b02:	e070      	b.n	8005be6 <UART_SetConfig+0x1ba>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a8c      	ldr	r2, [pc, #560]	@ (8005d3c <UART_SetConfig+0x310>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d138      	bne.n	8005b80 <UART_SetConfig+0x154>
 8005b0e:	4b8a      	ldr	r3, [pc, #552]	@ (8005d38 <UART_SetConfig+0x30c>)
 8005b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b14:	f003 030c 	and.w	r3, r3, #12
 8005b18:	2b0c      	cmp	r3, #12
 8005b1a:	d82d      	bhi.n	8005b78 <UART_SetConfig+0x14c>
 8005b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b24 <UART_SetConfig+0xf8>)
 8005b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b22:	bf00      	nop
 8005b24:	08005b59 	.word	0x08005b59
 8005b28:	08005b79 	.word	0x08005b79
 8005b2c:	08005b79 	.word	0x08005b79
 8005b30:	08005b79 	.word	0x08005b79
 8005b34:	08005b69 	.word	0x08005b69
 8005b38:	08005b79 	.word	0x08005b79
 8005b3c:	08005b79 	.word	0x08005b79
 8005b40:	08005b79 	.word	0x08005b79
 8005b44:	08005b61 	.word	0x08005b61
 8005b48:	08005b79 	.word	0x08005b79
 8005b4c:	08005b79 	.word	0x08005b79
 8005b50:	08005b79 	.word	0x08005b79
 8005b54:	08005b71 	.word	0x08005b71
 8005b58:	2300      	movs	r3, #0
 8005b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b5e:	e042      	b.n	8005be6 <UART_SetConfig+0x1ba>
 8005b60:	2302      	movs	r3, #2
 8005b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b66:	e03e      	b.n	8005be6 <UART_SetConfig+0x1ba>
 8005b68:	2304      	movs	r3, #4
 8005b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b6e:	e03a      	b.n	8005be6 <UART_SetConfig+0x1ba>
 8005b70:	2308      	movs	r3, #8
 8005b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b76:	e036      	b.n	8005be6 <UART_SetConfig+0x1ba>
 8005b78:	2310      	movs	r3, #16
 8005b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b7e:	e032      	b.n	8005be6 <UART_SetConfig+0x1ba>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a6a      	ldr	r2, [pc, #424]	@ (8005d30 <UART_SetConfig+0x304>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d12a      	bne.n	8005be0 <UART_SetConfig+0x1b4>
 8005b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8005d38 <UART_SetConfig+0x30c>)
 8005b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005b94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b98:	d01a      	beq.n	8005bd0 <UART_SetConfig+0x1a4>
 8005b9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b9e:	d81b      	bhi.n	8005bd8 <UART_SetConfig+0x1ac>
 8005ba0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ba4:	d00c      	beq.n	8005bc0 <UART_SetConfig+0x194>
 8005ba6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005baa:	d815      	bhi.n	8005bd8 <UART_SetConfig+0x1ac>
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d003      	beq.n	8005bb8 <UART_SetConfig+0x18c>
 8005bb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bb4:	d008      	beq.n	8005bc8 <UART_SetConfig+0x19c>
 8005bb6:	e00f      	b.n	8005bd8 <UART_SetConfig+0x1ac>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bbe:	e012      	b.n	8005be6 <UART_SetConfig+0x1ba>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bc6:	e00e      	b.n	8005be6 <UART_SetConfig+0x1ba>
 8005bc8:	2304      	movs	r3, #4
 8005bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bce:	e00a      	b.n	8005be6 <UART_SetConfig+0x1ba>
 8005bd0:	2308      	movs	r3, #8
 8005bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bd6:	e006      	b.n	8005be6 <UART_SetConfig+0x1ba>
 8005bd8:	2310      	movs	r3, #16
 8005bda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bde:	e002      	b.n	8005be6 <UART_SetConfig+0x1ba>
 8005be0:	2310      	movs	r3, #16
 8005be2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a51      	ldr	r2, [pc, #324]	@ (8005d30 <UART_SetConfig+0x304>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d17a      	bne.n	8005ce6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bf0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005bf4:	2b08      	cmp	r3, #8
 8005bf6:	d824      	bhi.n	8005c42 <UART_SetConfig+0x216>
 8005bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8005c00 <UART_SetConfig+0x1d4>)
 8005bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfe:	bf00      	nop
 8005c00:	08005c25 	.word	0x08005c25
 8005c04:	08005c43 	.word	0x08005c43
 8005c08:	08005c2d 	.word	0x08005c2d
 8005c0c:	08005c43 	.word	0x08005c43
 8005c10:	08005c33 	.word	0x08005c33
 8005c14:	08005c43 	.word	0x08005c43
 8005c18:	08005c43 	.word	0x08005c43
 8005c1c:	08005c43 	.word	0x08005c43
 8005c20:	08005c3b 	.word	0x08005c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c24:	f7fe fc6e 	bl	8004504 <HAL_RCC_GetPCLK1Freq>
 8005c28:	61f8      	str	r0, [r7, #28]
        break;
 8005c2a:	e010      	b.n	8005c4e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c2c:	4b44      	ldr	r3, [pc, #272]	@ (8005d40 <UART_SetConfig+0x314>)
 8005c2e:	61fb      	str	r3, [r7, #28]
        break;
 8005c30:	e00d      	b.n	8005c4e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c32:	f7fe fbcf 	bl	80043d4 <HAL_RCC_GetSysClockFreq>
 8005c36:	61f8      	str	r0, [r7, #28]
        break;
 8005c38:	e009      	b.n	8005c4e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c3e:	61fb      	str	r3, [r7, #28]
        break;
 8005c40:	e005      	b.n	8005c4e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005c42:	2300      	movs	r3, #0
 8005c44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005c4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 8107 	beq.w	8005e64 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	4413      	add	r3, r2
 8005c60:	69fa      	ldr	r2, [r7, #28]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d305      	bcc.n	8005c72 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c6c:	69fa      	ldr	r2, [r7, #28]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d903      	bls.n	8005c7a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005c78:	e0f4      	b.n	8005e64 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	461c      	mov	r4, r3
 8005c80:	4615      	mov	r5, r2
 8005c82:	f04f 0200 	mov.w	r2, #0
 8005c86:	f04f 0300 	mov.w	r3, #0
 8005c8a:	022b      	lsls	r3, r5, #8
 8005c8c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005c90:	0222      	lsls	r2, r4, #8
 8005c92:	68f9      	ldr	r1, [r7, #12]
 8005c94:	6849      	ldr	r1, [r1, #4]
 8005c96:	0849      	lsrs	r1, r1, #1
 8005c98:	2000      	movs	r0, #0
 8005c9a:	4688      	mov	r8, r1
 8005c9c:	4681      	mov	r9, r0
 8005c9e:	eb12 0a08 	adds.w	sl, r2, r8
 8005ca2:	eb43 0b09 	adc.w	fp, r3, r9
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	603b      	str	r3, [r7, #0]
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cb4:	4650      	mov	r0, sl
 8005cb6:	4659      	mov	r1, fp
 8005cb8:	f7fa ff76 	bl	8000ba8 <__aeabi_uldivmod>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cca:	d308      	bcc.n	8005cde <UART_SetConfig+0x2b2>
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cd2:	d204      	bcs.n	8005cde <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	60da      	str	r2, [r3, #12]
 8005cdc:	e0c2      	b.n	8005e64 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005ce4:	e0be      	b.n	8005e64 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cee:	d16a      	bne.n	8005dc6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005cf0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005cf4:	2b08      	cmp	r3, #8
 8005cf6:	d834      	bhi.n	8005d62 <UART_SetConfig+0x336>
 8005cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8005d00 <UART_SetConfig+0x2d4>)
 8005cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfe:	bf00      	nop
 8005d00:	08005d25 	.word	0x08005d25
 8005d04:	08005d45 	.word	0x08005d45
 8005d08:	08005d4d 	.word	0x08005d4d
 8005d0c:	08005d63 	.word	0x08005d63
 8005d10:	08005d53 	.word	0x08005d53
 8005d14:	08005d63 	.word	0x08005d63
 8005d18:	08005d63 	.word	0x08005d63
 8005d1c:	08005d63 	.word	0x08005d63
 8005d20:	08005d5b 	.word	0x08005d5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d24:	f7fe fbee 	bl	8004504 <HAL_RCC_GetPCLK1Freq>
 8005d28:	61f8      	str	r0, [r7, #28]
        break;
 8005d2a:	e020      	b.n	8005d6e <UART_SetConfig+0x342>
 8005d2c:	efff69f3 	.word	0xefff69f3
 8005d30:	40008000 	.word	0x40008000
 8005d34:	40013800 	.word	0x40013800
 8005d38:	40021000 	.word	0x40021000
 8005d3c:	40004400 	.word	0x40004400
 8005d40:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d44:	f7fe fbf4 	bl	8004530 <HAL_RCC_GetPCLK2Freq>
 8005d48:	61f8      	str	r0, [r7, #28]
        break;
 8005d4a:	e010      	b.n	8005d6e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d4c:	4b4c      	ldr	r3, [pc, #304]	@ (8005e80 <UART_SetConfig+0x454>)
 8005d4e:	61fb      	str	r3, [r7, #28]
        break;
 8005d50:	e00d      	b.n	8005d6e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d52:	f7fe fb3f 	bl	80043d4 <HAL_RCC_GetSysClockFreq>
 8005d56:	61f8      	str	r0, [r7, #28]
        break;
 8005d58:	e009      	b.n	8005d6e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d5e:	61fb      	str	r3, [r7, #28]
        break;
 8005d60:	e005      	b.n	8005d6e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005d6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d077      	beq.n	8005e64 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	005a      	lsls	r2, r3, #1
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	085b      	lsrs	r3, r3, #1
 8005d7e:	441a      	add	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d88:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	2b0f      	cmp	r3, #15
 8005d8e:	d916      	bls.n	8005dbe <UART_SetConfig+0x392>
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d96:	d212      	bcs.n	8005dbe <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	f023 030f 	bic.w	r3, r3, #15
 8005da0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	085b      	lsrs	r3, r3, #1
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	8afb      	ldrh	r3, [r7, #22]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	8afa      	ldrh	r2, [r7, #22]
 8005dba:	60da      	str	r2, [r3, #12]
 8005dbc:	e052      	b.n	8005e64 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005dc4:	e04e      	b.n	8005e64 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005dc6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005dca:	2b08      	cmp	r3, #8
 8005dcc:	d827      	bhi.n	8005e1e <UART_SetConfig+0x3f2>
 8005dce:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd4 <UART_SetConfig+0x3a8>)
 8005dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd4:	08005df9 	.word	0x08005df9
 8005dd8:	08005e01 	.word	0x08005e01
 8005ddc:	08005e09 	.word	0x08005e09
 8005de0:	08005e1f 	.word	0x08005e1f
 8005de4:	08005e0f 	.word	0x08005e0f
 8005de8:	08005e1f 	.word	0x08005e1f
 8005dec:	08005e1f 	.word	0x08005e1f
 8005df0:	08005e1f 	.word	0x08005e1f
 8005df4:	08005e17 	.word	0x08005e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005df8:	f7fe fb84 	bl	8004504 <HAL_RCC_GetPCLK1Freq>
 8005dfc:	61f8      	str	r0, [r7, #28]
        break;
 8005dfe:	e014      	b.n	8005e2a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e00:	f7fe fb96 	bl	8004530 <HAL_RCC_GetPCLK2Freq>
 8005e04:	61f8      	str	r0, [r7, #28]
        break;
 8005e06:	e010      	b.n	8005e2a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e08:	4b1d      	ldr	r3, [pc, #116]	@ (8005e80 <UART_SetConfig+0x454>)
 8005e0a:	61fb      	str	r3, [r7, #28]
        break;
 8005e0c:	e00d      	b.n	8005e2a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e0e:	f7fe fae1 	bl	80043d4 <HAL_RCC_GetSysClockFreq>
 8005e12:	61f8      	str	r0, [r7, #28]
        break;
 8005e14:	e009      	b.n	8005e2a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e1a:	61fb      	str	r3, [r7, #28]
        break;
 8005e1c:	e005      	b.n	8005e2a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005e28:	bf00      	nop
    }

    if (pclk != 0U)
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d019      	beq.n	8005e64 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	085a      	lsrs	r2, r3, #1
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	441a      	add	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e42:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	2b0f      	cmp	r3, #15
 8005e48:	d909      	bls.n	8005e5e <UART_SetConfig+0x432>
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e50:	d205      	bcs.n	8005e5e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	60da      	str	r2, [r3, #12]
 8005e5c:	e002      	b.n	8005e64 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005e70:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3728      	adds	r7, #40	@ 0x28
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e7e:	bf00      	nop
 8005e80:	00f42400 	.word	0x00f42400

08005e84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e90:	f003 0308 	and.w	r3, r3, #8
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00a      	beq.n	8005eae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00a      	beq.n	8005ed0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00a      	beq.n	8005ef2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef6:	f003 0304 	and.w	r3, r3, #4
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00a      	beq.n	8005f14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f18:	f003 0310 	and.w	r3, r3, #16
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00a      	beq.n	8005f36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3a:	f003 0320 	and.w	r3, r3, #32
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d01a      	beq.n	8005f9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f82:	d10a      	bne.n	8005f9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00a      	beq.n	8005fbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	605a      	str	r2, [r3, #4]
  }
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b098      	sub	sp, #96	@ 0x60
 8005fcc:	af02      	add	r7, sp, #8
 8005fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fd8:	f7fb ff24 	bl	8001e24 <HAL_GetTick>
 8005fdc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0308 	and.w	r3, r3, #8
 8005fe8:	2b08      	cmp	r3, #8
 8005fea:	d12e      	bne.n	800604a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f88c 	bl	8006118 <UART_WaitOnFlagUntilTimeout>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d021      	beq.n	800604a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800600e:	e853 3f00 	ldrex	r3, [r3]
 8006012:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006016:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800601a:	653b      	str	r3, [r7, #80]	@ 0x50
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006024:	647b      	str	r3, [r7, #68]	@ 0x44
 8006026:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006028:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800602a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800602c:	e841 2300 	strex	r3, r2, [r1]
 8006030:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1e6      	bne.n	8006006 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2220      	movs	r2, #32
 800603c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e062      	b.n	8006110 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0304 	and.w	r3, r3, #4
 8006054:	2b04      	cmp	r3, #4
 8006056:	d149      	bne.n	80060ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006058:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006060:	2200      	movs	r2, #0
 8006062:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f856 	bl	8006118 <UART_WaitOnFlagUntilTimeout>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d03c      	beq.n	80060ec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607a:	e853 3f00 	ldrex	r3, [r3]
 800607e:	623b      	str	r3, [r7, #32]
   return(result);
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006086:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	461a      	mov	r2, r3
 800608e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006090:	633b      	str	r3, [r7, #48]	@ 0x30
 8006092:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006094:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006096:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006098:	e841 2300 	strex	r3, r2, [r1]
 800609c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800609e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e6      	bne.n	8006072 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3308      	adds	r3, #8
 80060aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	e853 3f00 	ldrex	r3, [r3]
 80060b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f023 0301 	bic.w	r3, r3, #1
 80060ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	3308      	adds	r3, #8
 80060c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060c4:	61fa      	str	r2, [r7, #28]
 80060c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c8:	69b9      	ldr	r1, [r7, #24]
 80060ca:	69fa      	ldr	r2, [r7, #28]
 80060cc:	e841 2300 	strex	r3, r2, [r1]
 80060d0:	617b      	str	r3, [r7, #20]
   return(result);
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1e5      	bne.n	80060a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2220      	movs	r2, #32
 80060dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e011      	b.n	8006110 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2220      	movs	r2, #32
 80060f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2220      	movs	r2, #32
 80060f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3758      	adds	r7, #88	@ 0x58
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	603b      	str	r3, [r7, #0]
 8006124:	4613      	mov	r3, r2
 8006126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006128:	e04f      	b.n	80061ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006130:	d04b      	beq.n	80061ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006132:	f7fb fe77 	bl	8001e24 <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	429a      	cmp	r2, r3
 8006140:	d302      	bcc.n	8006148 <UART_WaitOnFlagUntilTimeout+0x30>
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e04e      	b.n	80061ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0304 	and.w	r3, r3, #4
 8006156:	2b00      	cmp	r3, #0
 8006158:	d037      	beq.n	80061ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	2b80      	cmp	r3, #128	@ 0x80
 800615e:	d034      	beq.n	80061ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	2b40      	cmp	r3, #64	@ 0x40
 8006164:	d031      	beq.n	80061ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	f003 0308 	and.w	r3, r3, #8
 8006170:	2b08      	cmp	r3, #8
 8006172:	d110      	bne.n	8006196 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2208      	movs	r2, #8
 800617a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 f838 	bl	80061f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2208      	movs	r2, #8
 8006186:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e029      	b.n	80061ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	69db      	ldr	r3, [r3, #28]
 800619c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061a4:	d111      	bne.n	80061ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 f81e 	bl	80061f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2220      	movs	r2, #32
 80061ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e00f      	b.n	80061ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	69da      	ldr	r2, [r3, #28]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	4013      	ands	r3, r2
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	bf0c      	ite	eq
 80061da:	2301      	moveq	r3, #1
 80061dc:	2300      	movne	r3, #0
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	461a      	mov	r2, r3
 80061e2:	79fb      	ldrb	r3, [r7, #7]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d0a0      	beq.n	800612a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b095      	sub	sp, #84	@ 0x54
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006202:	e853 3f00 	ldrex	r3, [r3]
 8006206:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800620e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	461a      	mov	r2, r3
 8006216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006218:	643b      	str	r3, [r7, #64]	@ 0x40
 800621a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800621e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006220:	e841 2300 	strex	r3, r2, [r1]
 8006224:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1e6      	bne.n	80061fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3308      	adds	r3, #8
 8006232:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	e853 3f00 	ldrex	r3, [r3]
 800623a:	61fb      	str	r3, [r7, #28]
   return(result);
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	f023 0301 	bic.w	r3, r3, #1
 8006242:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3308      	adds	r3, #8
 800624a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800624c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800624e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006250:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006252:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006254:	e841 2300 	strex	r3, r2, [r1]
 8006258:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800625a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1e5      	bne.n	800622c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006264:	2b01      	cmp	r3, #1
 8006266:	d118      	bne.n	800629a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	e853 3f00 	ldrex	r3, [r3]
 8006274:	60bb      	str	r3, [r7, #8]
   return(result);
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f023 0310 	bic.w	r3, r3, #16
 800627c:	647b      	str	r3, [r7, #68]	@ 0x44
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006286:	61bb      	str	r3, [r7, #24]
 8006288:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628a:	6979      	ldr	r1, [r7, #20]
 800628c:	69ba      	ldr	r2, [r7, #24]
 800628e:	e841 2300 	strex	r3, r2, [r1]
 8006292:	613b      	str	r3, [r7, #16]
   return(result);
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1e6      	bne.n	8006268 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2220      	movs	r2, #32
 800629e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80062ae:	bf00      	nop
 80062b0:	3754      	adds	r7, #84	@ 0x54
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
	...

080062bc <arm_mean_f32>:
 80062bc:	b430      	push	{r4, r5}
 80062be:	088d      	lsrs	r5, r1, #2
 80062c0:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8006334 <arm_mean_f32+0x78>
 80062c4:	d018      	beq.n	80062f8 <arm_mean_f32+0x3c>
 80062c6:	f100 0310 	add.w	r3, r0, #16
 80062ca:	462c      	mov	r4, r5
 80062cc:	ed53 5a04 	vldr	s11, [r3, #-16]
 80062d0:	ed13 6a03 	vldr	s12, [r3, #-12]
 80062d4:	ed53 6a02 	vldr	s13, [r3, #-8]
 80062d8:	ed13 7a01 	vldr	s14, [r3, #-4]
 80062dc:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80062e0:	3c01      	subs	r4, #1
 80062e2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80062e6:	f103 0310 	add.w	r3, r3, #16
 80062ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062f2:	d1eb      	bne.n	80062cc <arm_mean_f32+0x10>
 80062f4:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80062f8:	f011 0303 	ands.w	r3, r1, #3
 80062fc:	d00f      	beq.n	800631e <arm_mean_f32+0x62>
 80062fe:	ed90 7a00 	vldr	s14, [r0]
 8006302:	3b01      	subs	r3, #1
 8006304:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006308:	d009      	beq.n	800631e <arm_mean_f32+0x62>
 800630a:	ed90 7a01 	vldr	s14, [r0, #4]
 800630e:	2b01      	cmp	r3, #1
 8006310:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006314:	bf1c      	itt	ne
 8006316:	ed90 7a02 	vldrne	s14, [r0, #8]
 800631a:	ee77 7a87 	vaddne.f32	s15, s15, s14
 800631e:	ee07 1a10 	vmov	s14, r1
 8006322:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006326:	bc30      	pop	{r4, r5}
 8006328:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800632c:	edc2 6a00 	vstr	s13, [r2]
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	00000000 	.word	0x00000000

08006338 <arm_rfft_32_fast_init_f32>:
 8006338:	b178      	cbz	r0, 800635a <arm_rfft_32_fast_init_f32+0x22>
 800633a:	b430      	push	{r4, r5}
 800633c:	4908      	ldr	r1, [pc, #32]	@ (8006360 <arm_rfft_32_fast_init_f32+0x28>)
 800633e:	4a09      	ldr	r2, [pc, #36]	@ (8006364 <arm_rfft_32_fast_init_f32+0x2c>)
 8006340:	2310      	movs	r3, #16
 8006342:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006346:	8003      	strh	r3, [r0, #0]
 8006348:	2520      	movs	r5, #32
 800634a:	2414      	movs	r4, #20
 800634c:	4b06      	ldr	r3, [pc, #24]	@ (8006368 <arm_rfft_32_fast_init_f32+0x30>)
 800634e:	8205      	strh	r5, [r0, #16]
 8006350:	8184      	strh	r4, [r0, #12]
 8006352:	6143      	str	r3, [r0, #20]
 8006354:	bc30      	pop	{r4, r5}
 8006356:	2000      	movs	r0, #0
 8006358:	4770      	bx	lr
 800635a:	f04f 30ff 	mov.w	r0, #4294967295
 800635e:	4770      	bx	lr
 8006360:	0800b16c 	.word	0x0800b16c
 8006364:	0800faa4 	.word	0x0800faa4
 8006368:	08018824 	.word	0x08018824

0800636c <arm_rfft_64_fast_init_f32>:
 800636c:	b178      	cbz	r0, 800638e <arm_rfft_64_fast_init_f32+0x22>
 800636e:	b430      	push	{r4, r5}
 8006370:	4908      	ldr	r1, [pc, #32]	@ (8006394 <arm_rfft_64_fast_init_f32+0x28>)
 8006372:	4a09      	ldr	r2, [pc, #36]	@ (8006398 <arm_rfft_64_fast_init_f32+0x2c>)
 8006374:	2320      	movs	r3, #32
 8006376:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800637a:	8003      	strh	r3, [r0, #0]
 800637c:	2540      	movs	r5, #64	@ 0x40
 800637e:	2430      	movs	r4, #48	@ 0x30
 8006380:	4b06      	ldr	r3, [pc, #24]	@ (800639c <arm_rfft_64_fast_init_f32+0x30>)
 8006382:	8205      	strh	r5, [r0, #16]
 8006384:	8184      	strh	r4, [r0, #12]
 8006386:	6143      	str	r3, [r0, #20]
 8006388:	bc30      	pop	{r4, r5}
 800638a:	2000      	movs	r0, #0
 800638c:	4770      	bx	lr
 800638e:	f04f 30ff 	mov.w	r0, #4294967295
 8006392:	4770      	bx	lr
 8006394:	0800d2c4 	.word	0x0800d2c4
 8006398:	08014324 	.word	0x08014324
 800639c:	0801d0a4 	.word	0x0801d0a4

080063a0 <arm_rfft_256_fast_init_f32>:
 80063a0:	b180      	cbz	r0, 80063c4 <arm_rfft_256_fast_init_f32+0x24>
 80063a2:	b430      	push	{r4, r5}
 80063a4:	4909      	ldr	r1, [pc, #36]	@ (80063cc <arm_rfft_256_fast_init_f32+0x2c>)
 80063a6:	4a0a      	ldr	r2, [pc, #40]	@ (80063d0 <arm_rfft_256_fast_init_f32+0x30>)
 80063a8:	2380      	movs	r3, #128	@ 0x80
 80063aa:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80063ae:	8003      	strh	r3, [r0, #0]
 80063b0:	f44f 7580 	mov.w	r5, #256	@ 0x100
 80063b4:	24d0      	movs	r4, #208	@ 0xd0
 80063b6:	4b07      	ldr	r3, [pc, #28]	@ (80063d4 <arm_rfft_256_fast_init_f32+0x34>)
 80063b8:	8205      	strh	r5, [r0, #16]
 80063ba:	8184      	strh	r4, [r0, #12]
 80063bc:	6143      	str	r3, [r0, #20]
 80063be:	bc30      	pop	{r4, r5}
 80063c0:	2000      	movs	r0, #0
 80063c2:	4770      	bx	lr
 80063c4:	f04f 30ff 	mov.w	r0, #4294967295
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	0800afcc 	.word	0x0800afcc
 80063d0:	0800f6a4 	.word	0x0800f6a4
 80063d4:	08018424 	.word	0x08018424

080063d8 <arm_rfft_512_fast_init_f32>:
 80063d8:	b190      	cbz	r0, 8006400 <arm_rfft_512_fast_init_f32+0x28>
 80063da:	b430      	push	{r4, r5}
 80063dc:	490a      	ldr	r1, [pc, #40]	@ (8006408 <arm_rfft_512_fast_init_f32+0x30>)
 80063de:	4a0b      	ldr	r2, [pc, #44]	@ (800640c <arm_rfft_512_fast_init_f32+0x34>)
 80063e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80063e4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80063e8:	8003      	strh	r3, [r0, #0]
 80063ea:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80063ee:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 80063f2:	4b07      	ldr	r3, [pc, #28]	@ (8006410 <arm_rfft_512_fast_init_f32+0x38>)
 80063f4:	8205      	strh	r5, [r0, #16]
 80063f6:	8184      	strh	r4, [r0, #12]
 80063f8:	6143      	str	r3, [r0, #20]
 80063fa:	bc30      	pop	{r4, r5}
 80063fc:	2000      	movs	r0, #0
 80063fe:	4770      	bx	lr
 8006400:	f04f 30ff 	mov.w	r0, #4294967295
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	0800cf54 	.word	0x0800cf54
 800640c:	08013b24 	.word	0x08013b24
 8006410:	0801c8a4 	.word	0x0801c8a4

08006414 <arm_rfft_1024_fast_init_f32>:
 8006414:	b190      	cbz	r0, 800643c <arm_rfft_1024_fast_init_f32+0x28>
 8006416:	b430      	push	{r4, r5}
 8006418:	490a      	ldr	r1, [pc, #40]	@ (8006444 <arm_rfft_1024_fast_init_f32+0x30>)
 800641a:	4a0b      	ldr	r2, [pc, #44]	@ (8006448 <arm_rfft_1024_fast_init_f32+0x34>)
 800641c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006420:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006424:	8003      	strh	r3, [r0, #0]
 8006426:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 800642a:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 800642e:	4b07      	ldr	r3, [pc, #28]	@ (800644c <arm_rfft_1024_fast_init_f32+0x38>)
 8006430:	8205      	strh	r5, [r0, #16]
 8006432:	8184      	strh	r4, [r0, #12]
 8006434:	6143      	str	r3, [r0, #20]
 8006436:	bc30      	pop	{r4, r5}
 8006438:	2000      	movs	r0, #0
 800643a:	4770      	bx	lr
 800643c:	f04f 30ff 	mov.w	r0, #4294967295
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	0800d324 	.word	0x0800d324
 8006448:	08014424 	.word	0x08014424
 800644c:	08015424 	.word	0x08015424

08006450 <arm_rfft_2048_fast_init_f32>:
 8006450:	b190      	cbz	r0, 8006478 <arm_rfft_2048_fast_init_f32+0x28>
 8006452:	b430      	push	{r4, r5}
 8006454:	490a      	ldr	r1, [pc, #40]	@ (8006480 <arm_rfft_2048_fast_init_f32+0x30>)
 8006456:	4a0b      	ldr	r2, [pc, #44]	@ (8006484 <arm_rfft_2048_fast_init_f32+0x34>)
 8006458:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800645c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006460:	8003      	strh	r3, [r0, #0]
 8006462:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8006466:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 800646a:	4b07      	ldr	r3, [pc, #28]	@ (8006488 <arm_rfft_2048_fast_init_f32+0x38>)
 800646c:	8205      	strh	r5, [r0, #16]
 800646e:	8184      	strh	r4, [r0, #12]
 8006470:	6143      	str	r3, [r0, #20]
 8006472:	bc30      	pop	{r4, r5}
 8006474:	2000      	movs	r0, #0
 8006476:	4770      	bx	lr
 8006478:	f04f 30ff 	mov.w	r0, #4294967295
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	0800a1bc 	.word	0x0800a1bc
 8006484:	0800d6a4 	.word	0x0800d6a4
 8006488:	08016424 	.word	0x08016424

0800648c <arm_rfft_4096_fast_init_f32>:
 800648c:	b190      	cbz	r0, 80064b4 <arm_rfft_4096_fast_init_f32+0x28>
 800648e:	b430      	push	{r4, r5}
 8006490:	490a      	ldr	r1, [pc, #40]	@ (80064bc <arm_rfft_4096_fast_init_f32+0x30>)
 8006492:	4a0b      	ldr	r2, [pc, #44]	@ (80064c0 <arm_rfft_4096_fast_init_f32+0x34>)
 8006494:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006498:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800649c:	8003      	strh	r3, [r0, #0]
 800649e:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 80064a2:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 80064a6:	4b07      	ldr	r3, [pc, #28]	@ (80064c4 <arm_rfft_4096_fast_init_f32+0x38>)
 80064a8:	8205      	strh	r5, [r0, #16]
 80064aa:	8184      	strh	r4, [r0, #12]
 80064ac:	6143      	str	r3, [r0, #20]
 80064ae:	bc30      	pop	{r4, r5}
 80064b0:	2000      	movs	r0, #0
 80064b2:	4770      	bx	lr
 80064b4:	f04f 30ff 	mov.w	r0, #4294967295
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	0800b194 	.word	0x0800b194
 80064c0:	0800fb24 	.word	0x0800fb24
 80064c4:	080188a4 	.word	0x080188a4

080064c8 <arm_rfft_fast_init_f32>:
 80064c8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80064cc:	d01f      	beq.n	800650e <arm_rfft_fast_init_f32+0x46>
 80064ce:	d90b      	bls.n	80064e8 <arm_rfft_fast_init_f32+0x20>
 80064d0:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80064d4:	d019      	beq.n	800650a <arm_rfft_fast_init_f32+0x42>
 80064d6:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80064da:	d012      	beq.n	8006502 <arm_rfft_fast_init_f32+0x3a>
 80064dc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80064e0:	d00d      	beq.n	80064fe <arm_rfft_fast_init_f32+0x36>
 80064e2:	f04f 30ff 	mov.w	r0, #4294967295
 80064e6:	4770      	bx	lr
 80064e8:	2940      	cmp	r1, #64	@ 0x40
 80064ea:	d00c      	beq.n	8006506 <arm_rfft_fast_init_f32+0x3e>
 80064ec:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80064f0:	d003      	beq.n	80064fa <arm_rfft_fast_init_f32+0x32>
 80064f2:	2920      	cmp	r1, #32
 80064f4:	d1f5      	bne.n	80064e2 <arm_rfft_fast_init_f32+0x1a>
 80064f6:	4b07      	ldr	r3, [pc, #28]	@ (8006514 <arm_rfft_fast_init_f32+0x4c>)
 80064f8:	4718      	bx	r3
 80064fa:	4b07      	ldr	r3, [pc, #28]	@ (8006518 <arm_rfft_fast_init_f32+0x50>)
 80064fc:	4718      	bx	r3
 80064fe:	4b07      	ldr	r3, [pc, #28]	@ (800651c <arm_rfft_fast_init_f32+0x54>)
 8006500:	4718      	bx	r3
 8006502:	4b07      	ldr	r3, [pc, #28]	@ (8006520 <arm_rfft_fast_init_f32+0x58>)
 8006504:	4718      	bx	r3
 8006506:	4b07      	ldr	r3, [pc, #28]	@ (8006524 <arm_rfft_fast_init_f32+0x5c>)
 8006508:	e7f6      	b.n	80064f8 <arm_rfft_fast_init_f32+0x30>
 800650a:	4b07      	ldr	r3, [pc, #28]	@ (8006528 <arm_rfft_fast_init_f32+0x60>)
 800650c:	e7f4      	b.n	80064f8 <arm_rfft_fast_init_f32+0x30>
 800650e:	4b07      	ldr	r3, [pc, #28]	@ (800652c <arm_rfft_fast_init_f32+0x64>)
 8006510:	e7f2      	b.n	80064f8 <arm_rfft_fast_init_f32+0x30>
 8006512:	bf00      	nop
 8006514:	08006339 	.word	0x08006339
 8006518:	080063a1 	.word	0x080063a1
 800651c:	08006415 	.word	0x08006415
 8006520:	0800648d 	.word	0x0800648d
 8006524:	0800636d 	.word	0x0800636d
 8006528:	08006451 	.word	0x08006451
 800652c:	080063d9 	.word	0x080063d9

08006530 <stage_rfft_f32>:
 8006530:	b410      	push	{r4}
 8006532:	edd1 7a00 	vldr	s15, [r1]
 8006536:	ed91 7a01 	vldr	s14, [r1, #4]
 800653a:	8804      	ldrh	r4, [r0, #0]
 800653c:	6940      	ldr	r0, [r0, #20]
 800653e:	ee37 7a07 	vadd.f32	s14, s14, s14
 8006542:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006546:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800654a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800654e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006552:	3c01      	subs	r4, #1
 8006554:	ee26 7a84 	vmul.f32	s14, s13, s8
 8006558:	ee67 7a84 	vmul.f32	s15, s15, s8
 800655c:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8006560:	ed82 7a00 	vstr	s14, [r2]
 8006564:	edc2 7a01 	vstr	s15, [r2, #4]
 8006568:	3010      	adds	r0, #16
 800656a:	3210      	adds	r2, #16
 800656c:	3b08      	subs	r3, #8
 800656e:	3110      	adds	r1, #16
 8006570:	ed11 5a02 	vldr	s10, [r1, #-8]
 8006574:	ed93 7a02 	vldr	s14, [r3, #8]
 8006578:	ed50 6a02 	vldr	s13, [r0, #-8]
 800657c:	edd3 4a03 	vldr	s9, [r3, #12]
 8006580:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006584:	ed10 6a01 	vldr	s12, [r0, #-4]
 8006588:	ee77 5a45 	vsub.f32	s11, s14, s10
 800658c:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006590:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8006594:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8006598:	ee66 5a25 	vmul.f32	s11, s12, s11
 800659c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80065a0:	ee37 7a23 	vadd.f32	s14, s14, s7
 80065a4:	ee66 6a85 	vmul.f32	s13, s13, s10
 80065a8:	ee26 6a05 	vmul.f32	s12, s12, s10
 80065ac:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80065b0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80065b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80065b8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80065bc:	ee67 7a84 	vmul.f32	s15, s15, s8
 80065c0:	3c01      	subs	r4, #1
 80065c2:	ed02 7a02 	vstr	s14, [r2, #-8]
 80065c6:	ed42 7a01 	vstr	s15, [r2, #-4]
 80065ca:	f1a3 0308 	sub.w	r3, r3, #8
 80065ce:	f101 0108 	add.w	r1, r1, #8
 80065d2:	f100 0008 	add.w	r0, r0, #8
 80065d6:	f102 0208 	add.w	r2, r2, #8
 80065da:	d1c9      	bne.n	8006570 <stage_rfft_f32+0x40>
 80065dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop

080065e4 <merge_rfft_f32>:
 80065e4:	b410      	push	{r4}
 80065e6:	edd1 7a00 	vldr	s15, [r1]
 80065ea:	edd1 6a01 	vldr	s13, [r1, #4]
 80065ee:	8804      	ldrh	r4, [r0, #0]
 80065f0:	6940      	ldr	r0, [r0, #20]
 80065f2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80065f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80065fa:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 80065fe:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006602:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006606:	3c01      	subs	r4, #1
 8006608:	ed82 7a00 	vstr	s14, [r2]
 800660c:	edc2 7a01 	vstr	s15, [r2, #4]
 8006610:	b3dc      	cbz	r4, 800668a <merge_rfft_f32+0xa6>
 8006612:	00e3      	lsls	r3, r4, #3
 8006614:	3b08      	subs	r3, #8
 8006616:	440b      	add	r3, r1
 8006618:	3010      	adds	r0, #16
 800661a:	3210      	adds	r2, #16
 800661c:	3110      	adds	r1, #16
 800661e:	ed11 5a02 	vldr	s10, [r1, #-8]
 8006622:	ed93 7a02 	vldr	s14, [r3, #8]
 8006626:	ed50 6a02 	vldr	s13, [r0, #-8]
 800662a:	edd3 4a03 	vldr	s9, [r3, #12]
 800662e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006632:	ed10 6a01 	vldr	s12, [r0, #-4]
 8006636:	ee75 5a47 	vsub.f32	s11, s10, s14
 800663a:	ee37 7a05 	vadd.f32	s14, s14, s10
 800663e:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8006642:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8006646:	ee66 5a25 	vmul.f32	s11, s12, s11
 800664a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800664e:	ee37 7a63 	vsub.f32	s14, s14, s7
 8006652:	ee66 6a85 	vmul.f32	s13, s13, s10
 8006656:	ee26 6a05 	vmul.f32	s12, s12, s10
 800665a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800665e:	ee37 7a46 	vsub.f32	s14, s14, s12
 8006662:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006666:	ee27 7a04 	vmul.f32	s14, s14, s8
 800666a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800666e:	3c01      	subs	r4, #1
 8006670:	ed02 7a02 	vstr	s14, [r2, #-8]
 8006674:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006678:	f1a3 0308 	sub.w	r3, r3, #8
 800667c:	f101 0108 	add.w	r1, r1, #8
 8006680:	f100 0008 	add.w	r0, r0, #8
 8006684:	f102 0208 	add.w	r2, r2, #8
 8006688:	d1c9      	bne.n	800661e <merge_rfft_f32+0x3a>
 800668a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800668e:	4770      	bx	lr

08006690 <arm_rfft_fast_f32>:
 8006690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006694:	8a05      	ldrh	r5, [r0, #16]
 8006696:	086d      	lsrs	r5, r5, #1
 8006698:	8005      	strh	r5, [r0, #0]
 800669a:	4604      	mov	r4, r0
 800669c:	4616      	mov	r6, r2
 800669e:	461d      	mov	r5, r3
 80066a0:	b14b      	cbz	r3, 80066b6 <arm_rfft_fast_f32+0x26>
 80066a2:	f7ff ff9f 	bl	80065e4 <merge_rfft_f32>
 80066a6:	462a      	mov	r2, r5
 80066a8:	4631      	mov	r1, r6
 80066aa:	4620      	mov	r0, r4
 80066ac:	2301      	movs	r3, #1
 80066ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066b2:	f000 bb33 	b.w	8006d1c <arm_cfft_f32>
 80066b6:	460f      	mov	r7, r1
 80066b8:	461a      	mov	r2, r3
 80066ba:	2301      	movs	r3, #1
 80066bc:	f000 fb2e 	bl	8006d1c <arm_cfft_f32>
 80066c0:	4632      	mov	r2, r6
 80066c2:	4639      	mov	r1, r7
 80066c4:	4620      	mov	r0, r4
 80066c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066ca:	f7ff bf31 	b.w	8006530 <stage_rfft_f32>
 80066ce:	bf00      	nop

080066d0 <arm_cfft_radix8by2_f32>:
 80066d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066d4:	ed2d 8b08 	vpush	{d8-d11}
 80066d8:	4607      	mov	r7, r0
 80066da:	4608      	mov	r0, r1
 80066dc:	f8b7 c000 	ldrh.w	ip, [r7]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	ea4f 015c 	mov.w	r1, ip, lsr #1
 80066e6:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 80066ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80066ee:	f000 80b0 	beq.w	8006852 <arm_cfft_radix8by2_f32+0x182>
 80066f2:	008c      	lsls	r4, r1, #2
 80066f4:	3410      	adds	r4, #16
 80066f6:	f100 0310 	add.w	r3, r0, #16
 80066fa:	1906      	adds	r6, r0, r4
 80066fc:	3210      	adds	r2, #16
 80066fe:	4444      	add	r4, r8
 8006700:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8006704:	f108 0510 	add.w	r5, r8, #16
 8006708:	ed15 2a04 	vldr	s4, [r5, #-16]
 800670c:	ed55 2a03 	vldr	s5, [r5, #-12]
 8006710:	ed54 4a04 	vldr	s9, [r4, #-16]
 8006714:	ed14 4a03 	vldr	s8, [r4, #-12]
 8006718:	ed14 6a02 	vldr	s12, [r4, #-8]
 800671c:	ed54 5a01 	vldr	s11, [r4, #-4]
 8006720:	ed53 3a04 	vldr	s7, [r3, #-16]
 8006724:	ed15 0a02 	vldr	s0, [r5, #-8]
 8006728:	ed55 0a01 	vldr	s1, [r5, #-4]
 800672c:	ed56 6a04 	vldr	s13, [r6, #-16]
 8006730:	ed16 3a03 	vldr	s6, [r6, #-12]
 8006734:	ed13 7a03 	vldr	s14, [r3, #-12]
 8006738:	ed13 5a02 	vldr	s10, [r3, #-8]
 800673c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006740:	ed16 1a02 	vldr	s2, [r6, #-8]
 8006744:	ed56 1a01 	vldr	s3, [r6, #-4]
 8006748:	ee73 ba82 	vadd.f32	s23, s7, s4
 800674c:	ee37 ba22 	vadd.f32	s22, s14, s5
 8006750:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8006754:	ee33 9a04 	vadd.f32	s18, s6, s8
 8006758:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800675c:	ee75 aa00 	vadd.f32	s21, s10, s0
 8006760:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8006764:	ee71 8a06 	vadd.f32	s17, s2, s12
 8006768:	ed43 ba04 	vstr	s23, [r3, #-16]
 800676c:	ed03 ba03 	vstr	s22, [r3, #-12]
 8006770:	ed43 aa02 	vstr	s21, [r3, #-8]
 8006774:	ed03 aa01 	vstr	s20, [r3, #-4]
 8006778:	ed06 8a01 	vstr	s16, [r6, #-4]
 800677c:	ed46 9a04 	vstr	s19, [r6, #-16]
 8006780:	ed06 9a03 	vstr	s18, [r6, #-12]
 8006784:	ed46 8a02 	vstr	s17, [r6, #-8]
 8006788:	ee37 7a62 	vsub.f32	s14, s14, s5
 800678c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8006790:	ee34 4a43 	vsub.f32	s8, s8, s6
 8006794:	ed52 6a03 	vldr	s13, [r2, #-12]
 8006798:	ed12 3a04 	vldr	s6, [r2, #-16]
 800679c:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80067a0:	ee27 8a26 	vmul.f32	s16, s14, s13
 80067a4:	ee64 2aa6 	vmul.f32	s5, s9, s13
 80067a8:	ee23 2a83 	vmul.f32	s4, s7, s6
 80067ac:	ee64 4a83 	vmul.f32	s9, s9, s6
 80067b0:	ee63 3aa6 	vmul.f32	s7, s7, s13
 80067b4:	ee27 7a03 	vmul.f32	s14, s14, s6
 80067b8:	ee64 6a26 	vmul.f32	s13, s8, s13
 80067bc:	ee24 4a03 	vmul.f32	s8, s8, s6
 80067c0:	ee37 7a63 	vsub.f32	s14, s14, s7
 80067c4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80067c8:	ee32 4ac4 	vsub.f32	s8, s5, s8
 80067cc:	ee32 3a08 	vadd.f32	s6, s4, s16
 80067d0:	ed05 7a03 	vstr	s14, [r5, #-12]
 80067d4:	ed05 3a04 	vstr	s6, [r5, #-16]
 80067d8:	ed04 4a04 	vstr	s8, [r4, #-16]
 80067dc:	ed44 6a03 	vstr	s13, [r4, #-12]
 80067e0:	ed12 7a01 	vldr	s14, [r2, #-4]
 80067e4:	ee76 6a41 	vsub.f32	s13, s12, s2
 80067e8:	ee35 5a40 	vsub.f32	s10, s10, s0
 80067ec:	ee35 6ae1 	vsub.f32	s12, s11, s3
 80067f0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80067f4:	ed52 5a02 	vldr	s11, [r2, #-8]
 80067f8:	ee67 3a87 	vmul.f32	s7, s15, s14
 80067fc:	ee66 4a87 	vmul.f32	s9, s13, s14
 8006800:	ee25 4a25 	vmul.f32	s8, s10, s11
 8006804:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006808:	ee25 5a07 	vmul.f32	s10, s10, s14
 800680c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8006810:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006814:	ee26 6a25 	vmul.f32	s12, s12, s11
 8006818:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800681c:	ee74 5a23 	vadd.f32	s11, s8, s7
 8006820:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8006824:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006828:	3310      	adds	r3, #16
 800682a:	4563      	cmp	r3, ip
 800682c:	ed45 5a02 	vstr	s11, [r5, #-8]
 8006830:	f106 0610 	add.w	r6, r6, #16
 8006834:	ed45 7a01 	vstr	s15, [r5, #-4]
 8006838:	f102 0210 	add.w	r2, r2, #16
 800683c:	ed04 6a02 	vstr	s12, [r4, #-8]
 8006840:	ed04 7a01 	vstr	s14, [r4, #-4]
 8006844:	f105 0510 	add.w	r5, r5, #16
 8006848:	f104 0410 	add.w	r4, r4, #16
 800684c:	f47f af5c 	bne.w	8006708 <arm_cfft_radix8by2_f32+0x38>
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	b28c      	uxth	r4, r1
 8006854:	4621      	mov	r1, r4
 8006856:	2302      	movs	r3, #2
 8006858:	f000 fb3c 	bl	8006ed4 <arm_radix8_butterfly_f32>
 800685c:	ecbd 8b08 	vpop	{d8-d11}
 8006860:	4621      	mov	r1, r4
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	4640      	mov	r0, r8
 8006866:	2302      	movs	r3, #2
 8006868:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800686c:	f000 bb32 	b.w	8006ed4 <arm_radix8_butterfly_f32>

08006870 <arm_cfft_radix8by4_f32>:
 8006870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006874:	ed2d 8b0a 	vpush	{d8-d12}
 8006878:	b08d      	sub	sp, #52	@ 0x34
 800687a:	460d      	mov	r5, r1
 800687c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800687e:	8801      	ldrh	r1, [r0, #0]
 8006880:	6842      	ldr	r2, [r0, #4]
 8006882:	900a      	str	r0, [sp, #40]	@ 0x28
 8006884:	0849      	lsrs	r1, r1, #1
 8006886:	008b      	lsls	r3, r1, #2
 8006888:	18ee      	adds	r6, r5, r3
 800688a:	18f0      	adds	r0, r6, r3
 800688c:	edd0 5a00 	vldr	s11, [r0]
 8006890:	edd5 7a00 	vldr	s15, [r5]
 8006894:	ed96 7a00 	vldr	s14, [r6]
 8006898:	edd0 3a01 	vldr	s7, [r0, #4]
 800689c:	ed96 4a01 	vldr	s8, [r6, #4]
 80068a0:	ed95 5a01 	vldr	s10, [r5, #4]
 80068a4:	9008      	str	r0, [sp, #32]
 80068a6:	ee37 6aa5 	vadd.f32	s12, s15, s11
 80068aa:	18c7      	adds	r7, r0, r3
 80068ac:	edd7 4a00 	vldr	s9, [r7]
 80068b0:	ed97 3a01 	vldr	s6, [r7, #4]
 80068b4:	9701      	str	r7, [sp, #4]
 80068b6:	ee77 6a06 	vadd.f32	s13, s14, s12
 80068ba:	462c      	mov	r4, r5
 80068bc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80068c0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80068c4:	ee16 ca90 	vmov	ip, s13
 80068c8:	f844 cb08 	str.w	ip, [r4], #8
 80068cc:	ee75 6a23 	vadd.f32	s13, s10, s7
 80068d0:	edd6 5a01 	vldr	s11, [r6, #4]
 80068d4:	edd7 2a01 	vldr	s5, [r7, #4]
 80068d8:	9404      	str	r4, [sp, #16]
 80068da:	ee35 5a63 	vsub.f32	s10, s10, s7
 80068de:	ee74 3a27 	vadd.f32	s7, s8, s15
 80068e2:	ee36 6a47 	vsub.f32	s12, s12, s14
 80068e6:	ee76 5aa5 	vadd.f32	s11, s13, s11
 80068ea:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80068ee:	0849      	lsrs	r1, r1, #1
 80068f0:	f102 0e08 	add.w	lr, r2, #8
 80068f4:	ee76 6ac4 	vsub.f32	s13, s13, s8
 80068f8:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80068fc:	9109      	str	r1, [sp, #36]	@ 0x24
 80068fe:	ee35 4a47 	vsub.f32	s8, s10, s14
 8006902:	f1a1 0902 	sub.w	r9, r1, #2
 8006906:	f8cd e00c 	str.w	lr, [sp, #12]
 800690a:	4631      	mov	r1, r6
 800690c:	ee13 ea90 	vmov	lr, s7
 8006910:	ee36 6a64 	vsub.f32	s12, s12, s9
 8006914:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8006918:	4604      	mov	r4, r0
 800691a:	edc5 5a01 	vstr	s11, [r5, #4]
 800691e:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006922:	f841 eb08 	str.w	lr, [r1], #8
 8006926:	ee34 5a24 	vadd.f32	s10, s8, s9
 800692a:	ee16 ea10 	vmov	lr, s12
 800692e:	ed86 5a01 	vstr	s10, [r6, #4]
 8006932:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8006936:	f844 eb08 	str.w	lr, [r4], #8
 800693a:	ee77 7a83 	vadd.f32	s15, s15, s6
 800693e:	edc0 6a01 	vstr	s13, [r0, #4]
 8006942:	9405      	str	r4, [sp, #20]
 8006944:	4604      	mov	r4, r0
 8006946:	ee17 0a90 	vmov	r0, s15
 800694a:	9106      	str	r1, [sp, #24]
 800694c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8006950:	f102 0110 	add.w	r1, r2, #16
 8006954:	46bc      	mov	ip, r7
 8006956:	9100      	str	r1, [sp, #0]
 8006958:	f847 0b08 	str.w	r0, [r7], #8
 800695c:	f102 0118 	add.w	r1, r2, #24
 8006960:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8006964:	9102      	str	r1, [sp, #8]
 8006966:	ed8c 7a01 	vstr	s14, [ip, #4]
 800696a:	9007      	str	r0, [sp, #28]
 800696c:	f000 8134 	beq.w	8006bd8 <arm_cfft_radix8by4_f32+0x368>
 8006970:	f102 0920 	add.w	r9, r2, #32
 8006974:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 8006978:	9a01      	ldr	r2, [sp, #4]
 800697a:	f8dd a000 	ldr.w	sl, [sp]
 800697e:	3b0c      	subs	r3, #12
 8006980:	4683      	mov	fp, r0
 8006982:	4463      	add	r3, ip
 8006984:	f105 0e10 	add.w	lr, r5, #16
 8006988:	f1a4 010c 	sub.w	r1, r4, #12
 800698c:	f104 0510 	add.w	r5, r4, #16
 8006990:	f1a6 0c0c 	sub.w	ip, r6, #12
 8006994:	f1a2 040c 	sub.w	r4, r2, #12
 8006998:	f106 0010 	add.w	r0, r6, #16
 800699c:	3210      	adds	r2, #16
 800699e:	ed1e 5a02 	vldr	s10, [lr, #-8]
 80069a2:	ed55 5a02 	vldr	s11, [r5, #-8]
 80069a6:	ed50 7a02 	vldr	s15, [r0, #-8]
 80069aa:	ed52 1a02 	vldr	s3, [r2, #-8]
 80069ae:	ed55 6a01 	vldr	s13, [r5, #-4]
 80069b2:	ed1e 0a01 	vldr	s0, [lr, #-4]
 80069b6:	ed12 1a01 	vldr	s2, [r2, #-4]
 80069ba:	ed10 8a01 	vldr	s16, [r0, #-4]
 80069be:	ee35 4a25 	vadd.f32	s8, s10, s11
 80069c2:	ee30 6a26 	vadd.f32	s12, s0, s13
 80069c6:	ee37 7a84 	vadd.f32	s14, s15, s8
 80069ca:	ee30 0a66 	vsub.f32	s0, s0, s13
 80069ce:	ee37 7a21 	vadd.f32	s14, s14, s3
 80069d2:	ee75 5a65 	vsub.f32	s11, s10, s11
 80069d6:	ed0e 7a02 	vstr	s14, [lr, #-8]
 80069da:	ed10 7a01 	vldr	s14, [r0, #-4]
 80069de:	ed52 6a01 	vldr	s13, [r2, #-4]
 80069e2:	ee36 7a07 	vadd.f32	s14, s12, s14
 80069e6:	ee78 aa25 	vadd.f32	s21, s16, s11
 80069ea:	ee37 7a26 	vadd.f32	s14, s14, s13
 80069ee:	ee70 3a67 	vsub.f32	s7, s0, s15
 80069f2:	ed0e 7a01 	vstr	s14, [lr, #-4]
 80069f6:	ed94 7a02 	vldr	s14, [r4, #8]
 80069fa:	ed9c 2a02 	vldr	s4, [ip, #8]
 80069fe:	ed91 ba02 	vldr	s22, [r1, #8]
 8006a02:	edd3 9a02 	vldr	s19, [r3, #8]
 8006a06:	edd4 2a01 	vldr	s5, [r4, #4]
 8006a0a:	ed9c 9a01 	vldr	s18, [ip, #4]
 8006a0e:	ed93 5a01 	vldr	s10, [r3, #4]
 8006a12:	edd1 0a01 	vldr	s1, [r1, #4]
 8006a16:	ee72 6a07 	vadd.f32	s13, s4, s14
 8006a1a:	ee32 2a47 	vsub.f32	s4, s4, s14
 8006a1e:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8006a22:	ee79 4a22 	vadd.f32	s9, s18, s5
 8006a26:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8006a2a:	ee79 2a62 	vsub.f32	s5, s18, s5
 8006a2e:	ed8c 7a02 	vstr	s14, [ip, #8]
 8006a32:	ed91 7a01 	vldr	s14, [r1, #4]
 8006a36:	edd3 8a01 	vldr	s17, [r3, #4]
 8006a3a:	ee34 7a87 	vadd.f32	s14, s9, s14
 8006a3e:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8006a42:	ee37 7a28 	vadd.f32	s14, s14, s17
 8006a46:	ee32 9a60 	vsub.f32	s18, s4, s1
 8006a4a:	ed8c 7a01 	vstr	s14, [ip, #4]
 8006a4e:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8006a52:	ed1a aa02 	vldr	s20, [sl, #-8]
 8006a56:	ee73 8a22 	vadd.f32	s17, s6, s5
 8006a5a:	ee39 9a05 	vadd.f32	s18, s18, s10
 8006a5e:	ee7a aac1 	vsub.f32	s21, s21, s2
 8006a62:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8006a66:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8006a6a:	ee69 ba07 	vmul.f32	s23, s18, s14
 8006a6e:	ee6a aa87 	vmul.f32	s21, s21, s14
 8006a72:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8006a76:	ee63 ca87 	vmul.f32	s25, s7, s14
 8006a7a:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8006a7e:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8006a82:	ee68 8a87 	vmul.f32	s17, s17, s14
 8006a86:	ee73 3aea 	vsub.f32	s7, s7, s21
 8006a8a:	ee78 8a89 	vadd.f32	s17, s17, s18
 8006a8e:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8006a92:	ee3b aaca 	vsub.f32	s20, s23, s20
 8006a96:	ee34 4a67 	vsub.f32	s8, s8, s15
 8006a9a:	ee76 6acb 	vsub.f32	s13, s13, s22
 8006a9e:	ee36 6a48 	vsub.f32	s12, s12, s16
 8006aa2:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8006aa6:	ed00 7a02 	vstr	s14, [r0, #-8]
 8006aaa:	ed40 3a01 	vstr	s7, [r0, #-4]
 8006aae:	edc1 8a01 	vstr	s17, [r1, #4]
 8006ab2:	ed81 aa02 	vstr	s20, [r1, #8]
 8006ab6:	ed59 3a04 	vldr	s7, [r9, #-16]
 8006aba:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8006abe:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8006ac2:	ed59 6a03 	vldr	s13, [r9, #-12]
 8006ac6:	ee34 4a61 	vsub.f32	s8, s8, s3
 8006aca:	ee36 6a41 	vsub.f32	s12, s12, s2
 8006ace:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8006ad2:	ee66 9a26 	vmul.f32	s19, s12, s13
 8006ad6:	ee24 9a23 	vmul.f32	s18, s8, s7
 8006ada:	ee26 6a23 	vmul.f32	s12, s12, s7
 8006ade:	ee24 4a26 	vmul.f32	s8, s8, s13
 8006ae2:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006ae6:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8006aea:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8006aee:	ee36 6a44 	vsub.f32	s12, s12, s8
 8006af2:	ee37 7a64 	vsub.f32	s14, s14, s9
 8006af6:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8006afa:	ee79 3a29 	vadd.f32	s7, s18, s19
 8006afe:	ee75 6a60 	vsub.f32	s13, s10, s1
 8006b02:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8006b06:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006b0a:	ed45 3a02 	vstr	s7, [r5, #-8]
 8006b0e:	ed05 6a01 	vstr	s12, [r5, #-4]
 8006b12:	ed84 7a01 	vstr	s14, [r4, #4]
 8006b16:	ed84 4a02 	vstr	s8, [r4, #8]
 8006b1a:	ee35 6a81 	vadd.f32	s12, s11, s2
 8006b1e:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8006b22:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 8006b26:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 8006b2a:	ee33 3a62 	vsub.f32	s6, s6, s5
 8006b2e:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8006b32:	ee67 2a26 	vmul.f32	s5, s14, s13
 8006b36:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8006b3a:	ee26 5a25 	vmul.f32	s10, s12, s11
 8006b3e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006b42:	ee26 6a26 	vmul.f32	s12, s12, s13
 8006b46:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006b4a:	ee63 6a26 	vmul.f32	s13, s6, s13
 8006b4e:	ee23 3a25 	vmul.f32	s6, s6, s11
 8006b52:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006b56:	ee75 5a24 	vadd.f32	s11, s10, s9
 8006b5a:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8006b5e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8006b62:	f1bb 0b01 	subs.w	fp, fp, #1
 8006b66:	ed42 5a02 	vstr	s11, [r2, #-8]
 8006b6a:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006b6e:	f10e 0e08 	add.w	lr, lr, #8
 8006b72:	ed83 3a02 	vstr	s6, [r3, #8]
 8006b76:	ed83 7a01 	vstr	s14, [r3, #4]
 8006b7a:	f1ac 0c08 	sub.w	ip, ip, #8
 8006b7e:	f10a 0a08 	add.w	sl, sl, #8
 8006b82:	f100 0008 	add.w	r0, r0, #8
 8006b86:	f1a1 0108 	sub.w	r1, r1, #8
 8006b8a:	f109 0910 	add.w	r9, r9, #16
 8006b8e:	f105 0508 	add.w	r5, r5, #8
 8006b92:	f1a4 0408 	sub.w	r4, r4, #8
 8006b96:	f108 0818 	add.w	r8, r8, #24
 8006b9a:	f102 0208 	add.w	r2, r2, #8
 8006b9e:	f1a3 0308 	sub.w	r3, r3, #8
 8006ba2:	f47f aefc 	bne.w	800699e <arm_cfft_radix8by4_f32+0x12e>
 8006ba6:	9907      	ldr	r1, [sp, #28]
 8006ba8:	9800      	ldr	r0, [sp, #0]
 8006baa:	00cb      	lsls	r3, r1, #3
 8006bac:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8006bb0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8006bb4:	9100      	str	r1, [sp, #0]
 8006bb6:	9904      	ldr	r1, [sp, #16]
 8006bb8:	4419      	add	r1, r3
 8006bba:	9104      	str	r1, [sp, #16]
 8006bbc:	9903      	ldr	r1, [sp, #12]
 8006bbe:	4419      	add	r1, r3
 8006bc0:	9103      	str	r1, [sp, #12]
 8006bc2:	9906      	ldr	r1, [sp, #24]
 8006bc4:	4419      	add	r1, r3
 8006bc6:	9106      	str	r1, [sp, #24]
 8006bc8:	9905      	ldr	r1, [sp, #20]
 8006bca:	441f      	add	r7, r3
 8006bcc:	4419      	add	r1, r3
 8006bce:	9b02      	ldr	r3, [sp, #8]
 8006bd0:	9105      	str	r1, [sp, #20]
 8006bd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bd6:	9302      	str	r3, [sp, #8]
 8006bd8:	9904      	ldr	r1, [sp, #16]
 8006bda:	9805      	ldr	r0, [sp, #20]
 8006bdc:	ed91 4a00 	vldr	s8, [r1]
 8006be0:	edd0 6a00 	vldr	s13, [r0]
 8006be4:	9b06      	ldr	r3, [sp, #24]
 8006be6:	ed97 3a00 	vldr	s6, [r7]
 8006bea:	edd3 7a00 	vldr	s15, [r3]
 8006bee:	edd0 4a01 	vldr	s9, [r0, #4]
 8006bf2:	edd1 3a01 	vldr	s7, [r1, #4]
 8006bf6:	ed97 2a01 	vldr	s4, [r7, #4]
 8006bfa:	ed93 7a01 	vldr	s14, [r3, #4]
 8006bfe:	9a03      	ldr	r2, [sp, #12]
 8006c00:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8006c04:	ee34 6a26 	vadd.f32	s12, s8, s13
 8006c08:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8006c0c:	ee37 5a86 	vadd.f32	s10, s15, s12
 8006c10:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8006c14:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006c18:	ee74 6a66 	vsub.f32	s13, s8, s13
 8006c1c:	ed81 5a00 	vstr	s10, [r1]
 8006c20:	ed93 5a01 	vldr	s10, [r3, #4]
 8006c24:	edd7 4a01 	vldr	s9, [r7, #4]
 8006c28:	ee35 5a85 	vadd.f32	s10, s11, s10
 8006c2c:	ee37 4a26 	vadd.f32	s8, s14, s13
 8006c30:	ee35 5a24 	vadd.f32	s10, s10, s9
 8006c34:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8006c38:	ed81 5a01 	vstr	s10, [r1, #4]
 8006c3c:	edd2 1a00 	vldr	s3, [r2]
 8006c40:	edd2 2a01 	vldr	s5, [r2, #4]
 8006c44:	ee34 5a83 	vadd.f32	s10, s9, s6
 8006c48:	ee34 4a42 	vsub.f32	s8, s8, s4
 8006c4c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006c50:	ee64 4a21 	vmul.f32	s9, s8, s3
 8006c54:	ee24 4a22 	vmul.f32	s8, s8, s5
 8006c58:	ee65 2a22 	vmul.f32	s5, s10, s5
 8006c5c:	ee25 5a21 	vmul.f32	s10, s10, s3
 8006c60:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8006c64:	ee35 5a44 	vsub.f32	s10, s10, s8
 8006c68:	edc3 2a00 	vstr	s5, [r3]
 8006c6c:	ed83 5a01 	vstr	s10, [r3, #4]
 8006c70:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8006c74:	9b00      	ldr	r3, [sp, #0]
 8006c76:	ee36 6a43 	vsub.f32	s12, s12, s6
 8006c7a:	ed93 4a01 	vldr	s8, [r3, #4]
 8006c7e:	ed93 5a00 	vldr	s10, [r3]
 8006c82:	9b02      	ldr	r3, [sp, #8]
 8006c84:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8006c88:	ee66 4a05 	vmul.f32	s9, s12, s10
 8006c8c:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006c90:	ee26 6a04 	vmul.f32	s12, s12, s8
 8006c94:	ee65 5a84 	vmul.f32	s11, s11, s8
 8006c98:	ee35 6a46 	vsub.f32	s12, s10, s12
 8006c9c:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8006ca0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8006ca4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006ca8:	ed80 6a01 	vstr	s12, [r0, #4]
 8006cac:	edc0 5a00 	vstr	s11, [r0]
 8006cb0:	edd3 5a01 	vldr	s11, [r3, #4]
 8006cb4:	edd3 6a00 	vldr	s13, [r3]
 8006cb8:	ee37 7a02 	vadd.f32	s14, s14, s4
 8006cbc:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8006cc0:	ee27 6a26 	vmul.f32	s12, s14, s13
 8006cc4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006cc8:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006ccc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006cd0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006cd4:	ee76 7a27 	vadd.f32	s15, s12, s15
 8006cd8:	ed87 7a01 	vstr	s14, [r7, #4]
 8006cdc:	edc7 7a00 	vstr	s15, [r7]
 8006ce0:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 8006ce4:	4621      	mov	r1, r4
 8006ce6:	686a      	ldr	r2, [r5, #4]
 8006ce8:	2304      	movs	r3, #4
 8006cea:	f000 f8f3 	bl	8006ed4 <arm_radix8_butterfly_f32>
 8006cee:	4630      	mov	r0, r6
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	686a      	ldr	r2, [r5, #4]
 8006cf4:	2304      	movs	r3, #4
 8006cf6:	f000 f8ed 	bl	8006ed4 <arm_radix8_butterfly_f32>
 8006cfa:	9808      	ldr	r0, [sp, #32]
 8006cfc:	686a      	ldr	r2, [r5, #4]
 8006cfe:	4621      	mov	r1, r4
 8006d00:	2304      	movs	r3, #4
 8006d02:	f000 f8e7 	bl	8006ed4 <arm_radix8_butterfly_f32>
 8006d06:	686a      	ldr	r2, [r5, #4]
 8006d08:	9801      	ldr	r0, [sp, #4]
 8006d0a:	4621      	mov	r1, r4
 8006d0c:	2304      	movs	r3, #4
 8006d0e:	b00d      	add	sp, #52	@ 0x34
 8006d10:	ecbd 8b0a 	vpop	{d8-d12}
 8006d14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d18:	f000 b8dc 	b.w	8006ed4 <arm_radix8_butterfly_f32>

08006d1c <arm_cfft_f32>:
 8006d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d20:	2a01      	cmp	r2, #1
 8006d22:	4606      	mov	r6, r0
 8006d24:	4617      	mov	r7, r2
 8006d26:	460c      	mov	r4, r1
 8006d28:	4698      	mov	r8, r3
 8006d2a:	8805      	ldrh	r5, [r0, #0]
 8006d2c:	d056      	beq.n	8006ddc <arm_cfft_f32+0xc0>
 8006d2e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8006d32:	d063      	beq.n	8006dfc <arm_cfft_f32+0xe0>
 8006d34:	d916      	bls.n	8006d64 <arm_cfft_f32+0x48>
 8006d36:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8006d3a:	d01a      	beq.n	8006d72 <arm_cfft_f32+0x56>
 8006d3c:	d947      	bls.n	8006dce <arm_cfft_f32+0xb2>
 8006d3e:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8006d42:	d05b      	beq.n	8006dfc <arm_cfft_f32+0xe0>
 8006d44:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8006d48:	d105      	bne.n	8006d56 <arm_cfft_f32+0x3a>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	6872      	ldr	r2, [r6, #4]
 8006d4e:	4629      	mov	r1, r5
 8006d50:	4620      	mov	r0, r4
 8006d52:	f000 f8bf 	bl	8006ed4 <arm_radix8_butterfly_f32>
 8006d56:	f1b8 0f00 	cmp.w	r8, #0
 8006d5a:	d111      	bne.n	8006d80 <arm_cfft_f32+0x64>
 8006d5c:	2f01      	cmp	r7, #1
 8006d5e:	d016      	beq.n	8006d8e <arm_cfft_f32+0x72>
 8006d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d64:	2d20      	cmp	r5, #32
 8006d66:	d049      	beq.n	8006dfc <arm_cfft_f32+0xe0>
 8006d68:	d935      	bls.n	8006dd6 <arm_cfft_f32+0xba>
 8006d6a:	2d40      	cmp	r5, #64	@ 0x40
 8006d6c:	d0ed      	beq.n	8006d4a <arm_cfft_f32+0x2e>
 8006d6e:	2d80      	cmp	r5, #128	@ 0x80
 8006d70:	d1f1      	bne.n	8006d56 <arm_cfft_f32+0x3a>
 8006d72:	4621      	mov	r1, r4
 8006d74:	4630      	mov	r0, r6
 8006d76:	f7ff fcab 	bl	80066d0 <arm_cfft_radix8by2_f32>
 8006d7a:	f1b8 0f00 	cmp.w	r8, #0
 8006d7e:	d0ed      	beq.n	8006d5c <arm_cfft_f32+0x40>
 8006d80:	68b2      	ldr	r2, [r6, #8]
 8006d82:	89b1      	ldrh	r1, [r6, #12]
 8006d84:	4620      	mov	r0, r4
 8006d86:	f000 f841 	bl	8006e0c <arm_bitreversal_32>
 8006d8a:	2f01      	cmp	r7, #1
 8006d8c:	d1e8      	bne.n	8006d60 <arm_cfft_f32+0x44>
 8006d8e:	ee07 5a90 	vmov	s15, r5
 8006d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d9a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006d9e:	2d00      	cmp	r5, #0
 8006da0:	d0de      	beq.n	8006d60 <arm_cfft_f32+0x44>
 8006da2:	f104 0108 	add.w	r1, r4, #8
 8006da6:	2300      	movs	r3, #0
 8006da8:	3301      	adds	r3, #1
 8006daa:	429d      	cmp	r5, r3
 8006dac:	f101 0108 	add.w	r1, r1, #8
 8006db0:	ed11 7a04 	vldr	s14, [r1, #-16]
 8006db4:	ed51 7a03 	vldr	s15, [r1, #-12]
 8006db8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006dbc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006dc0:	ed01 7a04 	vstr	s14, [r1, #-16]
 8006dc4:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006dc8:	d1ee      	bne.n	8006da8 <arm_cfft_f32+0x8c>
 8006dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dce:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8006dd2:	d0ba      	beq.n	8006d4a <arm_cfft_f32+0x2e>
 8006dd4:	e7bf      	b.n	8006d56 <arm_cfft_f32+0x3a>
 8006dd6:	2d10      	cmp	r5, #16
 8006dd8:	d0cb      	beq.n	8006d72 <arm_cfft_f32+0x56>
 8006dda:	e7bc      	b.n	8006d56 <arm_cfft_f32+0x3a>
 8006ddc:	b19d      	cbz	r5, 8006e06 <arm_cfft_f32+0xea>
 8006dde:	f101 030c 	add.w	r3, r1, #12
 8006de2:	2200      	movs	r2, #0
 8006de4:	ed53 7a02 	vldr	s15, [r3, #-8]
 8006de8:	3201      	adds	r2, #1
 8006dea:	eef1 7a67 	vneg.f32	s15, s15
 8006dee:	4295      	cmp	r5, r2
 8006df0:	ed43 7a02 	vstr	s15, [r3, #-8]
 8006df4:	f103 0308 	add.w	r3, r3, #8
 8006df8:	d1f4      	bne.n	8006de4 <arm_cfft_f32+0xc8>
 8006dfa:	e798      	b.n	8006d2e <arm_cfft_f32+0x12>
 8006dfc:	4621      	mov	r1, r4
 8006dfe:	4630      	mov	r0, r6
 8006e00:	f7ff fd36 	bl	8006870 <arm_cfft_radix8by4_f32>
 8006e04:	e7a7      	b.n	8006d56 <arm_cfft_f32+0x3a>
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d0aa      	beq.n	8006d60 <arm_cfft_f32+0x44>
 8006e0a:	e7b9      	b.n	8006d80 <arm_cfft_f32+0x64>

08006e0c <arm_bitreversal_32>:
 8006e0c:	b1e9      	cbz	r1, 8006e4a <arm_bitreversal_32+0x3e>
 8006e0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e10:	2500      	movs	r5, #0
 8006e12:	f102 0e02 	add.w	lr, r2, #2
 8006e16:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8006e1a:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8006e1e:	08a4      	lsrs	r4, r4, #2
 8006e20:	089b      	lsrs	r3, r3, #2
 8006e22:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8006e26:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8006e2a:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8006e2e:	00a6      	lsls	r6, r4, #2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8006e36:	3304      	adds	r3, #4
 8006e38:	1d34      	adds	r4, r6, #4
 8006e3a:	3502      	adds	r5, #2
 8006e3c:	58c6      	ldr	r6, [r0, r3]
 8006e3e:	5907      	ldr	r7, [r0, r4]
 8006e40:	50c7      	str	r7, [r0, r3]
 8006e42:	428d      	cmp	r5, r1
 8006e44:	5106      	str	r6, [r0, r4]
 8006e46:	d3e6      	bcc.n	8006e16 <arm_bitreversal_32+0xa>
 8006e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e4a:	4770      	bx	lr

08006e4c <arm_offset_f32>:
 8006e4c:	b470      	push	{r4, r5, r6}
 8006e4e:	0896      	lsrs	r6, r2, #2
 8006e50:	d025      	beq.n	8006e9e <arm_offset_f32+0x52>
 8006e52:	f100 0410 	add.w	r4, r0, #16
 8006e56:	f101 0310 	add.w	r3, r1, #16
 8006e5a:	4635      	mov	r5, r6
 8006e5c:	ed54 7a04 	vldr	s15, [r4, #-16]
 8006e60:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006e64:	3d01      	subs	r5, #1
 8006e66:	ed43 7a04 	vstr	s15, [r3, #-16]
 8006e6a:	ed54 7a03 	vldr	s15, [r4, #-12]
 8006e6e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006e72:	f104 0410 	add.w	r4, r4, #16
 8006e76:	ed43 7a03 	vstr	s15, [r3, #-12]
 8006e7a:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 8006e7e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006e82:	f103 0310 	add.w	r3, r3, #16
 8006e86:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 8006e8a:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 8006e8e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006e92:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8006e96:	d1e1      	bne.n	8006e5c <arm_offset_f32+0x10>
 8006e98:	0136      	lsls	r6, r6, #4
 8006e9a:	4430      	add	r0, r6
 8006e9c:	4431      	add	r1, r6
 8006e9e:	f012 0203 	ands.w	r2, r2, #3
 8006ea2:	d015      	beq.n	8006ed0 <arm_offset_f32+0x84>
 8006ea4:	edd0 7a00 	vldr	s15, [r0]
 8006ea8:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006eac:	3a01      	subs	r2, #1
 8006eae:	edc1 7a00 	vstr	s15, [r1]
 8006eb2:	d00d      	beq.n	8006ed0 <arm_offset_f32+0x84>
 8006eb4:	edd0 7a01 	vldr	s15, [r0, #4]
 8006eb8:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006ebc:	2a01      	cmp	r2, #1
 8006ebe:	edc1 7a01 	vstr	s15, [r1, #4]
 8006ec2:	d005      	beq.n	8006ed0 <arm_offset_f32+0x84>
 8006ec4:	edd0 7a02 	vldr	s15, [r0, #8]
 8006ec8:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006ecc:	ed81 0a02 	vstr	s0, [r1, #8]
 8006ed0:	bc70      	pop	{r4, r5, r6}
 8006ed2:	4770      	bx	lr

08006ed4 <arm_radix8_butterfly_f32>:
 8006ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed8:	ed2d 8b10 	vpush	{d8-d15}
 8006edc:	b095      	sub	sp, #84	@ 0x54
 8006ede:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	3304      	adds	r3, #4
 8006ee6:	ed9f bab9 	vldr	s22, [pc, #740]	@ 80071cc <arm_radix8_butterfly_f32+0x2f8>
 8006eea:	9012      	str	r0, [sp, #72]	@ 0x48
 8006eec:	468b      	mov	fp, r1
 8006eee:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ef0:	4689      	mov	r9, r1
 8006ef2:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8006ef6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006ef8:	960f      	str	r6, [sp, #60]	@ 0x3c
 8006efa:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8006efe:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8006f02:	eb03 0508 	add.w	r5, r3, r8
 8006f06:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8006f0a:	eb05 040e 	add.w	r4, r5, lr
 8006f0e:	0137      	lsls	r7, r6, #4
 8006f10:	eba6 030a 	sub.w	r3, r6, sl
 8006f14:	eb04 000e 	add.w	r0, r4, lr
 8006f18:	44b2      	add	sl, r6
 8006f1a:	1d3a      	adds	r2, r7, #4
 8006f1c:	9702      	str	r7, [sp, #8]
 8006f1e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006f22:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8006f26:	ebae 0c06 	sub.w	ip, lr, r6
 8006f2a:	9703      	str	r7, [sp, #12]
 8006f2c:	eb03 0708 	add.w	r7, r3, r8
 8006f30:	9701      	str	r7, [sp, #4]
 8006f32:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8006f36:	9706      	str	r7, [sp, #24]
 8006f38:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8006f3a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8006f3e:	f10e 0104 	add.w	r1, lr, #4
 8006f42:	4439      	add	r1, r7
 8006f44:	443a      	add	r2, r7
 8006f46:	0137      	lsls	r7, r6, #4
 8006f48:	00f6      	lsls	r6, r6, #3
 8006f4a:	9704      	str	r7, [sp, #16]
 8006f4c:	9605      	str	r6, [sp, #20]
 8006f4e:	9f01      	ldr	r7, [sp, #4]
 8006f50:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006f52:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8006f56:	f04f 0c00 	mov.w	ip, #0
 8006f5a:	edd4 6a00 	vldr	s13, [r4]
 8006f5e:	edd7 1a00 	vldr	s3, [r7]
 8006f62:	ed16 aa01 	vldr	s20, [r6, #-4]
 8006f66:	edd5 5a00 	vldr	s11, [r5]
 8006f6a:	ed52 9a01 	vldr	s19, [r2, #-4]
 8006f6e:	ed90 6a00 	vldr	s12, [r0]
 8006f72:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006f76:	ed93 3a00 	vldr	s6, [r3]
 8006f7a:	ee39 0a86 	vadd.f32	s0, s19, s12
 8006f7e:	ee33 2a21 	vadd.f32	s4, s6, s3
 8006f82:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8006f86:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8006f8a:	ee35 7a02 	vadd.f32	s14, s10, s4
 8006f8e:	ee34 4a80 	vadd.f32	s8, s9, s0
 8006f92:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006f96:	ee74 6a07 	vadd.f32	s13, s8, s14
 8006f9a:	ee34 4a47 	vsub.f32	s8, s8, s14
 8006f9e:	ed46 6a01 	vstr	s13, [r6, #-4]
 8006fa2:	ed85 4a00 	vstr	s8, [r5]
 8006fa6:	edd1 6a00 	vldr	s13, [r1]
 8006faa:	ed94 9a01 	vldr	s18, [r4, #4]
 8006fae:	edd3 2a01 	vldr	s5, [r3, #4]
 8006fb2:	edd7 8a01 	vldr	s17, [r7, #4]
 8006fb6:	edd6 0a00 	vldr	s1, [r6]
 8006fba:	edd5 3a01 	vldr	s7, [r5, #4]
 8006fbe:	ed90 8a01 	vldr	s16, [r0, #4]
 8006fc2:	ed92 7a00 	vldr	s14, [r2]
 8006fc6:	ee33 3a61 	vsub.f32	s6, s6, s3
 8006fca:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8006fce:	ee72 aae8 	vsub.f32	s21, s5, s17
 8006fd2:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8006fd6:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8006fda:	ee77 7a83 	vadd.f32	s15, s15, s6
 8006fde:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8006fe2:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8006fe6:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8006fea:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8006fee:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8006ff2:	ee77 0a08 	vadd.f32	s1, s14, s16
 8006ff6:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8006ffa:	ee37 7a48 	vsub.f32	s14, s14, s16
 8006ffe:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8007002:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8007006:	ee76 6a89 	vadd.f32	s13, s13, s18
 800700a:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800700e:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8007012:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8007016:	ee35 5a42 	vsub.f32	s10, s10, s4
 800701a:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800701e:	ee33 2a20 	vadd.f32	s4, s6, s1
 8007022:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8007026:	ee33 3a60 	vsub.f32	s6, s6, s1
 800702a:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800702e:	ee77 0a01 	vadd.f32	s1, s14, s2
 8007032:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8007036:	ee37 7a41 	vsub.f32	s14, s14, s2
 800703a:	ee73 1a84 	vadd.f32	s3, s7, s8
 800703e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8007042:	ee76 3a27 	vadd.f32	s7, s12, s15
 8007046:	ee76 7a67 	vsub.f32	s15, s12, s15
 800704a:	ee32 8a00 	vadd.f32	s16, s4, s0
 800704e:	ee33 1a45 	vsub.f32	s2, s6, s10
 8007052:	ee32 2a40 	vsub.f32	s4, s4, s0
 8007056:	ee35 5a03 	vadd.f32	s10, s10, s6
 800705a:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800705e:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8007062:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8007066:	ee34 6a67 	vsub.f32	s12, s8, s15
 800706a:	ee75 4a87 	vadd.f32	s9, s11, s14
 800706e:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8007072:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8007076:	ee77 7a84 	vadd.f32	s15, s15, s8
 800707a:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800707e:	44dc      	add	ip, fp
 8007080:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8007084:	45e1      	cmp	r9, ip
 8007086:	ed86 8a00 	vstr	s16, [r6]
 800708a:	ed85 2a01 	vstr	s4, [r5, #4]
 800708e:	4456      	add	r6, sl
 8007090:	ed02 0a01 	vstr	s0, [r2, #-4]
 8007094:	4455      	add	r5, sl
 8007096:	edc0 6a00 	vstr	s13, [r0]
 800709a:	ed82 1a00 	vstr	s2, [r2]
 800709e:	ed80 5a01 	vstr	s10, [r0, #4]
 80070a2:	4452      	add	r2, sl
 80070a4:	ed01 3a01 	vstr	s6, [r1, #-4]
 80070a8:	4450      	add	r0, sl
 80070aa:	edc7 2a00 	vstr	s5, [r7]
 80070ae:	edc4 4a00 	vstr	s9, [r4]
 80070b2:	ed83 7a00 	vstr	s14, [r3]
 80070b6:	edc1 5a00 	vstr	s11, [r1]
 80070ba:	edc7 3a01 	vstr	s7, [r7, #4]
 80070be:	4451      	add	r1, sl
 80070c0:	ed84 6a01 	vstr	s12, [r4, #4]
 80070c4:	4457      	add	r7, sl
 80070c6:	edc3 7a01 	vstr	s15, [r3, #4]
 80070ca:	4454      	add	r4, sl
 80070cc:	4453      	add	r3, sl
 80070ce:	f63f af44 	bhi.w	8006f5a <arm_radix8_butterfly_f32+0x86>
 80070d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070d4:	2b07      	cmp	r3, #7
 80070d6:	f240 81b7 	bls.w	8007448 <arm_radix8_butterfly_f32+0x574>
 80070da:	9b06      	ldr	r3, [sp, #24]
 80070dc:	9903      	ldr	r1, [sp, #12]
 80070de:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80070e0:	9e05      	ldr	r6, [sp, #20]
 80070e2:	9a04      	ldr	r2, [sp, #16]
 80070e4:	f103 0c08 	add.w	ip, r3, #8
 80070e8:	9b02      	ldr	r3, [sp, #8]
 80070ea:	3108      	adds	r1, #8
 80070ec:	f108 0808 	add.w	r8, r8, #8
 80070f0:	1841      	adds	r1, r0, r1
 80070f2:	3608      	adds	r6, #8
 80070f4:	330c      	adds	r3, #12
 80070f6:	4604      	mov	r4, r0
 80070f8:	4444      	add	r4, r8
 80070fa:	18c3      	adds	r3, r0, r3
 80070fc:	9109      	str	r1, [sp, #36]	@ 0x24
 80070fe:	1981      	adds	r1, r0, r6
 8007100:	f10e 0e08 	add.w	lr, lr, #8
 8007104:	3208      	adds	r2, #8
 8007106:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007108:	9107      	str	r1, [sp, #28]
 800710a:	4604      	mov	r4, r0
 800710c:	4601      	mov	r1, r0
 800710e:	9304      	str	r3, [sp, #16]
 8007110:	f100 030c 	add.w	r3, r0, #12
 8007114:	4474      	add	r4, lr
 8007116:	f04f 0801 	mov.w	r8, #1
 800711a:	1882      	adds	r2, r0, r2
 800711c:	4461      	add	r1, ip
 800711e:	9305      	str	r3, [sp, #20]
 8007120:	464b      	mov	r3, r9
 8007122:	940a      	str	r4, [sp, #40]	@ 0x28
 8007124:	46c1      	mov	r9, r8
 8007126:	9208      	str	r2, [sp, #32]
 8007128:	46d8      	mov	r8, fp
 800712a:	9106      	str	r1, [sp, #24]
 800712c:	f04f 0e00 	mov.w	lr, #0
 8007130:	469b      	mov	fp, r3
 8007132:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007134:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007136:	449e      	add	lr, r3
 8007138:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800713c:	441a      	add	r2, r3
 800713e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007140:	441a      	add	r2, r3
 8007142:	18d4      	adds	r4, r2, r3
 8007144:	18e5      	adds	r5, r4, r3
 8007146:	18ee      	adds	r6, r5, r3
 8007148:	18f7      	adds	r7, r6, r3
 800714a:	eb07 0c03 	add.w	ip, r7, r3
 800714e:	920d      	str	r2, [sp, #52]	@ 0x34
 8007150:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8007154:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8007158:	910c      	str	r1, [sp, #48]	@ 0x30
 800715a:	4419      	add	r1, r3
 800715c:	9103      	str	r1, [sp, #12]
 800715e:	4419      	add	r1, r3
 8007160:	18ca      	adds	r2, r1, r3
 8007162:	9202      	str	r2, [sp, #8]
 8007164:	441a      	add	r2, r3
 8007166:	18d0      	adds	r0, r2, r3
 8007168:	ed92 ea01 	vldr	s28, [r2, #4]
 800716c:	9a02      	ldr	r2, [sp, #8]
 800716e:	edd4 7a00 	vldr	s15, [r4]
 8007172:	edd2 da01 	vldr	s27, [r2, #4]
 8007176:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007178:	ed91 da01 	vldr	s26, [r1, #4]
 800717c:	ed92 ca01 	vldr	s24, [r2, #4]
 8007180:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007182:	9903      	ldr	r1, [sp, #12]
 8007184:	edcd 7a03 	vstr	s15, [sp, #12]
 8007188:	edd2 7a00 	vldr	s15, [r2]
 800718c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800718e:	edcd 7a02 	vstr	s15, [sp, #8]
 8007192:	edd2 7a00 	vldr	s15, [r2]
 8007196:	edd0 ea01 	vldr	s29, [r0, #4]
 800719a:	edd1 ca01 	vldr	s25, [r1, #4]
 800719e:	eddc ba00 	vldr	s23, [ip]
 80071a2:	edd7 aa00 	vldr	s21, [r7]
 80071a6:	ed96 aa00 	vldr	s20, [r6]
 80071aa:	edd5 9a00 	vldr	s19, [r5]
 80071ae:	edcd 7a01 	vstr	s15, [sp, #4]
 80071b2:	4403      	add	r3, r0
 80071b4:	ed93 fa01 	vldr	s30, [r3, #4]
 80071b8:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 80071bc:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 80071c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80071c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80071c8:	46cc      	mov	ip, r9
 80071ca:	e001      	b.n	80071d0 <arm_radix8_butterfly_f32+0x2fc>
 80071cc:	3f3504f3 	.word	0x3f3504f3
 80071d0:	ed91 6a00 	vldr	s12, [r1]
 80071d4:	ed93 5a00 	vldr	s10, [r3]
 80071d8:	edd0 fa00 	vldr	s31, [r0]
 80071dc:	edd4 7a00 	vldr	s15, [r4]
 80071e0:	ed95 7a00 	vldr	s14, [r5]
 80071e4:	ed56 3a01 	vldr	s7, [r6, #-4]
 80071e8:	ed17 3a01 	vldr	s6, [r7, #-4]
 80071ec:	ed92 2a00 	vldr	s4, [r2]
 80071f0:	ed96 0a00 	vldr	s0, [r6]
 80071f4:	ee33 8a85 	vadd.f32	s16, s7, s10
 80071f8:	ee32 1a06 	vadd.f32	s2, s4, s12
 80071fc:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8007200:	ee77 4a87 	vadd.f32	s9, s15, s14
 8007204:	ee78 1a04 	vadd.f32	s3, s16, s8
 8007208:	ee71 6a24 	vadd.f32	s13, s2, s9
 800720c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8007210:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8007214:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007218:	ed06 6a01 	vstr	s12, [r6, #-4]
 800721c:	edd4 8a01 	vldr	s17, [r4, #4]
 8007220:	ed92 9a01 	vldr	s18, [r2, #4]
 8007224:	edd7 0a00 	vldr	s1, [r7]
 8007228:	edd1 2a01 	vldr	s5, [r1, #4]
 800722c:	ed95 7a01 	vldr	s14, [r5, #4]
 8007230:	ed93 6a01 	vldr	s12, [r3, #4]
 8007234:	edd0 5a01 	vldr	s11, [r0, #4]
 8007238:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800723c:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8007240:	ee39 5a62 	vsub.f32	s10, s18, s5
 8007244:	ee78 fac7 	vsub.f32	s31, s17, s14
 8007248:	ee38 4a44 	vsub.f32	s8, s16, s8
 800724c:	ee38 7a87 	vadd.f32	s14, s17, s14
 8007250:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8007254:	ee79 2a22 	vadd.f32	s5, s18, s5
 8007258:	ee32 9a27 	vadd.f32	s18, s4, s15
 800725c:	ee72 7a67 	vsub.f32	s15, s4, s15
 8007260:	ee30 2a06 	vadd.f32	s4, s0, s12
 8007264:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8007268:	ee71 4a64 	vsub.f32	s9, s2, s9
 800726c:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8007270:	ee32 1a08 	vadd.f32	s2, s4, s16
 8007274:	ee72 fa87 	vadd.f32	s31, s5, s14
 8007278:	ee32 2a48 	vsub.f32	s4, s4, s16
 800727c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8007280:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8007284:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8007288:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800728c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8007290:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8007294:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8007298:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800729c:	ee30 6a46 	vsub.f32	s12, s0, s12
 80072a0:	ee74 0a22 	vadd.f32	s1, s8, s5
 80072a4:	ee36 0a28 	vadd.f32	s0, s12, s17
 80072a8:	ee74 2a62 	vsub.f32	s5, s8, s5
 80072ac:	ee36 6a68 	vsub.f32	s12, s12, s17
 80072b0:	ee32 4a64 	vsub.f32	s8, s4, s9
 80072b4:	ee73 8a09 	vadd.f32	s17, s6, s18
 80072b8:	ee74 4a82 	vadd.f32	s9, s9, s4
 80072bc:	ee33 9a49 	vsub.f32	s18, s6, s18
 80072c0:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 80072c4:	ee35 3a85 	vadd.f32	s6, s11, s10
 80072c8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80072cc:	ee33 5aa7 	vadd.f32	s10, s7, s15
 80072d0:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80072d4:	ee69 3aa6 	vmul.f32	s7, s19, s13
 80072d8:	ee30 7a68 	vsub.f32	s14, s0, s17
 80072dc:	ee35 8a03 	vadd.f32	s16, s10, s6
 80072e0:	ee38 0a80 	vadd.f32	s0, s17, s0
 80072e4:	ee73 3a82 	vadd.f32	s7, s7, s4
 80072e8:	ee69 8aa1 	vmul.f32	s17, s19, s3
 80072ec:	ed9d 2a01 	vldr	s4, [sp, #4]
 80072f0:	eddd 1a02 	vldr	s3, [sp, #8]
 80072f4:	ee35 5a43 	vsub.f32	s10, s10, s6
 80072f8:	ee71 fa2f 	vadd.f32	s31, s2, s31
 80072fc:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8007300:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8007304:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8007308:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800730c:	ee76 5a49 	vsub.f32	s11, s12, s18
 8007310:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8007314:	ee39 6a06 	vadd.f32	s12, s18, s12
 8007318:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800731c:	ee21 4a84 	vmul.f32	s8, s3, s8
 8007320:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8007324:	ee22 7a07 	vmul.f32	s14, s4, s14
 8007328:	ee22 2a08 	vmul.f32	s4, s4, s16
 800732c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8007330:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8007334:	ee31 1a09 	vadd.f32	s2, s2, s18
 8007338:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800733c:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8007340:	ee74 0a60 	vsub.f32	s1, s8, s1
 8007344:	ee37 7a48 	vsub.f32	s14, s14, s16
 8007348:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800734c:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8007350:	ee72 1a21 	vadd.f32	s3, s4, s3
 8007354:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8007358:	ee38 2a89 	vadd.f32	s4, s17, s18
 800735c:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8007360:	ee38 8a04 	vadd.f32	s16, s16, s8
 8007364:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8007368:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800736c:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8007370:	eddd 5a03 	vldr	s11, [sp, #12]
 8007374:	edc6 fa00 	vstr	s31, [r6]
 8007378:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800737c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8007380:	ee30 0a45 	vsub.f32	s0, s0, s10
 8007384:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8007388:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800738c:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8007390:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8007394:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8007398:	ee25 6a86 	vmul.f32	s12, s11, s12
 800739c:	ee74 4a89 	vadd.f32	s9, s9, s18
 80073a0:	ee34 3a43 	vsub.f32	s6, s8, s6
 80073a4:	ee78 8a85 	vadd.f32	s17, s17, s10
 80073a8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80073ac:	44c4      	add	ip, r8
 80073ae:	45e3      	cmp	fp, ip
 80073b0:	edc3 3a00 	vstr	s7, [r3]
 80073b4:	edc3 6a01 	vstr	s13, [r3, #4]
 80073b8:	4456      	add	r6, sl
 80073ba:	ed07 1a01 	vstr	s2, [r7, #-4]
 80073be:	edc7 0a00 	vstr	s1, [r7]
 80073c2:	4453      	add	r3, sl
 80073c4:	ed80 2a00 	vstr	s4, [r0]
 80073c8:	edc0 2a01 	vstr	s5, [r0, #4]
 80073cc:	4457      	add	r7, sl
 80073ce:	edc2 1a00 	vstr	s3, [r2]
 80073d2:	ed82 7a01 	vstr	s14, [r2, #4]
 80073d6:	4450      	add	r0, sl
 80073d8:	ed85 8a00 	vstr	s16, [r5]
 80073dc:	ed85 0a01 	vstr	s0, [r5, #4]
 80073e0:	4452      	add	r2, sl
 80073e2:	edc1 4a00 	vstr	s9, [r1]
 80073e6:	4455      	add	r5, sl
 80073e8:	ed81 3a01 	vstr	s6, [r1, #4]
 80073ec:	edc4 8a00 	vstr	s17, [r4]
 80073f0:	ed84 6a01 	vstr	s12, [r4, #4]
 80073f4:	4451      	add	r1, sl
 80073f6:	4454      	add	r4, sl
 80073f8:	f63f aeea 	bhi.w	80071d0 <arm_radix8_butterfly_f32+0x2fc>
 80073fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073fe:	3308      	adds	r3, #8
 8007400:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007402:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007404:	3308      	adds	r3, #8
 8007406:	930a      	str	r3, [sp, #40]	@ 0x28
 8007408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800740a:	3308      	adds	r3, #8
 800740c:	9309      	str	r3, [sp, #36]	@ 0x24
 800740e:	9b08      	ldr	r3, [sp, #32]
 8007410:	3308      	adds	r3, #8
 8007412:	9308      	str	r3, [sp, #32]
 8007414:	9b07      	ldr	r3, [sp, #28]
 8007416:	3308      	adds	r3, #8
 8007418:	9307      	str	r3, [sp, #28]
 800741a:	9b06      	ldr	r3, [sp, #24]
 800741c:	3308      	adds	r3, #8
 800741e:	9306      	str	r3, [sp, #24]
 8007420:	9b05      	ldr	r3, [sp, #20]
 8007422:	3308      	adds	r3, #8
 8007424:	9305      	str	r3, [sp, #20]
 8007426:	9b04      	ldr	r3, [sp, #16]
 8007428:	3308      	adds	r3, #8
 800742a:	9304      	str	r3, [sp, #16]
 800742c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800742e:	f109 0901 	add.w	r9, r9, #1
 8007432:	454b      	cmp	r3, r9
 8007434:	f47f ae7d 	bne.w	8007132 <arm_radix8_butterfly_f32+0x25e>
 8007438:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800743a:	00db      	lsls	r3, r3, #3
 800743c:	b29b      	uxth	r3, r3
 800743e:	46d9      	mov	r9, fp
 8007440:	9310      	str	r3, [sp, #64]	@ 0x40
 8007442:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 8007446:	e554      	b.n	8006ef2 <arm_radix8_butterfly_f32+0x1e>
 8007448:	b015      	add	sp, #84	@ 0x54
 800744a:	ecbd 8b10 	vpop	{d8-d15}
 800744e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007452:	bf00      	nop

08007454 <__cvt>:
 8007454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007458:	ec57 6b10 	vmov	r6, r7, d0
 800745c:	2f00      	cmp	r7, #0
 800745e:	460c      	mov	r4, r1
 8007460:	4619      	mov	r1, r3
 8007462:	463b      	mov	r3, r7
 8007464:	bfbb      	ittet	lt
 8007466:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800746a:	461f      	movlt	r7, r3
 800746c:	2300      	movge	r3, #0
 800746e:	232d      	movlt	r3, #45	@ 0x2d
 8007470:	700b      	strb	r3, [r1, #0]
 8007472:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007474:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007478:	4691      	mov	r9, r2
 800747a:	f023 0820 	bic.w	r8, r3, #32
 800747e:	bfbc      	itt	lt
 8007480:	4632      	movlt	r2, r6
 8007482:	4616      	movlt	r6, r2
 8007484:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007488:	d005      	beq.n	8007496 <__cvt+0x42>
 800748a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800748e:	d100      	bne.n	8007492 <__cvt+0x3e>
 8007490:	3401      	adds	r4, #1
 8007492:	2102      	movs	r1, #2
 8007494:	e000      	b.n	8007498 <__cvt+0x44>
 8007496:	2103      	movs	r1, #3
 8007498:	ab03      	add	r3, sp, #12
 800749a:	9301      	str	r3, [sp, #4]
 800749c:	ab02      	add	r3, sp, #8
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	ec47 6b10 	vmov	d0, r6, r7
 80074a4:	4653      	mov	r3, sl
 80074a6:	4622      	mov	r2, r4
 80074a8:	f000 fe5a 	bl	8008160 <_dtoa_r>
 80074ac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80074b0:	4605      	mov	r5, r0
 80074b2:	d119      	bne.n	80074e8 <__cvt+0x94>
 80074b4:	f019 0f01 	tst.w	r9, #1
 80074b8:	d00e      	beq.n	80074d8 <__cvt+0x84>
 80074ba:	eb00 0904 	add.w	r9, r0, r4
 80074be:	2200      	movs	r2, #0
 80074c0:	2300      	movs	r3, #0
 80074c2:	4630      	mov	r0, r6
 80074c4:	4639      	mov	r1, r7
 80074c6:	f7f9 faff 	bl	8000ac8 <__aeabi_dcmpeq>
 80074ca:	b108      	cbz	r0, 80074d0 <__cvt+0x7c>
 80074cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80074d0:	2230      	movs	r2, #48	@ 0x30
 80074d2:	9b03      	ldr	r3, [sp, #12]
 80074d4:	454b      	cmp	r3, r9
 80074d6:	d31e      	bcc.n	8007516 <__cvt+0xc2>
 80074d8:	9b03      	ldr	r3, [sp, #12]
 80074da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80074dc:	1b5b      	subs	r3, r3, r5
 80074de:	4628      	mov	r0, r5
 80074e0:	6013      	str	r3, [r2, #0]
 80074e2:	b004      	add	sp, #16
 80074e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80074ec:	eb00 0904 	add.w	r9, r0, r4
 80074f0:	d1e5      	bne.n	80074be <__cvt+0x6a>
 80074f2:	7803      	ldrb	r3, [r0, #0]
 80074f4:	2b30      	cmp	r3, #48	@ 0x30
 80074f6:	d10a      	bne.n	800750e <__cvt+0xba>
 80074f8:	2200      	movs	r2, #0
 80074fa:	2300      	movs	r3, #0
 80074fc:	4630      	mov	r0, r6
 80074fe:	4639      	mov	r1, r7
 8007500:	f7f9 fae2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007504:	b918      	cbnz	r0, 800750e <__cvt+0xba>
 8007506:	f1c4 0401 	rsb	r4, r4, #1
 800750a:	f8ca 4000 	str.w	r4, [sl]
 800750e:	f8da 3000 	ldr.w	r3, [sl]
 8007512:	4499      	add	r9, r3
 8007514:	e7d3      	b.n	80074be <__cvt+0x6a>
 8007516:	1c59      	adds	r1, r3, #1
 8007518:	9103      	str	r1, [sp, #12]
 800751a:	701a      	strb	r2, [r3, #0]
 800751c:	e7d9      	b.n	80074d2 <__cvt+0x7e>

0800751e <__exponent>:
 800751e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007520:	2900      	cmp	r1, #0
 8007522:	bfba      	itte	lt
 8007524:	4249      	neglt	r1, r1
 8007526:	232d      	movlt	r3, #45	@ 0x2d
 8007528:	232b      	movge	r3, #43	@ 0x2b
 800752a:	2909      	cmp	r1, #9
 800752c:	7002      	strb	r2, [r0, #0]
 800752e:	7043      	strb	r3, [r0, #1]
 8007530:	dd29      	ble.n	8007586 <__exponent+0x68>
 8007532:	f10d 0307 	add.w	r3, sp, #7
 8007536:	461d      	mov	r5, r3
 8007538:	270a      	movs	r7, #10
 800753a:	461a      	mov	r2, r3
 800753c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007540:	fb07 1416 	mls	r4, r7, r6, r1
 8007544:	3430      	adds	r4, #48	@ 0x30
 8007546:	f802 4c01 	strb.w	r4, [r2, #-1]
 800754a:	460c      	mov	r4, r1
 800754c:	2c63      	cmp	r4, #99	@ 0x63
 800754e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007552:	4631      	mov	r1, r6
 8007554:	dcf1      	bgt.n	800753a <__exponent+0x1c>
 8007556:	3130      	adds	r1, #48	@ 0x30
 8007558:	1e94      	subs	r4, r2, #2
 800755a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800755e:	1c41      	adds	r1, r0, #1
 8007560:	4623      	mov	r3, r4
 8007562:	42ab      	cmp	r3, r5
 8007564:	d30a      	bcc.n	800757c <__exponent+0x5e>
 8007566:	f10d 0309 	add.w	r3, sp, #9
 800756a:	1a9b      	subs	r3, r3, r2
 800756c:	42ac      	cmp	r4, r5
 800756e:	bf88      	it	hi
 8007570:	2300      	movhi	r3, #0
 8007572:	3302      	adds	r3, #2
 8007574:	4403      	add	r3, r0
 8007576:	1a18      	subs	r0, r3, r0
 8007578:	b003      	add	sp, #12
 800757a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800757c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007580:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007584:	e7ed      	b.n	8007562 <__exponent+0x44>
 8007586:	2330      	movs	r3, #48	@ 0x30
 8007588:	3130      	adds	r1, #48	@ 0x30
 800758a:	7083      	strb	r3, [r0, #2]
 800758c:	70c1      	strb	r1, [r0, #3]
 800758e:	1d03      	adds	r3, r0, #4
 8007590:	e7f1      	b.n	8007576 <__exponent+0x58>
	...

08007594 <_printf_float>:
 8007594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007598:	b08d      	sub	sp, #52	@ 0x34
 800759a:	460c      	mov	r4, r1
 800759c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80075a0:	4616      	mov	r6, r2
 80075a2:	461f      	mov	r7, r3
 80075a4:	4605      	mov	r5, r0
 80075a6:	f000 fcdb 	bl	8007f60 <_localeconv_r>
 80075aa:	6803      	ldr	r3, [r0, #0]
 80075ac:	9304      	str	r3, [sp, #16]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7f8 fe5e 	bl	8000270 <strlen>
 80075b4:	2300      	movs	r3, #0
 80075b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80075b8:	f8d8 3000 	ldr.w	r3, [r8]
 80075bc:	9005      	str	r0, [sp, #20]
 80075be:	3307      	adds	r3, #7
 80075c0:	f023 0307 	bic.w	r3, r3, #7
 80075c4:	f103 0208 	add.w	r2, r3, #8
 80075c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80075cc:	f8d4 b000 	ldr.w	fp, [r4]
 80075d0:	f8c8 2000 	str.w	r2, [r8]
 80075d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80075dc:	9307      	str	r3, [sp, #28]
 80075de:	f8cd 8018 	str.w	r8, [sp, #24]
 80075e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80075e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075ea:	4b9c      	ldr	r3, [pc, #624]	@ (800785c <_printf_float+0x2c8>)
 80075ec:	f04f 32ff 	mov.w	r2, #4294967295
 80075f0:	f7f9 fa9c 	bl	8000b2c <__aeabi_dcmpun>
 80075f4:	bb70      	cbnz	r0, 8007654 <_printf_float+0xc0>
 80075f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075fa:	4b98      	ldr	r3, [pc, #608]	@ (800785c <_printf_float+0x2c8>)
 80075fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007600:	f7f9 fa76 	bl	8000af0 <__aeabi_dcmple>
 8007604:	bb30      	cbnz	r0, 8007654 <_printf_float+0xc0>
 8007606:	2200      	movs	r2, #0
 8007608:	2300      	movs	r3, #0
 800760a:	4640      	mov	r0, r8
 800760c:	4649      	mov	r1, r9
 800760e:	f7f9 fa65 	bl	8000adc <__aeabi_dcmplt>
 8007612:	b110      	cbz	r0, 800761a <_printf_float+0x86>
 8007614:	232d      	movs	r3, #45	@ 0x2d
 8007616:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800761a:	4a91      	ldr	r2, [pc, #580]	@ (8007860 <_printf_float+0x2cc>)
 800761c:	4b91      	ldr	r3, [pc, #580]	@ (8007864 <_printf_float+0x2d0>)
 800761e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007622:	bf8c      	ite	hi
 8007624:	4690      	movhi	r8, r2
 8007626:	4698      	movls	r8, r3
 8007628:	2303      	movs	r3, #3
 800762a:	6123      	str	r3, [r4, #16]
 800762c:	f02b 0304 	bic.w	r3, fp, #4
 8007630:	6023      	str	r3, [r4, #0]
 8007632:	f04f 0900 	mov.w	r9, #0
 8007636:	9700      	str	r7, [sp, #0]
 8007638:	4633      	mov	r3, r6
 800763a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800763c:	4621      	mov	r1, r4
 800763e:	4628      	mov	r0, r5
 8007640:	f000 f9d2 	bl	80079e8 <_printf_common>
 8007644:	3001      	adds	r0, #1
 8007646:	f040 808d 	bne.w	8007764 <_printf_float+0x1d0>
 800764a:	f04f 30ff 	mov.w	r0, #4294967295
 800764e:	b00d      	add	sp, #52	@ 0x34
 8007650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007654:	4642      	mov	r2, r8
 8007656:	464b      	mov	r3, r9
 8007658:	4640      	mov	r0, r8
 800765a:	4649      	mov	r1, r9
 800765c:	f7f9 fa66 	bl	8000b2c <__aeabi_dcmpun>
 8007660:	b140      	cbz	r0, 8007674 <_printf_float+0xe0>
 8007662:	464b      	mov	r3, r9
 8007664:	2b00      	cmp	r3, #0
 8007666:	bfbc      	itt	lt
 8007668:	232d      	movlt	r3, #45	@ 0x2d
 800766a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800766e:	4a7e      	ldr	r2, [pc, #504]	@ (8007868 <_printf_float+0x2d4>)
 8007670:	4b7e      	ldr	r3, [pc, #504]	@ (800786c <_printf_float+0x2d8>)
 8007672:	e7d4      	b.n	800761e <_printf_float+0x8a>
 8007674:	6863      	ldr	r3, [r4, #4]
 8007676:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800767a:	9206      	str	r2, [sp, #24]
 800767c:	1c5a      	adds	r2, r3, #1
 800767e:	d13b      	bne.n	80076f8 <_printf_float+0x164>
 8007680:	2306      	movs	r3, #6
 8007682:	6063      	str	r3, [r4, #4]
 8007684:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007688:	2300      	movs	r3, #0
 800768a:	6022      	str	r2, [r4, #0]
 800768c:	9303      	str	r3, [sp, #12]
 800768e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007690:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007694:	ab09      	add	r3, sp, #36	@ 0x24
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	6861      	ldr	r1, [r4, #4]
 800769a:	ec49 8b10 	vmov	d0, r8, r9
 800769e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80076a2:	4628      	mov	r0, r5
 80076a4:	f7ff fed6 	bl	8007454 <__cvt>
 80076a8:	9b06      	ldr	r3, [sp, #24]
 80076aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80076ac:	2b47      	cmp	r3, #71	@ 0x47
 80076ae:	4680      	mov	r8, r0
 80076b0:	d129      	bne.n	8007706 <_printf_float+0x172>
 80076b2:	1cc8      	adds	r0, r1, #3
 80076b4:	db02      	blt.n	80076bc <_printf_float+0x128>
 80076b6:	6863      	ldr	r3, [r4, #4]
 80076b8:	4299      	cmp	r1, r3
 80076ba:	dd41      	ble.n	8007740 <_printf_float+0x1ac>
 80076bc:	f1aa 0a02 	sub.w	sl, sl, #2
 80076c0:	fa5f fa8a 	uxtb.w	sl, sl
 80076c4:	3901      	subs	r1, #1
 80076c6:	4652      	mov	r2, sl
 80076c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80076cc:	9109      	str	r1, [sp, #36]	@ 0x24
 80076ce:	f7ff ff26 	bl	800751e <__exponent>
 80076d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076d4:	1813      	adds	r3, r2, r0
 80076d6:	2a01      	cmp	r2, #1
 80076d8:	4681      	mov	r9, r0
 80076da:	6123      	str	r3, [r4, #16]
 80076dc:	dc02      	bgt.n	80076e4 <_printf_float+0x150>
 80076de:	6822      	ldr	r2, [r4, #0]
 80076e0:	07d2      	lsls	r2, r2, #31
 80076e2:	d501      	bpl.n	80076e8 <_printf_float+0x154>
 80076e4:	3301      	adds	r3, #1
 80076e6:	6123      	str	r3, [r4, #16]
 80076e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d0a2      	beq.n	8007636 <_printf_float+0xa2>
 80076f0:	232d      	movs	r3, #45	@ 0x2d
 80076f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076f6:	e79e      	b.n	8007636 <_printf_float+0xa2>
 80076f8:	9a06      	ldr	r2, [sp, #24]
 80076fa:	2a47      	cmp	r2, #71	@ 0x47
 80076fc:	d1c2      	bne.n	8007684 <_printf_float+0xf0>
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1c0      	bne.n	8007684 <_printf_float+0xf0>
 8007702:	2301      	movs	r3, #1
 8007704:	e7bd      	b.n	8007682 <_printf_float+0xee>
 8007706:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800770a:	d9db      	bls.n	80076c4 <_printf_float+0x130>
 800770c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007710:	d118      	bne.n	8007744 <_printf_float+0x1b0>
 8007712:	2900      	cmp	r1, #0
 8007714:	6863      	ldr	r3, [r4, #4]
 8007716:	dd0b      	ble.n	8007730 <_printf_float+0x19c>
 8007718:	6121      	str	r1, [r4, #16]
 800771a:	b913      	cbnz	r3, 8007722 <_printf_float+0x18e>
 800771c:	6822      	ldr	r2, [r4, #0]
 800771e:	07d0      	lsls	r0, r2, #31
 8007720:	d502      	bpl.n	8007728 <_printf_float+0x194>
 8007722:	3301      	adds	r3, #1
 8007724:	440b      	add	r3, r1
 8007726:	6123      	str	r3, [r4, #16]
 8007728:	65a1      	str	r1, [r4, #88]	@ 0x58
 800772a:	f04f 0900 	mov.w	r9, #0
 800772e:	e7db      	b.n	80076e8 <_printf_float+0x154>
 8007730:	b913      	cbnz	r3, 8007738 <_printf_float+0x1a4>
 8007732:	6822      	ldr	r2, [r4, #0]
 8007734:	07d2      	lsls	r2, r2, #31
 8007736:	d501      	bpl.n	800773c <_printf_float+0x1a8>
 8007738:	3302      	adds	r3, #2
 800773a:	e7f4      	b.n	8007726 <_printf_float+0x192>
 800773c:	2301      	movs	r3, #1
 800773e:	e7f2      	b.n	8007726 <_printf_float+0x192>
 8007740:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007744:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007746:	4299      	cmp	r1, r3
 8007748:	db05      	blt.n	8007756 <_printf_float+0x1c2>
 800774a:	6823      	ldr	r3, [r4, #0]
 800774c:	6121      	str	r1, [r4, #16]
 800774e:	07d8      	lsls	r0, r3, #31
 8007750:	d5ea      	bpl.n	8007728 <_printf_float+0x194>
 8007752:	1c4b      	adds	r3, r1, #1
 8007754:	e7e7      	b.n	8007726 <_printf_float+0x192>
 8007756:	2900      	cmp	r1, #0
 8007758:	bfd4      	ite	le
 800775a:	f1c1 0202 	rsble	r2, r1, #2
 800775e:	2201      	movgt	r2, #1
 8007760:	4413      	add	r3, r2
 8007762:	e7e0      	b.n	8007726 <_printf_float+0x192>
 8007764:	6823      	ldr	r3, [r4, #0]
 8007766:	055a      	lsls	r2, r3, #21
 8007768:	d407      	bmi.n	800777a <_printf_float+0x1e6>
 800776a:	6923      	ldr	r3, [r4, #16]
 800776c:	4642      	mov	r2, r8
 800776e:	4631      	mov	r1, r6
 8007770:	4628      	mov	r0, r5
 8007772:	47b8      	blx	r7
 8007774:	3001      	adds	r0, #1
 8007776:	d12b      	bne.n	80077d0 <_printf_float+0x23c>
 8007778:	e767      	b.n	800764a <_printf_float+0xb6>
 800777a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800777e:	f240 80dd 	bls.w	800793c <_printf_float+0x3a8>
 8007782:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007786:	2200      	movs	r2, #0
 8007788:	2300      	movs	r3, #0
 800778a:	f7f9 f99d 	bl	8000ac8 <__aeabi_dcmpeq>
 800778e:	2800      	cmp	r0, #0
 8007790:	d033      	beq.n	80077fa <_printf_float+0x266>
 8007792:	4a37      	ldr	r2, [pc, #220]	@ (8007870 <_printf_float+0x2dc>)
 8007794:	2301      	movs	r3, #1
 8007796:	4631      	mov	r1, r6
 8007798:	4628      	mov	r0, r5
 800779a:	47b8      	blx	r7
 800779c:	3001      	adds	r0, #1
 800779e:	f43f af54 	beq.w	800764a <_printf_float+0xb6>
 80077a2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80077a6:	4543      	cmp	r3, r8
 80077a8:	db02      	blt.n	80077b0 <_printf_float+0x21c>
 80077aa:	6823      	ldr	r3, [r4, #0]
 80077ac:	07d8      	lsls	r0, r3, #31
 80077ae:	d50f      	bpl.n	80077d0 <_printf_float+0x23c>
 80077b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077b4:	4631      	mov	r1, r6
 80077b6:	4628      	mov	r0, r5
 80077b8:	47b8      	blx	r7
 80077ba:	3001      	adds	r0, #1
 80077bc:	f43f af45 	beq.w	800764a <_printf_float+0xb6>
 80077c0:	f04f 0900 	mov.w	r9, #0
 80077c4:	f108 38ff 	add.w	r8, r8, #4294967295
 80077c8:	f104 0a1a 	add.w	sl, r4, #26
 80077cc:	45c8      	cmp	r8, r9
 80077ce:	dc09      	bgt.n	80077e4 <_printf_float+0x250>
 80077d0:	6823      	ldr	r3, [r4, #0]
 80077d2:	079b      	lsls	r3, r3, #30
 80077d4:	f100 8103 	bmi.w	80079de <_printf_float+0x44a>
 80077d8:	68e0      	ldr	r0, [r4, #12]
 80077da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077dc:	4298      	cmp	r0, r3
 80077de:	bfb8      	it	lt
 80077e0:	4618      	movlt	r0, r3
 80077e2:	e734      	b.n	800764e <_printf_float+0xba>
 80077e4:	2301      	movs	r3, #1
 80077e6:	4652      	mov	r2, sl
 80077e8:	4631      	mov	r1, r6
 80077ea:	4628      	mov	r0, r5
 80077ec:	47b8      	blx	r7
 80077ee:	3001      	adds	r0, #1
 80077f0:	f43f af2b 	beq.w	800764a <_printf_float+0xb6>
 80077f4:	f109 0901 	add.w	r9, r9, #1
 80077f8:	e7e8      	b.n	80077cc <_printf_float+0x238>
 80077fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	dc39      	bgt.n	8007874 <_printf_float+0x2e0>
 8007800:	4a1b      	ldr	r2, [pc, #108]	@ (8007870 <_printf_float+0x2dc>)
 8007802:	2301      	movs	r3, #1
 8007804:	4631      	mov	r1, r6
 8007806:	4628      	mov	r0, r5
 8007808:	47b8      	blx	r7
 800780a:	3001      	adds	r0, #1
 800780c:	f43f af1d 	beq.w	800764a <_printf_float+0xb6>
 8007810:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007814:	ea59 0303 	orrs.w	r3, r9, r3
 8007818:	d102      	bne.n	8007820 <_printf_float+0x28c>
 800781a:	6823      	ldr	r3, [r4, #0]
 800781c:	07d9      	lsls	r1, r3, #31
 800781e:	d5d7      	bpl.n	80077d0 <_printf_float+0x23c>
 8007820:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007824:	4631      	mov	r1, r6
 8007826:	4628      	mov	r0, r5
 8007828:	47b8      	blx	r7
 800782a:	3001      	adds	r0, #1
 800782c:	f43f af0d 	beq.w	800764a <_printf_float+0xb6>
 8007830:	f04f 0a00 	mov.w	sl, #0
 8007834:	f104 0b1a 	add.w	fp, r4, #26
 8007838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800783a:	425b      	negs	r3, r3
 800783c:	4553      	cmp	r3, sl
 800783e:	dc01      	bgt.n	8007844 <_printf_float+0x2b0>
 8007840:	464b      	mov	r3, r9
 8007842:	e793      	b.n	800776c <_printf_float+0x1d8>
 8007844:	2301      	movs	r3, #1
 8007846:	465a      	mov	r2, fp
 8007848:	4631      	mov	r1, r6
 800784a:	4628      	mov	r0, r5
 800784c:	47b8      	blx	r7
 800784e:	3001      	adds	r0, #1
 8007850:	f43f aefb 	beq.w	800764a <_printf_float+0xb6>
 8007854:	f10a 0a01 	add.w	sl, sl, #1
 8007858:	e7ee      	b.n	8007838 <_printf_float+0x2a4>
 800785a:	bf00      	nop
 800785c:	7fefffff 	.word	0x7fefffff
 8007860:	0801d1a8 	.word	0x0801d1a8
 8007864:	0801d1a4 	.word	0x0801d1a4
 8007868:	0801d1b0 	.word	0x0801d1b0
 800786c:	0801d1ac 	.word	0x0801d1ac
 8007870:	0801d1b4 	.word	0x0801d1b4
 8007874:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007876:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800787a:	4553      	cmp	r3, sl
 800787c:	bfa8      	it	ge
 800787e:	4653      	movge	r3, sl
 8007880:	2b00      	cmp	r3, #0
 8007882:	4699      	mov	r9, r3
 8007884:	dc36      	bgt.n	80078f4 <_printf_float+0x360>
 8007886:	f04f 0b00 	mov.w	fp, #0
 800788a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800788e:	f104 021a 	add.w	r2, r4, #26
 8007892:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007894:	9306      	str	r3, [sp, #24]
 8007896:	eba3 0309 	sub.w	r3, r3, r9
 800789a:	455b      	cmp	r3, fp
 800789c:	dc31      	bgt.n	8007902 <_printf_float+0x36e>
 800789e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078a0:	459a      	cmp	sl, r3
 80078a2:	dc3a      	bgt.n	800791a <_printf_float+0x386>
 80078a4:	6823      	ldr	r3, [r4, #0]
 80078a6:	07da      	lsls	r2, r3, #31
 80078a8:	d437      	bmi.n	800791a <_printf_float+0x386>
 80078aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078ac:	ebaa 0903 	sub.w	r9, sl, r3
 80078b0:	9b06      	ldr	r3, [sp, #24]
 80078b2:	ebaa 0303 	sub.w	r3, sl, r3
 80078b6:	4599      	cmp	r9, r3
 80078b8:	bfa8      	it	ge
 80078ba:	4699      	movge	r9, r3
 80078bc:	f1b9 0f00 	cmp.w	r9, #0
 80078c0:	dc33      	bgt.n	800792a <_printf_float+0x396>
 80078c2:	f04f 0800 	mov.w	r8, #0
 80078c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078ca:	f104 0b1a 	add.w	fp, r4, #26
 80078ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078d0:	ebaa 0303 	sub.w	r3, sl, r3
 80078d4:	eba3 0309 	sub.w	r3, r3, r9
 80078d8:	4543      	cmp	r3, r8
 80078da:	f77f af79 	ble.w	80077d0 <_printf_float+0x23c>
 80078de:	2301      	movs	r3, #1
 80078e0:	465a      	mov	r2, fp
 80078e2:	4631      	mov	r1, r6
 80078e4:	4628      	mov	r0, r5
 80078e6:	47b8      	blx	r7
 80078e8:	3001      	adds	r0, #1
 80078ea:	f43f aeae 	beq.w	800764a <_printf_float+0xb6>
 80078ee:	f108 0801 	add.w	r8, r8, #1
 80078f2:	e7ec      	b.n	80078ce <_printf_float+0x33a>
 80078f4:	4642      	mov	r2, r8
 80078f6:	4631      	mov	r1, r6
 80078f8:	4628      	mov	r0, r5
 80078fa:	47b8      	blx	r7
 80078fc:	3001      	adds	r0, #1
 80078fe:	d1c2      	bne.n	8007886 <_printf_float+0x2f2>
 8007900:	e6a3      	b.n	800764a <_printf_float+0xb6>
 8007902:	2301      	movs	r3, #1
 8007904:	4631      	mov	r1, r6
 8007906:	4628      	mov	r0, r5
 8007908:	9206      	str	r2, [sp, #24]
 800790a:	47b8      	blx	r7
 800790c:	3001      	adds	r0, #1
 800790e:	f43f ae9c 	beq.w	800764a <_printf_float+0xb6>
 8007912:	9a06      	ldr	r2, [sp, #24]
 8007914:	f10b 0b01 	add.w	fp, fp, #1
 8007918:	e7bb      	b.n	8007892 <_printf_float+0x2fe>
 800791a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800791e:	4631      	mov	r1, r6
 8007920:	4628      	mov	r0, r5
 8007922:	47b8      	blx	r7
 8007924:	3001      	adds	r0, #1
 8007926:	d1c0      	bne.n	80078aa <_printf_float+0x316>
 8007928:	e68f      	b.n	800764a <_printf_float+0xb6>
 800792a:	9a06      	ldr	r2, [sp, #24]
 800792c:	464b      	mov	r3, r9
 800792e:	4442      	add	r2, r8
 8007930:	4631      	mov	r1, r6
 8007932:	4628      	mov	r0, r5
 8007934:	47b8      	blx	r7
 8007936:	3001      	adds	r0, #1
 8007938:	d1c3      	bne.n	80078c2 <_printf_float+0x32e>
 800793a:	e686      	b.n	800764a <_printf_float+0xb6>
 800793c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007940:	f1ba 0f01 	cmp.w	sl, #1
 8007944:	dc01      	bgt.n	800794a <_printf_float+0x3b6>
 8007946:	07db      	lsls	r3, r3, #31
 8007948:	d536      	bpl.n	80079b8 <_printf_float+0x424>
 800794a:	2301      	movs	r3, #1
 800794c:	4642      	mov	r2, r8
 800794e:	4631      	mov	r1, r6
 8007950:	4628      	mov	r0, r5
 8007952:	47b8      	blx	r7
 8007954:	3001      	adds	r0, #1
 8007956:	f43f ae78 	beq.w	800764a <_printf_float+0xb6>
 800795a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800795e:	4631      	mov	r1, r6
 8007960:	4628      	mov	r0, r5
 8007962:	47b8      	blx	r7
 8007964:	3001      	adds	r0, #1
 8007966:	f43f ae70 	beq.w	800764a <_printf_float+0xb6>
 800796a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800796e:	2200      	movs	r2, #0
 8007970:	2300      	movs	r3, #0
 8007972:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007976:	f7f9 f8a7 	bl	8000ac8 <__aeabi_dcmpeq>
 800797a:	b9c0      	cbnz	r0, 80079ae <_printf_float+0x41a>
 800797c:	4653      	mov	r3, sl
 800797e:	f108 0201 	add.w	r2, r8, #1
 8007982:	4631      	mov	r1, r6
 8007984:	4628      	mov	r0, r5
 8007986:	47b8      	blx	r7
 8007988:	3001      	adds	r0, #1
 800798a:	d10c      	bne.n	80079a6 <_printf_float+0x412>
 800798c:	e65d      	b.n	800764a <_printf_float+0xb6>
 800798e:	2301      	movs	r3, #1
 8007990:	465a      	mov	r2, fp
 8007992:	4631      	mov	r1, r6
 8007994:	4628      	mov	r0, r5
 8007996:	47b8      	blx	r7
 8007998:	3001      	adds	r0, #1
 800799a:	f43f ae56 	beq.w	800764a <_printf_float+0xb6>
 800799e:	f108 0801 	add.w	r8, r8, #1
 80079a2:	45d0      	cmp	r8, sl
 80079a4:	dbf3      	blt.n	800798e <_printf_float+0x3fa>
 80079a6:	464b      	mov	r3, r9
 80079a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80079ac:	e6df      	b.n	800776e <_printf_float+0x1da>
 80079ae:	f04f 0800 	mov.w	r8, #0
 80079b2:	f104 0b1a 	add.w	fp, r4, #26
 80079b6:	e7f4      	b.n	80079a2 <_printf_float+0x40e>
 80079b8:	2301      	movs	r3, #1
 80079ba:	4642      	mov	r2, r8
 80079bc:	e7e1      	b.n	8007982 <_printf_float+0x3ee>
 80079be:	2301      	movs	r3, #1
 80079c0:	464a      	mov	r2, r9
 80079c2:	4631      	mov	r1, r6
 80079c4:	4628      	mov	r0, r5
 80079c6:	47b8      	blx	r7
 80079c8:	3001      	adds	r0, #1
 80079ca:	f43f ae3e 	beq.w	800764a <_printf_float+0xb6>
 80079ce:	f108 0801 	add.w	r8, r8, #1
 80079d2:	68e3      	ldr	r3, [r4, #12]
 80079d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80079d6:	1a5b      	subs	r3, r3, r1
 80079d8:	4543      	cmp	r3, r8
 80079da:	dcf0      	bgt.n	80079be <_printf_float+0x42a>
 80079dc:	e6fc      	b.n	80077d8 <_printf_float+0x244>
 80079de:	f04f 0800 	mov.w	r8, #0
 80079e2:	f104 0919 	add.w	r9, r4, #25
 80079e6:	e7f4      	b.n	80079d2 <_printf_float+0x43e>

080079e8 <_printf_common>:
 80079e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079ec:	4616      	mov	r6, r2
 80079ee:	4698      	mov	r8, r3
 80079f0:	688a      	ldr	r2, [r1, #8]
 80079f2:	690b      	ldr	r3, [r1, #16]
 80079f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80079f8:	4293      	cmp	r3, r2
 80079fa:	bfb8      	it	lt
 80079fc:	4613      	movlt	r3, r2
 80079fe:	6033      	str	r3, [r6, #0]
 8007a00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a04:	4607      	mov	r7, r0
 8007a06:	460c      	mov	r4, r1
 8007a08:	b10a      	cbz	r2, 8007a0e <_printf_common+0x26>
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	6033      	str	r3, [r6, #0]
 8007a0e:	6823      	ldr	r3, [r4, #0]
 8007a10:	0699      	lsls	r1, r3, #26
 8007a12:	bf42      	ittt	mi
 8007a14:	6833      	ldrmi	r3, [r6, #0]
 8007a16:	3302      	addmi	r3, #2
 8007a18:	6033      	strmi	r3, [r6, #0]
 8007a1a:	6825      	ldr	r5, [r4, #0]
 8007a1c:	f015 0506 	ands.w	r5, r5, #6
 8007a20:	d106      	bne.n	8007a30 <_printf_common+0x48>
 8007a22:	f104 0a19 	add.w	sl, r4, #25
 8007a26:	68e3      	ldr	r3, [r4, #12]
 8007a28:	6832      	ldr	r2, [r6, #0]
 8007a2a:	1a9b      	subs	r3, r3, r2
 8007a2c:	42ab      	cmp	r3, r5
 8007a2e:	dc26      	bgt.n	8007a7e <_printf_common+0x96>
 8007a30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a34:	6822      	ldr	r2, [r4, #0]
 8007a36:	3b00      	subs	r3, #0
 8007a38:	bf18      	it	ne
 8007a3a:	2301      	movne	r3, #1
 8007a3c:	0692      	lsls	r2, r2, #26
 8007a3e:	d42b      	bmi.n	8007a98 <_printf_common+0xb0>
 8007a40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a44:	4641      	mov	r1, r8
 8007a46:	4638      	mov	r0, r7
 8007a48:	47c8      	blx	r9
 8007a4a:	3001      	adds	r0, #1
 8007a4c:	d01e      	beq.n	8007a8c <_printf_common+0xa4>
 8007a4e:	6823      	ldr	r3, [r4, #0]
 8007a50:	6922      	ldr	r2, [r4, #16]
 8007a52:	f003 0306 	and.w	r3, r3, #6
 8007a56:	2b04      	cmp	r3, #4
 8007a58:	bf02      	ittt	eq
 8007a5a:	68e5      	ldreq	r5, [r4, #12]
 8007a5c:	6833      	ldreq	r3, [r6, #0]
 8007a5e:	1aed      	subeq	r5, r5, r3
 8007a60:	68a3      	ldr	r3, [r4, #8]
 8007a62:	bf0c      	ite	eq
 8007a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a68:	2500      	movne	r5, #0
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	bfc4      	itt	gt
 8007a6e:	1a9b      	subgt	r3, r3, r2
 8007a70:	18ed      	addgt	r5, r5, r3
 8007a72:	2600      	movs	r6, #0
 8007a74:	341a      	adds	r4, #26
 8007a76:	42b5      	cmp	r5, r6
 8007a78:	d11a      	bne.n	8007ab0 <_printf_common+0xc8>
 8007a7a:	2000      	movs	r0, #0
 8007a7c:	e008      	b.n	8007a90 <_printf_common+0xa8>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	4652      	mov	r2, sl
 8007a82:	4641      	mov	r1, r8
 8007a84:	4638      	mov	r0, r7
 8007a86:	47c8      	blx	r9
 8007a88:	3001      	adds	r0, #1
 8007a8a:	d103      	bne.n	8007a94 <_printf_common+0xac>
 8007a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a94:	3501      	adds	r5, #1
 8007a96:	e7c6      	b.n	8007a26 <_printf_common+0x3e>
 8007a98:	18e1      	adds	r1, r4, r3
 8007a9a:	1c5a      	adds	r2, r3, #1
 8007a9c:	2030      	movs	r0, #48	@ 0x30
 8007a9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007aa2:	4422      	add	r2, r4
 8007aa4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007aa8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007aac:	3302      	adds	r3, #2
 8007aae:	e7c7      	b.n	8007a40 <_printf_common+0x58>
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	4622      	mov	r2, r4
 8007ab4:	4641      	mov	r1, r8
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	47c8      	blx	r9
 8007aba:	3001      	adds	r0, #1
 8007abc:	d0e6      	beq.n	8007a8c <_printf_common+0xa4>
 8007abe:	3601      	adds	r6, #1
 8007ac0:	e7d9      	b.n	8007a76 <_printf_common+0x8e>
	...

08007ac4 <_printf_i>:
 8007ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ac8:	7e0f      	ldrb	r7, [r1, #24]
 8007aca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007acc:	2f78      	cmp	r7, #120	@ 0x78
 8007ace:	4691      	mov	r9, r2
 8007ad0:	4680      	mov	r8, r0
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	469a      	mov	sl, r3
 8007ad6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ada:	d807      	bhi.n	8007aec <_printf_i+0x28>
 8007adc:	2f62      	cmp	r7, #98	@ 0x62
 8007ade:	d80a      	bhi.n	8007af6 <_printf_i+0x32>
 8007ae0:	2f00      	cmp	r7, #0
 8007ae2:	f000 80d1 	beq.w	8007c88 <_printf_i+0x1c4>
 8007ae6:	2f58      	cmp	r7, #88	@ 0x58
 8007ae8:	f000 80b8 	beq.w	8007c5c <_printf_i+0x198>
 8007aec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007af0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007af4:	e03a      	b.n	8007b6c <_printf_i+0xa8>
 8007af6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007afa:	2b15      	cmp	r3, #21
 8007afc:	d8f6      	bhi.n	8007aec <_printf_i+0x28>
 8007afe:	a101      	add	r1, pc, #4	@ (adr r1, 8007b04 <_printf_i+0x40>)
 8007b00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b04:	08007b5d 	.word	0x08007b5d
 8007b08:	08007b71 	.word	0x08007b71
 8007b0c:	08007aed 	.word	0x08007aed
 8007b10:	08007aed 	.word	0x08007aed
 8007b14:	08007aed 	.word	0x08007aed
 8007b18:	08007aed 	.word	0x08007aed
 8007b1c:	08007b71 	.word	0x08007b71
 8007b20:	08007aed 	.word	0x08007aed
 8007b24:	08007aed 	.word	0x08007aed
 8007b28:	08007aed 	.word	0x08007aed
 8007b2c:	08007aed 	.word	0x08007aed
 8007b30:	08007c6f 	.word	0x08007c6f
 8007b34:	08007b9b 	.word	0x08007b9b
 8007b38:	08007c29 	.word	0x08007c29
 8007b3c:	08007aed 	.word	0x08007aed
 8007b40:	08007aed 	.word	0x08007aed
 8007b44:	08007c91 	.word	0x08007c91
 8007b48:	08007aed 	.word	0x08007aed
 8007b4c:	08007b9b 	.word	0x08007b9b
 8007b50:	08007aed 	.word	0x08007aed
 8007b54:	08007aed 	.word	0x08007aed
 8007b58:	08007c31 	.word	0x08007c31
 8007b5c:	6833      	ldr	r3, [r6, #0]
 8007b5e:	1d1a      	adds	r2, r3, #4
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	6032      	str	r2, [r6, #0]
 8007b64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e09c      	b.n	8007caa <_printf_i+0x1e6>
 8007b70:	6833      	ldr	r3, [r6, #0]
 8007b72:	6820      	ldr	r0, [r4, #0]
 8007b74:	1d19      	adds	r1, r3, #4
 8007b76:	6031      	str	r1, [r6, #0]
 8007b78:	0606      	lsls	r6, r0, #24
 8007b7a:	d501      	bpl.n	8007b80 <_printf_i+0xbc>
 8007b7c:	681d      	ldr	r5, [r3, #0]
 8007b7e:	e003      	b.n	8007b88 <_printf_i+0xc4>
 8007b80:	0645      	lsls	r5, r0, #25
 8007b82:	d5fb      	bpl.n	8007b7c <_printf_i+0xb8>
 8007b84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007b88:	2d00      	cmp	r5, #0
 8007b8a:	da03      	bge.n	8007b94 <_printf_i+0xd0>
 8007b8c:	232d      	movs	r3, #45	@ 0x2d
 8007b8e:	426d      	negs	r5, r5
 8007b90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b94:	4858      	ldr	r0, [pc, #352]	@ (8007cf8 <_printf_i+0x234>)
 8007b96:	230a      	movs	r3, #10
 8007b98:	e011      	b.n	8007bbe <_printf_i+0xfa>
 8007b9a:	6821      	ldr	r1, [r4, #0]
 8007b9c:	6833      	ldr	r3, [r6, #0]
 8007b9e:	0608      	lsls	r0, r1, #24
 8007ba0:	f853 5b04 	ldr.w	r5, [r3], #4
 8007ba4:	d402      	bmi.n	8007bac <_printf_i+0xe8>
 8007ba6:	0649      	lsls	r1, r1, #25
 8007ba8:	bf48      	it	mi
 8007baa:	b2ad      	uxthmi	r5, r5
 8007bac:	2f6f      	cmp	r7, #111	@ 0x6f
 8007bae:	4852      	ldr	r0, [pc, #328]	@ (8007cf8 <_printf_i+0x234>)
 8007bb0:	6033      	str	r3, [r6, #0]
 8007bb2:	bf14      	ite	ne
 8007bb4:	230a      	movne	r3, #10
 8007bb6:	2308      	moveq	r3, #8
 8007bb8:	2100      	movs	r1, #0
 8007bba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007bbe:	6866      	ldr	r6, [r4, #4]
 8007bc0:	60a6      	str	r6, [r4, #8]
 8007bc2:	2e00      	cmp	r6, #0
 8007bc4:	db05      	blt.n	8007bd2 <_printf_i+0x10e>
 8007bc6:	6821      	ldr	r1, [r4, #0]
 8007bc8:	432e      	orrs	r6, r5
 8007bca:	f021 0104 	bic.w	r1, r1, #4
 8007bce:	6021      	str	r1, [r4, #0]
 8007bd0:	d04b      	beq.n	8007c6a <_printf_i+0x1a6>
 8007bd2:	4616      	mov	r6, r2
 8007bd4:	fbb5 f1f3 	udiv	r1, r5, r3
 8007bd8:	fb03 5711 	mls	r7, r3, r1, r5
 8007bdc:	5dc7      	ldrb	r7, [r0, r7]
 8007bde:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007be2:	462f      	mov	r7, r5
 8007be4:	42bb      	cmp	r3, r7
 8007be6:	460d      	mov	r5, r1
 8007be8:	d9f4      	bls.n	8007bd4 <_printf_i+0x110>
 8007bea:	2b08      	cmp	r3, #8
 8007bec:	d10b      	bne.n	8007c06 <_printf_i+0x142>
 8007bee:	6823      	ldr	r3, [r4, #0]
 8007bf0:	07df      	lsls	r7, r3, #31
 8007bf2:	d508      	bpl.n	8007c06 <_printf_i+0x142>
 8007bf4:	6923      	ldr	r3, [r4, #16]
 8007bf6:	6861      	ldr	r1, [r4, #4]
 8007bf8:	4299      	cmp	r1, r3
 8007bfa:	bfde      	ittt	le
 8007bfc:	2330      	movle	r3, #48	@ 0x30
 8007bfe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c06:	1b92      	subs	r2, r2, r6
 8007c08:	6122      	str	r2, [r4, #16]
 8007c0a:	f8cd a000 	str.w	sl, [sp]
 8007c0e:	464b      	mov	r3, r9
 8007c10:	aa03      	add	r2, sp, #12
 8007c12:	4621      	mov	r1, r4
 8007c14:	4640      	mov	r0, r8
 8007c16:	f7ff fee7 	bl	80079e8 <_printf_common>
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	d14a      	bne.n	8007cb4 <_printf_i+0x1f0>
 8007c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c22:	b004      	add	sp, #16
 8007c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c28:	6823      	ldr	r3, [r4, #0]
 8007c2a:	f043 0320 	orr.w	r3, r3, #32
 8007c2e:	6023      	str	r3, [r4, #0]
 8007c30:	4832      	ldr	r0, [pc, #200]	@ (8007cfc <_printf_i+0x238>)
 8007c32:	2778      	movs	r7, #120	@ 0x78
 8007c34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c38:	6823      	ldr	r3, [r4, #0]
 8007c3a:	6831      	ldr	r1, [r6, #0]
 8007c3c:	061f      	lsls	r7, r3, #24
 8007c3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c42:	d402      	bmi.n	8007c4a <_printf_i+0x186>
 8007c44:	065f      	lsls	r7, r3, #25
 8007c46:	bf48      	it	mi
 8007c48:	b2ad      	uxthmi	r5, r5
 8007c4a:	6031      	str	r1, [r6, #0]
 8007c4c:	07d9      	lsls	r1, r3, #31
 8007c4e:	bf44      	itt	mi
 8007c50:	f043 0320 	orrmi.w	r3, r3, #32
 8007c54:	6023      	strmi	r3, [r4, #0]
 8007c56:	b11d      	cbz	r5, 8007c60 <_printf_i+0x19c>
 8007c58:	2310      	movs	r3, #16
 8007c5a:	e7ad      	b.n	8007bb8 <_printf_i+0xf4>
 8007c5c:	4826      	ldr	r0, [pc, #152]	@ (8007cf8 <_printf_i+0x234>)
 8007c5e:	e7e9      	b.n	8007c34 <_printf_i+0x170>
 8007c60:	6823      	ldr	r3, [r4, #0]
 8007c62:	f023 0320 	bic.w	r3, r3, #32
 8007c66:	6023      	str	r3, [r4, #0]
 8007c68:	e7f6      	b.n	8007c58 <_printf_i+0x194>
 8007c6a:	4616      	mov	r6, r2
 8007c6c:	e7bd      	b.n	8007bea <_printf_i+0x126>
 8007c6e:	6833      	ldr	r3, [r6, #0]
 8007c70:	6825      	ldr	r5, [r4, #0]
 8007c72:	6961      	ldr	r1, [r4, #20]
 8007c74:	1d18      	adds	r0, r3, #4
 8007c76:	6030      	str	r0, [r6, #0]
 8007c78:	062e      	lsls	r6, r5, #24
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	d501      	bpl.n	8007c82 <_printf_i+0x1be>
 8007c7e:	6019      	str	r1, [r3, #0]
 8007c80:	e002      	b.n	8007c88 <_printf_i+0x1c4>
 8007c82:	0668      	lsls	r0, r5, #25
 8007c84:	d5fb      	bpl.n	8007c7e <_printf_i+0x1ba>
 8007c86:	8019      	strh	r1, [r3, #0]
 8007c88:	2300      	movs	r3, #0
 8007c8a:	6123      	str	r3, [r4, #16]
 8007c8c:	4616      	mov	r6, r2
 8007c8e:	e7bc      	b.n	8007c0a <_printf_i+0x146>
 8007c90:	6833      	ldr	r3, [r6, #0]
 8007c92:	1d1a      	adds	r2, r3, #4
 8007c94:	6032      	str	r2, [r6, #0]
 8007c96:	681e      	ldr	r6, [r3, #0]
 8007c98:	6862      	ldr	r2, [r4, #4]
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f7f8 fa97 	bl	80001d0 <memchr>
 8007ca2:	b108      	cbz	r0, 8007ca8 <_printf_i+0x1e4>
 8007ca4:	1b80      	subs	r0, r0, r6
 8007ca6:	6060      	str	r0, [r4, #4]
 8007ca8:	6863      	ldr	r3, [r4, #4]
 8007caa:	6123      	str	r3, [r4, #16]
 8007cac:	2300      	movs	r3, #0
 8007cae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cb2:	e7aa      	b.n	8007c0a <_printf_i+0x146>
 8007cb4:	6923      	ldr	r3, [r4, #16]
 8007cb6:	4632      	mov	r2, r6
 8007cb8:	4649      	mov	r1, r9
 8007cba:	4640      	mov	r0, r8
 8007cbc:	47d0      	blx	sl
 8007cbe:	3001      	adds	r0, #1
 8007cc0:	d0ad      	beq.n	8007c1e <_printf_i+0x15a>
 8007cc2:	6823      	ldr	r3, [r4, #0]
 8007cc4:	079b      	lsls	r3, r3, #30
 8007cc6:	d413      	bmi.n	8007cf0 <_printf_i+0x22c>
 8007cc8:	68e0      	ldr	r0, [r4, #12]
 8007cca:	9b03      	ldr	r3, [sp, #12]
 8007ccc:	4298      	cmp	r0, r3
 8007cce:	bfb8      	it	lt
 8007cd0:	4618      	movlt	r0, r3
 8007cd2:	e7a6      	b.n	8007c22 <_printf_i+0x15e>
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	4632      	mov	r2, r6
 8007cd8:	4649      	mov	r1, r9
 8007cda:	4640      	mov	r0, r8
 8007cdc:	47d0      	blx	sl
 8007cde:	3001      	adds	r0, #1
 8007ce0:	d09d      	beq.n	8007c1e <_printf_i+0x15a>
 8007ce2:	3501      	adds	r5, #1
 8007ce4:	68e3      	ldr	r3, [r4, #12]
 8007ce6:	9903      	ldr	r1, [sp, #12]
 8007ce8:	1a5b      	subs	r3, r3, r1
 8007cea:	42ab      	cmp	r3, r5
 8007cec:	dcf2      	bgt.n	8007cd4 <_printf_i+0x210>
 8007cee:	e7eb      	b.n	8007cc8 <_printf_i+0x204>
 8007cf0:	2500      	movs	r5, #0
 8007cf2:	f104 0619 	add.w	r6, r4, #25
 8007cf6:	e7f5      	b.n	8007ce4 <_printf_i+0x220>
 8007cf8:	0801d1b6 	.word	0x0801d1b6
 8007cfc:	0801d1c7 	.word	0x0801d1c7

08007d00 <std>:
 8007d00:	2300      	movs	r3, #0
 8007d02:	b510      	push	{r4, lr}
 8007d04:	4604      	mov	r4, r0
 8007d06:	e9c0 3300 	strd	r3, r3, [r0]
 8007d0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d0e:	6083      	str	r3, [r0, #8]
 8007d10:	8181      	strh	r1, [r0, #12]
 8007d12:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d14:	81c2      	strh	r2, [r0, #14]
 8007d16:	6183      	str	r3, [r0, #24]
 8007d18:	4619      	mov	r1, r3
 8007d1a:	2208      	movs	r2, #8
 8007d1c:	305c      	adds	r0, #92	@ 0x5c
 8007d1e:	f000 f916 	bl	8007f4e <memset>
 8007d22:	4b0d      	ldr	r3, [pc, #52]	@ (8007d58 <std+0x58>)
 8007d24:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d26:	4b0d      	ldr	r3, [pc, #52]	@ (8007d5c <std+0x5c>)
 8007d28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d60 <std+0x60>)
 8007d2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d64 <std+0x64>)
 8007d30:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d32:	4b0d      	ldr	r3, [pc, #52]	@ (8007d68 <std+0x68>)
 8007d34:	6224      	str	r4, [r4, #32]
 8007d36:	429c      	cmp	r4, r3
 8007d38:	d006      	beq.n	8007d48 <std+0x48>
 8007d3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d3e:	4294      	cmp	r4, r2
 8007d40:	d002      	beq.n	8007d48 <std+0x48>
 8007d42:	33d0      	adds	r3, #208	@ 0xd0
 8007d44:	429c      	cmp	r4, r3
 8007d46:	d105      	bne.n	8007d54 <std+0x54>
 8007d48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d50:	f000 b97a 	b.w	8008048 <__retarget_lock_init_recursive>
 8007d54:	bd10      	pop	{r4, pc}
 8007d56:	bf00      	nop
 8007d58:	08007ec9 	.word	0x08007ec9
 8007d5c:	08007eeb 	.word	0x08007eeb
 8007d60:	08007f23 	.word	0x08007f23
 8007d64:	08007f47 	.word	0x08007f47
 8007d68:	20006434 	.word	0x20006434

08007d6c <stdio_exit_handler>:
 8007d6c:	4a02      	ldr	r2, [pc, #8]	@ (8007d78 <stdio_exit_handler+0xc>)
 8007d6e:	4903      	ldr	r1, [pc, #12]	@ (8007d7c <stdio_exit_handler+0x10>)
 8007d70:	4803      	ldr	r0, [pc, #12]	@ (8007d80 <stdio_exit_handler+0x14>)
 8007d72:	f000 b869 	b.w	8007e48 <_fwalk_sglue>
 8007d76:	bf00      	nop
 8007d78:	20000014 	.word	0x20000014
 8007d7c:	080099ad 	.word	0x080099ad
 8007d80:	20000024 	.word	0x20000024

08007d84 <cleanup_stdio>:
 8007d84:	6841      	ldr	r1, [r0, #4]
 8007d86:	4b0c      	ldr	r3, [pc, #48]	@ (8007db8 <cleanup_stdio+0x34>)
 8007d88:	4299      	cmp	r1, r3
 8007d8a:	b510      	push	{r4, lr}
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	d001      	beq.n	8007d94 <cleanup_stdio+0x10>
 8007d90:	f001 fe0c 	bl	80099ac <_fflush_r>
 8007d94:	68a1      	ldr	r1, [r4, #8]
 8007d96:	4b09      	ldr	r3, [pc, #36]	@ (8007dbc <cleanup_stdio+0x38>)
 8007d98:	4299      	cmp	r1, r3
 8007d9a:	d002      	beq.n	8007da2 <cleanup_stdio+0x1e>
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f001 fe05 	bl	80099ac <_fflush_r>
 8007da2:	68e1      	ldr	r1, [r4, #12]
 8007da4:	4b06      	ldr	r3, [pc, #24]	@ (8007dc0 <cleanup_stdio+0x3c>)
 8007da6:	4299      	cmp	r1, r3
 8007da8:	d004      	beq.n	8007db4 <cleanup_stdio+0x30>
 8007daa:	4620      	mov	r0, r4
 8007dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007db0:	f001 bdfc 	b.w	80099ac <_fflush_r>
 8007db4:	bd10      	pop	{r4, pc}
 8007db6:	bf00      	nop
 8007db8:	20006434 	.word	0x20006434
 8007dbc:	2000649c 	.word	0x2000649c
 8007dc0:	20006504 	.word	0x20006504

08007dc4 <global_stdio_init.part.0>:
 8007dc4:	b510      	push	{r4, lr}
 8007dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8007df4 <global_stdio_init.part.0+0x30>)
 8007dc8:	4c0b      	ldr	r4, [pc, #44]	@ (8007df8 <global_stdio_init.part.0+0x34>)
 8007dca:	4a0c      	ldr	r2, [pc, #48]	@ (8007dfc <global_stdio_init.part.0+0x38>)
 8007dcc:	601a      	str	r2, [r3, #0]
 8007dce:	4620      	mov	r0, r4
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	2104      	movs	r1, #4
 8007dd4:	f7ff ff94 	bl	8007d00 <std>
 8007dd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007ddc:	2201      	movs	r2, #1
 8007dde:	2109      	movs	r1, #9
 8007de0:	f7ff ff8e 	bl	8007d00 <std>
 8007de4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007de8:	2202      	movs	r2, #2
 8007dea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dee:	2112      	movs	r1, #18
 8007df0:	f7ff bf86 	b.w	8007d00 <std>
 8007df4:	2000656c 	.word	0x2000656c
 8007df8:	20006434 	.word	0x20006434
 8007dfc:	08007d6d 	.word	0x08007d6d

08007e00 <__sfp_lock_acquire>:
 8007e00:	4801      	ldr	r0, [pc, #4]	@ (8007e08 <__sfp_lock_acquire+0x8>)
 8007e02:	f000 b922 	b.w	800804a <__retarget_lock_acquire_recursive>
 8007e06:	bf00      	nop
 8007e08:	20006575 	.word	0x20006575

08007e0c <__sfp_lock_release>:
 8007e0c:	4801      	ldr	r0, [pc, #4]	@ (8007e14 <__sfp_lock_release+0x8>)
 8007e0e:	f000 b91d 	b.w	800804c <__retarget_lock_release_recursive>
 8007e12:	bf00      	nop
 8007e14:	20006575 	.word	0x20006575

08007e18 <__sinit>:
 8007e18:	b510      	push	{r4, lr}
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	f7ff fff0 	bl	8007e00 <__sfp_lock_acquire>
 8007e20:	6a23      	ldr	r3, [r4, #32]
 8007e22:	b11b      	cbz	r3, 8007e2c <__sinit+0x14>
 8007e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e28:	f7ff bff0 	b.w	8007e0c <__sfp_lock_release>
 8007e2c:	4b04      	ldr	r3, [pc, #16]	@ (8007e40 <__sinit+0x28>)
 8007e2e:	6223      	str	r3, [r4, #32]
 8007e30:	4b04      	ldr	r3, [pc, #16]	@ (8007e44 <__sinit+0x2c>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1f5      	bne.n	8007e24 <__sinit+0xc>
 8007e38:	f7ff ffc4 	bl	8007dc4 <global_stdio_init.part.0>
 8007e3c:	e7f2      	b.n	8007e24 <__sinit+0xc>
 8007e3e:	bf00      	nop
 8007e40:	08007d85 	.word	0x08007d85
 8007e44:	2000656c 	.word	0x2000656c

08007e48 <_fwalk_sglue>:
 8007e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e4c:	4607      	mov	r7, r0
 8007e4e:	4688      	mov	r8, r1
 8007e50:	4614      	mov	r4, r2
 8007e52:	2600      	movs	r6, #0
 8007e54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e58:	f1b9 0901 	subs.w	r9, r9, #1
 8007e5c:	d505      	bpl.n	8007e6a <_fwalk_sglue+0x22>
 8007e5e:	6824      	ldr	r4, [r4, #0]
 8007e60:	2c00      	cmp	r4, #0
 8007e62:	d1f7      	bne.n	8007e54 <_fwalk_sglue+0xc>
 8007e64:	4630      	mov	r0, r6
 8007e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e6a:	89ab      	ldrh	r3, [r5, #12]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d907      	bls.n	8007e80 <_fwalk_sglue+0x38>
 8007e70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e74:	3301      	adds	r3, #1
 8007e76:	d003      	beq.n	8007e80 <_fwalk_sglue+0x38>
 8007e78:	4629      	mov	r1, r5
 8007e7a:	4638      	mov	r0, r7
 8007e7c:	47c0      	blx	r8
 8007e7e:	4306      	orrs	r6, r0
 8007e80:	3568      	adds	r5, #104	@ 0x68
 8007e82:	e7e9      	b.n	8007e58 <_fwalk_sglue+0x10>

08007e84 <siprintf>:
 8007e84:	b40e      	push	{r1, r2, r3}
 8007e86:	b510      	push	{r4, lr}
 8007e88:	b09d      	sub	sp, #116	@ 0x74
 8007e8a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007e8c:	9002      	str	r0, [sp, #8]
 8007e8e:	9006      	str	r0, [sp, #24]
 8007e90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007e94:	480a      	ldr	r0, [pc, #40]	@ (8007ec0 <siprintf+0x3c>)
 8007e96:	9107      	str	r1, [sp, #28]
 8007e98:	9104      	str	r1, [sp, #16]
 8007e9a:	490a      	ldr	r1, [pc, #40]	@ (8007ec4 <siprintf+0x40>)
 8007e9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ea0:	9105      	str	r1, [sp, #20]
 8007ea2:	2400      	movs	r4, #0
 8007ea4:	a902      	add	r1, sp, #8
 8007ea6:	6800      	ldr	r0, [r0, #0]
 8007ea8:	9301      	str	r3, [sp, #4]
 8007eaa:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007eac:	f001 fbfe 	bl	80096ac <_svfiprintf_r>
 8007eb0:	9b02      	ldr	r3, [sp, #8]
 8007eb2:	701c      	strb	r4, [r3, #0]
 8007eb4:	b01d      	add	sp, #116	@ 0x74
 8007eb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007eba:	b003      	add	sp, #12
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	20000020 	.word	0x20000020
 8007ec4:	ffff0208 	.word	0xffff0208

08007ec8 <__sread>:
 8007ec8:	b510      	push	{r4, lr}
 8007eca:	460c      	mov	r4, r1
 8007ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ed0:	f000 f86c 	bl	8007fac <_read_r>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	bfab      	itete	ge
 8007ed8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007eda:	89a3      	ldrhlt	r3, [r4, #12]
 8007edc:	181b      	addge	r3, r3, r0
 8007ede:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007ee2:	bfac      	ite	ge
 8007ee4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007ee6:	81a3      	strhlt	r3, [r4, #12]
 8007ee8:	bd10      	pop	{r4, pc}

08007eea <__swrite>:
 8007eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eee:	461f      	mov	r7, r3
 8007ef0:	898b      	ldrh	r3, [r1, #12]
 8007ef2:	05db      	lsls	r3, r3, #23
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	460c      	mov	r4, r1
 8007ef8:	4616      	mov	r6, r2
 8007efa:	d505      	bpl.n	8007f08 <__swrite+0x1e>
 8007efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f00:	2302      	movs	r3, #2
 8007f02:	2200      	movs	r2, #0
 8007f04:	f000 f840 	bl	8007f88 <_lseek_r>
 8007f08:	89a3      	ldrh	r3, [r4, #12]
 8007f0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f12:	81a3      	strh	r3, [r4, #12]
 8007f14:	4632      	mov	r2, r6
 8007f16:	463b      	mov	r3, r7
 8007f18:	4628      	mov	r0, r5
 8007f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f1e:	f000 b857 	b.w	8007fd0 <_write_r>

08007f22 <__sseek>:
 8007f22:	b510      	push	{r4, lr}
 8007f24:	460c      	mov	r4, r1
 8007f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f2a:	f000 f82d 	bl	8007f88 <_lseek_r>
 8007f2e:	1c43      	adds	r3, r0, #1
 8007f30:	89a3      	ldrh	r3, [r4, #12]
 8007f32:	bf15      	itete	ne
 8007f34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007f3e:	81a3      	strheq	r3, [r4, #12]
 8007f40:	bf18      	it	ne
 8007f42:	81a3      	strhne	r3, [r4, #12]
 8007f44:	bd10      	pop	{r4, pc}

08007f46 <__sclose>:
 8007f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f4a:	f000 b80d 	b.w	8007f68 <_close_r>

08007f4e <memset>:
 8007f4e:	4402      	add	r2, r0
 8007f50:	4603      	mov	r3, r0
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d100      	bne.n	8007f58 <memset+0xa>
 8007f56:	4770      	bx	lr
 8007f58:	f803 1b01 	strb.w	r1, [r3], #1
 8007f5c:	e7f9      	b.n	8007f52 <memset+0x4>
	...

08007f60 <_localeconv_r>:
 8007f60:	4800      	ldr	r0, [pc, #0]	@ (8007f64 <_localeconv_r+0x4>)
 8007f62:	4770      	bx	lr
 8007f64:	20000160 	.word	0x20000160

08007f68 <_close_r>:
 8007f68:	b538      	push	{r3, r4, r5, lr}
 8007f6a:	4d06      	ldr	r5, [pc, #24]	@ (8007f84 <_close_r+0x1c>)
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	4604      	mov	r4, r0
 8007f70:	4608      	mov	r0, r1
 8007f72:	602b      	str	r3, [r5, #0]
 8007f74:	f7f9 fe48 	bl	8001c08 <_close>
 8007f78:	1c43      	adds	r3, r0, #1
 8007f7a:	d102      	bne.n	8007f82 <_close_r+0x1a>
 8007f7c:	682b      	ldr	r3, [r5, #0]
 8007f7e:	b103      	cbz	r3, 8007f82 <_close_r+0x1a>
 8007f80:	6023      	str	r3, [r4, #0]
 8007f82:	bd38      	pop	{r3, r4, r5, pc}
 8007f84:	20006570 	.word	0x20006570

08007f88 <_lseek_r>:
 8007f88:	b538      	push	{r3, r4, r5, lr}
 8007f8a:	4d07      	ldr	r5, [pc, #28]	@ (8007fa8 <_lseek_r+0x20>)
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	4608      	mov	r0, r1
 8007f90:	4611      	mov	r1, r2
 8007f92:	2200      	movs	r2, #0
 8007f94:	602a      	str	r2, [r5, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	f7f9 fe5d 	bl	8001c56 <_lseek>
 8007f9c:	1c43      	adds	r3, r0, #1
 8007f9e:	d102      	bne.n	8007fa6 <_lseek_r+0x1e>
 8007fa0:	682b      	ldr	r3, [r5, #0]
 8007fa2:	b103      	cbz	r3, 8007fa6 <_lseek_r+0x1e>
 8007fa4:	6023      	str	r3, [r4, #0]
 8007fa6:	bd38      	pop	{r3, r4, r5, pc}
 8007fa8:	20006570 	.word	0x20006570

08007fac <_read_r>:
 8007fac:	b538      	push	{r3, r4, r5, lr}
 8007fae:	4d07      	ldr	r5, [pc, #28]	@ (8007fcc <_read_r+0x20>)
 8007fb0:	4604      	mov	r4, r0
 8007fb2:	4608      	mov	r0, r1
 8007fb4:	4611      	mov	r1, r2
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	602a      	str	r2, [r5, #0]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	f7f9 fdeb 	bl	8001b96 <_read>
 8007fc0:	1c43      	adds	r3, r0, #1
 8007fc2:	d102      	bne.n	8007fca <_read_r+0x1e>
 8007fc4:	682b      	ldr	r3, [r5, #0]
 8007fc6:	b103      	cbz	r3, 8007fca <_read_r+0x1e>
 8007fc8:	6023      	str	r3, [r4, #0]
 8007fca:	bd38      	pop	{r3, r4, r5, pc}
 8007fcc:	20006570 	.word	0x20006570

08007fd0 <_write_r>:
 8007fd0:	b538      	push	{r3, r4, r5, lr}
 8007fd2:	4d07      	ldr	r5, [pc, #28]	@ (8007ff0 <_write_r+0x20>)
 8007fd4:	4604      	mov	r4, r0
 8007fd6:	4608      	mov	r0, r1
 8007fd8:	4611      	mov	r1, r2
 8007fda:	2200      	movs	r2, #0
 8007fdc:	602a      	str	r2, [r5, #0]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	f7f9 fdf6 	bl	8001bd0 <_write>
 8007fe4:	1c43      	adds	r3, r0, #1
 8007fe6:	d102      	bne.n	8007fee <_write_r+0x1e>
 8007fe8:	682b      	ldr	r3, [r5, #0]
 8007fea:	b103      	cbz	r3, 8007fee <_write_r+0x1e>
 8007fec:	6023      	str	r3, [r4, #0]
 8007fee:	bd38      	pop	{r3, r4, r5, pc}
 8007ff0:	20006570 	.word	0x20006570

08007ff4 <__errno>:
 8007ff4:	4b01      	ldr	r3, [pc, #4]	@ (8007ffc <__errno+0x8>)
 8007ff6:	6818      	ldr	r0, [r3, #0]
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	20000020 	.word	0x20000020

08008000 <__libc_init_array>:
 8008000:	b570      	push	{r4, r5, r6, lr}
 8008002:	4d0d      	ldr	r5, [pc, #52]	@ (8008038 <__libc_init_array+0x38>)
 8008004:	4c0d      	ldr	r4, [pc, #52]	@ (800803c <__libc_init_array+0x3c>)
 8008006:	1b64      	subs	r4, r4, r5
 8008008:	10a4      	asrs	r4, r4, #2
 800800a:	2600      	movs	r6, #0
 800800c:	42a6      	cmp	r6, r4
 800800e:	d109      	bne.n	8008024 <__libc_init_array+0x24>
 8008010:	4d0b      	ldr	r5, [pc, #44]	@ (8008040 <__libc_init_array+0x40>)
 8008012:	4c0c      	ldr	r4, [pc, #48]	@ (8008044 <__libc_init_array+0x44>)
 8008014:	f002 f88a 	bl	800a12c <_init>
 8008018:	1b64      	subs	r4, r4, r5
 800801a:	10a4      	asrs	r4, r4, #2
 800801c:	2600      	movs	r6, #0
 800801e:	42a6      	cmp	r6, r4
 8008020:	d105      	bne.n	800802e <__libc_init_array+0x2e>
 8008022:	bd70      	pop	{r4, r5, r6, pc}
 8008024:	f855 3b04 	ldr.w	r3, [r5], #4
 8008028:	4798      	blx	r3
 800802a:	3601      	adds	r6, #1
 800802c:	e7ee      	b.n	800800c <__libc_init_array+0xc>
 800802e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008032:	4798      	blx	r3
 8008034:	3601      	adds	r6, #1
 8008036:	e7f2      	b.n	800801e <__libc_init_array+0x1e>
 8008038:	0801d524 	.word	0x0801d524
 800803c:	0801d524 	.word	0x0801d524
 8008040:	0801d524 	.word	0x0801d524
 8008044:	0801d528 	.word	0x0801d528

08008048 <__retarget_lock_init_recursive>:
 8008048:	4770      	bx	lr

0800804a <__retarget_lock_acquire_recursive>:
 800804a:	4770      	bx	lr

0800804c <__retarget_lock_release_recursive>:
 800804c:	4770      	bx	lr

0800804e <quorem>:
 800804e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008052:	6903      	ldr	r3, [r0, #16]
 8008054:	690c      	ldr	r4, [r1, #16]
 8008056:	42a3      	cmp	r3, r4
 8008058:	4607      	mov	r7, r0
 800805a:	db7e      	blt.n	800815a <quorem+0x10c>
 800805c:	3c01      	subs	r4, #1
 800805e:	f101 0814 	add.w	r8, r1, #20
 8008062:	00a3      	lsls	r3, r4, #2
 8008064:	f100 0514 	add.w	r5, r0, #20
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800806e:	9301      	str	r3, [sp, #4]
 8008070:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008074:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008078:	3301      	adds	r3, #1
 800807a:	429a      	cmp	r2, r3
 800807c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008080:	fbb2 f6f3 	udiv	r6, r2, r3
 8008084:	d32e      	bcc.n	80080e4 <quorem+0x96>
 8008086:	f04f 0a00 	mov.w	sl, #0
 800808a:	46c4      	mov	ip, r8
 800808c:	46ae      	mov	lr, r5
 800808e:	46d3      	mov	fp, sl
 8008090:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008094:	b298      	uxth	r0, r3
 8008096:	fb06 a000 	mla	r0, r6, r0, sl
 800809a:	0c02      	lsrs	r2, r0, #16
 800809c:	0c1b      	lsrs	r3, r3, #16
 800809e:	fb06 2303 	mla	r3, r6, r3, r2
 80080a2:	f8de 2000 	ldr.w	r2, [lr]
 80080a6:	b280      	uxth	r0, r0
 80080a8:	b292      	uxth	r2, r2
 80080aa:	1a12      	subs	r2, r2, r0
 80080ac:	445a      	add	r2, fp
 80080ae:	f8de 0000 	ldr.w	r0, [lr]
 80080b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80080bc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80080c0:	b292      	uxth	r2, r2
 80080c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80080c6:	45e1      	cmp	r9, ip
 80080c8:	f84e 2b04 	str.w	r2, [lr], #4
 80080cc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80080d0:	d2de      	bcs.n	8008090 <quorem+0x42>
 80080d2:	9b00      	ldr	r3, [sp, #0]
 80080d4:	58eb      	ldr	r3, [r5, r3]
 80080d6:	b92b      	cbnz	r3, 80080e4 <quorem+0x96>
 80080d8:	9b01      	ldr	r3, [sp, #4]
 80080da:	3b04      	subs	r3, #4
 80080dc:	429d      	cmp	r5, r3
 80080de:	461a      	mov	r2, r3
 80080e0:	d32f      	bcc.n	8008142 <quorem+0xf4>
 80080e2:	613c      	str	r4, [r7, #16]
 80080e4:	4638      	mov	r0, r7
 80080e6:	f001 f97d 	bl	80093e4 <__mcmp>
 80080ea:	2800      	cmp	r0, #0
 80080ec:	db25      	blt.n	800813a <quorem+0xec>
 80080ee:	4629      	mov	r1, r5
 80080f0:	2000      	movs	r0, #0
 80080f2:	f858 2b04 	ldr.w	r2, [r8], #4
 80080f6:	f8d1 c000 	ldr.w	ip, [r1]
 80080fa:	fa1f fe82 	uxth.w	lr, r2
 80080fe:	fa1f f38c 	uxth.w	r3, ip
 8008102:	eba3 030e 	sub.w	r3, r3, lr
 8008106:	4403      	add	r3, r0
 8008108:	0c12      	lsrs	r2, r2, #16
 800810a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800810e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008112:	b29b      	uxth	r3, r3
 8008114:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008118:	45c1      	cmp	r9, r8
 800811a:	f841 3b04 	str.w	r3, [r1], #4
 800811e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008122:	d2e6      	bcs.n	80080f2 <quorem+0xa4>
 8008124:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008128:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800812c:	b922      	cbnz	r2, 8008138 <quorem+0xea>
 800812e:	3b04      	subs	r3, #4
 8008130:	429d      	cmp	r5, r3
 8008132:	461a      	mov	r2, r3
 8008134:	d30b      	bcc.n	800814e <quorem+0x100>
 8008136:	613c      	str	r4, [r7, #16]
 8008138:	3601      	adds	r6, #1
 800813a:	4630      	mov	r0, r6
 800813c:	b003      	add	sp, #12
 800813e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008142:	6812      	ldr	r2, [r2, #0]
 8008144:	3b04      	subs	r3, #4
 8008146:	2a00      	cmp	r2, #0
 8008148:	d1cb      	bne.n	80080e2 <quorem+0x94>
 800814a:	3c01      	subs	r4, #1
 800814c:	e7c6      	b.n	80080dc <quorem+0x8e>
 800814e:	6812      	ldr	r2, [r2, #0]
 8008150:	3b04      	subs	r3, #4
 8008152:	2a00      	cmp	r2, #0
 8008154:	d1ef      	bne.n	8008136 <quorem+0xe8>
 8008156:	3c01      	subs	r4, #1
 8008158:	e7ea      	b.n	8008130 <quorem+0xe2>
 800815a:	2000      	movs	r0, #0
 800815c:	e7ee      	b.n	800813c <quorem+0xee>
	...

08008160 <_dtoa_r>:
 8008160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008164:	69c7      	ldr	r7, [r0, #28]
 8008166:	b097      	sub	sp, #92	@ 0x5c
 8008168:	ed8d 0b04 	vstr	d0, [sp, #16]
 800816c:	ec55 4b10 	vmov	r4, r5, d0
 8008170:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008172:	9107      	str	r1, [sp, #28]
 8008174:	4681      	mov	r9, r0
 8008176:	920c      	str	r2, [sp, #48]	@ 0x30
 8008178:	9311      	str	r3, [sp, #68]	@ 0x44
 800817a:	b97f      	cbnz	r7, 800819c <_dtoa_r+0x3c>
 800817c:	2010      	movs	r0, #16
 800817e:	f000 fe09 	bl	8008d94 <malloc>
 8008182:	4602      	mov	r2, r0
 8008184:	f8c9 001c 	str.w	r0, [r9, #28]
 8008188:	b920      	cbnz	r0, 8008194 <_dtoa_r+0x34>
 800818a:	4ba9      	ldr	r3, [pc, #676]	@ (8008430 <_dtoa_r+0x2d0>)
 800818c:	21ef      	movs	r1, #239	@ 0xef
 800818e:	48a9      	ldr	r0, [pc, #676]	@ (8008434 <_dtoa_r+0x2d4>)
 8008190:	f001 fc6c 	bl	8009a6c <__assert_func>
 8008194:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008198:	6007      	str	r7, [r0, #0]
 800819a:	60c7      	str	r7, [r0, #12]
 800819c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80081a0:	6819      	ldr	r1, [r3, #0]
 80081a2:	b159      	cbz	r1, 80081bc <_dtoa_r+0x5c>
 80081a4:	685a      	ldr	r2, [r3, #4]
 80081a6:	604a      	str	r2, [r1, #4]
 80081a8:	2301      	movs	r3, #1
 80081aa:	4093      	lsls	r3, r2
 80081ac:	608b      	str	r3, [r1, #8]
 80081ae:	4648      	mov	r0, r9
 80081b0:	f000 fee6 	bl	8008f80 <_Bfree>
 80081b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80081b8:	2200      	movs	r2, #0
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	1e2b      	subs	r3, r5, #0
 80081be:	bfb9      	ittee	lt
 80081c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80081c4:	9305      	strlt	r3, [sp, #20]
 80081c6:	2300      	movge	r3, #0
 80081c8:	6033      	strge	r3, [r6, #0]
 80081ca:	9f05      	ldr	r7, [sp, #20]
 80081cc:	4b9a      	ldr	r3, [pc, #616]	@ (8008438 <_dtoa_r+0x2d8>)
 80081ce:	bfbc      	itt	lt
 80081d0:	2201      	movlt	r2, #1
 80081d2:	6032      	strlt	r2, [r6, #0]
 80081d4:	43bb      	bics	r3, r7
 80081d6:	d112      	bne.n	80081fe <_dtoa_r+0x9e>
 80081d8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80081da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80081de:	6013      	str	r3, [r2, #0]
 80081e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80081e4:	4323      	orrs	r3, r4
 80081e6:	f000 855a 	beq.w	8008c9e <_dtoa_r+0xb3e>
 80081ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80081ec:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800844c <_dtoa_r+0x2ec>
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f000 855c 	beq.w	8008cae <_dtoa_r+0xb4e>
 80081f6:	f10a 0303 	add.w	r3, sl, #3
 80081fa:	f000 bd56 	b.w	8008caa <_dtoa_r+0xb4a>
 80081fe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008202:	2200      	movs	r2, #0
 8008204:	ec51 0b17 	vmov	r0, r1, d7
 8008208:	2300      	movs	r3, #0
 800820a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800820e:	f7f8 fc5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008212:	4680      	mov	r8, r0
 8008214:	b158      	cbz	r0, 800822e <_dtoa_r+0xce>
 8008216:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008218:	2301      	movs	r3, #1
 800821a:	6013      	str	r3, [r2, #0]
 800821c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800821e:	b113      	cbz	r3, 8008226 <_dtoa_r+0xc6>
 8008220:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008222:	4b86      	ldr	r3, [pc, #536]	@ (800843c <_dtoa_r+0x2dc>)
 8008224:	6013      	str	r3, [r2, #0]
 8008226:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008450 <_dtoa_r+0x2f0>
 800822a:	f000 bd40 	b.w	8008cae <_dtoa_r+0xb4e>
 800822e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008232:	aa14      	add	r2, sp, #80	@ 0x50
 8008234:	a915      	add	r1, sp, #84	@ 0x54
 8008236:	4648      	mov	r0, r9
 8008238:	f001 f984 	bl	8009544 <__d2b>
 800823c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008240:	9002      	str	r0, [sp, #8]
 8008242:	2e00      	cmp	r6, #0
 8008244:	d078      	beq.n	8008338 <_dtoa_r+0x1d8>
 8008246:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008248:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800824c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008250:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008254:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008258:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800825c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008260:	4619      	mov	r1, r3
 8008262:	2200      	movs	r2, #0
 8008264:	4b76      	ldr	r3, [pc, #472]	@ (8008440 <_dtoa_r+0x2e0>)
 8008266:	f7f8 f80f 	bl	8000288 <__aeabi_dsub>
 800826a:	a36b      	add	r3, pc, #428	@ (adr r3, 8008418 <_dtoa_r+0x2b8>)
 800826c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008270:	f7f8 f9c2 	bl	80005f8 <__aeabi_dmul>
 8008274:	a36a      	add	r3, pc, #424	@ (adr r3, 8008420 <_dtoa_r+0x2c0>)
 8008276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827a:	f7f8 f807 	bl	800028c <__adddf3>
 800827e:	4604      	mov	r4, r0
 8008280:	4630      	mov	r0, r6
 8008282:	460d      	mov	r5, r1
 8008284:	f7f8 f94e 	bl	8000524 <__aeabi_i2d>
 8008288:	a367      	add	r3, pc, #412	@ (adr r3, 8008428 <_dtoa_r+0x2c8>)
 800828a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828e:	f7f8 f9b3 	bl	80005f8 <__aeabi_dmul>
 8008292:	4602      	mov	r2, r0
 8008294:	460b      	mov	r3, r1
 8008296:	4620      	mov	r0, r4
 8008298:	4629      	mov	r1, r5
 800829a:	f7f7 fff7 	bl	800028c <__adddf3>
 800829e:	4604      	mov	r4, r0
 80082a0:	460d      	mov	r5, r1
 80082a2:	f7f8 fc59 	bl	8000b58 <__aeabi_d2iz>
 80082a6:	2200      	movs	r2, #0
 80082a8:	4607      	mov	r7, r0
 80082aa:	2300      	movs	r3, #0
 80082ac:	4620      	mov	r0, r4
 80082ae:	4629      	mov	r1, r5
 80082b0:	f7f8 fc14 	bl	8000adc <__aeabi_dcmplt>
 80082b4:	b140      	cbz	r0, 80082c8 <_dtoa_r+0x168>
 80082b6:	4638      	mov	r0, r7
 80082b8:	f7f8 f934 	bl	8000524 <__aeabi_i2d>
 80082bc:	4622      	mov	r2, r4
 80082be:	462b      	mov	r3, r5
 80082c0:	f7f8 fc02 	bl	8000ac8 <__aeabi_dcmpeq>
 80082c4:	b900      	cbnz	r0, 80082c8 <_dtoa_r+0x168>
 80082c6:	3f01      	subs	r7, #1
 80082c8:	2f16      	cmp	r7, #22
 80082ca:	d852      	bhi.n	8008372 <_dtoa_r+0x212>
 80082cc:	4b5d      	ldr	r3, [pc, #372]	@ (8008444 <_dtoa_r+0x2e4>)
 80082ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80082d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80082da:	f7f8 fbff 	bl	8000adc <__aeabi_dcmplt>
 80082de:	2800      	cmp	r0, #0
 80082e0:	d049      	beq.n	8008376 <_dtoa_r+0x216>
 80082e2:	3f01      	subs	r7, #1
 80082e4:	2300      	movs	r3, #0
 80082e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80082e8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80082ea:	1b9b      	subs	r3, r3, r6
 80082ec:	1e5a      	subs	r2, r3, #1
 80082ee:	bf45      	ittet	mi
 80082f0:	f1c3 0301 	rsbmi	r3, r3, #1
 80082f4:	9300      	strmi	r3, [sp, #0]
 80082f6:	2300      	movpl	r3, #0
 80082f8:	2300      	movmi	r3, #0
 80082fa:	9206      	str	r2, [sp, #24]
 80082fc:	bf54      	ite	pl
 80082fe:	9300      	strpl	r3, [sp, #0]
 8008300:	9306      	strmi	r3, [sp, #24]
 8008302:	2f00      	cmp	r7, #0
 8008304:	db39      	blt.n	800837a <_dtoa_r+0x21a>
 8008306:	9b06      	ldr	r3, [sp, #24]
 8008308:	970d      	str	r7, [sp, #52]	@ 0x34
 800830a:	443b      	add	r3, r7
 800830c:	9306      	str	r3, [sp, #24]
 800830e:	2300      	movs	r3, #0
 8008310:	9308      	str	r3, [sp, #32]
 8008312:	9b07      	ldr	r3, [sp, #28]
 8008314:	2b09      	cmp	r3, #9
 8008316:	d863      	bhi.n	80083e0 <_dtoa_r+0x280>
 8008318:	2b05      	cmp	r3, #5
 800831a:	bfc4      	itt	gt
 800831c:	3b04      	subgt	r3, #4
 800831e:	9307      	strgt	r3, [sp, #28]
 8008320:	9b07      	ldr	r3, [sp, #28]
 8008322:	f1a3 0302 	sub.w	r3, r3, #2
 8008326:	bfcc      	ite	gt
 8008328:	2400      	movgt	r4, #0
 800832a:	2401      	movle	r4, #1
 800832c:	2b03      	cmp	r3, #3
 800832e:	d863      	bhi.n	80083f8 <_dtoa_r+0x298>
 8008330:	e8df f003 	tbb	[pc, r3]
 8008334:	2b375452 	.word	0x2b375452
 8008338:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800833c:	441e      	add	r6, r3
 800833e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008342:	2b20      	cmp	r3, #32
 8008344:	bfc1      	itttt	gt
 8008346:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800834a:	409f      	lslgt	r7, r3
 800834c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008350:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008354:	bfd6      	itet	le
 8008356:	f1c3 0320 	rsble	r3, r3, #32
 800835a:	ea47 0003 	orrgt.w	r0, r7, r3
 800835e:	fa04 f003 	lslle.w	r0, r4, r3
 8008362:	f7f8 f8cf 	bl	8000504 <__aeabi_ui2d>
 8008366:	2201      	movs	r2, #1
 8008368:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800836c:	3e01      	subs	r6, #1
 800836e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008370:	e776      	b.n	8008260 <_dtoa_r+0x100>
 8008372:	2301      	movs	r3, #1
 8008374:	e7b7      	b.n	80082e6 <_dtoa_r+0x186>
 8008376:	9010      	str	r0, [sp, #64]	@ 0x40
 8008378:	e7b6      	b.n	80082e8 <_dtoa_r+0x188>
 800837a:	9b00      	ldr	r3, [sp, #0]
 800837c:	1bdb      	subs	r3, r3, r7
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	427b      	negs	r3, r7
 8008382:	9308      	str	r3, [sp, #32]
 8008384:	2300      	movs	r3, #0
 8008386:	930d      	str	r3, [sp, #52]	@ 0x34
 8008388:	e7c3      	b.n	8008312 <_dtoa_r+0x1b2>
 800838a:	2301      	movs	r3, #1
 800838c:	9309      	str	r3, [sp, #36]	@ 0x24
 800838e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008390:	eb07 0b03 	add.w	fp, r7, r3
 8008394:	f10b 0301 	add.w	r3, fp, #1
 8008398:	2b01      	cmp	r3, #1
 800839a:	9303      	str	r3, [sp, #12]
 800839c:	bfb8      	it	lt
 800839e:	2301      	movlt	r3, #1
 80083a0:	e006      	b.n	80083b0 <_dtoa_r+0x250>
 80083a2:	2301      	movs	r3, #1
 80083a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80083a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	dd28      	ble.n	80083fe <_dtoa_r+0x29e>
 80083ac:	469b      	mov	fp, r3
 80083ae:	9303      	str	r3, [sp, #12]
 80083b0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80083b4:	2100      	movs	r1, #0
 80083b6:	2204      	movs	r2, #4
 80083b8:	f102 0514 	add.w	r5, r2, #20
 80083bc:	429d      	cmp	r5, r3
 80083be:	d926      	bls.n	800840e <_dtoa_r+0x2ae>
 80083c0:	6041      	str	r1, [r0, #4]
 80083c2:	4648      	mov	r0, r9
 80083c4:	f000 fd9c 	bl	8008f00 <_Balloc>
 80083c8:	4682      	mov	sl, r0
 80083ca:	2800      	cmp	r0, #0
 80083cc:	d142      	bne.n	8008454 <_dtoa_r+0x2f4>
 80083ce:	4b1e      	ldr	r3, [pc, #120]	@ (8008448 <_dtoa_r+0x2e8>)
 80083d0:	4602      	mov	r2, r0
 80083d2:	f240 11af 	movw	r1, #431	@ 0x1af
 80083d6:	e6da      	b.n	800818e <_dtoa_r+0x2e>
 80083d8:	2300      	movs	r3, #0
 80083da:	e7e3      	b.n	80083a4 <_dtoa_r+0x244>
 80083dc:	2300      	movs	r3, #0
 80083de:	e7d5      	b.n	800838c <_dtoa_r+0x22c>
 80083e0:	2401      	movs	r4, #1
 80083e2:	2300      	movs	r3, #0
 80083e4:	9307      	str	r3, [sp, #28]
 80083e6:	9409      	str	r4, [sp, #36]	@ 0x24
 80083e8:	f04f 3bff 	mov.w	fp, #4294967295
 80083ec:	2200      	movs	r2, #0
 80083ee:	f8cd b00c 	str.w	fp, [sp, #12]
 80083f2:	2312      	movs	r3, #18
 80083f4:	920c      	str	r2, [sp, #48]	@ 0x30
 80083f6:	e7db      	b.n	80083b0 <_dtoa_r+0x250>
 80083f8:	2301      	movs	r3, #1
 80083fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80083fc:	e7f4      	b.n	80083e8 <_dtoa_r+0x288>
 80083fe:	f04f 0b01 	mov.w	fp, #1
 8008402:	f8cd b00c 	str.w	fp, [sp, #12]
 8008406:	465b      	mov	r3, fp
 8008408:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800840c:	e7d0      	b.n	80083b0 <_dtoa_r+0x250>
 800840e:	3101      	adds	r1, #1
 8008410:	0052      	lsls	r2, r2, #1
 8008412:	e7d1      	b.n	80083b8 <_dtoa_r+0x258>
 8008414:	f3af 8000 	nop.w
 8008418:	636f4361 	.word	0x636f4361
 800841c:	3fd287a7 	.word	0x3fd287a7
 8008420:	8b60c8b3 	.word	0x8b60c8b3
 8008424:	3fc68a28 	.word	0x3fc68a28
 8008428:	509f79fb 	.word	0x509f79fb
 800842c:	3fd34413 	.word	0x3fd34413
 8008430:	0801d1e5 	.word	0x0801d1e5
 8008434:	0801d1fc 	.word	0x0801d1fc
 8008438:	7ff00000 	.word	0x7ff00000
 800843c:	0801d1b5 	.word	0x0801d1b5
 8008440:	3ff80000 	.word	0x3ff80000
 8008444:	0801d350 	.word	0x0801d350
 8008448:	0801d254 	.word	0x0801d254
 800844c:	0801d1e1 	.word	0x0801d1e1
 8008450:	0801d1b4 	.word	0x0801d1b4
 8008454:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008458:	6018      	str	r0, [r3, #0]
 800845a:	9b03      	ldr	r3, [sp, #12]
 800845c:	2b0e      	cmp	r3, #14
 800845e:	f200 80a1 	bhi.w	80085a4 <_dtoa_r+0x444>
 8008462:	2c00      	cmp	r4, #0
 8008464:	f000 809e 	beq.w	80085a4 <_dtoa_r+0x444>
 8008468:	2f00      	cmp	r7, #0
 800846a:	dd33      	ble.n	80084d4 <_dtoa_r+0x374>
 800846c:	4b9c      	ldr	r3, [pc, #624]	@ (80086e0 <_dtoa_r+0x580>)
 800846e:	f007 020f 	and.w	r2, r7, #15
 8008472:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008476:	ed93 7b00 	vldr	d7, [r3]
 800847a:	05f8      	lsls	r0, r7, #23
 800847c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008480:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008484:	d516      	bpl.n	80084b4 <_dtoa_r+0x354>
 8008486:	4b97      	ldr	r3, [pc, #604]	@ (80086e4 <_dtoa_r+0x584>)
 8008488:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800848c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008490:	f7f8 f9dc 	bl	800084c <__aeabi_ddiv>
 8008494:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008498:	f004 040f 	and.w	r4, r4, #15
 800849c:	2603      	movs	r6, #3
 800849e:	4d91      	ldr	r5, [pc, #580]	@ (80086e4 <_dtoa_r+0x584>)
 80084a0:	b954      	cbnz	r4, 80084b8 <_dtoa_r+0x358>
 80084a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80084a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084aa:	f7f8 f9cf 	bl	800084c <__aeabi_ddiv>
 80084ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084b2:	e028      	b.n	8008506 <_dtoa_r+0x3a6>
 80084b4:	2602      	movs	r6, #2
 80084b6:	e7f2      	b.n	800849e <_dtoa_r+0x33e>
 80084b8:	07e1      	lsls	r1, r4, #31
 80084ba:	d508      	bpl.n	80084ce <_dtoa_r+0x36e>
 80084bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80084c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80084c4:	f7f8 f898 	bl	80005f8 <__aeabi_dmul>
 80084c8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80084cc:	3601      	adds	r6, #1
 80084ce:	1064      	asrs	r4, r4, #1
 80084d0:	3508      	adds	r5, #8
 80084d2:	e7e5      	b.n	80084a0 <_dtoa_r+0x340>
 80084d4:	f000 80af 	beq.w	8008636 <_dtoa_r+0x4d6>
 80084d8:	427c      	negs	r4, r7
 80084da:	4b81      	ldr	r3, [pc, #516]	@ (80086e0 <_dtoa_r+0x580>)
 80084dc:	4d81      	ldr	r5, [pc, #516]	@ (80086e4 <_dtoa_r+0x584>)
 80084de:	f004 020f 	and.w	r2, r4, #15
 80084e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80084ee:	f7f8 f883 	bl	80005f8 <__aeabi_dmul>
 80084f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084f6:	1124      	asrs	r4, r4, #4
 80084f8:	2300      	movs	r3, #0
 80084fa:	2602      	movs	r6, #2
 80084fc:	2c00      	cmp	r4, #0
 80084fe:	f040 808f 	bne.w	8008620 <_dtoa_r+0x4c0>
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1d3      	bne.n	80084ae <_dtoa_r+0x34e>
 8008506:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008508:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800850c:	2b00      	cmp	r3, #0
 800850e:	f000 8094 	beq.w	800863a <_dtoa_r+0x4da>
 8008512:	4b75      	ldr	r3, [pc, #468]	@ (80086e8 <_dtoa_r+0x588>)
 8008514:	2200      	movs	r2, #0
 8008516:	4620      	mov	r0, r4
 8008518:	4629      	mov	r1, r5
 800851a:	f7f8 fadf 	bl	8000adc <__aeabi_dcmplt>
 800851e:	2800      	cmp	r0, #0
 8008520:	f000 808b 	beq.w	800863a <_dtoa_r+0x4da>
 8008524:	9b03      	ldr	r3, [sp, #12]
 8008526:	2b00      	cmp	r3, #0
 8008528:	f000 8087 	beq.w	800863a <_dtoa_r+0x4da>
 800852c:	f1bb 0f00 	cmp.w	fp, #0
 8008530:	dd34      	ble.n	800859c <_dtoa_r+0x43c>
 8008532:	4620      	mov	r0, r4
 8008534:	4b6d      	ldr	r3, [pc, #436]	@ (80086ec <_dtoa_r+0x58c>)
 8008536:	2200      	movs	r2, #0
 8008538:	4629      	mov	r1, r5
 800853a:	f7f8 f85d 	bl	80005f8 <__aeabi_dmul>
 800853e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008542:	f107 38ff 	add.w	r8, r7, #4294967295
 8008546:	3601      	adds	r6, #1
 8008548:	465c      	mov	r4, fp
 800854a:	4630      	mov	r0, r6
 800854c:	f7f7 ffea 	bl	8000524 <__aeabi_i2d>
 8008550:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008554:	f7f8 f850 	bl	80005f8 <__aeabi_dmul>
 8008558:	4b65      	ldr	r3, [pc, #404]	@ (80086f0 <_dtoa_r+0x590>)
 800855a:	2200      	movs	r2, #0
 800855c:	f7f7 fe96 	bl	800028c <__adddf3>
 8008560:	4605      	mov	r5, r0
 8008562:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008566:	2c00      	cmp	r4, #0
 8008568:	d16a      	bne.n	8008640 <_dtoa_r+0x4e0>
 800856a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800856e:	4b61      	ldr	r3, [pc, #388]	@ (80086f4 <_dtoa_r+0x594>)
 8008570:	2200      	movs	r2, #0
 8008572:	f7f7 fe89 	bl	8000288 <__aeabi_dsub>
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800857e:	462a      	mov	r2, r5
 8008580:	4633      	mov	r3, r6
 8008582:	f7f8 fac9 	bl	8000b18 <__aeabi_dcmpgt>
 8008586:	2800      	cmp	r0, #0
 8008588:	f040 8298 	bne.w	8008abc <_dtoa_r+0x95c>
 800858c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008590:	462a      	mov	r2, r5
 8008592:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008596:	f7f8 faa1 	bl	8000adc <__aeabi_dcmplt>
 800859a:	bb38      	cbnz	r0, 80085ec <_dtoa_r+0x48c>
 800859c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80085a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80085a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f2c0 8157 	blt.w	800885a <_dtoa_r+0x6fa>
 80085ac:	2f0e      	cmp	r7, #14
 80085ae:	f300 8154 	bgt.w	800885a <_dtoa_r+0x6fa>
 80085b2:	4b4b      	ldr	r3, [pc, #300]	@ (80086e0 <_dtoa_r+0x580>)
 80085b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80085b8:	ed93 7b00 	vldr	d7, [r3]
 80085bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085be:	2b00      	cmp	r3, #0
 80085c0:	ed8d 7b00 	vstr	d7, [sp]
 80085c4:	f280 80e5 	bge.w	8008792 <_dtoa_r+0x632>
 80085c8:	9b03      	ldr	r3, [sp, #12]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f300 80e1 	bgt.w	8008792 <_dtoa_r+0x632>
 80085d0:	d10c      	bne.n	80085ec <_dtoa_r+0x48c>
 80085d2:	4b48      	ldr	r3, [pc, #288]	@ (80086f4 <_dtoa_r+0x594>)
 80085d4:	2200      	movs	r2, #0
 80085d6:	ec51 0b17 	vmov	r0, r1, d7
 80085da:	f7f8 f80d 	bl	80005f8 <__aeabi_dmul>
 80085de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085e2:	f7f8 fa8f 	bl	8000b04 <__aeabi_dcmpge>
 80085e6:	2800      	cmp	r0, #0
 80085e8:	f000 8266 	beq.w	8008ab8 <_dtoa_r+0x958>
 80085ec:	2400      	movs	r4, #0
 80085ee:	4625      	mov	r5, r4
 80085f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085f2:	4656      	mov	r6, sl
 80085f4:	ea6f 0803 	mvn.w	r8, r3
 80085f8:	2700      	movs	r7, #0
 80085fa:	4621      	mov	r1, r4
 80085fc:	4648      	mov	r0, r9
 80085fe:	f000 fcbf 	bl	8008f80 <_Bfree>
 8008602:	2d00      	cmp	r5, #0
 8008604:	f000 80bd 	beq.w	8008782 <_dtoa_r+0x622>
 8008608:	b12f      	cbz	r7, 8008616 <_dtoa_r+0x4b6>
 800860a:	42af      	cmp	r7, r5
 800860c:	d003      	beq.n	8008616 <_dtoa_r+0x4b6>
 800860e:	4639      	mov	r1, r7
 8008610:	4648      	mov	r0, r9
 8008612:	f000 fcb5 	bl	8008f80 <_Bfree>
 8008616:	4629      	mov	r1, r5
 8008618:	4648      	mov	r0, r9
 800861a:	f000 fcb1 	bl	8008f80 <_Bfree>
 800861e:	e0b0      	b.n	8008782 <_dtoa_r+0x622>
 8008620:	07e2      	lsls	r2, r4, #31
 8008622:	d505      	bpl.n	8008630 <_dtoa_r+0x4d0>
 8008624:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008628:	f7f7 ffe6 	bl	80005f8 <__aeabi_dmul>
 800862c:	3601      	adds	r6, #1
 800862e:	2301      	movs	r3, #1
 8008630:	1064      	asrs	r4, r4, #1
 8008632:	3508      	adds	r5, #8
 8008634:	e762      	b.n	80084fc <_dtoa_r+0x39c>
 8008636:	2602      	movs	r6, #2
 8008638:	e765      	b.n	8008506 <_dtoa_r+0x3a6>
 800863a:	9c03      	ldr	r4, [sp, #12]
 800863c:	46b8      	mov	r8, r7
 800863e:	e784      	b.n	800854a <_dtoa_r+0x3ea>
 8008640:	4b27      	ldr	r3, [pc, #156]	@ (80086e0 <_dtoa_r+0x580>)
 8008642:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008644:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008648:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800864c:	4454      	add	r4, sl
 800864e:	2900      	cmp	r1, #0
 8008650:	d054      	beq.n	80086fc <_dtoa_r+0x59c>
 8008652:	4929      	ldr	r1, [pc, #164]	@ (80086f8 <_dtoa_r+0x598>)
 8008654:	2000      	movs	r0, #0
 8008656:	f7f8 f8f9 	bl	800084c <__aeabi_ddiv>
 800865a:	4633      	mov	r3, r6
 800865c:	462a      	mov	r2, r5
 800865e:	f7f7 fe13 	bl	8000288 <__aeabi_dsub>
 8008662:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008666:	4656      	mov	r6, sl
 8008668:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800866c:	f7f8 fa74 	bl	8000b58 <__aeabi_d2iz>
 8008670:	4605      	mov	r5, r0
 8008672:	f7f7 ff57 	bl	8000524 <__aeabi_i2d>
 8008676:	4602      	mov	r2, r0
 8008678:	460b      	mov	r3, r1
 800867a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800867e:	f7f7 fe03 	bl	8000288 <__aeabi_dsub>
 8008682:	3530      	adds	r5, #48	@ 0x30
 8008684:	4602      	mov	r2, r0
 8008686:	460b      	mov	r3, r1
 8008688:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800868c:	f806 5b01 	strb.w	r5, [r6], #1
 8008690:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008694:	f7f8 fa22 	bl	8000adc <__aeabi_dcmplt>
 8008698:	2800      	cmp	r0, #0
 800869a:	d172      	bne.n	8008782 <_dtoa_r+0x622>
 800869c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086a0:	4911      	ldr	r1, [pc, #68]	@ (80086e8 <_dtoa_r+0x588>)
 80086a2:	2000      	movs	r0, #0
 80086a4:	f7f7 fdf0 	bl	8000288 <__aeabi_dsub>
 80086a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80086ac:	f7f8 fa16 	bl	8000adc <__aeabi_dcmplt>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	f040 80b4 	bne.w	800881e <_dtoa_r+0x6be>
 80086b6:	42a6      	cmp	r6, r4
 80086b8:	f43f af70 	beq.w	800859c <_dtoa_r+0x43c>
 80086bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80086c0:	4b0a      	ldr	r3, [pc, #40]	@ (80086ec <_dtoa_r+0x58c>)
 80086c2:	2200      	movs	r2, #0
 80086c4:	f7f7 ff98 	bl	80005f8 <__aeabi_dmul>
 80086c8:	4b08      	ldr	r3, [pc, #32]	@ (80086ec <_dtoa_r+0x58c>)
 80086ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80086ce:	2200      	movs	r2, #0
 80086d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086d4:	f7f7 ff90 	bl	80005f8 <__aeabi_dmul>
 80086d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086dc:	e7c4      	b.n	8008668 <_dtoa_r+0x508>
 80086de:	bf00      	nop
 80086e0:	0801d350 	.word	0x0801d350
 80086e4:	0801d328 	.word	0x0801d328
 80086e8:	3ff00000 	.word	0x3ff00000
 80086ec:	40240000 	.word	0x40240000
 80086f0:	401c0000 	.word	0x401c0000
 80086f4:	40140000 	.word	0x40140000
 80086f8:	3fe00000 	.word	0x3fe00000
 80086fc:	4631      	mov	r1, r6
 80086fe:	4628      	mov	r0, r5
 8008700:	f7f7 ff7a 	bl	80005f8 <__aeabi_dmul>
 8008704:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008708:	9413      	str	r4, [sp, #76]	@ 0x4c
 800870a:	4656      	mov	r6, sl
 800870c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008710:	f7f8 fa22 	bl	8000b58 <__aeabi_d2iz>
 8008714:	4605      	mov	r5, r0
 8008716:	f7f7 ff05 	bl	8000524 <__aeabi_i2d>
 800871a:	4602      	mov	r2, r0
 800871c:	460b      	mov	r3, r1
 800871e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008722:	f7f7 fdb1 	bl	8000288 <__aeabi_dsub>
 8008726:	3530      	adds	r5, #48	@ 0x30
 8008728:	f806 5b01 	strb.w	r5, [r6], #1
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	42a6      	cmp	r6, r4
 8008732:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008736:	f04f 0200 	mov.w	r2, #0
 800873a:	d124      	bne.n	8008786 <_dtoa_r+0x626>
 800873c:	4baf      	ldr	r3, [pc, #700]	@ (80089fc <_dtoa_r+0x89c>)
 800873e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008742:	f7f7 fda3 	bl	800028c <__adddf3>
 8008746:	4602      	mov	r2, r0
 8008748:	460b      	mov	r3, r1
 800874a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800874e:	f7f8 f9e3 	bl	8000b18 <__aeabi_dcmpgt>
 8008752:	2800      	cmp	r0, #0
 8008754:	d163      	bne.n	800881e <_dtoa_r+0x6be>
 8008756:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800875a:	49a8      	ldr	r1, [pc, #672]	@ (80089fc <_dtoa_r+0x89c>)
 800875c:	2000      	movs	r0, #0
 800875e:	f7f7 fd93 	bl	8000288 <__aeabi_dsub>
 8008762:	4602      	mov	r2, r0
 8008764:	460b      	mov	r3, r1
 8008766:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800876a:	f7f8 f9b7 	bl	8000adc <__aeabi_dcmplt>
 800876e:	2800      	cmp	r0, #0
 8008770:	f43f af14 	beq.w	800859c <_dtoa_r+0x43c>
 8008774:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008776:	1e73      	subs	r3, r6, #1
 8008778:	9313      	str	r3, [sp, #76]	@ 0x4c
 800877a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800877e:	2b30      	cmp	r3, #48	@ 0x30
 8008780:	d0f8      	beq.n	8008774 <_dtoa_r+0x614>
 8008782:	4647      	mov	r7, r8
 8008784:	e03b      	b.n	80087fe <_dtoa_r+0x69e>
 8008786:	4b9e      	ldr	r3, [pc, #632]	@ (8008a00 <_dtoa_r+0x8a0>)
 8008788:	f7f7 ff36 	bl	80005f8 <__aeabi_dmul>
 800878c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008790:	e7bc      	b.n	800870c <_dtoa_r+0x5ac>
 8008792:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008796:	4656      	mov	r6, sl
 8008798:	e9dd 2300 	ldrd	r2, r3, [sp]
 800879c:	4620      	mov	r0, r4
 800879e:	4629      	mov	r1, r5
 80087a0:	f7f8 f854 	bl	800084c <__aeabi_ddiv>
 80087a4:	f7f8 f9d8 	bl	8000b58 <__aeabi_d2iz>
 80087a8:	4680      	mov	r8, r0
 80087aa:	f7f7 febb 	bl	8000524 <__aeabi_i2d>
 80087ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087b2:	f7f7 ff21 	bl	80005f8 <__aeabi_dmul>
 80087b6:	4602      	mov	r2, r0
 80087b8:	460b      	mov	r3, r1
 80087ba:	4620      	mov	r0, r4
 80087bc:	4629      	mov	r1, r5
 80087be:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80087c2:	f7f7 fd61 	bl	8000288 <__aeabi_dsub>
 80087c6:	f806 4b01 	strb.w	r4, [r6], #1
 80087ca:	9d03      	ldr	r5, [sp, #12]
 80087cc:	eba6 040a 	sub.w	r4, r6, sl
 80087d0:	42a5      	cmp	r5, r4
 80087d2:	4602      	mov	r2, r0
 80087d4:	460b      	mov	r3, r1
 80087d6:	d133      	bne.n	8008840 <_dtoa_r+0x6e0>
 80087d8:	f7f7 fd58 	bl	800028c <__adddf3>
 80087dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087e0:	4604      	mov	r4, r0
 80087e2:	460d      	mov	r5, r1
 80087e4:	f7f8 f998 	bl	8000b18 <__aeabi_dcmpgt>
 80087e8:	b9c0      	cbnz	r0, 800881c <_dtoa_r+0x6bc>
 80087ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087ee:	4620      	mov	r0, r4
 80087f0:	4629      	mov	r1, r5
 80087f2:	f7f8 f969 	bl	8000ac8 <__aeabi_dcmpeq>
 80087f6:	b110      	cbz	r0, 80087fe <_dtoa_r+0x69e>
 80087f8:	f018 0f01 	tst.w	r8, #1
 80087fc:	d10e      	bne.n	800881c <_dtoa_r+0x6bc>
 80087fe:	9902      	ldr	r1, [sp, #8]
 8008800:	4648      	mov	r0, r9
 8008802:	f000 fbbd 	bl	8008f80 <_Bfree>
 8008806:	2300      	movs	r3, #0
 8008808:	7033      	strb	r3, [r6, #0]
 800880a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800880c:	3701      	adds	r7, #1
 800880e:	601f      	str	r7, [r3, #0]
 8008810:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008812:	2b00      	cmp	r3, #0
 8008814:	f000 824b 	beq.w	8008cae <_dtoa_r+0xb4e>
 8008818:	601e      	str	r6, [r3, #0]
 800881a:	e248      	b.n	8008cae <_dtoa_r+0xb4e>
 800881c:	46b8      	mov	r8, r7
 800881e:	4633      	mov	r3, r6
 8008820:	461e      	mov	r6, r3
 8008822:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008826:	2a39      	cmp	r2, #57	@ 0x39
 8008828:	d106      	bne.n	8008838 <_dtoa_r+0x6d8>
 800882a:	459a      	cmp	sl, r3
 800882c:	d1f8      	bne.n	8008820 <_dtoa_r+0x6c0>
 800882e:	2230      	movs	r2, #48	@ 0x30
 8008830:	f108 0801 	add.w	r8, r8, #1
 8008834:	f88a 2000 	strb.w	r2, [sl]
 8008838:	781a      	ldrb	r2, [r3, #0]
 800883a:	3201      	adds	r2, #1
 800883c:	701a      	strb	r2, [r3, #0]
 800883e:	e7a0      	b.n	8008782 <_dtoa_r+0x622>
 8008840:	4b6f      	ldr	r3, [pc, #444]	@ (8008a00 <_dtoa_r+0x8a0>)
 8008842:	2200      	movs	r2, #0
 8008844:	f7f7 fed8 	bl	80005f8 <__aeabi_dmul>
 8008848:	2200      	movs	r2, #0
 800884a:	2300      	movs	r3, #0
 800884c:	4604      	mov	r4, r0
 800884e:	460d      	mov	r5, r1
 8008850:	f7f8 f93a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008854:	2800      	cmp	r0, #0
 8008856:	d09f      	beq.n	8008798 <_dtoa_r+0x638>
 8008858:	e7d1      	b.n	80087fe <_dtoa_r+0x69e>
 800885a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800885c:	2a00      	cmp	r2, #0
 800885e:	f000 80ea 	beq.w	8008a36 <_dtoa_r+0x8d6>
 8008862:	9a07      	ldr	r2, [sp, #28]
 8008864:	2a01      	cmp	r2, #1
 8008866:	f300 80cd 	bgt.w	8008a04 <_dtoa_r+0x8a4>
 800886a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800886c:	2a00      	cmp	r2, #0
 800886e:	f000 80c1 	beq.w	80089f4 <_dtoa_r+0x894>
 8008872:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008876:	9c08      	ldr	r4, [sp, #32]
 8008878:	9e00      	ldr	r6, [sp, #0]
 800887a:	9a00      	ldr	r2, [sp, #0]
 800887c:	441a      	add	r2, r3
 800887e:	9200      	str	r2, [sp, #0]
 8008880:	9a06      	ldr	r2, [sp, #24]
 8008882:	2101      	movs	r1, #1
 8008884:	441a      	add	r2, r3
 8008886:	4648      	mov	r0, r9
 8008888:	9206      	str	r2, [sp, #24]
 800888a:	f000 fc2d 	bl	80090e8 <__i2b>
 800888e:	4605      	mov	r5, r0
 8008890:	b166      	cbz	r6, 80088ac <_dtoa_r+0x74c>
 8008892:	9b06      	ldr	r3, [sp, #24]
 8008894:	2b00      	cmp	r3, #0
 8008896:	dd09      	ble.n	80088ac <_dtoa_r+0x74c>
 8008898:	42b3      	cmp	r3, r6
 800889a:	9a00      	ldr	r2, [sp, #0]
 800889c:	bfa8      	it	ge
 800889e:	4633      	movge	r3, r6
 80088a0:	1ad2      	subs	r2, r2, r3
 80088a2:	9200      	str	r2, [sp, #0]
 80088a4:	9a06      	ldr	r2, [sp, #24]
 80088a6:	1af6      	subs	r6, r6, r3
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	9306      	str	r3, [sp, #24]
 80088ac:	9b08      	ldr	r3, [sp, #32]
 80088ae:	b30b      	cbz	r3, 80088f4 <_dtoa_r+0x794>
 80088b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f000 80c6 	beq.w	8008a44 <_dtoa_r+0x8e4>
 80088b8:	2c00      	cmp	r4, #0
 80088ba:	f000 80c0 	beq.w	8008a3e <_dtoa_r+0x8de>
 80088be:	4629      	mov	r1, r5
 80088c0:	4622      	mov	r2, r4
 80088c2:	4648      	mov	r0, r9
 80088c4:	f000 fcc8 	bl	8009258 <__pow5mult>
 80088c8:	9a02      	ldr	r2, [sp, #8]
 80088ca:	4601      	mov	r1, r0
 80088cc:	4605      	mov	r5, r0
 80088ce:	4648      	mov	r0, r9
 80088d0:	f000 fc20 	bl	8009114 <__multiply>
 80088d4:	9902      	ldr	r1, [sp, #8]
 80088d6:	4680      	mov	r8, r0
 80088d8:	4648      	mov	r0, r9
 80088da:	f000 fb51 	bl	8008f80 <_Bfree>
 80088de:	9b08      	ldr	r3, [sp, #32]
 80088e0:	1b1b      	subs	r3, r3, r4
 80088e2:	9308      	str	r3, [sp, #32]
 80088e4:	f000 80b1 	beq.w	8008a4a <_dtoa_r+0x8ea>
 80088e8:	9a08      	ldr	r2, [sp, #32]
 80088ea:	4641      	mov	r1, r8
 80088ec:	4648      	mov	r0, r9
 80088ee:	f000 fcb3 	bl	8009258 <__pow5mult>
 80088f2:	9002      	str	r0, [sp, #8]
 80088f4:	2101      	movs	r1, #1
 80088f6:	4648      	mov	r0, r9
 80088f8:	f000 fbf6 	bl	80090e8 <__i2b>
 80088fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80088fe:	4604      	mov	r4, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	f000 81d8 	beq.w	8008cb6 <_dtoa_r+0xb56>
 8008906:	461a      	mov	r2, r3
 8008908:	4601      	mov	r1, r0
 800890a:	4648      	mov	r0, r9
 800890c:	f000 fca4 	bl	8009258 <__pow5mult>
 8008910:	9b07      	ldr	r3, [sp, #28]
 8008912:	2b01      	cmp	r3, #1
 8008914:	4604      	mov	r4, r0
 8008916:	f300 809f 	bgt.w	8008a58 <_dtoa_r+0x8f8>
 800891a:	9b04      	ldr	r3, [sp, #16]
 800891c:	2b00      	cmp	r3, #0
 800891e:	f040 8097 	bne.w	8008a50 <_dtoa_r+0x8f0>
 8008922:	9b05      	ldr	r3, [sp, #20]
 8008924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008928:	2b00      	cmp	r3, #0
 800892a:	f040 8093 	bne.w	8008a54 <_dtoa_r+0x8f4>
 800892e:	9b05      	ldr	r3, [sp, #20]
 8008930:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008934:	0d1b      	lsrs	r3, r3, #20
 8008936:	051b      	lsls	r3, r3, #20
 8008938:	b133      	cbz	r3, 8008948 <_dtoa_r+0x7e8>
 800893a:	9b00      	ldr	r3, [sp, #0]
 800893c:	3301      	adds	r3, #1
 800893e:	9300      	str	r3, [sp, #0]
 8008940:	9b06      	ldr	r3, [sp, #24]
 8008942:	3301      	adds	r3, #1
 8008944:	9306      	str	r3, [sp, #24]
 8008946:	2301      	movs	r3, #1
 8008948:	9308      	str	r3, [sp, #32]
 800894a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800894c:	2b00      	cmp	r3, #0
 800894e:	f000 81b8 	beq.w	8008cc2 <_dtoa_r+0xb62>
 8008952:	6923      	ldr	r3, [r4, #16]
 8008954:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008958:	6918      	ldr	r0, [r3, #16]
 800895a:	f000 fb79 	bl	8009050 <__hi0bits>
 800895e:	f1c0 0020 	rsb	r0, r0, #32
 8008962:	9b06      	ldr	r3, [sp, #24]
 8008964:	4418      	add	r0, r3
 8008966:	f010 001f 	ands.w	r0, r0, #31
 800896a:	f000 8082 	beq.w	8008a72 <_dtoa_r+0x912>
 800896e:	f1c0 0320 	rsb	r3, r0, #32
 8008972:	2b04      	cmp	r3, #4
 8008974:	dd73      	ble.n	8008a5e <_dtoa_r+0x8fe>
 8008976:	9b00      	ldr	r3, [sp, #0]
 8008978:	f1c0 001c 	rsb	r0, r0, #28
 800897c:	4403      	add	r3, r0
 800897e:	9300      	str	r3, [sp, #0]
 8008980:	9b06      	ldr	r3, [sp, #24]
 8008982:	4403      	add	r3, r0
 8008984:	4406      	add	r6, r0
 8008986:	9306      	str	r3, [sp, #24]
 8008988:	9b00      	ldr	r3, [sp, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	dd05      	ble.n	800899a <_dtoa_r+0x83a>
 800898e:	9902      	ldr	r1, [sp, #8]
 8008990:	461a      	mov	r2, r3
 8008992:	4648      	mov	r0, r9
 8008994:	f000 fcba 	bl	800930c <__lshift>
 8008998:	9002      	str	r0, [sp, #8]
 800899a:	9b06      	ldr	r3, [sp, #24]
 800899c:	2b00      	cmp	r3, #0
 800899e:	dd05      	ble.n	80089ac <_dtoa_r+0x84c>
 80089a0:	4621      	mov	r1, r4
 80089a2:	461a      	mov	r2, r3
 80089a4:	4648      	mov	r0, r9
 80089a6:	f000 fcb1 	bl	800930c <__lshift>
 80089aa:	4604      	mov	r4, r0
 80089ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d061      	beq.n	8008a76 <_dtoa_r+0x916>
 80089b2:	9802      	ldr	r0, [sp, #8]
 80089b4:	4621      	mov	r1, r4
 80089b6:	f000 fd15 	bl	80093e4 <__mcmp>
 80089ba:	2800      	cmp	r0, #0
 80089bc:	da5b      	bge.n	8008a76 <_dtoa_r+0x916>
 80089be:	2300      	movs	r3, #0
 80089c0:	9902      	ldr	r1, [sp, #8]
 80089c2:	220a      	movs	r2, #10
 80089c4:	4648      	mov	r0, r9
 80089c6:	f000 fafd 	bl	8008fc4 <__multadd>
 80089ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089cc:	9002      	str	r0, [sp, #8]
 80089ce:	f107 38ff 	add.w	r8, r7, #4294967295
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f000 8177 	beq.w	8008cc6 <_dtoa_r+0xb66>
 80089d8:	4629      	mov	r1, r5
 80089da:	2300      	movs	r3, #0
 80089dc:	220a      	movs	r2, #10
 80089de:	4648      	mov	r0, r9
 80089e0:	f000 faf0 	bl	8008fc4 <__multadd>
 80089e4:	f1bb 0f00 	cmp.w	fp, #0
 80089e8:	4605      	mov	r5, r0
 80089ea:	dc6f      	bgt.n	8008acc <_dtoa_r+0x96c>
 80089ec:	9b07      	ldr	r3, [sp, #28]
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	dc49      	bgt.n	8008a86 <_dtoa_r+0x926>
 80089f2:	e06b      	b.n	8008acc <_dtoa_r+0x96c>
 80089f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80089f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80089fa:	e73c      	b.n	8008876 <_dtoa_r+0x716>
 80089fc:	3fe00000 	.word	0x3fe00000
 8008a00:	40240000 	.word	0x40240000
 8008a04:	9b03      	ldr	r3, [sp, #12]
 8008a06:	1e5c      	subs	r4, r3, #1
 8008a08:	9b08      	ldr	r3, [sp, #32]
 8008a0a:	42a3      	cmp	r3, r4
 8008a0c:	db09      	blt.n	8008a22 <_dtoa_r+0x8c2>
 8008a0e:	1b1c      	subs	r4, r3, r4
 8008a10:	9b03      	ldr	r3, [sp, #12]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f6bf af30 	bge.w	8008878 <_dtoa_r+0x718>
 8008a18:	9b00      	ldr	r3, [sp, #0]
 8008a1a:	9a03      	ldr	r2, [sp, #12]
 8008a1c:	1a9e      	subs	r6, r3, r2
 8008a1e:	2300      	movs	r3, #0
 8008a20:	e72b      	b.n	800887a <_dtoa_r+0x71a>
 8008a22:	9b08      	ldr	r3, [sp, #32]
 8008a24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008a26:	9408      	str	r4, [sp, #32]
 8008a28:	1ae3      	subs	r3, r4, r3
 8008a2a:	441a      	add	r2, r3
 8008a2c:	9e00      	ldr	r6, [sp, #0]
 8008a2e:	9b03      	ldr	r3, [sp, #12]
 8008a30:	920d      	str	r2, [sp, #52]	@ 0x34
 8008a32:	2400      	movs	r4, #0
 8008a34:	e721      	b.n	800887a <_dtoa_r+0x71a>
 8008a36:	9c08      	ldr	r4, [sp, #32]
 8008a38:	9e00      	ldr	r6, [sp, #0]
 8008a3a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008a3c:	e728      	b.n	8008890 <_dtoa_r+0x730>
 8008a3e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008a42:	e751      	b.n	80088e8 <_dtoa_r+0x788>
 8008a44:	9a08      	ldr	r2, [sp, #32]
 8008a46:	9902      	ldr	r1, [sp, #8]
 8008a48:	e750      	b.n	80088ec <_dtoa_r+0x78c>
 8008a4a:	f8cd 8008 	str.w	r8, [sp, #8]
 8008a4e:	e751      	b.n	80088f4 <_dtoa_r+0x794>
 8008a50:	2300      	movs	r3, #0
 8008a52:	e779      	b.n	8008948 <_dtoa_r+0x7e8>
 8008a54:	9b04      	ldr	r3, [sp, #16]
 8008a56:	e777      	b.n	8008948 <_dtoa_r+0x7e8>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	9308      	str	r3, [sp, #32]
 8008a5c:	e779      	b.n	8008952 <_dtoa_r+0x7f2>
 8008a5e:	d093      	beq.n	8008988 <_dtoa_r+0x828>
 8008a60:	9a00      	ldr	r2, [sp, #0]
 8008a62:	331c      	adds	r3, #28
 8008a64:	441a      	add	r2, r3
 8008a66:	9200      	str	r2, [sp, #0]
 8008a68:	9a06      	ldr	r2, [sp, #24]
 8008a6a:	441a      	add	r2, r3
 8008a6c:	441e      	add	r6, r3
 8008a6e:	9206      	str	r2, [sp, #24]
 8008a70:	e78a      	b.n	8008988 <_dtoa_r+0x828>
 8008a72:	4603      	mov	r3, r0
 8008a74:	e7f4      	b.n	8008a60 <_dtoa_r+0x900>
 8008a76:	9b03      	ldr	r3, [sp, #12]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	46b8      	mov	r8, r7
 8008a7c:	dc20      	bgt.n	8008ac0 <_dtoa_r+0x960>
 8008a7e:	469b      	mov	fp, r3
 8008a80:	9b07      	ldr	r3, [sp, #28]
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	dd1e      	ble.n	8008ac4 <_dtoa_r+0x964>
 8008a86:	f1bb 0f00 	cmp.w	fp, #0
 8008a8a:	f47f adb1 	bne.w	80085f0 <_dtoa_r+0x490>
 8008a8e:	4621      	mov	r1, r4
 8008a90:	465b      	mov	r3, fp
 8008a92:	2205      	movs	r2, #5
 8008a94:	4648      	mov	r0, r9
 8008a96:	f000 fa95 	bl	8008fc4 <__multadd>
 8008a9a:	4601      	mov	r1, r0
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	9802      	ldr	r0, [sp, #8]
 8008aa0:	f000 fca0 	bl	80093e4 <__mcmp>
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	f77f ada3 	ble.w	80085f0 <_dtoa_r+0x490>
 8008aaa:	4656      	mov	r6, sl
 8008aac:	2331      	movs	r3, #49	@ 0x31
 8008aae:	f806 3b01 	strb.w	r3, [r6], #1
 8008ab2:	f108 0801 	add.w	r8, r8, #1
 8008ab6:	e59f      	b.n	80085f8 <_dtoa_r+0x498>
 8008ab8:	9c03      	ldr	r4, [sp, #12]
 8008aba:	46b8      	mov	r8, r7
 8008abc:	4625      	mov	r5, r4
 8008abe:	e7f4      	b.n	8008aaa <_dtoa_r+0x94a>
 8008ac0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008ac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	f000 8101 	beq.w	8008cce <_dtoa_r+0xb6e>
 8008acc:	2e00      	cmp	r6, #0
 8008ace:	dd05      	ble.n	8008adc <_dtoa_r+0x97c>
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	4632      	mov	r2, r6
 8008ad4:	4648      	mov	r0, r9
 8008ad6:	f000 fc19 	bl	800930c <__lshift>
 8008ada:	4605      	mov	r5, r0
 8008adc:	9b08      	ldr	r3, [sp, #32]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d05c      	beq.n	8008b9c <_dtoa_r+0xa3c>
 8008ae2:	6869      	ldr	r1, [r5, #4]
 8008ae4:	4648      	mov	r0, r9
 8008ae6:	f000 fa0b 	bl	8008f00 <_Balloc>
 8008aea:	4606      	mov	r6, r0
 8008aec:	b928      	cbnz	r0, 8008afa <_dtoa_r+0x99a>
 8008aee:	4b82      	ldr	r3, [pc, #520]	@ (8008cf8 <_dtoa_r+0xb98>)
 8008af0:	4602      	mov	r2, r0
 8008af2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008af6:	f7ff bb4a 	b.w	800818e <_dtoa_r+0x2e>
 8008afa:	692a      	ldr	r2, [r5, #16]
 8008afc:	3202      	adds	r2, #2
 8008afe:	0092      	lsls	r2, r2, #2
 8008b00:	f105 010c 	add.w	r1, r5, #12
 8008b04:	300c      	adds	r0, #12
 8008b06:	f000 ffa3 	bl	8009a50 <memcpy>
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	4631      	mov	r1, r6
 8008b0e:	4648      	mov	r0, r9
 8008b10:	f000 fbfc 	bl	800930c <__lshift>
 8008b14:	f10a 0301 	add.w	r3, sl, #1
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	eb0a 030b 	add.w	r3, sl, fp
 8008b1e:	9308      	str	r3, [sp, #32]
 8008b20:	9b04      	ldr	r3, [sp, #16]
 8008b22:	f003 0301 	and.w	r3, r3, #1
 8008b26:	462f      	mov	r7, r5
 8008b28:	9306      	str	r3, [sp, #24]
 8008b2a:	4605      	mov	r5, r0
 8008b2c:	9b00      	ldr	r3, [sp, #0]
 8008b2e:	9802      	ldr	r0, [sp, #8]
 8008b30:	4621      	mov	r1, r4
 8008b32:	f103 3bff 	add.w	fp, r3, #4294967295
 8008b36:	f7ff fa8a 	bl	800804e <quorem>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	3330      	adds	r3, #48	@ 0x30
 8008b3e:	9003      	str	r0, [sp, #12]
 8008b40:	4639      	mov	r1, r7
 8008b42:	9802      	ldr	r0, [sp, #8]
 8008b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b46:	f000 fc4d 	bl	80093e4 <__mcmp>
 8008b4a:	462a      	mov	r2, r5
 8008b4c:	9004      	str	r0, [sp, #16]
 8008b4e:	4621      	mov	r1, r4
 8008b50:	4648      	mov	r0, r9
 8008b52:	f000 fc63 	bl	800941c <__mdiff>
 8008b56:	68c2      	ldr	r2, [r0, #12]
 8008b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b5a:	4606      	mov	r6, r0
 8008b5c:	bb02      	cbnz	r2, 8008ba0 <_dtoa_r+0xa40>
 8008b5e:	4601      	mov	r1, r0
 8008b60:	9802      	ldr	r0, [sp, #8]
 8008b62:	f000 fc3f 	bl	80093e4 <__mcmp>
 8008b66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b68:	4602      	mov	r2, r0
 8008b6a:	4631      	mov	r1, r6
 8008b6c:	4648      	mov	r0, r9
 8008b6e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008b70:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b72:	f000 fa05 	bl	8008f80 <_Bfree>
 8008b76:	9b07      	ldr	r3, [sp, #28]
 8008b78:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008b7a:	9e00      	ldr	r6, [sp, #0]
 8008b7c:	ea42 0103 	orr.w	r1, r2, r3
 8008b80:	9b06      	ldr	r3, [sp, #24]
 8008b82:	4319      	orrs	r1, r3
 8008b84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b86:	d10d      	bne.n	8008ba4 <_dtoa_r+0xa44>
 8008b88:	2b39      	cmp	r3, #57	@ 0x39
 8008b8a:	d027      	beq.n	8008bdc <_dtoa_r+0xa7c>
 8008b8c:	9a04      	ldr	r2, [sp, #16]
 8008b8e:	2a00      	cmp	r2, #0
 8008b90:	dd01      	ble.n	8008b96 <_dtoa_r+0xa36>
 8008b92:	9b03      	ldr	r3, [sp, #12]
 8008b94:	3331      	adds	r3, #49	@ 0x31
 8008b96:	f88b 3000 	strb.w	r3, [fp]
 8008b9a:	e52e      	b.n	80085fa <_dtoa_r+0x49a>
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	e7b9      	b.n	8008b14 <_dtoa_r+0x9b4>
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	e7e2      	b.n	8008b6a <_dtoa_r+0xa0a>
 8008ba4:	9904      	ldr	r1, [sp, #16]
 8008ba6:	2900      	cmp	r1, #0
 8008ba8:	db04      	blt.n	8008bb4 <_dtoa_r+0xa54>
 8008baa:	9807      	ldr	r0, [sp, #28]
 8008bac:	4301      	orrs	r1, r0
 8008bae:	9806      	ldr	r0, [sp, #24]
 8008bb0:	4301      	orrs	r1, r0
 8008bb2:	d120      	bne.n	8008bf6 <_dtoa_r+0xa96>
 8008bb4:	2a00      	cmp	r2, #0
 8008bb6:	ddee      	ble.n	8008b96 <_dtoa_r+0xa36>
 8008bb8:	9902      	ldr	r1, [sp, #8]
 8008bba:	9300      	str	r3, [sp, #0]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	4648      	mov	r0, r9
 8008bc0:	f000 fba4 	bl	800930c <__lshift>
 8008bc4:	4621      	mov	r1, r4
 8008bc6:	9002      	str	r0, [sp, #8]
 8008bc8:	f000 fc0c 	bl	80093e4 <__mcmp>
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	9b00      	ldr	r3, [sp, #0]
 8008bd0:	dc02      	bgt.n	8008bd8 <_dtoa_r+0xa78>
 8008bd2:	d1e0      	bne.n	8008b96 <_dtoa_r+0xa36>
 8008bd4:	07da      	lsls	r2, r3, #31
 8008bd6:	d5de      	bpl.n	8008b96 <_dtoa_r+0xa36>
 8008bd8:	2b39      	cmp	r3, #57	@ 0x39
 8008bda:	d1da      	bne.n	8008b92 <_dtoa_r+0xa32>
 8008bdc:	2339      	movs	r3, #57	@ 0x39
 8008bde:	f88b 3000 	strb.w	r3, [fp]
 8008be2:	4633      	mov	r3, r6
 8008be4:	461e      	mov	r6, r3
 8008be6:	3b01      	subs	r3, #1
 8008be8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008bec:	2a39      	cmp	r2, #57	@ 0x39
 8008bee:	d04e      	beq.n	8008c8e <_dtoa_r+0xb2e>
 8008bf0:	3201      	adds	r2, #1
 8008bf2:	701a      	strb	r2, [r3, #0]
 8008bf4:	e501      	b.n	80085fa <_dtoa_r+0x49a>
 8008bf6:	2a00      	cmp	r2, #0
 8008bf8:	dd03      	ble.n	8008c02 <_dtoa_r+0xaa2>
 8008bfa:	2b39      	cmp	r3, #57	@ 0x39
 8008bfc:	d0ee      	beq.n	8008bdc <_dtoa_r+0xa7c>
 8008bfe:	3301      	adds	r3, #1
 8008c00:	e7c9      	b.n	8008b96 <_dtoa_r+0xa36>
 8008c02:	9a00      	ldr	r2, [sp, #0]
 8008c04:	9908      	ldr	r1, [sp, #32]
 8008c06:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008c0a:	428a      	cmp	r2, r1
 8008c0c:	d028      	beq.n	8008c60 <_dtoa_r+0xb00>
 8008c0e:	9902      	ldr	r1, [sp, #8]
 8008c10:	2300      	movs	r3, #0
 8008c12:	220a      	movs	r2, #10
 8008c14:	4648      	mov	r0, r9
 8008c16:	f000 f9d5 	bl	8008fc4 <__multadd>
 8008c1a:	42af      	cmp	r7, r5
 8008c1c:	9002      	str	r0, [sp, #8]
 8008c1e:	f04f 0300 	mov.w	r3, #0
 8008c22:	f04f 020a 	mov.w	r2, #10
 8008c26:	4639      	mov	r1, r7
 8008c28:	4648      	mov	r0, r9
 8008c2a:	d107      	bne.n	8008c3c <_dtoa_r+0xadc>
 8008c2c:	f000 f9ca 	bl	8008fc4 <__multadd>
 8008c30:	4607      	mov	r7, r0
 8008c32:	4605      	mov	r5, r0
 8008c34:	9b00      	ldr	r3, [sp, #0]
 8008c36:	3301      	adds	r3, #1
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	e777      	b.n	8008b2c <_dtoa_r+0x9cc>
 8008c3c:	f000 f9c2 	bl	8008fc4 <__multadd>
 8008c40:	4629      	mov	r1, r5
 8008c42:	4607      	mov	r7, r0
 8008c44:	2300      	movs	r3, #0
 8008c46:	220a      	movs	r2, #10
 8008c48:	4648      	mov	r0, r9
 8008c4a:	f000 f9bb 	bl	8008fc4 <__multadd>
 8008c4e:	4605      	mov	r5, r0
 8008c50:	e7f0      	b.n	8008c34 <_dtoa_r+0xad4>
 8008c52:	f1bb 0f00 	cmp.w	fp, #0
 8008c56:	bfcc      	ite	gt
 8008c58:	465e      	movgt	r6, fp
 8008c5a:	2601      	movle	r6, #1
 8008c5c:	4456      	add	r6, sl
 8008c5e:	2700      	movs	r7, #0
 8008c60:	9902      	ldr	r1, [sp, #8]
 8008c62:	9300      	str	r3, [sp, #0]
 8008c64:	2201      	movs	r2, #1
 8008c66:	4648      	mov	r0, r9
 8008c68:	f000 fb50 	bl	800930c <__lshift>
 8008c6c:	4621      	mov	r1, r4
 8008c6e:	9002      	str	r0, [sp, #8]
 8008c70:	f000 fbb8 	bl	80093e4 <__mcmp>
 8008c74:	2800      	cmp	r0, #0
 8008c76:	dcb4      	bgt.n	8008be2 <_dtoa_r+0xa82>
 8008c78:	d102      	bne.n	8008c80 <_dtoa_r+0xb20>
 8008c7a:	9b00      	ldr	r3, [sp, #0]
 8008c7c:	07db      	lsls	r3, r3, #31
 8008c7e:	d4b0      	bmi.n	8008be2 <_dtoa_r+0xa82>
 8008c80:	4633      	mov	r3, r6
 8008c82:	461e      	mov	r6, r3
 8008c84:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c88:	2a30      	cmp	r2, #48	@ 0x30
 8008c8a:	d0fa      	beq.n	8008c82 <_dtoa_r+0xb22>
 8008c8c:	e4b5      	b.n	80085fa <_dtoa_r+0x49a>
 8008c8e:	459a      	cmp	sl, r3
 8008c90:	d1a8      	bne.n	8008be4 <_dtoa_r+0xa84>
 8008c92:	2331      	movs	r3, #49	@ 0x31
 8008c94:	f108 0801 	add.w	r8, r8, #1
 8008c98:	f88a 3000 	strb.w	r3, [sl]
 8008c9c:	e4ad      	b.n	80085fa <_dtoa_r+0x49a>
 8008c9e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008ca0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008cfc <_dtoa_r+0xb9c>
 8008ca4:	b11b      	cbz	r3, 8008cae <_dtoa_r+0xb4e>
 8008ca6:	f10a 0308 	add.w	r3, sl, #8
 8008caa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008cac:	6013      	str	r3, [r2, #0]
 8008cae:	4650      	mov	r0, sl
 8008cb0:	b017      	add	sp, #92	@ 0x5c
 8008cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb6:	9b07      	ldr	r3, [sp, #28]
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	f77f ae2e 	ble.w	800891a <_dtoa_r+0x7ba>
 8008cbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008cc0:	9308      	str	r3, [sp, #32]
 8008cc2:	2001      	movs	r0, #1
 8008cc4:	e64d      	b.n	8008962 <_dtoa_r+0x802>
 8008cc6:	f1bb 0f00 	cmp.w	fp, #0
 8008cca:	f77f aed9 	ble.w	8008a80 <_dtoa_r+0x920>
 8008cce:	4656      	mov	r6, sl
 8008cd0:	9802      	ldr	r0, [sp, #8]
 8008cd2:	4621      	mov	r1, r4
 8008cd4:	f7ff f9bb 	bl	800804e <quorem>
 8008cd8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008cdc:	f806 3b01 	strb.w	r3, [r6], #1
 8008ce0:	eba6 020a 	sub.w	r2, r6, sl
 8008ce4:	4593      	cmp	fp, r2
 8008ce6:	ddb4      	ble.n	8008c52 <_dtoa_r+0xaf2>
 8008ce8:	9902      	ldr	r1, [sp, #8]
 8008cea:	2300      	movs	r3, #0
 8008cec:	220a      	movs	r2, #10
 8008cee:	4648      	mov	r0, r9
 8008cf0:	f000 f968 	bl	8008fc4 <__multadd>
 8008cf4:	9002      	str	r0, [sp, #8]
 8008cf6:	e7eb      	b.n	8008cd0 <_dtoa_r+0xb70>
 8008cf8:	0801d254 	.word	0x0801d254
 8008cfc:	0801d1d8 	.word	0x0801d1d8

08008d00 <_free_r>:
 8008d00:	b538      	push	{r3, r4, r5, lr}
 8008d02:	4605      	mov	r5, r0
 8008d04:	2900      	cmp	r1, #0
 8008d06:	d041      	beq.n	8008d8c <_free_r+0x8c>
 8008d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d0c:	1f0c      	subs	r4, r1, #4
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	bfb8      	it	lt
 8008d12:	18e4      	addlt	r4, r4, r3
 8008d14:	f000 f8e8 	bl	8008ee8 <__malloc_lock>
 8008d18:	4a1d      	ldr	r2, [pc, #116]	@ (8008d90 <_free_r+0x90>)
 8008d1a:	6813      	ldr	r3, [r2, #0]
 8008d1c:	b933      	cbnz	r3, 8008d2c <_free_r+0x2c>
 8008d1e:	6063      	str	r3, [r4, #4]
 8008d20:	6014      	str	r4, [r2, #0]
 8008d22:	4628      	mov	r0, r5
 8008d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d28:	f000 b8e4 	b.w	8008ef4 <__malloc_unlock>
 8008d2c:	42a3      	cmp	r3, r4
 8008d2e:	d908      	bls.n	8008d42 <_free_r+0x42>
 8008d30:	6820      	ldr	r0, [r4, #0]
 8008d32:	1821      	adds	r1, r4, r0
 8008d34:	428b      	cmp	r3, r1
 8008d36:	bf01      	itttt	eq
 8008d38:	6819      	ldreq	r1, [r3, #0]
 8008d3a:	685b      	ldreq	r3, [r3, #4]
 8008d3c:	1809      	addeq	r1, r1, r0
 8008d3e:	6021      	streq	r1, [r4, #0]
 8008d40:	e7ed      	b.n	8008d1e <_free_r+0x1e>
 8008d42:	461a      	mov	r2, r3
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	b10b      	cbz	r3, 8008d4c <_free_r+0x4c>
 8008d48:	42a3      	cmp	r3, r4
 8008d4a:	d9fa      	bls.n	8008d42 <_free_r+0x42>
 8008d4c:	6811      	ldr	r1, [r2, #0]
 8008d4e:	1850      	adds	r0, r2, r1
 8008d50:	42a0      	cmp	r0, r4
 8008d52:	d10b      	bne.n	8008d6c <_free_r+0x6c>
 8008d54:	6820      	ldr	r0, [r4, #0]
 8008d56:	4401      	add	r1, r0
 8008d58:	1850      	adds	r0, r2, r1
 8008d5a:	4283      	cmp	r3, r0
 8008d5c:	6011      	str	r1, [r2, #0]
 8008d5e:	d1e0      	bne.n	8008d22 <_free_r+0x22>
 8008d60:	6818      	ldr	r0, [r3, #0]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	6053      	str	r3, [r2, #4]
 8008d66:	4408      	add	r0, r1
 8008d68:	6010      	str	r0, [r2, #0]
 8008d6a:	e7da      	b.n	8008d22 <_free_r+0x22>
 8008d6c:	d902      	bls.n	8008d74 <_free_r+0x74>
 8008d6e:	230c      	movs	r3, #12
 8008d70:	602b      	str	r3, [r5, #0]
 8008d72:	e7d6      	b.n	8008d22 <_free_r+0x22>
 8008d74:	6820      	ldr	r0, [r4, #0]
 8008d76:	1821      	adds	r1, r4, r0
 8008d78:	428b      	cmp	r3, r1
 8008d7a:	bf04      	itt	eq
 8008d7c:	6819      	ldreq	r1, [r3, #0]
 8008d7e:	685b      	ldreq	r3, [r3, #4]
 8008d80:	6063      	str	r3, [r4, #4]
 8008d82:	bf04      	itt	eq
 8008d84:	1809      	addeq	r1, r1, r0
 8008d86:	6021      	streq	r1, [r4, #0]
 8008d88:	6054      	str	r4, [r2, #4]
 8008d8a:	e7ca      	b.n	8008d22 <_free_r+0x22>
 8008d8c:	bd38      	pop	{r3, r4, r5, pc}
 8008d8e:	bf00      	nop
 8008d90:	2000657c 	.word	0x2000657c

08008d94 <malloc>:
 8008d94:	4b02      	ldr	r3, [pc, #8]	@ (8008da0 <malloc+0xc>)
 8008d96:	4601      	mov	r1, r0
 8008d98:	6818      	ldr	r0, [r3, #0]
 8008d9a:	f000 b825 	b.w	8008de8 <_malloc_r>
 8008d9e:	bf00      	nop
 8008da0:	20000020 	.word	0x20000020

08008da4 <sbrk_aligned>:
 8008da4:	b570      	push	{r4, r5, r6, lr}
 8008da6:	4e0f      	ldr	r6, [pc, #60]	@ (8008de4 <sbrk_aligned+0x40>)
 8008da8:	460c      	mov	r4, r1
 8008daa:	6831      	ldr	r1, [r6, #0]
 8008dac:	4605      	mov	r5, r0
 8008dae:	b911      	cbnz	r1, 8008db6 <sbrk_aligned+0x12>
 8008db0:	f000 fe3e 	bl	8009a30 <_sbrk_r>
 8008db4:	6030      	str	r0, [r6, #0]
 8008db6:	4621      	mov	r1, r4
 8008db8:	4628      	mov	r0, r5
 8008dba:	f000 fe39 	bl	8009a30 <_sbrk_r>
 8008dbe:	1c43      	adds	r3, r0, #1
 8008dc0:	d103      	bne.n	8008dca <sbrk_aligned+0x26>
 8008dc2:	f04f 34ff 	mov.w	r4, #4294967295
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	bd70      	pop	{r4, r5, r6, pc}
 8008dca:	1cc4      	adds	r4, r0, #3
 8008dcc:	f024 0403 	bic.w	r4, r4, #3
 8008dd0:	42a0      	cmp	r0, r4
 8008dd2:	d0f8      	beq.n	8008dc6 <sbrk_aligned+0x22>
 8008dd4:	1a21      	subs	r1, r4, r0
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	f000 fe2a 	bl	8009a30 <_sbrk_r>
 8008ddc:	3001      	adds	r0, #1
 8008dde:	d1f2      	bne.n	8008dc6 <sbrk_aligned+0x22>
 8008de0:	e7ef      	b.n	8008dc2 <sbrk_aligned+0x1e>
 8008de2:	bf00      	nop
 8008de4:	20006578 	.word	0x20006578

08008de8 <_malloc_r>:
 8008de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dec:	1ccd      	adds	r5, r1, #3
 8008dee:	f025 0503 	bic.w	r5, r5, #3
 8008df2:	3508      	adds	r5, #8
 8008df4:	2d0c      	cmp	r5, #12
 8008df6:	bf38      	it	cc
 8008df8:	250c      	movcc	r5, #12
 8008dfa:	2d00      	cmp	r5, #0
 8008dfc:	4606      	mov	r6, r0
 8008dfe:	db01      	blt.n	8008e04 <_malloc_r+0x1c>
 8008e00:	42a9      	cmp	r1, r5
 8008e02:	d904      	bls.n	8008e0e <_malloc_r+0x26>
 8008e04:	230c      	movs	r3, #12
 8008e06:	6033      	str	r3, [r6, #0]
 8008e08:	2000      	movs	r0, #0
 8008e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ee4 <_malloc_r+0xfc>
 8008e12:	f000 f869 	bl	8008ee8 <__malloc_lock>
 8008e16:	f8d8 3000 	ldr.w	r3, [r8]
 8008e1a:	461c      	mov	r4, r3
 8008e1c:	bb44      	cbnz	r4, 8008e70 <_malloc_r+0x88>
 8008e1e:	4629      	mov	r1, r5
 8008e20:	4630      	mov	r0, r6
 8008e22:	f7ff ffbf 	bl	8008da4 <sbrk_aligned>
 8008e26:	1c43      	adds	r3, r0, #1
 8008e28:	4604      	mov	r4, r0
 8008e2a:	d158      	bne.n	8008ede <_malloc_r+0xf6>
 8008e2c:	f8d8 4000 	ldr.w	r4, [r8]
 8008e30:	4627      	mov	r7, r4
 8008e32:	2f00      	cmp	r7, #0
 8008e34:	d143      	bne.n	8008ebe <_malloc_r+0xd6>
 8008e36:	2c00      	cmp	r4, #0
 8008e38:	d04b      	beq.n	8008ed2 <_malloc_r+0xea>
 8008e3a:	6823      	ldr	r3, [r4, #0]
 8008e3c:	4639      	mov	r1, r7
 8008e3e:	4630      	mov	r0, r6
 8008e40:	eb04 0903 	add.w	r9, r4, r3
 8008e44:	f000 fdf4 	bl	8009a30 <_sbrk_r>
 8008e48:	4581      	cmp	r9, r0
 8008e4a:	d142      	bne.n	8008ed2 <_malloc_r+0xea>
 8008e4c:	6821      	ldr	r1, [r4, #0]
 8008e4e:	1a6d      	subs	r5, r5, r1
 8008e50:	4629      	mov	r1, r5
 8008e52:	4630      	mov	r0, r6
 8008e54:	f7ff ffa6 	bl	8008da4 <sbrk_aligned>
 8008e58:	3001      	adds	r0, #1
 8008e5a:	d03a      	beq.n	8008ed2 <_malloc_r+0xea>
 8008e5c:	6823      	ldr	r3, [r4, #0]
 8008e5e:	442b      	add	r3, r5
 8008e60:	6023      	str	r3, [r4, #0]
 8008e62:	f8d8 3000 	ldr.w	r3, [r8]
 8008e66:	685a      	ldr	r2, [r3, #4]
 8008e68:	bb62      	cbnz	r2, 8008ec4 <_malloc_r+0xdc>
 8008e6a:	f8c8 7000 	str.w	r7, [r8]
 8008e6e:	e00f      	b.n	8008e90 <_malloc_r+0xa8>
 8008e70:	6822      	ldr	r2, [r4, #0]
 8008e72:	1b52      	subs	r2, r2, r5
 8008e74:	d420      	bmi.n	8008eb8 <_malloc_r+0xd0>
 8008e76:	2a0b      	cmp	r2, #11
 8008e78:	d917      	bls.n	8008eaa <_malloc_r+0xc2>
 8008e7a:	1961      	adds	r1, r4, r5
 8008e7c:	42a3      	cmp	r3, r4
 8008e7e:	6025      	str	r5, [r4, #0]
 8008e80:	bf18      	it	ne
 8008e82:	6059      	strne	r1, [r3, #4]
 8008e84:	6863      	ldr	r3, [r4, #4]
 8008e86:	bf08      	it	eq
 8008e88:	f8c8 1000 	streq.w	r1, [r8]
 8008e8c:	5162      	str	r2, [r4, r5]
 8008e8e:	604b      	str	r3, [r1, #4]
 8008e90:	4630      	mov	r0, r6
 8008e92:	f000 f82f 	bl	8008ef4 <__malloc_unlock>
 8008e96:	f104 000b 	add.w	r0, r4, #11
 8008e9a:	1d23      	adds	r3, r4, #4
 8008e9c:	f020 0007 	bic.w	r0, r0, #7
 8008ea0:	1ac2      	subs	r2, r0, r3
 8008ea2:	bf1c      	itt	ne
 8008ea4:	1a1b      	subne	r3, r3, r0
 8008ea6:	50a3      	strne	r3, [r4, r2]
 8008ea8:	e7af      	b.n	8008e0a <_malloc_r+0x22>
 8008eaa:	6862      	ldr	r2, [r4, #4]
 8008eac:	42a3      	cmp	r3, r4
 8008eae:	bf0c      	ite	eq
 8008eb0:	f8c8 2000 	streq.w	r2, [r8]
 8008eb4:	605a      	strne	r2, [r3, #4]
 8008eb6:	e7eb      	b.n	8008e90 <_malloc_r+0xa8>
 8008eb8:	4623      	mov	r3, r4
 8008eba:	6864      	ldr	r4, [r4, #4]
 8008ebc:	e7ae      	b.n	8008e1c <_malloc_r+0x34>
 8008ebe:	463c      	mov	r4, r7
 8008ec0:	687f      	ldr	r7, [r7, #4]
 8008ec2:	e7b6      	b.n	8008e32 <_malloc_r+0x4a>
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	42a3      	cmp	r3, r4
 8008eca:	d1fb      	bne.n	8008ec4 <_malloc_r+0xdc>
 8008ecc:	2300      	movs	r3, #0
 8008ece:	6053      	str	r3, [r2, #4]
 8008ed0:	e7de      	b.n	8008e90 <_malloc_r+0xa8>
 8008ed2:	230c      	movs	r3, #12
 8008ed4:	6033      	str	r3, [r6, #0]
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	f000 f80c 	bl	8008ef4 <__malloc_unlock>
 8008edc:	e794      	b.n	8008e08 <_malloc_r+0x20>
 8008ede:	6005      	str	r5, [r0, #0]
 8008ee0:	e7d6      	b.n	8008e90 <_malloc_r+0xa8>
 8008ee2:	bf00      	nop
 8008ee4:	2000657c 	.word	0x2000657c

08008ee8 <__malloc_lock>:
 8008ee8:	4801      	ldr	r0, [pc, #4]	@ (8008ef0 <__malloc_lock+0x8>)
 8008eea:	f7ff b8ae 	b.w	800804a <__retarget_lock_acquire_recursive>
 8008eee:	bf00      	nop
 8008ef0:	20006574 	.word	0x20006574

08008ef4 <__malloc_unlock>:
 8008ef4:	4801      	ldr	r0, [pc, #4]	@ (8008efc <__malloc_unlock+0x8>)
 8008ef6:	f7ff b8a9 	b.w	800804c <__retarget_lock_release_recursive>
 8008efa:	bf00      	nop
 8008efc:	20006574 	.word	0x20006574

08008f00 <_Balloc>:
 8008f00:	b570      	push	{r4, r5, r6, lr}
 8008f02:	69c6      	ldr	r6, [r0, #28]
 8008f04:	4604      	mov	r4, r0
 8008f06:	460d      	mov	r5, r1
 8008f08:	b976      	cbnz	r6, 8008f28 <_Balloc+0x28>
 8008f0a:	2010      	movs	r0, #16
 8008f0c:	f7ff ff42 	bl	8008d94 <malloc>
 8008f10:	4602      	mov	r2, r0
 8008f12:	61e0      	str	r0, [r4, #28]
 8008f14:	b920      	cbnz	r0, 8008f20 <_Balloc+0x20>
 8008f16:	4b18      	ldr	r3, [pc, #96]	@ (8008f78 <_Balloc+0x78>)
 8008f18:	4818      	ldr	r0, [pc, #96]	@ (8008f7c <_Balloc+0x7c>)
 8008f1a:	216b      	movs	r1, #107	@ 0x6b
 8008f1c:	f000 fda6 	bl	8009a6c <__assert_func>
 8008f20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f24:	6006      	str	r6, [r0, #0]
 8008f26:	60c6      	str	r6, [r0, #12]
 8008f28:	69e6      	ldr	r6, [r4, #28]
 8008f2a:	68f3      	ldr	r3, [r6, #12]
 8008f2c:	b183      	cbz	r3, 8008f50 <_Balloc+0x50>
 8008f2e:	69e3      	ldr	r3, [r4, #28]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f36:	b9b8      	cbnz	r0, 8008f68 <_Balloc+0x68>
 8008f38:	2101      	movs	r1, #1
 8008f3a:	fa01 f605 	lsl.w	r6, r1, r5
 8008f3e:	1d72      	adds	r2, r6, #5
 8008f40:	0092      	lsls	r2, r2, #2
 8008f42:	4620      	mov	r0, r4
 8008f44:	f000 fdb0 	bl	8009aa8 <_calloc_r>
 8008f48:	b160      	cbz	r0, 8008f64 <_Balloc+0x64>
 8008f4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f4e:	e00e      	b.n	8008f6e <_Balloc+0x6e>
 8008f50:	2221      	movs	r2, #33	@ 0x21
 8008f52:	2104      	movs	r1, #4
 8008f54:	4620      	mov	r0, r4
 8008f56:	f000 fda7 	bl	8009aa8 <_calloc_r>
 8008f5a:	69e3      	ldr	r3, [r4, #28]
 8008f5c:	60f0      	str	r0, [r6, #12]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d1e4      	bne.n	8008f2e <_Balloc+0x2e>
 8008f64:	2000      	movs	r0, #0
 8008f66:	bd70      	pop	{r4, r5, r6, pc}
 8008f68:	6802      	ldr	r2, [r0, #0]
 8008f6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f6e:	2300      	movs	r3, #0
 8008f70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f74:	e7f7      	b.n	8008f66 <_Balloc+0x66>
 8008f76:	bf00      	nop
 8008f78:	0801d1e5 	.word	0x0801d1e5
 8008f7c:	0801d265 	.word	0x0801d265

08008f80 <_Bfree>:
 8008f80:	b570      	push	{r4, r5, r6, lr}
 8008f82:	69c6      	ldr	r6, [r0, #28]
 8008f84:	4605      	mov	r5, r0
 8008f86:	460c      	mov	r4, r1
 8008f88:	b976      	cbnz	r6, 8008fa8 <_Bfree+0x28>
 8008f8a:	2010      	movs	r0, #16
 8008f8c:	f7ff ff02 	bl	8008d94 <malloc>
 8008f90:	4602      	mov	r2, r0
 8008f92:	61e8      	str	r0, [r5, #28]
 8008f94:	b920      	cbnz	r0, 8008fa0 <_Bfree+0x20>
 8008f96:	4b09      	ldr	r3, [pc, #36]	@ (8008fbc <_Bfree+0x3c>)
 8008f98:	4809      	ldr	r0, [pc, #36]	@ (8008fc0 <_Bfree+0x40>)
 8008f9a:	218f      	movs	r1, #143	@ 0x8f
 8008f9c:	f000 fd66 	bl	8009a6c <__assert_func>
 8008fa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fa4:	6006      	str	r6, [r0, #0]
 8008fa6:	60c6      	str	r6, [r0, #12]
 8008fa8:	b13c      	cbz	r4, 8008fba <_Bfree+0x3a>
 8008faa:	69eb      	ldr	r3, [r5, #28]
 8008fac:	6862      	ldr	r2, [r4, #4]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fb4:	6021      	str	r1, [r4, #0]
 8008fb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008fba:	bd70      	pop	{r4, r5, r6, pc}
 8008fbc:	0801d1e5 	.word	0x0801d1e5
 8008fc0:	0801d265 	.word	0x0801d265

08008fc4 <__multadd>:
 8008fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc8:	690d      	ldr	r5, [r1, #16]
 8008fca:	4607      	mov	r7, r0
 8008fcc:	460c      	mov	r4, r1
 8008fce:	461e      	mov	r6, r3
 8008fd0:	f101 0c14 	add.w	ip, r1, #20
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	f8dc 3000 	ldr.w	r3, [ip]
 8008fda:	b299      	uxth	r1, r3
 8008fdc:	fb02 6101 	mla	r1, r2, r1, r6
 8008fe0:	0c1e      	lsrs	r6, r3, #16
 8008fe2:	0c0b      	lsrs	r3, r1, #16
 8008fe4:	fb02 3306 	mla	r3, r2, r6, r3
 8008fe8:	b289      	uxth	r1, r1
 8008fea:	3001      	adds	r0, #1
 8008fec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ff0:	4285      	cmp	r5, r0
 8008ff2:	f84c 1b04 	str.w	r1, [ip], #4
 8008ff6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ffa:	dcec      	bgt.n	8008fd6 <__multadd+0x12>
 8008ffc:	b30e      	cbz	r6, 8009042 <__multadd+0x7e>
 8008ffe:	68a3      	ldr	r3, [r4, #8]
 8009000:	42ab      	cmp	r3, r5
 8009002:	dc19      	bgt.n	8009038 <__multadd+0x74>
 8009004:	6861      	ldr	r1, [r4, #4]
 8009006:	4638      	mov	r0, r7
 8009008:	3101      	adds	r1, #1
 800900a:	f7ff ff79 	bl	8008f00 <_Balloc>
 800900e:	4680      	mov	r8, r0
 8009010:	b928      	cbnz	r0, 800901e <__multadd+0x5a>
 8009012:	4602      	mov	r2, r0
 8009014:	4b0c      	ldr	r3, [pc, #48]	@ (8009048 <__multadd+0x84>)
 8009016:	480d      	ldr	r0, [pc, #52]	@ (800904c <__multadd+0x88>)
 8009018:	21ba      	movs	r1, #186	@ 0xba
 800901a:	f000 fd27 	bl	8009a6c <__assert_func>
 800901e:	6922      	ldr	r2, [r4, #16]
 8009020:	3202      	adds	r2, #2
 8009022:	f104 010c 	add.w	r1, r4, #12
 8009026:	0092      	lsls	r2, r2, #2
 8009028:	300c      	adds	r0, #12
 800902a:	f000 fd11 	bl	8009a50 <memcpy>
 800902e:	4621      	mov	r1, r4
 8009030:	4638      	mov	r0, r7
 8009032:	f7ff ffa5 	bl	8008f80 <_Bfree>
 8009036:	4644      	mov	r4, r8
 8009038:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800903c:	3501      	adds	r5, #1
 800903e:	615e      	str	r6, [r3, #20]
 8009040:	6125      	str	r5, [r4, #16]
 8009042:	4620      	mov	r0, r4
 8009044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009048:	0801d254 	.word	0x0801d254
 800904c:	0801d265 	.word	0x0801d265

08009050 <__hi0bits>:
 8009050:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009054:	4603      	mov	r3, r0
 8009056:	bf36      	itet	cc
 8009058:	0403      	lslcc	r3, r0, #16
 800905a:	2000      	movcs	r0, #0
 800905c:	2010      	movcc	r0, #16
 800905e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009062:	bf3c      	itt	cc
 8009064:	021b      	lslcc	r3, r3, #8
 8009066:	3008      	addcc	r0, #8
 8009068:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800906c:	bf3c      	itt	cc
 800906e:	011b      	lslcc	r3, r3, #4
 8009070:	3004      	addcc	r0, #4
 8009072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009076:	bf3c      	itt	cc
 8009078:	009b      	lslcc	r3, r3, #2
 800907a:	3002      	addcc	r0, #2
 800907c:	2b00      	cmp	r3, #0
 800907e:	db05      	blt.n	800908c <__hi0bits+0x3c>
 8009080:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009084:	f100 0001 	add.w	r0, r0, #1
 8009088:	bf08      	it	eq
 800908a:	2020      	moveq	r0, #32
 800908c:	4770      	bx	lr

0800908e <__lo0bits>:
 800908e:	6803      	ldr	r3, [r0, #0]
 8009090:	4602      	mov	r2, r0
 8009092:	f013 0007 	ands.w	r0, r3, #7
 8009096:	d00b      	beq.n	80090b0 <__lo0bits+0x22>
 8009098:	07d9      	lsls	r1, r3, #31
 800909a:	d421      	bmi.n	80090e0 <__lo0bits+0x52>
 800909c:	0798      	lsls	r0, r3, #30
 800909e:	bf49      	itett	mi
 80090a0:	085b      	lsrmi	r3, r3, #1
 80090a2:	089b      	lsrpl	r3, r3, #2
 80090a4:	2001      	movmi	r0, #1
 80090a6:	6013      	strmi	r3, [r2, #0]
 80090a8:	bf5c      	itt	pl
 80090aa:	6013      	strpl	r3, [r2, #0]
 80090ac:	2002      	movpl	r0, #2
 80090ae:	4770      	bx	lr
 80090b0:	b299      	uxth	r1, r3
 80090b2:	b909      	cbnz	r1, 80090b8 <__lo0bits+0x2a>
 80090b4:	0c1b      	lsrs	r3, r3, #16
 80090b6:	2010      	movs	r0, #16
 80090b8:	b2d9      	uxtb	r1, r3
 80090ba:	b909      	cbnz	r1, 80090c0 <__lo0bits+0x32>
 80090bc:	3008      	adds	r0, #8
 80090be:	0a1b      	lsrs	r3, r3, #8
 80090c0:	0719      	lsls	r1, r3, #28
 80090c2:	bf04      	itt	eq
 80090c4:	091b      	lsreq	r3, r3, #4
 80090c6:	3004      	addeq	r0, #4
 80090c8:	0799      	lsls	r1, r3, #30
 80090ca:	bf04      	itt	eq
 80090cc:	089b      	lsreq	r3, r3, #2
 80090ce:	3002      	addeq	r0, #2
 80090d0:	07d9      	lsls	r1, r3, #31
 80090d2:	d403      	bmi.n	80090dc <__lo0bits+0x4e>
 80090d4:	085b      	lsrs	r3, r3, #1
 80090d6:	f100 0001 	add.w	r0, r0, #1
 80090da:	d003      	beq.n	80090e4 <__lo0bits+0x56>
 80090dc:	6013      	str	r3, [r2, #0]
 80090de:	4770      	bx	lr
 80090e0:	2000      	movs	r0, #0
 80090e2:	4770      	bx	lr
 80090e4:	2020      	movs	r0, #32
 80090e6:	4770      	bx	lr

080090e8 <__i2b>:
 80090e8:	b510      	push	{r4, lr}
 80090ea:	460c      	mov	r4, r1
 80090ec:	2101      	movs	r1, #1
 80090ee:	f7ff ff07 	bl	8008f00 <_Balloc>
 80090f2:	4602      	mov	r2, r0
 80090f4:	b928      	cbnz	r0, 8009102 <__i2b+0x1a>
 80090f6:	4b05      	ldr	r3, [pc, #20]	@ (800910c <__i2b+0x24>)
 80090f8:	4805      	ldr	r0, [pc, #20]	@ (8009110 <__i2b+0x28>)
 80090fa:	f240 1145 	movw	r1, #325	@ 0x145
 80090fe:	f000 fcb5 	bl	8009a6c <__assert_func>
 8009102:	2301      	movs	r3, #1
 8009104:	6144      	str	r4, [r0, #20]
 8009106:	6103      	str	r3, [r0, #16]
 8009108:	bd10      	pop	{r4, pc}
 800910a:	bf00      	nop
 800910c:	0801d254 	.word	0x0801d254
 8009110:	0801d265 	.word	0x0801d265

08009114 <__multiply>:
 8009114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009118:	4617      	mov	r7, r2
 800911a:	690a      	ldr	r2, [r1, #16]
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	429a      	cmp	r2, r3
 8009120:	bfa8      	it	ge
 8009122:	463b      	movge	r3, r7
 8009124:	4689      	mov	r9, r1
 8009126:	bfa4      	itt	ge
 8009128:	460f      	movge	r7, r1
 800912a:	4699      	movge	r9, r3
 800912c:	693d      	ldr	r5, [r7, #16]
 800912e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	6879      	ldr	r1, [r7, #4]
 8009136:	eb05 060a 	add.w	r6, r5, sl
 800913a:	42b3      	cmp	r3, r6
 800913c:	b085      	sub	sp, #20
 800913e:	bfb8      	it	lt
 8009140:	3101      	addlt	r1, #1
 8009142:	f7ff fedd 	bl	8008f00 <_Balloc>
 8009146:	b930      	cbnz	r0, 8009156 <__multiply+0x42>
 8009148:	4602      	mov	r2, r0
 800914a:	4b41      	ldr	r3, [pc, #260]	@ (8009250 <__multiply+0x13c>)
 800914c:	4841      	ldr	r0, [pc, #260]	@ (8009254 <__multiply+0x140>)
 800914e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009152:	f000 fc8b 	bl	8009a6c <__assert_func>
 8009156:	f100 0414 	add.w	r4, r0, #20
 800915a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800915e:	4623      	mov	r3, r4
 8009160:	2200      	movs	r2, #0
 8009162:	4573      	cmp	r3, lr
 8009164:	d320      	bcc.n	80091a8 <__multiply+0x94>
 8009166:	f107 0814 	add.w	r8, r7, #20
 800916a:	f109 0114 	add.w	r1, r9, #20
 800916e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009172:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009176:	9302      	str	r3, [sp, #8]
 8009178:	1beb      	subs	r3, r5, r7
 800917a:	3b15      	subs	r3, #21
 800917c:	f023 0303 	bic.w	r3, r3, #3
 8009180:	3304      	adds	r3, #4
 8009182:	3715      	adds	r7, #21
 8009184:	42bd      	cmp	r5, r7
 8009186:	bf38      	it	cc
 8009188:	2304      	movcc	r3, #4
 800918a:	9301      	str	r3, [sp, #4]
 800918c:	9b02      	ldr	r3, [sp, #8]
 800918e:	9103      	str	r1, [sp, #12]
 8009190:	428b      	cmp	r3, r1
 8009192:	d80c      	bhi.n	80091ae <__multiply+0x9a>
 8009194:	2e00      	cmp	r6, #0
 8009196:	dd03      	ble.n	80091a0 <__multiply+0x8c>
 8009198:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800919c:	2b00      	cmp	r3, #0
 800919e:	d055      	beq.n	800924c <__multiply+0x138>
 80091a0:	6106      	str	r6, [r0, #16]
 80091a2:	b005      	add	sp, #20
 80091a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a8:	f843 2b04 	str.w	r2, [r3], #4
 80091ac:	e7d9      	b.n	8009162 <__multiply+0x4e>
 80091ae:	f8b1 a000 	ldrh.w	sl, [r1]
 80091b2:	f1ba 0f00 	cmp.w	sl, #0
 80091b6:	d01f      	beq.n	80091f8 <__multiply+0xe4>
 80091b8:	46c4      	mov	ip, r8
 80091ba:	46a1      	mov	r9, r4
 80091bc:	2700      	movs	r7, #0
 80091be:	f85c 2b04 	ldr.w	r2, [ip], #4
 80091c2:	f8d9 3000 	ldr.w	r3, [r9]
 80091c6:	fa1f fb82 	uxth.w	fp, r2
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	fb0a 330b 	mla	r3, sl, fp, r3
 80091d0:	443b      	add	r3, r7
 80091d2:	f8d9 7000 	ldr.w	r7, [r9]
 80091d6:	0c12      	lsrs	r2, r2, #16
 80091d8:	0c3f      	lsrs	r7, r7, #16
 80091da:	fb0a 7202 	mla	r2, sl, r2, r7
 80091de:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091e8:	4565      	cmp	r5, ip
 80091ea:	f849 3b04 	str.w	r3, [r9], #4
 80091ee:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80091f2:	d8e4      	bhi.n	80091be <__multiply+0xaa>
 80091f4:	9b01      	ldr	r3, [sp, #4]
 80091f6:	50e7      	str	r7, [r4, r3]
 80091f8:	9b03      	ldr	r3, [sp, #12]
 80091fa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80091fe:	3104      	adds	r1, #4
 8009200:	f1b9 0f00 	cmp.w	r9, #0
 8009204:	d020      	beq.n	8009248 <__multiply+0x134>
 8009206:	6823      	ldr	r3, [r4, #0]
 8009208:	4647      	mov	r7, r8
 800920a:	46a4      	mov	ip, r4
 800920c:	f04f 0a00 	mov.w	sl, #0
 8009210:	f8b7 b000 	ldrh.w	fp, [r7]
 8009214:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009218:	fb09 220b 	mla	r2, r9, fp, r2
 800921c:	4452      	add	r2, sl
 800921e:	b29b      	uxth	r3, r3
 8009220:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009224:	f84c 3b04 	str.w	r3, [ip], #4
 8009228:	f857 3b04 	ldr.w	r3, [r7], #4
 800922c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009230:	f8bc 3000 	ldrh.w	r3, [ip]
 8009234:	fb09 330a 	mla	r3, r9, sl, r3
 8009238:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800923c:	42bd      	cmp	r5, r7
 800923e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009242:	d8e5      	bhi.n	8009210 <__multiply+0xfc>
 8009244:	9a01      	ldr	r2, [sp, #4]
 8009246:	50a3      	str	r3, [r4, r2]
 8009248:	3404      	adds	r4, #4
 800924a:	e79f      	b.n	800918c <__multiply+0x78>
 800924c:	3e01      	subs	r6, #1
 800924e:	e7a1      	b.n	8009194 <__multiply+0x80>
 8009250:	0801d254 	.word	0x0801d254
 8009254:	0801d265 	.word	0x0801d265

08009258 <__pow5mult>:
 8009258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800925c:	4615      	mov	r5, r2
 800925e:	f012 0203 	ands.w	r2, r2, #3
 8009262:	4607      	mov	r7, r0
 8009264:	460e      	mov	r6, r1
 8009266:	d007      	beq.n	8009278 <__pow5mult+0x20>
 8009268:	4c25      	ldr	r4, [pc, #148]	@ (8009300 <__pow5mult+0xa8>)
 800926a:	3a01      	subs	r2, #1
 800926c:	2300      	movs	r3, #0
 800926e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009272:	f7ff fea7 	bl	8008fc4 <__multadd>
 8009276:	4606      	mov	r6, r0
 8009278:	10ad      	asrs	r5, r5, #2
 800927a:	d03d      	beq.n	80092f8 <__pow5mult+0xa0>
 800927c:	69fc      	ldr	r4, [r7, #28]
 800927e:	b97c      	cbnz	r4, 80092a0 <__pow5mult+0x48>
 8009280:	2010      	movs	r0, #16
 8009282:	f7ff fd87 	bl	8008d94 <malloc>
 8009286:	4602      	mov	r2, r0
 8009288:	61f8      	str	r0, [r7, #28]
 800928a:	b928      	cbnz	r0, 8009298 <__pow5mult+0x40>
 800928c:	4b1d      	ldr	r3, [pc, #116]	@ (8009304 <__pow5mult+0xac>)
 800928e:	481e      	ldr	r0, [pc, #120]	@ (8009308 <__pow5mult+0xb0>)
 8009290:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009294:	f000 fbea 	bl	8009a6c <__assert_func>
 8009298:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800929c:	6004      	str	r4, [r0, #0]
 800929e:	60c4      	str	r4, [r0, #12]
 80092a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80092a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092a8:	b94c      	cbnz	r4, 80092be <__pow5mult+0x66>
 80092aa:	f240 2171 	movw	r1, #625	@ 0x271
 80092ae:	4638      	mov	r0, r7
 80092b0:	f7ff ff1a 	bl	80090e8 <__i2b>
 80092b4:	2300      	movs	r3, #0
 80092b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80092ba:	4604      	mov	r4, r0
 80092bc:	6003      	str	r3, [r0, #0]
 80092be:	f04f 0900 	mov.w	r9, #0
 80092c2:	07eb      	lsls	r3, r5, #31
 80092c4:	d50a      	bpl.n	80092dc <__pow5mult+0x84>
 80092c6:	4631      	mov	r1, r6
 80092c8:	4622      	mov	r2, r4
 80092ca:	4638      	mov	r0, r7
 80092cc:	f7ff ff22 	bl	8009114 <__multiply>
 80092d0:	4631      	mov	r1, r6
 80092d2:	4680      	mov	r8, r0
 80092d4:	4638      	mov	r0, r7
 80092d6:	f7ff fe53 	bl	8008f80 <_Bfree>
 80092da:	4646      	mov	r6, r8
 80092dc:	106d      	asrs	r5, r5, #1
 80092de:	d00b      	beq.n	80092f8 <__pow5mult+0xa0>
 80092e0:	6820      	ldr	r0, [r4, #0]
 80092e2:	b938      	cbnz	r0, 80092f4 <__pow5mult+0x9c>
 80092e4:	4622      	mov	r2, r4
 80092e6:	4621      	mov	r1, r4
 80092e8:	4638      	mov	r0, r7
 80092ea:	f7ff ff13 	bl	8009114 <__multiply>
 80092ee:	6020      	str	r0, [r4, #0]
 80092f0:	f8c0 9000 	str.w	r9, [r0]
 80092f4:	4604      	mov	r4, r0
 80092f6:	e7e4      	b.n	80092c2 <__pow5mult+0x6a>
 80092f8:	4630      	mov	r0, r6
 80092fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092fe:	bf00      	nop
 8009300:	0801d318 	.word	0x0801d318
 8009304:	0801d1e5 	.word	0x0801d1e5
 8009308:	0801d265 	.word	0x0801d265

0800930c <__lshift>:
 800930c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009310:	460c      	mov	r4, r1
 8009312:	6849      	ldr	r1, [r1, #4]
 8009314:	6923      	ldr	r3, [r4, #16]
 8009316:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800931a:	68a3      	ldr	r3, [r4, #8]
 800931c:	4607      	mov	r7, r0
 800931e:	4691      	mov	r9, r2
 8009320:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009324:	f108 0601 	add.w	r6, r8, #1
 8009328:	42b3      	cmp	r3, r6
 800932a:	db0b      	blt.n	8009344 <__lshift+0x38>
 800932c:	4638      	mov	r0, r7
 800932e:	f7ff fde7 	bl	8008f00 <_Balloc>
 8009332:	4605      	mov	r5, r0
 8009334:	b948      	cbnz	r0, 800934a <__lshift+0x3e>
 8009336:	4602      	mov	r2, r0
 8009338:	4b28      	ldr	r3, [pc, #160]	@ (80093dc <__lshift+0xd0>)
 800933a:	4829      	ldr	r0, [pc, #164]	@ (80093e0 <__lshift+0xd4>)
 800933c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009340:	f000 fb94 	bl	8009a6c <__assert_func>
 8009344:	3101      	adds	r1, #1
 8009346:	005b      	lsls	r3, r3, #1
 8009348:	e7ee      	b.n	8009328 <__lshift+0x1c>
 800934a:	2300      	movs	r3, #0
 800934c:	f100 0114 	add.w	r1, r0, #20
 8009350:	f100 0210 	add.w	r2, r0, #16
 8009354:	4618      	mov	r0, r3
 8009356:	4553      	cmp	r3, sl
 8009358:	db33      	blt.n	80093c2 <__lshift+0xb6>
 800935a:	6920      	ldr	r0, [r4, #16]
 800935c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009360:	f104 0314 	add.w	r3, r4, #20
 8009364:	f019 091f 	ands.w	r9, r9, #31
 8009368:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800936c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009370:	d02b      	beq.n	80093ca <__lshift+0xbe>
 8009372:	f1c9 0e20 	rsb	lr, r9, #32
 8009376:	468a      	mov	sl, r1
 8009378:	2200      	movs	r2, #0
 800937a:	6818      	ldr	r0, [r3, #0]
 800937c:	fa00 f009 	lsl.w	r0, r0, r9
 8009380:	4310      	orrs	r0, r2
 8009382:	f84a 0b04 	str.w	r0, [sl], #4
 8009386:	f853 2b04 	ldr.w	r2, [r3], #4
 800938a:	459c      	cmp	ip, r3
 800938c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009390:	d8f3      	bhi.n	800937a <__lshift+0x6e>
 8009392:	ebac 0304 	sub.w	r3, ip, r4
 8009396:	3b15      	subs	r3, #21
 8009398:	f023 0303 	bic.w	r3, r3, #3
 800939c:	3304      	adds	r3, #4
 800939e:	f104 0015 	add.w	r0, r4, #21
 80093a2:	4560      	cmp	r0, ip
 80093a4:	bf88      	it	hi
 80093a6:	2304      	movhi	r3, #4
 80093a8:	50ca      	str	r2, [r1, r3]
 80093aa:	b10a      	cbz	r2, 80093b0 <__lshift+0xa4>
 80093ac:	f108 0602 	add.w	r6, r8, #2
 80093b0:	3e01      	subs	r6, #1
 80093b2:	4638      	mov	r0, r7
 80093b4:	612e      	str	r6, [r5, #16]
 80093b6:	4621      	mov	r1, r4
 80093b8:	f7ff fde2 	bl	8008f80 <_Bfree>
 80093bc:	4628      	mov	r0, r5
 80093be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80093c6:	3301      	adds	r3, #1
 80093c8:	e7c5      	b.n	8009356 <__lshift+0x4a>
 80093ca:	3904      	subs	r1, #4
 80093cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80093d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80093d4:	459c      	cmp	ip, r3
 80093d6:	d8f9      	bhi.n	80093cc <__lshift+0xc0>
 80093d8:	e7ea      	b.n	80093b0 <__lshift+0xa4>
 80093da:	bf00      	nop
 80093dc:	0801d254 	.word	0x0801d254
 80093e0:	0801d265 	.word	0x0801d265

080093e4 <__mcmp>:
 80093e4:	690a      	ldr	r2, [r1, #16]
 80093e6:	4603      	mov	r3, r0
 80093e8:	6900      	ldr	r0, [r0, #16]
 80093ea:	1a80      	subs	r0, r0, r2
 80093ec:	b530      	push	{r4, r5, lr}
 80093ee:	d10e      	bne.n	800940e <__mcmp+0x2a>
 80093f0:	3314      	adds	r3, #20
 80093f2:	3114      	adds	r1, #20
 80093f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80093f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80093fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009400:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009404:	4295      	cmp	r5, r2
 8009406:	d003      	beq.n	8009410 <__mcmp+0x2c>
 8009408:	d205      	bcs.n	8009416 <__mcmp+0x32>
 800940a:	f04f 30ff 	mov.w	r0, #4294967295
 800940e:	bd30      	pop	{r4, r5, pc}
 8009410:	42a3      	cmp	r3, r4
 8009412:	d3f3      	bcc.n	80093fc <__mcmp+0x18>
 8009414:	e7fb      	b.n	800940e <__mcmp+0x2a>
 8009416:	2001      	movs	r0, #1
 8009418:	e7f9      	b.n	800940e <__mcmp+0x2a>
	...

0800941c <__mdiff>:
 800941c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009420:	4689      	mov	r9, r1
 8009422:	4606      	mov	r6, r0
 8009424:	4611      	mov	r1, r2
 8009426:	4648      	mov	r0, r9
 8009428:	4614      	mov	r4, r2
 800942a:	f7ff ffdb 	bl	80093e4 <__mcmp>
 800942e:	1e05      	subs	r5, r0, #0
 8009430:	d112      	bne.n	8009458 <__mdiff+0x3c>
 8009432:	4629      	mov	r1, r5
 8009434:	4630      	mov	r0, r6
 8009436:	f7ff fd63 	bl	8008f00 <_Balloc>
 800943a:	4602      	mov	r2, r0
 800943c:	b928      	cbnz	r0, 800944a <__mdiff+0x2e>
 800943e:	4b3f      	ldr	r3, [pc, #252]	@ (800953c <__mdiff+0x120>)
 8009440:	f240 2137 	movw	r1, #567	@ 0x237
 8009444:	483e      	ldr	r0, [pc, #248]	@ (8009540 <__mdiff+0x124>)
 8009446:	f000 fb11 	bl	8009a6c <__assert_func>
 800944a:	2301      	movs	r3, #1
 800944c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009450:	4610      	mov	r0, r2
 8009452:	b003      	add	sp, #12
 8009454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009458:	bfbc      	itt	lt
 800945a:	464b      	movlt	r3, r9
 800945c:	46a1      	movlt	r9, r4
 800945e:	4630      	mov	r0, r6
 8009460:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009464:	bfba      	itte	lt
 8009466:	461c      	movlt	r4, r3
 8009468:	2501      	movlt	r5, #1
 800946a:	2500      	movge	r5, #0
 800946c:	f7ff fd48 	bl	8008f00 <_Balloc>
 8009470:	4602      	mov	r2, r0
 8009472:	b918      	cbnz	r0, 800947c <__mdiff+0x60>
 8009474:	4b31      	ldr	r3, [pc, #196]	@ (800953c <__mdiff+0x120>)
 8009476:	f240 2145 	movw	r1, #581	@ 0x245
 800947a:	e7e3      	b.n	8009444 <__mdiff+0x28>
 800947c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009480:	6926      	ldr	r6, [r4, #16]
 8009482:	60c5      	str	r5, [r0, #12]
 8009484:	f109 0310 	add.w	r3, r9, #16
 8009488:	f109 0514 	add.w	r5, r9, #20
 800948c:	f104 0e14 	add.w	lr, r4, #20
 8009490:	f100 0b14 	add.w	fp, r0, #20
 8009494:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009498:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800949c:	9301      	str	r3, [sp, #4]
 800949e:	46d9      	mov	r9, fp
 80094a0:	f04f 0c00 	mov.w	ip, #0
 80094a4:	9b01      	ldr	r3, [sp, #4]
 80094a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80094aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80094ae:	9301      	str	r3, [sp, #4]
 80094b0:	fa1f f38a 	uxth.w	r3, sl
 80094b4:	4619      	mov	r1, r3
 80094b6:	b283      	uxth	r3, r0
 80094b8:	1acb      	subs	r3, r1, r3
 80094ba:	0c00      	lsrs	r0, r0, #16
 80094bc:	4463      	add	r3, ip
 80094be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80094c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80094cc:	4576      	cmp	r6, lr
 80094ce:	f849 3b04 	str.w	r3, [r9], #4
 80094d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80094d6:	d8e5      	bhi.n	80094a4 <__mdiff+0x88>
 80094d8:	1b33      	subs	r3, r6, r4
 80094da:	3b15      	subs	r3, #21
 80094dc:	f023 0303 	bic.w	r3, r3, #3
 80094e0:	3415      	adds	r4, #21
 80094e2:	3304      	adds	r3, #4
 80094e4:	42a6      	cmp	r6, r4
 80094e6:	bf38      	it	cc
 80094e8:	2304      	movcc	r3, #4
 80094ea:	441d      	add	r5, r3
 80094ec:	445b      	add	r3, fp
 80094ee:	461e      	mov	r6, r3
 80094f0:	462c      	mov	r4, r5
 80094f2:	4544      	cmp	r4, r8
 80094f4:	d30e      	bcc.n	8009514 <__mdiff+0xf8>
 80094f6:	f108 0103 	add.w	r1, r8, #3
 80094fa:	1b49      	subs	r1, r1, r5
 80094fc:	f021 0103 	bic.w	r1, r1, #3
 8009500:	3d03      	subs	r5, #3
 8009502:	45a8      	cmp	r8, r5
 8009504:	bf38      	it	cc
 8009506:	2100      	movcc	r1, #0
 8009508:	440b      	add	r3, r1
 800950a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800950e:	b191      	cbz	r1, 8009536 <__mdiff+0x11a>
 8009510:	6117      	str	r7, [r2, #16]
 8009512:	e79d      	b.n	8009450 <__mdiff+0x34>
 8009514:	f854 1b04 	ldr.w	r1, [r4], #4
 8009518:	46e6      	mov	lr, ip
 800951a:	0c08      	lsrs	r0, r1, #16
 800951c:	fa1c fc81 	uxtah	ip, ip, r1
 8009520:	4471      	add	r1, lr
 8009522:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009526:	b289      	uxth	r1, r1
 8009528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800952c:	f846 1b04 	str.w	r1, [r6], #4
 8009530:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009534:	e7dd      	b.n	80094f2 <__mdiff+0xd6>
 8009536:	3f01      	subs	r7, #1
 8009538:	e7e7      	b.n	800950a <__mdiff+0xee>
 800953a:	bf00      	nop
 800953c:	0801d254 	.word	0x0801d254
 8009540:	0801d265 	.word	0x0801d265

08009544 <__d2b>:
 8009544:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009548:	460f      	mov	r7, r1
 800954a:	2101      	movs	r1, #1
 800954c:	ec59 8b10 	vmov	r8, r9, d0
 8009550:	4616      	mov	r6, r2
 8009552:	f7ff fcd5 	bl	8008f00 <_Balloc>
 8009556:	4604      	mov	r4, r0
 8009558:	b930      	cbnz	r0, 8009568 <__d2b+0x24>
 800955a:	4602      	mov	r2, r0
 800955c:	4b23      	ldr	r3, [pc, #140]	@ (80095ec <__d2b+0xa8>)
 800955e:	4824      	ldr	r0, [pc, #144]	@ (80095f0 <__d2b+0xac>)
 8009560:	f240 310f 	movw	r1, #783	@ 0x30f
 8009564:	f000 fa82 	bl	8009a6c <__assert_func>
 8009568:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800956c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009570:	b10d      	cbz	r5, 8009576 <__d2b+0x32>
 8009572:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009576:	9301      	str	r3, [sp, #4]
 8009578:	f1b8 0300 	subs.w	r3, r8, #0
 800957c:	d023      	beq.n	80095c6 <__d2b+0x82>
 800957e:	4668      	mov	r0, sp
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	f7ff fd84 	bl	800908e <__lo0bits>
 8009586:	e9dd 1200 	ldrd	r1, r2, [sp]
 800958a:	b1d0      	cbz	r0, 80095c2 <__d2b+0x7e>
 800958c:	f1c0 0320 	rsb	r3, r0, #32
 8009590:	fa02 f303 	lsl.w	r3, r2, r3
 8009594:	430b      	orrs	r3, r1
 8009596:	40c2      	lsrs	r2, r0
 8009598:	6163      	str	r3, [r4, #20]
 800959a:	9201      	str	r2, [sp, #4]
 800959c:	9b01      	ldr	r3, [sp, #4]
 800959e:	61a3      	str	r3, [r4, #24]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	bf0c      	ite	eq
 80095a4:	2201      	moveq	r2, #1
 80095a6:	2202      	movne	r2, #2
 80095a8:	6122      	str	r2, [r4, #16]
 80095aa:	b1a5      	cbz	r5, 80095d6 <__d2b+0x92>
 80095ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80095b0:	4405      	add	r5, r0
 80095b2:	603d      	str	r5, [r7, #0]
 80095b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80095b8:	6030      	str	r0, [r6, #0]
 80095ba:	4620      	mov	r0, r4
 80095bc:	b003      	add	sp, #12
 80095be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095c2:	6161      	str	r1, [r4, #20]
 80095c4:	e7ea      	b.n	800959c <__d2b+0x58>
 80095c6:	a801      	add	r0, sp, #4
 80095c8:	f7ff fd61 	bl	800908e <__lo0bits>
 80095cc:	9b01      	ldr	r3, [sp, #4]
 80095ce:	6163      	str	r3, [r4, #20]
 80095d0:	3020      	adds	r0, #32
 80095d2:	2201      	movs	r2, #1
 80095d4:	e7e8      	b.n	80095a8 <__d2b+0x64>
 80095d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80095da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80095de:	6038      	str	r0, [r7, #0]
 80095e0:	6918      	ldr	r0, [r3, #16]
 80095e2:	f7ff fd35 	bl	8009050 <__hi0bits>
 80095e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80095ea:	e7e5      	b.n	80095b8 <__d2b+0x74>
 80095ec:	0801d254 	.word	0x0801d254
 80095f0:	0801d265 	.word	0x0801d265

080095f4 <__ssputs_r>:
 80095f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095f8:	688e      	ldr	r6, [r1, #8]
 80095fa:	461f      	mov	r7, r3
 80095fc:	42be      	cmp	r6, r7
 80095fe:	680b      	ldr	r3, [r1, #0]
 8009600:	4682      	mov	sl, r0
 8009602:	460c      	mov	r4, r1
 8009604:	4690      	mov	r8, r2
 8009606:	d82d      	bhi.n	8009664 <__ssputs_r+0x70>
 8009608:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800960c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009610:	d026      	beq.n	8009660 <__ssputs_r+0x6c>
 8009612:	6965      	ldr	r5, [r4, #20]
 8009614:	6909      	ldr	r1, [r1, #16]
 8009616:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800961a:	eba3 0901 	sub.w	r9, r3, r1
 800961e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009622:	1c7b      	adds	r3, r7, #1
 8009624:	444b      	add	r3, r9
 8009626:	106d      	asrs	r5, r5, #1
 8009628:	429d      	cmp	r5, r3
 800962a:	bf38      	it	cc
 800962c:	461d      	movcc	r5, r3
 800962e:	0553      	lsls	r3, r2, #21
 8009630:	d527      	bpl.n	8009682 <__ssputs_r+0x8e>
 8009632:	4629      	mov	r1, r5
 8009634:	f7ff fbd8 	bl	8008de8 <_malloc_r>
 8009638:	4606      	mov	r6, r0
 800963a:	b360      	cbz	r0, 8009696 <__ssputs_r+0xa2>
 800963c:	6921      	ldr	r1, [r4, #16]
 800963e:	464a      	mov	r2, r9
 8009640:	f000 fa06 	bl	8009a50 <memcpy>
 8009644:	89a3      	ldrh	r3, [r4, #12]
 8009646:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800964a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800964e:	81a3      	strh	r3, [r4, #12]
 8009650:	6126      	str	r6, [r4, #16]
 8009652:	6165      	str	r5, [r4, #20]
 8009654:	444e      	add	r6, r9
 8009656:	eba5 0509 	sub.w	r5, r5, r9
 800965a:	6026      	str	r6, [r4, #0]
 800965c:	60a5      	str	r5, [r4, #8]
 800965e:	463e      	mov	r6, r7
 8009660:	42be      	cmp	r6, r7
 8009662:	d900      	bls.n	8009666 <__ssputs_r+0x72>
 8009664:	463e      	mov	r6, r7
 8009666:	6820      	ldr	r0, [r4, #0]
 8009668:	4632      	mov	r2, r6
 800966a:	4641      	mov	r1, r8
 800966c:	f000 f9c6 	bl	80099fc <memmove>
 8009670:	68a3      	ldr	r3, [r4, #8]
 8009672:	1b9b      	subs	r3, r3, r6
 8009674:	60a3      	str	r3, [r4, #8]
 8009676:	6823      	ldr	r3, [r4, #0]
 8009678:	4433      	add	r3, r6
 800967a:	6023      	str	r3, [r4, #0]
 800967c:	2000      	movs	r0, #0
 800967e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009682:	462a      	mov	r2, r5
 8009684:	f000 fa36 	bl	8009af4 <_realloc_r>
 8009688:	4606      	mov	r6, r0
 800968a:	2800      	cmp	r0, #0
 800968c:	d1e0      	bne.n	8009650 <__ssputs_r+0x5c>
 800968e:	6921      	ldr	r1, [r4, #16]
 8009690:	4650      	mov	r0, sl
 8009692:	f7ff fb35 	bl	8008d00 <_free_r>
 8009696:	230c      	movs	r3, #12
 8009698:	f8ca 3000 	str.w	r3, [sl]
 800969c:	89a3      	ldrh	r3, [r4, #12]
 800969e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096a2:	81a3      	strh	r3, [r4, #12]
 80096a4:	f04f 30ff 	mov.w	r0, #4294967295
 80096a8:	e7e9      	b.n	800967e <__ssputs_r+0x8a>
	...

080096ac <_svfiprintf_r>:
 80096ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b0:	4698      	mov	r8, r3
 80096b2:	898b      	ldrh	r3, [r1, #12]
 80096b4:	061b      	lsls	r3, r3, #24
 80096b6:	b09d      	sub	sp, #116	@ 0x74
 80096b8:	4607      	mov	r7, r0
 80096ba:	460d      	mov	r5, r1
 80096bc:	4614      	mov	r4, r2
 80096be:	d510      	bpl.n	80096e2 <_svfiprintf_r+0x36>
 80096c0:	690b      	ldr	r3, [r1, #16]
 80096c2:	b973      	cbnz	r3, 80096e2 <_svfiprintf_r+0x36>
 80096c4:	2140      	movs	r1, #64	@ 0x40
 80096c6:	f7ff fb8f 	bl	8008de8 <_malloc_r>
 80096ca:	6028      	str	r0, [r5, #0]
 80096cc:	6128      	str	r0, [r5, #16]
 80096ce:	b930      	cbnz	r0, 80096de <_svfiprintf_r+0x32>
 80096d0:	230c      	movs	r3, #12
 80096d2:	603b      	str	r3, [r7, #0]
 80096d4:	f04f 30ff 	mov.w	r0, #4294967295
 80096d8:	b01d      	add	sp, #116	@ 0x74
 80096da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096de:	2340      	movs	r3, #64	@ 0x40
 80096e0:	616b      	str	r3, [r5, #20]
 80096e2:	2300      	movs	r3, #0
 80096e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80096e6:	2320      	movs	r3, #32
 80096e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80096ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80096f0:	2330      	movs	r3, #48	@ 0x30
 80096f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009890 <_svfiprintf_r+0x1e4>
 80096f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096fa:	f04f 0901 	mov.w	r9, #1
 80096fe:	4623      	mov	r3, r4
 8009700:	469a      	mov	sl, r3
 8009702:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009706:	b10a      	cbz	r2, 800970c <_svfiprintf_r+0x60>
 8009708:	2a25      	cmp	r2, #37	@ 0x25
 800970a:	d1f9      	bne.n	8009700 <_svfiprintf_r+0x54>
 800970c:	ebba 0b04 	subs.w	fp, sl, r4
 8009710:	d00b      	beq.n	800972a <_svfiprintf_r+0x7e>
 8009712:	465b      	mov	r3, fp
 8009714:	4622      	mov	r2, r4
 8009716:	4629      	mov	r1, r5
 8009718:	4638      	mov	r0, r7
 800971a:	f7ff ff6b 	bl	80095f4 <__ssputs_r>
 800971e:	3001      	adds	r0, #1
 8009720:	f000 80a7 	beq.w	8009872 <_svfiprintf_r+0x1c6>
 8009724:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009726:	445a      	add	r2, fp
 8009728:	9209      	str	r2, [sp, #36]	@ 0x24
 800972a:	f89a 3000 	ldrb.w	r3, [sl]
 800972e:	2b00      	cmp	r3, #0
 8009730:	f000 809f 	beq.w	8009872 <_svfiprintf_r+0x1c6>
 8009734:	2300      	movs	r3, #0
 8009736:	f04f 32ff 	mov.w	r2, #4294967295
 800973a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800973e:	f10a 0a01 	add.w	sl, sl, #1
 8009742:	9304      	str	r3, [sp, #16]
 8009744:	9307      	str	r3, [sp, #28]
 8009746:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800974a:	931a      	str	r3, [sp, #104]	@ 0x68
 800974c:	4654      	mov	r4, sl
 800974e:	2205      	movs	r2, #5
 8009750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009754:	484e      	ldr	r0, [pc, #312]	@ (8009890 <_svfiprintf_r+0x1e4>)
 8009756:	f7f6 fd3b 	bl	80001d0 <memchr>
 800975a:	9a04      	ldr	r2, [sp, #16]
 800975c:	b9d8      	cbnz	r0, 8009796 <_svfiprintf_r+0xea>
 800975e:	06d0      	lsls	r0, r2, #27
 8009760:	bf44      	itt	mi
 8009762:	2320      	movmi	r3, #32
 8009764:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009768:	0711      	lsls	r1, r2, #28
 800976a:	bf44      	itt	mi
 800976c:	232b      	movmi	r3, #43	@ 0x2b
 800976e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009772:	f89a 3000 	ldrb.w	r3, [sl]
 8009776:	2b2a      	cmp	r3, #42	@ 0x2a
 8009778:	d015      	beq.n	80097a6 <_svfiprintf_r+0xfa>
 800977a:	9a07      	ldr	r2, [sp, #28]
 800977c:	4654      	mov	r4, sl
 800977e:	2000      	movs	r0, #0
 8009780:	f04f 0c0a 	mov.w	ip, #10
 8009784:	4621      	mov	r1, r4
 8009786:	f811 3b01 	ldrb.w	r3, [r1], #1
 800978a:	3b30      	subs	r3, #48	@ 0x30
 800978c:	2b09      	cmp	r3, #9
 800978e:	d94b      	bls.n	8009828 <_svfiprintf_r+0x17c>
 8009790:	b1b0      	cbz	r0, 80097c0 <_svfiprintf_r+0x114>
 8009792:	9207      	str	r2, [sp, #28]
 8009794:	e014      	b.n	80097c0 <_svfiprintf_r+0x114>
 8009796:	eba0 0308 	sub.w	r3, r0, r8
 800979a:	fa09 f303 	lsl.w	r3, r9, r3
 800979e:	4313      	orrs	r3, r2
 80097a0:	9304      	str	r3, [sp, #16]
 80097a2:	46a2      	mov	sl, r4
 80097a4:	e7d2      	b.n	800974c <_svfiprintf_r+0xa0>
 80097a6:	9b03      	ldr	r3, [sp, #12]
 80097a8:	1d19      	adds	r1, r3, #4
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	9103      	str	r1, [sp, #12]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	bfbb      	ittet	lt
 80097b2:	425b      	neglt	r3, r3
 80097b4:	f042 0202 	orrlt.w	r2, r2, #2
 80097b8:	9307      	strge	r3, [sp, #28]
 80097ba:	9307      	strlt	r3, [sp, #28]
 80097bc:	bfb8      	it	lt
 80097be:	9204      	strlt	r2, [sp, #16]
 80097c0:	7823      	ldrb	r3, [r4, #0]
 80097c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80097c4:	d10a      	bne.n	80097dc <_svfiprintf_r+0x130>
 80097c6:	7863      	ldrb	r3, [r4, #1]
 80097c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80097ca:	d132      	bne.n	8009832 <_svfiprintf_r+0x186>
 80097cc:	9b03      	ldr	r3, [sp, #12]
 80097ce:	1d1a      	adds	r2, r3, #4
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	9203      	str	r2, [sp, #12]
 80097d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80097d8:	3402      	adds	r4, #2
 80097da:	9305      	str	r3, [sp, #20]
 80097dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80098a0 <_svfiprintf_r+0x1f4>
 80097e0:	7821      	ldrb	r1, [r4, #0]
 80097e2:	2203      	movs	r2, #3
 80097e4:	4650      	mov	r0, sl
 80097e6:	f7f6 fcf3 	bl	80001d0 <memchr>
 80097ea:	b138      	cbz	r0, 80097fc <_svfiprintf_r+0x150>
 80097ec:	9b04      	ldr	r3, [sp, #16]
 80097ee:	eba0 000a 	sub.w	r0, r0, sl
 80097f2:	2240      	movs	r2, #64	@ 0x40
 80097f4:	4082      	lsls	r2, r0
 80097f6:	4313      	orrs	r3, r2
 80097f8:	3401      	adds	r4, #1
 80097fa:	9304      	str	r3, [sp, #16]
 80097fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009800:	4824      	ldr	r0, [pc, #144]	@ (8009894 <_svfiprintf_r+0x1e8>)
 8009802:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009806:	2206      	movs	r2, #6
 8009808:	f7f6 fce2 	bl	80001d0 <memchr>
 800980c:	2800      	cmp	r0, #0
 800980e:	d036      	beq.n	800987e <_svfiprintf_r+0x1d2>
 8009810:	4b21      	ldr	r3, [pc, #132]	@ (8009898 <_svfiprintf_r+0x1ec>)
 8009812:	bb1b      	cbnz	r3, 800985c <_svfiprintf_r+0x1b0>
 8009814:	9b03      	ldr	r3, [sp, #12]
 8009816:	3307      	adds	r3, #7
 8009818:	f023 0307 	bic.w	r3, r3, #7
 800981c:	3308      	adds	r3, #8
 800981e:	9303      	str	r3, [sp, #12]
 8009820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009822:	4433      	add	r3, r6
 8009824:	9309      	str	r3, [sp, #36]	@ 0x24
 8009826:	e76a      	b.n	80096fe <_svfiprintf_r+0x52>
 8009828:	fb0c 3202 	mla	r2, ip, r2, r3
 800982c:	460c      	mov	r4, r1
 800982e:	2001      	movs	r0, #1
 8009830:	e7a8      	b.n	8009784 <_svfiprintf_r+0xd8>
 8009832:	2300      	movs	r3, #0
 8009834:	3401      	adds	r4, #1
 8009836:	9305      	str	r3, [sp, #20]
 8009838:	4619      	mov	r1, r3
 800983a:	f04f 0c0a 	mov.w	ip, #10
 800983e:	4620      	mov	r0, r4
 8009840:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009844:	3a30      	subs	r2, #48	@ 0x30
 8009846:	2a09      	cmp	r2, #9
 8009848:	d903      	bls.n	8009852 <_svfiprintf_r+0x1a6>
 800984a:	2b00      	cmp	r3, #0
 800984c:	d0c6      	beq.n	80097dc <_svfiprintf_r+0x130>
 800984e:	9105      	str	r1, [sp, #20]
 8009850:	e7c4      	b.n	80097dc <_svfiprintf_r+0x130>
 8009852:	fb0c 2101 	mla	r1, ip, r1, r2
 8009856:	4604      	mov	r4, r0
 8009858:	2301      	movs	r3, #1
 800985a:	e7f0      	b.n	800983e <_svfiprintf_r+0x192>
 800985c:	ab03      	add	r3, sp, #12
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	462a      	mov	r2, r5
 8009862:	4b0e      	ldr	r3, [pc, #56]	@ (800989c <_svfiprintf_r+0x1f0>)
 8009864:	a904      	add	r1, sp, #16
 8009866:	4638      	mov	r0, r7
 8009868:	f7fd fe94 	bl	8007594 <_printf_float>
 800986c:	1c42      	adds	r2, r0, #1
 800986e:	4606      	mov	r6, r0
 8009870:	d1d6      	bne.n	8009820 <_svfiprintf_r+0x174>
 8009872:	89ab      	ldrh	r3, [r5, #12]
 8009874:	065b      	lsls	r3, r3, #25
 8009876:	f53f af2d 	bmi.w	80096d4 <_svfiprintf_r+0x28>
 800987a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800987c:	e72c      	b.n	80096d8 <_svfiprintf_r+0x2c>
 800987e:	ab03      	add	r3, sp, #12
 8009880:	9300      	str	r3, [sp, #0]
 8009882:	462a      	mov	r2, r5
 8009884:	4b05      	ldr	r3, [pc, #20]	@ (800989c <_svfiprintf_r+0x1f0>)
 8009886:	a904      	add	r1, sp, #16
 8009888:	4638      	mov	r0, r7
 800988a:	f7fe f91b 	bl	8007ac4 <_printf_i>
 800988e:	e7ed      	b.n	800986c <_svfiprintf_r+0x1c0>
 8009890:	0801d2be 	.word	0x0801d2be
 8009894:	0801d2c8 	.word	0x0801d2c8
 8009898:	08007595 	.word	0x08007595
 800989c:	080095f5 	.word	0x080095f5
 80098a0:	0801d2c4 	.word	0x0801d2c4

080098a4 <__sflush_r>:
 80098a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80098a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ac:	0716      	lsls	r6, r2, #28
 80098ae:	4605      	mov	r5, r0
 80098b0:	460c      	mov	r4, r1
 80098b2:	d454      	bmi.n	800995e <__sflush_r+0xba>
 80098b4:	684b      	ldr	r3, [r1, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	dc02      	bgt.n	80098c0 <__sflush_r+0x1c>
 80098ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80098bc:	2b00      	cmp	r3, #0
 80098be:	dd48      	ble.n	8009952 <__sflush_r+0xae>
 80098c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098c2:	2e00      	cmp	r6, #0
 80098c4:	d045      	beq.n	8009952 <__sflush_r+0xae>
 80098c6:	2300      	movs	r3, #0
 80098c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80098cc:	682f      	ldr	r7, [r5, #0]
 80098ce:	6a21      	ldr	r1, [r4, #32]
 80098d0:	602b      	str	r3, [r5, #0]
 80098d2:	d030      	beq.n	8009936 <__sflush_r+0x92>
 80098d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80098d6:	89a3      	ldrh	r3, [r4, #12]
 80098d8:	0759      	lsls	r1, r3, #29
 80098da:	d505      	bpl.n	80098e8 <__sflush_r+0x44>
 80098dc:	6863      	ldr	r3, [r4, #4]
 80098de:	1ad2      	subs	r2, r2, r3
 80098e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80098e2:	b10b      	cbz	r3, 80098e8 <__sflush_r+0x44>
 80098e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80098e6:	1ad2      	subs	r2, r2, r3
 80098e8:	2300      	movs	r3, #0
 80098ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098ec:	6a21      	ldr	r1, [r4, #32]
 80098ee:	4628      	mov	r0, r5
 80098f0:	47b0      	blx	r6
 80098f2:	1c43      	adds	r3, r0, #1
 80098f4:	89a3      	ldrh	r3, [r4, #12]
 80098f6:	d106      	bne.n	8009906 <__sflush_r+0x62>
 80098f8:	6829      	ldr	r1, [r5, #0]
 80098fa:	291d      	cmp	r1, #29
 80098fc:	d82b      	bhi.n	8009956 <__sflush_r+0xb2>
 80098fe:	4a2a      	ldr	r2, [pc, #168]	@ (80099a8 <__sflush_r+0x104>)
 8009900:	40ca      	lsrs	r2, r1
 8009902:	07d6      	lsls	r6, r2, #31
 8009904:	d527      	bpl.n	8009956 <__sflush_r+0xb2>
 8009906:	2200      	movs	r2, #0
 8009908:	6062      	str	r2, [r4, #4]
 800990a:	04d9      	lsls	r1, r3, #19
 800990c:	6922      	ldr	r2, [r4, #16]
 800990e:	6022      	str	r2, [r4, #0]
 8009910:	d504      	bpl.n	800991c <__sflush_r+0x78>
 8009912:	1c42      	adds	r2, r0, #1
 8009914:	d101      	bne.n	800991a <__sflush_r+0x76>
 8009916:	682b      	ldr	r3, [r5, #0]
 8009918:	b903      	cbnz	r3, 800991c <__sflush_r+0x78>
 800991a:	6560      	str	r0, [r4, #84]	@ 0x54
 800991c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800991e:	602f      	str	r7, [r5, #0]
 8009920:	b1b9      	cbz	r1, 8009952 <__sflush_r+0xae>
 8009922:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009926:	4299      	cmp	r1, r3
 8009928:	d002      	beq.n	8009930 <__sflush_r+0x8c>
 800992a:	4628      	mov	r0, r5
 800992c:	f7ff f9e8 	bl	8008d00 <_free_r>
 8009930:	2300      	movs	r3, #0
 8009932:	6363      	str	r3, [r4, #52]	@ 0x34
 8009934:	e00d      	b.n	8009952 <__sflush_r+0xae>
 8009936:	2301      	movs	r3, #1
 8009938:	4628      	mov	r0, r5
 800993a:	47b0      	blx	r6
 800993c:	4602      	mov	r2, r0
 800993e:	1c50      	adds	r0, r2, #1
 8009940:	d1c9      	bne.n	80098d6 <__sflush_r+0x32>
 8009942:	682b      	ldr	r3, [r5, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d0c6      	beq.n	80098d6 <__sflush_r+0x32>
 8009948:	2b1d      	cmp	r3, #29
 800994a:	d001      	beq.n	8009950 <__sflush_r+0xac>
 800994c:	2b16      	cmp	r3, #22
 800994e:	d11e      	bne.n	800998e <__sflush_r+0xea>
 8009950:	602f      	str	r7, [r5, #0]
 8009952:	2000      	movs	r0, #0
 8009954:	e022      	b.n	800999c <__sflush_r+0xf8>
 8009956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800995a:	b21b      	sxth	r3, r3
 800995c:	e01b      	b.n	8009996 <__sflush_r+0xf2>
 800995e:	690f      	ldr	r7, [r1, #16]
 8009960:	2f00      	cmp	r7, #0
 8009962:	d0f6      	beq.n	8009952 <__sflush_r+0xae>
 8009964:	0793      	lsls	r3, r2, #30
 8009966:	680e      	ldr	r6, [r1, #0]
 8009968:	bf08      	it	eq
 800996a:	694b      	ldreq	r3, [r1, #20]
 800996c:	600f      	str	r7, [r1, #0]
 800996e:	bf18      	it	ne
 8009970:	2300      	movne	r3, #0
 8009972:	eba6 0807 	sub.w	r8, r6, r7
 8009976:	608b      	str	r3, [r1, #8]
 8009978:	f1b8 0f00 	cmp.w	r8, #0
 800997c:	dde9      	ble.n	8009952 <__sflush_r+0xae>
 800997e:	6a21      	ldr	r1, [r4, #32]
 8009980:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009982:	4643      	mov	r3, r8
 8009984:	463a      	mov	r2, r7
 8009986:	4628      	mov	r0, r5
 8009988:	47b0      	blx	r6
 800998a:	2800      	cmp	r0, #0
 800998c:	dc08      	bgt.n	80099a0 <__sflush_r+0xfc>
 800998e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009996:	81a3      	strh	r3, [r4, #12]
 8009998:	f04f 30ff 	mov.w	r0, #4294967295
 800999c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099a0:	4407      	add	r7, r0
 80099a2:	eba8 0800 	sub.w	r8, r8, r0
 80099a6:	e7e7      	b.n	8009978 <__sflush_r+0xd4>
 80099a8:	20400001 	.word	0x20400001

080099ac <_fflush_r>:
 80099ac:	b538      	push	{r3, r4, r5, lr}
 80099ae:	690b      	ldr	r3, [r1, #16]
 80099b0:	4605      	mov	r5, r0
 80099b2:	460c      	mov	r4, r1
 80099b4:	b913      	cbnz	r3, 80099bc <_fflush_r+0x10>
 80099b6:	2500      	movs	r5, #0
 80099b8:	4628      	mov	r0, r5
 80099ba:	bd38      	pop	{r3, r4, r5, pc}
 80099bc:	b118      	cbz	r0, 80099c6 <_fflush_r+0x1a>
 80099be:	6a03      	ldr	r3, [r0, #32]
 80099c0:	b90b      	cbnz	r3, 80099c6 <_fflush_r+0x1a>
 80099c2:	f7fe fa29 	bl	8007e18 <__sinit>
 80099c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d0f3      	beq.n	80099b6 <_fflush_r+0xa>
 80099ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80099d0:	07d0      	lsls	r0, r2, #31
 80099d2:	d404      	bmi.n	80099de <_fflush_r+0x32>
 80099d4:	0599      	lsls	r1, r3, #22
 80099d6:	d402      	bmi.n	80099de <_fflush_r+0x32>
 80099d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099da:	f7fe fb36 	bl	800804a <__retarget_lock_acquire_recursive>
 80099de:	4628      	mov	r0, r5
 80099e0:	4621      	mov	r1, r4
 80099e2:	f7ff ff5f 	bl	80098a4 <__sflush_r>
 80099e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099e8:	07da      	lsls	r2, r3, #31
 80099ea:	4605      	mov	r5, r0
 80099ec:	d4e4      	bmi.n	80099b8 <_fflush_r+0xc>
 80099ee:	89a3      	ldrh	r3, [r4, #12]
 80099f0:	059b      	lsls	r3, r3, #22
 80099f2:	d4e1      	bmi.n	80099b8 <_fflush_r+0xc>
 80099f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099f6:	f7fe fb29 	bl	800804c <__retarget_lock_release_recursive>
 80099fa:	e7dd      	b.n	80099b8 <_fflush_r+0xc>

080099fc <memmove>:
 80099fc:	4288      	cmp	r0, r1
 80099fe:	b510      	push	{r4, lr}
 8009a00:	eb01 0402 	add.w	r4, r1, r2
 8009a04:	d902      	bls.n	8009a0c <memmove+0x10>
 8009a06:	4284      	cmp	r4, r0
 8009a08:	4623      	mov	r3, r4
 8009a0a:	d807      	bhi.n	8009a1c <memmove+0x20>
 8009a0c:	1e43      	subs	r3, r0, #1
 8009a0e:	42a1      	cmp	r1, r4
 8009a10:	d008      	beq.n	8009a24 <memmove+0x28>
 8009a12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a1a:	e7f8      	b.n	8009a0e <memmove+0x12>
 8009a1c:	4402      	add	r2, r0
 8009a1e:	4601      	mov	r1, r0
 8009a20:	428a      	cmp	r2, r1
 8009a22:	d100      	bne.n	8009a26 <memmove+0x2a>
 8009a24:	bd10      	pop	{r4, pc}
 8009a26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a2e:	e7f7      	b.n	8009a20 <memmove+0x24>

08009a30 <_sbrk_r>:
 8009a30:	b538      	push	{r3, r4, r5, lr}
 8009a32:	4d06      	ldr	r5, [pc, #24]	@ (8009a4c <_sbrk_r+0x1c>)
 8009a34:	2300      	movs	r3, #0
 8009a36:	4604      	mov	r4, r0
 8009a38:	4608      	mov	r0, r1
 8009a3a:	602b      	str	r3, [r5, #0]
 8009a3c:	f7f8 f918 	bl	8001c70 <_sbrk>
 8009a40:	1c43      	adds	r3, r0, #1
 8009a42:	d102      	bne.n	8009a4a <_sbrk_r+0x1a>
 8009a44:	682b      	ldr	r3, [r5, #0]
 8009a46:	b103      	cbz	r3, 8009a4a <_sbrk_r+0x1a>
 8009a48:	6023      	str	r3, [r4, #0]
 8009a4a:	bd38      	pop	{r3, r4, r5, pc}
 8009a4c:	20006570 	.word	0x20006570

08009a50 <memcpy>:
 8009a50:	440a      	add	r2, r1
 8009a52:	4291      	cmp	r1, r2
 8009a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a58:	d100      	bne.n	8009a5c <memcpy+0xc>
 8009a5a:	4770      	bx	lr
 8009a5c:	b510      	push	{r4, lr}
 8009a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a66:	4291      	cmp	r1, r2
 8009a68:	d1f9      	bne.n	8009a5e <memcpy+0xe>
 8009a6a:	bd10      	pop	{r4, pc}

08009a6c <__assert_func>:
 8009a6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a6e:	4614      	mov	r4, r2
 8009a70:	461a      	mov	r2, r3
 8009a72:	4b09      	ldr	r3, [pc, #36]	@ (8009a98 <__assert_func+0x2c>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4605      	mov	r5, r0
 8009a78:	68d8      	ldr	r0, [r3, #12]
 8009a7a:	b14c      	cbz	r4, 8009a90 <__assert_func+0x24>
 8009a7c:	4b07      	ldr	r3, [pc, #28]	@ (8009a9c <__assert_func+0x30>)
 8009a7e:	9100      	str	r1, [sp, #0]
 8009a80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a84:	4906      	ldr	r1, [pc, #24]	@ (8009aa0 <__assert_func+0x34>)
 8009a86:	462b      	mov	r3, r5
 8009a88:	f000 f870 	bl	8009b6c <fiprintf>
 8009a8c:	f000 f880 	bl	8009b90 <abort>
 8009a90:	4b04      	ldr	r3, [pc, #16]	@ (8009aa4 <__assert_func+0x38>)
 8009a92:	461c      	mov	r4, r3
 8009a94:	e7f3      	b.n	8009a7e <__assert_func+0x12>
 8009a96:	bf00      	nop
 8009a98:	20000020 	.word	0x20000020
 8009a9c:	0801d2d9 	.word	0x0801d2d9
 8009aa0:	0801d2e6 	.word	0x0801d2e6
 8009aa4:	0801d314 	.word	0x0801d314

08009aa8 <_calloc_r>:
 8009aa8:	b570      	push	{r4, r5, r6, lr}
 8009aaa:	fba1 5402 	umull	r5, r4, r1, r2
 8009aae:	b934      	cbnz	r4, 8009abe <_calloc_r+0x16>
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	f7ff f999 	bl	8008de8 <_malloc_r>
 8009ab6:	4606      	mov	r6, r0
 8009ab8:	b928      	cbnz	r0, 8009ac6 <_calloc_r+0x1e>
 8009aba:	4630      	mov	r0, r6
 8009abc:	bd70      	pop	{r4, r5, r6, pc}
 8009abe:	220c      	movs	r2, #12
 8009ac0:	6002      	str	r2, [r0, #0]
 8009ac2:	2600      	movs	r6, #0
 8009ac4:	e7f9      	b.n	8009aba <_calloc_r+0x12>
 8009ac6:	462a      	mov	r2, r5
 8009ac8:	4621      	mov	r1, r4
 8009aca:	f7fe fa40 	bl	8007f4e <memset>
 8009ace:	e7f4      	b.n	8009aba <_calloc_r+0x12>

08009ad0 <__ascii_mbtowc>:
 8009ad0:	b082      	sub	sp, #8
 8009ad2:	b901      	cbnz	r1, 8009ad6 <__ascii_mbtowc+0x6>
 8009ad4:	a901      	add	r1, sp, #4
 8009ad6:	b142      	cbz	r2, 8009aea <__ascii_mbtowc+0x1a>
 8009ad8:	b14b      	cbz	r3, 8009aee <__ascii_mbtowc+0x1e>
 8009ada:	7813      	ldrb	r3, [r2, #0]
 8009adc:	600b      	str	r3, [r1, #0]
 8009ade:	7812      	ldrb	r2, [r2, #0]
 8009ae0:	1e10      	subs	r0, r2, #0
 8009ae2:	bf18      	it	ne
 8009ae4:	2001      	movne	r0, #1
 8009ae6:	b002      	add	sp, #8
 8009ae8:	4770      	bx	lr
 8009aea:	4610      	mov	r0, r2
 8009aec:	e7fb      	b.n	8009ae6 <__ascii_mbtowc+0x16>
 8009aee:	f06f 0001 	mvn.w	r0, #1
 8009af2:	e7f8      	b.n	8009ae6 <__ascii_mbtowc+0x16>

08009af4 <_realloc_r>:
 8009af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009af8:	4607      	mov	r7, r0
 8009afa:	4614      	mov	r4, r2
 8009afc:	460d      	mov	r5, r1
 8009afe:	b921      	cbnz	r1, 8009b0a <_realloc_r+0x16>
 8009b00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b04:	4611      	mov	r1, r2
 8009b06:	f7ff b96f 	b.w	8008de8 <_malloc_r>
 8009b0a:	b92a      	cbnz	r2, 8009b18 <_realloc_r+0x24>
 8009b0c:	f7ff f8f8 	bl	8008d00 <_free_r>
 8009b10:	4625      	mov	r5, r4
 8009b12:	4628      	mov	r0, r5
 8009b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b18:	f000 f841 	bl	8009b9e <_malloc_usable_size_r>
 8009b1c:	4284      	cmp	r4, r0
 8009b1e:	4606      	mov	r6, r0
 8009b20:	d802      	bhi.n	8009b28 <_realloc_r+0x34>
 8009b22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b26:	d8f4      	bhi.n	8009b12 <_realloc_r+0x1e>
 8009b28:	4621      	mov	r1, r4
 8009b2a:	4638      	mov	r0, r7
 8009b2c:	f7ff f95c 	bl	8008de8 <_malloc_r>
 8009b30:	4680      	mov	r8, r0
 8009b32:	b908      	cbnz	r0, 8009b38 <_realloc_r+0x44>
 8009b34:	4645      	mov	r5, r8
 8009b36:	e7ec      	b.n	8009b12 <_realloc_r+0x1e>
 8009b38:	42b4      	cmp	r4, r6
 8009b3a:	4622      	mov	r2, r4
 8009b3c:	4629      	mov	r1, r5
 8009b3e:	bf28      	it	cs
 8009b40:	4632      	movcs	r2, r6
 8009b42:	f7ff ff85 	bl	8009a50 <memcpy>
 8009b46:	4629      	mov	r1, r5
 8009b48:	4638      	mov	r0, r7
 8009b4a:	f7ff f8d9 	bl	8008d00 <_free_r>
 8009b4e:	e7f1      	b.n	8009b34 <_realloc_r+0x40>

08009b50 <__ascii_wctomb>:
 8009b50:	4603      	mov	r3, r0
 8009b52:	4608      	mov	r0, r1
 8009b54:	b141      	cbz	r1, 8009b68 <__ascii_wctomb+0x18>
 8009b56:	2aff      	cmp	r2, #255	@ 0xff
 8009b58:	d904      	bls.n	8009b64 <__ascii_wctomb+0x14>
 8009b5a:	228a      	movs	r2, #138	@ 0x8a
 8009b5c:	601a      	str	r2, [r3, #0]
 8009b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b62:	4770      	bx	lr
 8009b64:	700a      	strb	r2, [r1, #0]
 8009b66:	2001      	movs	r0, #1
 8009b68:	4770      	bx	lr
	...

08009b6c <fiprintf>:
 8009b6c:	b40e      	push	{r1, r2, r3}
 8009b6e:	b503      	push	{r0, r1, lr}
 8009b70:	4601      	mov	r1, r0
 8009b72:	ab03      	add	r3, sp, #12
 8009b74:	4805      	ldr	r0, [pc, #20]	@ (8009b8c <fiprintf+0x20>)
 8009b76:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b7a:	6800      	ldr	r0, [r0, #0]
 8009b7c:	9301      	str	r3, [sp, #4]
 8009b7e:	f000 f83f 	bl	8009c00 <_vfiprintf_r>
 8009b82:	b002      	add	sp, #8
 8009b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b88:	b003      	add	sp, #12
 8009b8a:	4770      	bx	lr
 8009b8c:	20000020 	.word	0x20000020

08009b90 <abort>:
 8009b90:	b508      	push	{r3, lr}
 8009b92:	2006      	movs	r0, #6
 8009b94:	f000 fa08 	bl	8009fa8 <raise>
 8009b98:	2001      	movs	r0, #1
 8009b9a:	f7f7 fff1 	bl	8001b80 <_exit>

08009b9e <_malloc_usable_size_r>:
 8009b9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ba2:	1f18      	subs	r0, r3, #4
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	bfbc      	itt	lt
 8009ba8:	580b      	ldrlt	r3, [r1, r0]
 8009baa:	18c0      	addlt	r0, r0, r3
 8009bac:	4770      	bx	lr

08009bae <__sfputc_r>:
 8009bae:	6893      	ldr	r3, [r2, #8]
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	b410      	push	{r4}
 8009bb6:	6093      	str	r3, [r2, #8]
 8009bb8:	da08      	bge.n	8009bcc <__sfputc_r+0x1e>
 8009bba:	6994      	ldr	r4, [r2, #24]
 8009bbc:	42a3      	cmp	r3, r4
 8009bbe:	db01      	blt.n	8009bc4 <__sfputc_r+0x16>
 8009bc0:	290a      	cmp	r1, #10
 8009bc2:	d103      	bne.n	8009bcc <__sfputc_r+0x1e>
 8009bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bc8:	f000 b932 	b.w	8009e30 <__swbuf_r>
 8009bcc:	6813      	ldr	r3, [r2, #0]
 8009bce:	1c58      	adds	r0, r3, #1
 8009bd0:	6010      	str	r0, [r2, #0]
 8009bd2:	7019      	strb	r1, [r3, #0]
 8009bd4:	4608      	mov	r0, r1
 8009bd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <__sfputs_r>:
 8009bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bde:	4606      	mov	r6, r0
 8009be0:	460f      	mov	r7, r1
 8009be2:	4614      	mov	r4, r2
 8009be4:	18d5      	adds	r5, r2, r3
 8009be6:	42ac      	cmp	r4, r5
 8009be8:	d101      	bne.n	8009bee <__sfputs_r+0x12>
 8009bea:	2000      	movs	r0, #0
 8009bec:	e007      	b.n	8009bfe <__sfputs_r+0x22>
 8009bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bf2:	463a      	mov	r2, r7
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	f7ff ffda 	bl	8009bae <__sfputc_r>
 8009bfa:	1c43      	adds	r3, r0, #1
 8009bfc:	d1f3      	bne.n	8009be6 <__sfputs_r+0xa>
 8009bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c00 <_vfiprintf_r>:
 8009c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c04:	460d      	mov	r5, r1
 8009c06:	b09d      	sub	sp, #116	@ 0x74
 8009c08:	4614      	mov	r4, r2
 8009c0a:	4698      	mov	r8, r3
 8009c0c:	4606      	mov	r6, r0
 8009c0e:	b118      	cbz	r0, 8009c18 <_vfiprintf_r+0x18>
 8009c10:	6a03      	ldr	r3, [r0, #32]
 8009c12:	b90b      	cbnz	r3, 8009c18 <_vfiprintf_r+0x18>
 8009c14:	f7fe f900 	bl	8007e18 <__sinit>
 8009c18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c1a:	07d9      	lsls	r1, r3, #31
 8009c1c:	d405      	bmi.n	8009c2a <_vfiprintf_r+0x2a>
 8009c1e:	89ab      	ldrh	r3, [r5, #12]
 8009c20:	059a      	lsls	r2, r3, #22
 8009c22:	d402      	bmi.n	8009c2a <_vfiprintf_r+0x2a>
 8009c24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c26:	f7fe fa10 	bl	800804a <__retarget_lock_acquire_recursive>
 8009c2a:	89ab      	ldrh	r3, [r5, #12]
 8009c2c:	071b      	lsls	r3, r3, #28
 8009c2e:	d501      	bpl.n	8009c34 <_vfiprintf_r+0x34>
 8009c30:	692b      	ldr	r3, [r5, #16]
 8009c32:	b99b      	cbnz	r3, 8009c5c <_vfiprintf_r+0x5c>
 8009c34:	4629      	mov	r1, r5
 8009c36:	4630      	mov	r0, r6
 8009c38:	f000 f938 	bl	8009eac <__swsetup_r>
 8009c3c:	b170      	cbz	r0, 8009c5c <_vfiprintf_r+0x5c>
 8009c3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c40:	07dc      	lsls	r4, r3, #31
 8009c42:	d504      	bpl.n	8009c4e <_vfiprintf_r+0x4e>
 8009c44:	f04f 30ff 	mov.w	r0, #4294967295
 8009c48:	b01d      	add	sp, #116	@ 0x74
 8009c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4e:	89ab      	ldrh	r3, [r5, #12]
 8009c50:	0598      	lsls	r0, r3, #22
 8009c52:	d4f7      	bmi.n	8009c44 <_vfiprintf_r+0x44>
 8009c54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c56:	f7fe f9f9 	bl	800804c <__retarget_lock_release_recursive>
 8009c5a:	e7f3      	b.n	8009c44 <_vfiprintf_r+0x44>
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c60:	2320      	movs	r3, #32
 8009c62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c66:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c6a:	2330      	movs	r3, #48	@ 0x30
 8009c6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009e1c <_vfiprintf_r+0x21c>
 8009c70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c74:	f04f 0901 	mov.w	r9, #1
 8009c78:	4623      	mov	r3, r4
 8009c7a:	469a      	mov	sl, r3
 8009c7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c80:	b10a      	cbz	r2, 8009c86 <_vfiprintf_r+0x86>
 8009c82:	2a25      	cmp	r2, #37	@ 0x25
 8009c84:	d1f9      	bne.n	8009c7a <_vfiprintf_r+0x7a>
 8009c86:	ebba 0b04 	subs.w	fp, sl, r4
 8009c8a:	d00b      	beq.n	8009ca4 <_vfiprintf_r+0xa4>
 8009c8c:	465b      	mov	r3, fp
 8009c8e:	4622      	mov	r2, r4
 8009c90:	4629      	mov	r1, r5
 8009c92:	4630      	mov	r0, r6
 8009c94:	f7ff ffa2 	bl	8009bdc <__sfputs_r>
 8009c98:	3001      	adds	r0, #1
 8009c9a:	f000 80a7 	beq.w	8009dec <_vfiprintf_r+0x1ec>
 8009c9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ca0:	445a      	add	r2, fp
 8009ca2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	f000 809f 	beq.w	8009dec <_vfiprintf_r+0x1ec>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8009cb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cb8:	f10a 0a01 	add.w	sl, sl, #1
 8009cbc:	9304      	str	r3, [sp, #16]
 8009cbe:	9307      	str	r3, [sp, #28]
 8009cc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009cc4:	931a      	str	r3, [sp, #104]	@ 0x68
 8009cc6:	4654      	mov	r4, sl
 8009cc8:	2205      	movs	r2, #5
 8009cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cce:	4853      	ldr	r0, [pc, #332]	@ (8009e1c <_vfiprintf_r+0x21c>)
 8009cd0:	f7f6 fa7e 	bl	80001d0 <memchr>
 8009cd4:	9a04      	ldr	r2, [sp, #16]
 8009cd6:	b9d8      	cbnz	r0, 8009d10 <_vfiprintf_r+0x110>
 8009cd8:	06d1      	lsls	r1, r2, #27
 8009cda:	bf44      	itt	mi
 8009cdc:	2320      	movmi	r3, #32
 8009cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ce2:	0713      	lsls	r3, r2, #28
 8009ce4:	bf44      	itt	mi
 8009ce6:	232b      	movmi	r3, #43	@ 0x2b
 8009ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cec:	f89a 3000 	ldrb.w	r3, [sl]
 8009cf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cf2:	d015      	beq.n	8009d20 <_vfiprintf_r+0x120>
 8009cf4:	9a07      	ldr	r2, [sp, #28]
 8009cf6:	4654      	mov	r4, sl
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	f04f 0c0a 	mov.w	ip, #10
 8009cfe:	4621      	mov	r1, r4
 8009d00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d04:	3b30      	subs	r3, #48	@ 0x30
 8009d06:	2b09      	cmp	r3, #9
 8009d08:	d94b      	bls.n	8009da2 <_vfiprintf_r+0x1a2>
 8009d0a:	b1b0      	cbz	r0, 8009d3a <_vfiprintf_r+0x13a>
 8009d0c:	9207      	str	r2, [sp, #28]
 8009d0e:	e014      	b.n	8009d3a <_vfiprintf_r+0x13a>
 8009d10:	eba0 0308 	sub.w	r3, r0, r8
 8009d14:	fa09 f303 	lsl.w	r3, r9, r3
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	9304      	str	r3, [sp, #16]
 8009d1c:	46a2      	mov	sl, r4
 8009d1e:	e7d2      	b.n	8009cc6 <_vfiprintf_r+0xc6>
 8009d20:	9b03      	ldr	r3, [sp, #12]
 8009d22:	1d19      	adds	r1, r3, #4
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	9103      	str	r1, [sp, #12]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	bfbb      	ittet	lt
 8009d2c:	425b      	neglt	r3, r3
 8009d2e:	f042 0202 	orrlt.w	r2, r2, #2
 8009d32:	9307      	strge	r3, [sp, #28]
 8009d34:	9307      	strlt	r3, [sp, #28]
 8009d36:	bfb8      	it	lt
 8009d38:	9204      	strlt	r2, [sp, #16]
 8009d3a:	7823      	ldrb	r3, [r4, #0]
 8009d3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d3e:	d10a      	bne.n	8009d56 <_vfiprintf_r+0x156>
 8009d40:	7863      	ldrb	r3, [r4, #1]
 8009d42:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d44:	d132      	bne.n	8009dac <_vfiprintf_r+0x1ac>
 8009d46:	9b03      	ldr	r3, [sp, #12]
 8009d48:	1d1a      	adds	r2, r3, #4
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	9203      	str	r2, [sp, #12]
 8009d4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d52:	3402      	adds	r4, #2
 8009d54:	9305      	str	r3, [sp, #20]
 8009d56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009e2c <_vfiprintf_r+0x22c>
 8009d5a:	7821      	ldrb	r1, [r4, #0]
 8009d5c:	2203      	movs	r2, #3
 8009d5e:	4650      	mov	r0, sl
 8009d60:	f7f6 fa36 	bl	80001d0 <memchr>
 8009d64:	b138      	cbz	r0, 8009d76 <_vfiprintf_r+0x176>
 8009d66:	9b04      	ldr	r3, [sp, #16]
 8009d68:	eba0 000a 	sub.w	r0, r0, sl
 8009d6c:	2240      	movs	r2, #64	@ 0x40
 8009d6e:	4082      	lsls	r2, r0
 8009d70:	4313      	orrs	r3, r2
 8009d72:	3401      	adds	r4, #1
 8009d74:	9304      	str	r3, [sp, #16]
 8009d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d7a:	4829      	ldr	r0, [pc, #164]	@ (8009e20 <_vfiprintf_r+0x220>)
 8009d7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d80:	2206      	movs	r2, #6
 8009d82:	f7f6 fa25 	bl	80001d0 <memchr>
 8009d86:	2800      	cmp	r0, #0
 8009d88:	d03f      	beq.n	8009e0a <_vfiprintf_r+0x20a>
 8009d8a:	4b26      	ldr	r3, [pc, #152]	@ (8009e24 <_vfiprintf_r+0x224>)
 8009d8c:	bb1b      	cbnz	r3, 8009dd6 <_vfiprintf_r+0x1d6>
 8009d8e:	9b03      	ldr	r3, [sp, #12]
 8009d90:	3307      	adds	r3, #7
 8009d92:	f023 0307 	bic.w	r3, r3, #7
 8009d96:	3308      	adds	r3, #8
 8009d98:	9303      	str	r3, [sp, #12]
 8009d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d9c:	443b      	add	r3, r7
 8009d9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009da0:	e76a      	b.n	8009c78 <_vfiprintf_r+0x78>
 8009da2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009da6:	460c      	mov	r4, r1
 8009da8:	2001      	movs	r0, #1
 8009daa:	e7a8      	b.n	8009cfe <_vfiprintf_r+0xfe>
 8009dac:	2300      	movs	r3, #0
 8009dae:	3401      	adds	r4, #1
 8009db0:	9305      	str	r3, [sp, #20]
 8009db2:	4619      	mov	r1, r3
 8009db4:	f04f 0c0a 	mov.w	ip, #10
 8009db8:	4620      	mov	r0, r4
 8009dba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dbe:	3a30      	subs	r2, #48	@ 0x30
 8009dc0:	2a09      	cmp	r2, #9
 8009dc2:	d903      	bls.n	8009dcc <_vfiprintf_r+0x1cc>
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d0c6      	beq.n	8009d56 <_vfiprintf_r+0x156>
 8009dc8:	9105      	str	r1, [sp, #20]
 8009dca:	e7c4      	b.n	8009d56 <_vfiprintf_r+0x156>
 8009dcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dd0:	4604      	mov	r4, r0
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	e7f0      	b.n	8009db8 <_vfiprintf_r+0x1b8>
 8009dd6:	ab03      	add	r3, sp, #12
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	462a      	mov	r2, r5
 8009ddc:	4b12      	ldr	r3, [pc, #72]	@ (8009e28 <_vfiprintf_r+0x228>)
 8009dde:	a904      	add	r1, sp, #16
 8009de0:	4630      	mov	r0, r6
 8009de2:	f7fd fbd7 	bl	8007594 <_printf_float>
 8009de6:	4607      	mov	r7, r0
 8009de8:	1c78      	adds	r0, r7, #1
 8009dea:	d1d6      	bne.n	8009d9a <_vfiprintf_r+0x19a>
 8009dec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009dee:	07d9      	lsls	r1, r3, #31
 8009df0:	d405      	bmi.n	8009dfe <_vfiprintf_r+0x1fe>
 8009df2:	89ab      	ldrh	r3, [r5, #12]
 8009df4:	059a      	lsls	r2, r3, #22
 8009df6:	d402      	bmi.n	8009dfe <_vfiprintf_r+0x1fe>
 8009df8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009dfa:	f7fe f927 	bl	800804c <__retarget_lock_release_recursive>
 8009dfe:	89ab      	ldrh	r3, [r5, #12]
 8009e00:	065b      	lsls	r3, r3, #25
 8009e02:	f53f af1f 	bmi.w	8009c44 <_vfiprintf_r+0x44>
 8009e06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e08:	e71e      	b.n	8009c48 <_vfiprintf_r+0x48>
 8009e0a:	ab03      	add	r3, sp, #12
 8009e0c:	9300      	str	r3, [sp, #0]
 8009e0e:	462a      	mov	r2, r5
 8009e10:	4b05      	ldr	r3, [pc, #20]	@ (8009e28 <_vfiprintf_r+0x228>)
 8009e12:	a904      	add	r1, sp, #16
 8009e14:	4630      	mov	r0, r6
 8009e16:	f7fd fe55 	bl	8007ac4 <_printf_i>
 8009e1a:	e7e4      	b.n	8009de6 <_vfiprintf_r+0x1e6>
 8009e1c:	0801d2be 	.word	0x0801d2be
 8009e20:	0801d2c8 	.word	0x0801d2c8
 8009e24:	08007595 	.word	0x08007595
 8009e28:	08009bdd 	.word	0x08009bdd
 8009e2c:	0801d2c4 	.word	0x0801d2c4

08009e30 <__swbuf_r>:
 8009e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e32:	460e      	mov	r6, r1
 8009e34:	4614      	mov	r4, r2
 8009e36:	4605      	mov	r5, r0
 8009e38:	b118      	cbz	r0, 8009e42 <__swbuf_r+0x12>
 8009e3a:	6a03      	ldr	r3, [r0, #32]
 8009e3c:	b90b      	cbnz	r3, 8009e42 <__swbuf_r+0x12>
 8009e3e:	f7fd ffeb 	bl	8007e18 <__sinit>
 8009e42:	69a3      	ldr	r3, [r4, #24]
 8009e44:	60a3      	str	r3, [r4, #8]
 8009e46:	89a3      	ldrh	r3, [r4, #12]
 8009e48:	071a      	lsls	r2, r3, #28
 8009e4a:	d501      	bpl.n	8009e50 <__swbuf_r+0x20>
 8009e4c:	6923      	ldr	r3, [r4, #16]
 8009e4e:	b943      	cbnz	r3, 8009e62 <__swbuf_r+0x32>
 8009e50:	4621      	mov	r1, r4
 8009e52:	4628      	mov	r0, r5
 8009e54:	f000 f82a 	bl	8009eac <__swsetup_r>
 8009e58:	b118      	cbz	r0, 8009e62 <__swbuf_r+0x32>
 8009e5a:	f04f 37ff 	mov.w	r7, #4294967295
 8009e5e:	4638      	mov	r0, r7
 8009e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e62:	6823      	ldr	r3, [r4, #0]
 8009e64:	6922      	ldr	r2, [r4, #16]
 8009e66:	1a98      	subs	r0, r3, r2
 8009e68:	6963      	ldr	r3, [r4, #20]
 8009e6a:	b2f6      	uxtb	r6, r6
 8009e6c:	4283      	cmp	r3, r0
 8009e6e:	4637      	mov	r7, r6
 8009e70:	dc05      	bgt.n	8009e7e <__swbuf_r+0x4e>
 8009e72:	4621      	mov	r1, r4
 8009e74:	4628      	mov	r0, r5
 8009e76:	f7ff fd99 	bl	80099ac <_fflush_r>
 8009e7a:	2800      	cmp	r0, #0
 8009e7c:	d1ed      	bne.n	8009e5a <__swbuf_r+0x2a>
 8009e7e:	68a3      	ldr	r3, [r4, #8]
 8009e80:	3b01      	subs	r3, #1
 8009e82:	60a3      	str	r3, [r4, #8]
 8009e84:	6823      	ldr	r3, [r4, #0]
 8009e86:	1c5a      	adds	r2, r3, #1
 8009e88:	6022      	str	r2, [r4, #0]
 8009e8a:	701e      	strb	r6, [r3, #0]
 8009e8c:	6962      	ldr	r2, [r4, #20]
 8009e8e:	1c43      	adds	r3, r0, #1
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d004      	beq.n	8009e9e <__swbuf_r+0x6e>
 8009e94:	89a3      	ldrh	r3, [r4, #12]
 8009e96:	07db      	lsls	r3, r3, #31
 8009e98:	d5e1      	bpl.n	8009e5e <__swbuf_r+0x2e>
 8009e9a:	2e0a      	cmp	r6, #10
 8009e9c:	d1df      	bne.n	8009e5e <__swbuf_r+0x2e>
 8009e9e:	4621      	mov	r1, r4
 8009ea0:	4628      	mov	r0, r5
 8009ea2:	f7ff fd83 	bl	80099ac <_fflush_r>
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d0d9      	beq.n	8009e5e <__swbuf_r+0x2e>
 8009eaa:	e7d6      	b.n	8009e5a <__swbuf_r+0x2a>

08009eac <__swsetup_r>:
 8009eac:	b538      	push	{r3, r4, r5, lr}
 8009eae:	4b29      	ldr	r3, [pc, #164]	@ (8009f54 <__swsetup_r+0xa8>)
 8009eb0:	4605      	mov	r5, r0
 8009eb2:	6818      	ldr	r0, [r3, #0]
 8009eb4:	460c      	mov	r4, r1
 8009eb6:	b118      	cbz	r0, 8009ec0 <__swsetup_r+0x14>
 8009eb8:	6a03      	ldr	r3, [r0, #32]
 8009eba:	b90b      	cbnz	r3, 8009ec0 <__swsetup_r+0x14>
 8009ebc:	f7fd ffac 	bl	8007e18 <__sinit>
 8009ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ec4:	0719      	lsls	r1, r3, #28
 8009ec6:	d422      	bmi.n	8009f0e <__swsetup_r+0x62>
 8009ec8:	06da      	lsls	r2, r3, #27
 8009eca:	d407      	bmi.n	8009edc <__swsetup_r+0x30>
 8009ecc:	2209      	movs	r2, #9
 8009ece:	602a      	str	r2, [r5, #0]
 8009ed0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ed4:	81a3      	strh	r3, [r4, #12]
 8009ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8009eda:	e033      	b.n	8009f44 <__swsetup_r+0x98>
 8009edc:	0758      	lsls	r0, r3, #29
 8009ede:	d512      	bpl.n	8009f06 <__swsetup_r+0x5a>
 8009ee0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ee2:	b141      	cbz	r1, 8009ef6 <__swsetup_r+0x4a>
 8009ee4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ee8:	4299      	cmp	r1, r3
 8009eea:	d002      	beq.n	8009ef2 <__swsetup_r+0x46>
 8009eec:	4628      	mov	r0, r5
 8009eee:	f7fe ff07 	bl	8008d00 <_free_r>
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ef6:	89a3      	ldrh	r3, [r4, #12]
 8009ef8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009efc:	81a3      	strh	r3, [r4, #12]
 8009efe:	2300      	movs	r3, #0
 8009f00:	6063      	str	r3, [r4, #4]
 8009f02:	6923      	ldr	r3, [r4, #16]
 8009f04:	6023      	str	r3, [r4, #0]
 8009f06:	89a3      	ldrh	r3, [r4, #12]
 8009f08:	f043 0308 	orr.w	r3, r3, #8
 8009f0c:	81a3      	strh	r3, [r4, #12]
 8009f0e:	6923      	ldr	r3, [r4, #16]
 8009f10:	b94b      	cbnz	r3, 8009f26 <__swsetup_r+0x7a>
 8009f12:	89a3      	ldrh	r3, [r4, #12]
 8009f14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f1c:	d003      	beq.n	8009f26 <__swsetup_r+0x7a>
 8009f1e:	4621      	mov	r1, r4
 8009f20:	4628      	mov	r0, r5
 8009f22:	f000 f883 	bl	800a02c <__smakebuf_r>
 8009f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f2a:	f013 0201 	ands.w	r2, r3, #1
 8009f2e:	d00a      	beq.n	8009f46 <__swsetup_r+0x9a>
 8009f30:	2200      	movs	r2, #0
 8009f32:	60a2      	str	r2, [r4, #8]
 8009f34:	6962      	ldr	r2, [r4, #20]
 8009f36:	4252      	negs	r2, r2
 8009f38:	61a2      	str	r2, [r4, #24]
 8009f3a:	6922      	ldr	r2, [r4, #16]
 8009f3c:	b942      	cbnz	r2, 8009f50 <__swsetup_r+0xa4>
 8009f3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009f42:	d1c5      	bne.n	8009ed0 <__swsetup_r+0x24>
 8009f44:	bd38      	pop	{r3, r4, r5, pc}
 8009f46:	0799      	lsls	r1, r3, #30
 8009f48:	bf58      	it	pl
 8009f4a:	6962      	ldrpl	r2, [r4, #20]
 8009f4c:	60a2      	str	r2, [r4, #8]
 8009f4e:	e7f4      	b.n	8009f3a <__swsetup_r+0x8e>
 8009f50:	2000      	movs	r0, #0
 8009f52:	e7f7      	b.n	8009f44 <__swsetup_r+0x98>
 8009f54:	20000020 	.word	0x20000020

08009f58 <_raise_r>:
 8009f58:	291f      	cmp	r1, #31
 8009f5a:	b538      	push	{r3, r4, r5, lr}
 8009f5c:	4605      	mov	r5, r0
 8009f5e:	460c      	mov	r4, r1
 8009f60:	d904      	bls.n	8009f6c <_raise_r+0x14>
 8009f62:	2316      	movs	r3, #22
 8009f64:	6003      	str	r3, [r0, #0]
 8009f66:	f04f 30ff 	mov.w	r0, #4294967295
 8009f6a:	bd38      	pop	{r3, r4, r5, pc}
 8009f6c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009f6e:	b112      	cbz	r2, 8009f76 <_raise_r+0x1e>
 8009f70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f74:	b94b      	cbnz	r3, 8009f8a <_raise_r+0x32>
 8009f76:	4628      	mov	r0, r5
 8009f78:	f000 f830 	bl	8009fdc <_getpid_r>
 8009f7c:	4622      	mov	r2, r4
 8009f7e:	4601      	mov	r1, r0
 8009f80:	4628      	mov	r0, r5
 8009f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f86:	f000 b817 	b.w	8009fb8 <_kill_r>
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d00a      	beq.n	8009fa4 <_raise_r+0x4c>
 8009f8e:	1c59      	adds	r1, r3, #1
 8009f90:	d103      	bne.n	8009f9a <_raise_r+0x42>
 8009f92:	2316      	movs	r3, #22
 8009f94:	6003      	str	r3, [r0, #0]
 8009f96:	2001      	movs	r0, #1
 8009f98:	e7e7      	b.n	8009f6a <_raise_r+0x12>
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	4798      	blx	r3
 8009fa4:	2000      	movs	r0, #0
 8009fa6:	e7e0      	b.n	8009f6a <_raise_r+0x12>

08009fa8 <raise>:
 8009fa8:	4b02      	ldr	r3, [pc, #8]	@ (8009fb4 <raise+0xc>)
 8009faa:	4601      	mov	r1, r0
 8009fac:	6818      	ldr	r0, [r3, #0]
 8009fae:	f7ff bfd3 	b.w	8009f58 <_raise_r>
 8009fb2:	bf00      	nop
 8009fb4:	20000020 	.word	0x20000020

08009fb8 <_kill_r>:
 8009fb8:	b538      	push	{r3, r4, r5, lr}
 8009fba:	4d07      	ldr	r5, [pc, #28]	@ (8009fd8 <_kill_r+0x20>)
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	4604      	mov	r4, r0
 8009fc0:	4608      	mov	r0, r1
 8009fc2:	4611      	mov	r1, r2
 8009fc4:	602b      	str	r3, [r5, #0]
 8009fc6:	f7f7 fdcb 	bl	8001b60 <_kill>
 8009fca:	1c43      	adds	r3, r0, #1
 8009fcc:	d102      	bne.n	8009fd4 <_kill_r+0x1c>
 8009fce:	682b      	ldr	r3, [r5, #0]
 8009fd0:	b103      	cbz	r3, 8009fd4 <_kill_r+0x1c>
 8009fd2:	6023      	str	r3, [r4, #0]
 8009fd4:	bd38      	pop	{r3, r4, r5, pc}
 8009fd6:	bf00      	nop
 8009fd8:	20006570 	.word	0x20006570

08009fdc <_getpid_r>:
 8009fdc:	f7f7 bdb8 	b.w	8001b50 <_getpid>

08009fe0 <__swhatbuf_r>:
 8009fe0:	b570      	push	{r4, r5, r6, lr}
 8009fe2:	460c      	mov	r4, r1
 8009fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fe8:	2900      	cmp	r1, #0
 8009fea:	b096      	sub	sp, #88	@ 0x58
 8009fec:	4615      	mov	r5, r2
 8009fee:	461e      	mov	r6, r3
 8009ff0:	da0d      	bge.n	800a00e <__swhatbuf_r+0x2e>
 8009ff2:	89a3      	ldrh	r3, [r4, #12]
 8009ff4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009ff8:	f04f 0100 	mov.w	r1, #0
 8009ffc:	bf14      	ite	ne
 8009ffe:	2340      	movne	r3, #64	@ 0x40
 800a000:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a004:	2000      	movs	r0, #0
 800a006:	6031      	str	r1, [r6, #0]
 800a008:	602b      	str	r3, [r5, #0]
 800a00a:	b016      	add	sp, #88	@ 0x58
 800a00c:	bd70      	pop	{r4, r5, r6, pc}
 800a00e:	466a      	mov	r2, sp
 800a010:	f000 f848 	bl	800a0a4 <_fstat_r>
 800a014:	2800      	cmp	r0, #0
 800a016:	dbec      	blt.n	8009ff2 <__swhatbuf_r+0x12>
 800a018:	9901      	ldr	r1, [sp, #4]
 800a01a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a01e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a022:	4259      	negs	r1, r3
 800a024:	4159      	adcs	r1, r3
 800a026:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a02a:	e7eb      	b.n	800a004 <__swhatbuf_r+0x24>

0800a02c <__smakebuf_r>:
 800a02c:	898b      	ldrh	r3, [r1, #12]
 800a02e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a030:	079d      	lsls	r5, r3, #30
 800a032:	4606      	mov	r6, r0
 800a034:	460c      	mov	r4, r1
 800a036:	d507      	bpl.n	800a048 <__smakebuf_r+0x1c>
 800a038:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a03c:	6023      	str	r3, [r4, #0]
 800a03e:	6123      	str	r3, [r4, #16]
 800a040:	2301      	movs	r3, #1
 800a042:	6163      	str	r3, [r4, #20]
 800a044:	b003      	add	sp, #12
 800a046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a048:	ab01      	add	r3, sp, #4
 800a04a:	466a      	mov	r2, sp
 800a04c:	f7ff ffc8 	bl	8009fe0 <__swhatbuf_r>
 800a050:	9f00      	ldr	r7, [sp, #0]
 800a052:	4605      	mov	r5, r0
 800a054:	4639      	mov	r1, r7
 800a056:	4630      	mov	r0, r6
 800a058:	f7fe fec6 	bl	8008de8 <_malloc_r>
 800a05c:	b948      	cbnz	r0, 800a072 <__smakebuf_r+0x46>
 800a05e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a062:	059a      	lsls	r2, r3, #22
 800a064:	d4ee      	bmi.n	800a044 <__smakebuf_r+0x18>
 800a066:	f023 0303 	bic.w	r3, r3, #3
 800a06a:	f043 0302 	orr.w	r3, r3, #2
 800a06e:	81a3      	strh	r3, [r4, #12]
 800a070:	e7e2      	b.n	800a038 <__smakebuf_r+0xc>
 800a072:	89a3      	ldrh	r3, [r4, #12]
 800a074:	6020      	str	r0, [r4, #0]
 800a076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a07a:	81a3      	strh	r3, [r4, #12]
 800a07c:	9b01      	ldr	r3, [sp, #4]
 800a07e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a082:	b15b      	cbz	r3, 800a09c <__smakebuf_r+0x70>
 800a084:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a088:	4630      	mov	r0, r6
 800a08a:	f000 f81d 	bl	800a0c8 <_isatty_r>
 800a08e:	b128      	cbz	r0, 800a09c <__smakebuf_r+0x70>
 800a090:	89a3      	ldrh	r3, [r4, #12]
 800a092:	f023 0303 	bic.w	r3, r3, #3
 800a096:	f043 0301 	orr.w	r3, r3, #1
 800a09a:	81a3      	strh	r3, [r4, #12]
 800a09c:	89a3      	ldrh	r3, [r4, #12]
 800a09e:	431d      	orrs	r5, r3
 800a0a0:	81a5      	strh	r5, [r4, #12]
 800a0a2:	e7cf      	b.n	800a044 <__smakebuf_r+0x18>

0800a0a4 <_fstat_r>:
 800a0a4:	b538      	push	{r3, r4, r5, lr}
 800a0a6:	4d07      	ldr	r5, [pc, #28]	@ (800a0c4 <_fstat_r+0x20>)
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	4604      	mov	r4, r0
 800a0ac:	4608      	mov	r0, r1
 800a0ae:	4611      	mov	r1, r2
 800a0b0:	602b      	str	r3, [r5, #0]
 800a0b2:	f7f7 fdb5 	bl	8001c20 <_fstat>
 800a0b6:	1c43      	adds	r3, r0, #1
 800a0b8:	d102      	bne.n	800a0c0 <_fstat_r+0x1c>
 800a0ba:	682b      	ldr	r3, [r5, #0]
 800a0bc:	b103      	cbz	r3, 800a0c0 <_fstat_r+0x1c>
 800a0be:	6023      	str	r3, [r4, #0]
 800a0c0:	bd38      	pop	{r3, r4, r5, pc}
 800a0c2:	bf00      	nop
 800a0c4:	20006570 	.word	0x20006570

0800a0c8 <_isatty_r>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	4d06      	ldr	r5, [pc, #24]	@ (800a0e4 <_isatty_r+0x1c>)
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	4608      	mov	r0, r1
 800a0d2:	602b      	str	r3, [r5, #0]
 800a0d4:	f7f7 fdb4 	bl	8001c40 <_isatty>
 800a0d8:	1c43      	adds	r3, r0, #1
 800a0da:	d102      	bne.n	800a0e2 <_isatty_r+0x1a>
 800a0dc:	682b      	ldr	r3, [r5, #0]
 800a0de:	b103      	cbz	r3, 800a0e2 <_isatty_r+0x1a>
 800a0e0:	6023      	str	r3, [r4, #0]
 800a0e2:	bd38      	pop	{r3, r4, r5, pc}
 800a0e4:	20006570 	.word	0x20006570

0800a0e8 <sqrtf>:
 800a0e8:	b508      	push	{r3, lr}
 800a0ea:	ed2d 8b02 	vpush	{d8}
 800a0ee:	eeb0 8a40 	vmov.f32	s16, s0
 800a0f2:	f000 f817 	bl	800a124 <__ieee754_sqrtf>
 800a0f6:	eeb4 8a48 	vcmp.f32	s16, s16
 800a0fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0fe:	d60c      	bvs.n	800a11a <sqrtf+0x32>
 800a100:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800a120 <sqrtf+0x38>
 800a104:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a10c:	d505      	bpl.n	800a11a <sqrtf+0x32>
 800a10e:	f7fd ff71 	bl	8007ff4 <__errno>
 800a112:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a116:	2321      	movs	r3, #33	@ 0x21
 800a118:	6003      	str	r3, [r0, #0]
 800a11a:	ecbd 8b02 	vpop	{d8}
 800a11e:	bd08      	pop	{r3, pc}
 800a120:	00000000 	.word	0x00000000

0800a124 <__ieee754_sqrtf>:
 800a124:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a128:	4770      	bx	lr
	...

0800a12c <_init>:
 800a12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a12e:	bf00      	nop
 800a130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a132:	bc08      	pop	{r3}
 800a134:	469e      	mov	lr, r3
 800a136:	4770      	bx	lr

0800a138 <_fini>:
 800a138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a13a:	bf00      	nop
 800a13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a13e:	bc08      	pop	{r3}
 800a140:	469e      	mov	lr, r3
 800a142:	4770      	bx	lr
