
pindrop_fft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cdc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000133d4  08009e70  08009e70  0000ae70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d244  0801d244  0001f1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801d244  0801d244  0001e244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d24c  0801d24c  0001f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d24c  0801d24c  0001e24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801d250  0801d250  0001e250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0801d254  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b58  200001d4  0801d428  0001f1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003d2c  0801d428  0001fd2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001f1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb05  00000000  00000000  0001f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000397d  00000000  00000000  0003bd09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  0003f688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e26  00000000  00000000  00040a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000239ef  00000000  00000000  0004183e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017482  00000000  00000000  0006522d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de6f1  00000000  00000000  0007c6af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0015ada0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062b8  00000000  00000000  0015ae58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00161110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000032a6  00000000  00000000  0016117d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000000d8  00000000  00000000  00164423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e54 	.word	0x08009e54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08009e54 	.word	0x08009e54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed8:	f000 fde9 	bl	8001aae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000edc:	f000 f834 	bl	8000f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee0:	f000 f9c6 	bl	8001270 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ee4:	f000 f99e 	bl	8001224 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ee8:	f000 f96c 	bl	80011c4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000eec:	f000 f88e 	bl	800100c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000ef0:	f000 f8f2 	bl	80010d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Initialize FFT
  arm_rfft_fast_init_f32(&fft_instance, FFT_SIZE);
 8000ef4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ef8:	480d      	ldr	r0, [pc, #52]	@ (8000f30 <main+0x5c>)
 8000efa:	f005 f979 	bl	80061f0 <arm_rfft_fast_init_f32>

  // Start ADC with DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, AUDIO_BUFFER_SIZE);
 8000efe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f02:	490c      	ldr	r1, [pc, #48]	@ (8000f34 <main+0x60>)
 8000f04:	480c      	ldr	r0, [pc, #48]	@ (8000f38 <main+0x64>)
 8000f06:	f001 f951 	bl	80021ac <HAL_ADC_Start_DMA>

  // Start timer for sampling rate
  HAL_TIM_Base_Start(&htim2);
 8000f0a:	480c      	ldr	r0, [pc, #48]	@ (8000f3c <main+0x68>)
 8000f0c:	f003 fd6a 	bl	80049e4 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (buffer_ready) {
 8000f10:	4b0b      	ldr	r3, [pc, #44]	@ (8000f40 <main+0x6c>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0fa      	beq.n	8000f10 <main+0x3c>
	        process_fft();
 8000f1a:	f000 fa03 	bl	8001324 <process_fft>
	        transmit_fft_results();
 8000f1e:	f000 fa87 	bl	8001430 <transmit_fft_results>
	        buffer_ready = 0;
 8000f22:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <main+0x6c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
	        adc_index = 0;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <main+0x70>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
	  if (buffer_ready) {
 8000f2e:	e7ef      	b.n	8000f10 <main+0x3c>
 8000f30:	20003bc0 	.word	0x20003bc0
 8000f34:	200003b8 	.word	0x200003b8
 8000f38:	200001f0 	.word	0x200001f0
 8000f3c:	2000029c 	.word	0x2000029c
 8000f40:	200013b8 	.word	0x200013b8
 8000f44:	200013bc 	.word	0x200013bc

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b096      	sub	sp, #88	@ 0x58
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	2244      	movs	r2, #68	@ 0x44
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f006 fe8d 	bl	8007c76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f6a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f6e:	f002 fb5b 	bl	8003628 <HAL_PWREx_ControlVoltageScaling>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f78:	f000 faae 	bl	80014d8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f7c:	f002 fb36 	bl	80035ec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f80:	4b21      	ldr	r3, [pc, #132]	@ (8001008 <SystemClock_Config+0xc0>)
 8000f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f86:	4a20      	ldr	r2, [pc, #128]	@ (8001008 <SystemClock_Config+0xc0>)
 8000f88:	f023 0318 	bic.w	r3, r3, #24
 8000f8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000f90:	2314      	movs	r3, #20
 8000f92:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f94:	2301      	movs	r3, #1
 8000f96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fa0:	2360      	movs	r3, #96	@ 0x60
 8000fa2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fac:	2301      	movs	r3, #1
 8000fae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fb4:	2307      	movs	r3, #7
 8000fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f002 fb85 	bl	80036d4 <HAL_RCC_OscConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000fd0:	f000 fa82 	bl	80014d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	2101      	movs	r1, #1
 8000fec:	4618      	mov	r0, r3
 8000fee:	f002 ff85 	bl	8003efc <HAL_RCC_ClockConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000ff8:	f000 fa6e 	bl	80014d8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000ffc:	f003 fb98 	bl	8004730 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001000:	bf00      	nop
 8001002:	3758      	adds	r7, #88	@ 0x58
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40021000 	.word	0x40021000

0800100c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001012:	463b      	mov	r3, r7
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001022:	4b2a      	ldr	r3, [pc, #168]	@ (80010cc <MX_ADC1_Init+0xc0>)
 8001024:	4a2a      	ldr	r2, [pc, #168]	@ (80010d0 <MX_ADC1_Init+0xc4>)
 8001026:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001028:	4b28      	ldr	r3, [pc, #160]	@ (80010cc <MX_ADC1_Init+0xc0>)
 800102a:	2200      	movs	r2, #0
 800102c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800102e:	4b27      	ldr	r3, [pc, #156]	@ (80010cc <MX_ADC1_Init+0xc0>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001034:	4b25      	ldr	r3, [pc, #148]	@ (80010cc <MX_ADC1_Init+0xc0>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800103a:	4b24      	ldr	r3, [pc, #144]	@ (80010cc <MX_ADC1_Init+0xc0>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001040:	4b22      	ldr	r3, [pc, #136]	@ (80010cc <MX_ADC1_Init+0xc0>)
 8001042:	2204      	movs	r2, #4
 8001044:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001046:	4b21      	ldr	r3, [pc, #132]	@ (80010cc <MX_ADC1_Init+0xc0>)
 8001048:	2200      	movs	r2, #0
 800104a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800104c:	4b1f      	ldr	r3, [pc, #124]	@ (80010cc <MX_ADC1_Init+0xc0>)
 800104e:	2200      	movs	r2, #0
 8001050:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001052:	4b1e      	ldr	r3, [pc, #120]	@ (80010cc <MX_ADC1_Init+0xc0>)
 8001054:	2201      	movs	r2, #1
 8001056:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001058:	4b1c      	ldr	r3, [pc, #112]	@ (80010cc <MX_ADC1_Init+0xc0>)
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001060:	4b1a      	ldr	r3, [pc, #104]	@ (80010cc <MX_ADC1_Init+0xc0>)
 8001062:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 8001066:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001068:	4b18      	ldr	r3, [pc, #96]	@ (80010cc <MX_ADC1_Init+0xc0>)
 800106a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800106e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001070:	4b16      	ldr	r3, [pc, #88]	@ (80010cc <MX_ADC1_Init+0xc0>)
 8001072:	2201      	movs	r2, #1
 8001074:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001078:	4b14      	ldr	r3, [pc, #80]	@ (80010cc <MX_ADC1_Init+0xc0>)
 800107a:	2200      	movs	r2, #0
 800107c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800107e:	4b13      	ldr	r3, [pc, #76]	@ (80010cc <MX_ADC1_Init+0xc0>)
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001086:	4811      	ldr	r0, [pc, #68]	@ (80010cc <MX_ADC1_Init+0xc0>)
 8001088:	f000 ff4e 	bl	8001f28 <HAL_ADC_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001092:	f000 fa21 	bl	80014d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001096:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <MX_ADC1_Init+0xc8>)
 8001098:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800109a:	2306      	movs	r3, #6
 800109c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010a2:	237f      	movs	r3, #127	@ 0x7f
 80010a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010a6:	2304      	movs	r3, #4
 80010a8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	4619      	mov	r1, r3
 80010b2:	4806      	ldr	r0, [pc, #24]	@ (80010cc <MX_ADC1_Init+0xc0>)
 80010b4:	f001 f912 	bl	80022dc <HAL_ADC_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80010be:	f000 fa0b 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200001f0 	.word	0x200001f0
 80010d0:	50040000 	.word	0x50040000
 80010d4:	21800100 	.word	0x21800100

080010d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08e      	sub	sp, #56	@ 0x38
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010f8:	463b      	mov	r3, r7
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]
 8001106:	615a      	str	r2, [r3, #20]
 8001108:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800110a:	4b2d      	ldr	r3, [pc, #180]	@ (80011c0 <MX_TIM2_Init+0xe8>)
 800110c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001110:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001112:	4b2b      	ldr	r3, [pc, #172]	@ (80011c0 <MX_TIM2_Init+0xe8>)
 8001114:	2200      	movs	r2, #0
 8001116:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001118:	4b29      	ldr	r3, [pc, #164]	@ (80011c0 <MX_TIM2_Init+0xe8>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 800111e:	4b28      	ldr	r3, [pc, #160]	@ (80011c0 <MX_TIM2_Init+0xe8>)
 8001120:	f240 128f 	movw	r2, #399	@ 0x18f
 8001124:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001126:	4b26      	ldr	r3, [pc, #152]	@ (80011c0 <MX_TIM2_Init+0xe8>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800112c:	4b24      	ldr	r3, [pc, #144]	@ (80011c0 <MX_TIM2_Init+0xe8>)
 800112e:	2280      	movs	r2, #128	@ 0x80
 8001130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001132:	4823      	ldr	r0, [pc, #140]	@ (80011c0 <MX_TIM2_Init+0xe8>)
 8001134:	f003 fbfe 	bl	8004934 <HAL_TIM_Base_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800113e:	f000 f9cb 	bl	80014d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001142:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001146:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001148:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800114c:	4619      	mov	r1, r3
 800114e:	481c      	ldr	r0, [pc, #112]	@ (80011c0 <MX_TIM2_Init+0xe8>)
 8001150:	f003 fd70 	bl	8004c34 <HAL_TIM_ConfigClockSource>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800115a:	f000 f9bd 	bl	80014d8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800115e:	4818      	ldr	r0, [pc, #96]	@ (80011c0 <MX_TIM2_Init+0xe8>)
 8001160:	f003 fc8c 	bl	8004a7c <HAL_TIM_OC_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800116a:	f000 f9b5 	bl	80014d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800116e:	2320      	movs	r3, #32
 8001170:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001172:	2380      	movs	r3, #128	@ 0x80
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	4619      	mov	r1, r3
 800117c:	4810      	ldr	r0, [pc, #64]	@ (80011c0 <MX_TIM2_Init+0xe8>)
 800117e:	f004 f9ab 	bl	80054d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001188:	f000 f9a6 	bl	80014d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800118c:	2330      	movs	r3, #48	@ 0x30
 800118e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800119c:	463b      	mov	r3, r7
 800119e:	2200      	movs	r2, #0
 80011a0:	4619      	mov	r1, r3
 80011a2:	4807      	ldr	r0, [pc, #28]	@ (80011c0 <MX_TIM2_Init+0xe8>)
 80011a4:	f003 fccc 	bl	8004b40 <HAL_TIM_OC_ConfigChannel>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80011ae:	f000 f993 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011b2:	4803      	ldr	r0, [pc, #12]	@ (80011c0 <MX_TIM2_Init+0xe8>)
 80011b4:	f000 fa6c 	bl	8001690 <HAL_TIM_MspPostInit>

}
 80011b8:	bf00      	nop
 80011ba:	3738      	adds	r7, #56	@ 0x38
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	2000029c 	.word	0x2000029c

080011c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011c8:	4b14      	ldr	r3, [pc, #80]	@ (800121c <MX_USART2_UART_Init+0x58>)
 80011ca:	4a15      	ldr	r2, [pc, #84]	@ (8001220 <MX_USART2_UART_Init+0x5c>)
 80011cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ce:	4b13      	ldr	r3, [pc, #76]	@ (800121c <MX_USART2_UART_Init+0x58>)
 80011d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <MX_USART2_UART_Init+0x58>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <MX_USART2_UART_Init+0x58>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <MX_USART2_UART_Init+0x58>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <MX_USART2_UART_Init+0x58>)
 80011ea:	220c      	movs	r2, #12
 80011ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <MX_USART2_UART_Init+0x58>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f4:	4b09      	ldr	r3, [pc, #36]	@ (800121c <MX_USART2_UART_Init+0x58>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <MX_USART2_UART_Init+0x58>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <MX_USART2_UART_Init+0x58>)
 8001202:	2200      	movs	r2, #0
 8001204:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001206:	4805      	ldr	r0, [pc, #20]	@ (800121c <MX_USART2_UART_Init+0x58>)
 8001208:	f004 f9cc 	bl	80055a4 <HAL_UART_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001212:	f000 f961 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200002e8 	.word	0x200002e8
 8001220:	40004400 	.word	0x40004400

08001224 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800122a:	4b10      	ldr	r3, [pc, #64]	@ (800126c <MX_DMA_Init+0x48>)
 800122c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800122e:	4a0f      	ldr	r2, [pc, #60]	@ (800126c <MX_DMA_Init+0x48>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6493      	str	r3, [r2, #72]	@ 0x48
 8001236:	4b0d      	ldr	r3, [pc, #52]	@ (800126c <MX_DMA_Init+0x48>)
 8001238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	200b      	movs	r0, #11
 8001248:	f001 fe1f 	bl	8002e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800124c:	200b      	movs	r0, #11
 800124e:	f001 fe38 	bl	8002ec2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	2011      	movs	r0, #17
 8001258:	f001 fe17 	bl	8002e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800125c:	2011      	movs	r0, #17
 800125e:	f001 fe30 	bl	8002ec2 <HAL_NVIC_EnableIRQ>

}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40021000 	.word	0x40021000

08001270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001286:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <MX_GPIO_Init+0x8c>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128a:	4a1c      	ldr	r2, [pc, #112]	@ (80012fc <MX_GPIO_Init+0x8c>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001292:	4b1a      	ldr	r3, [pc, #104]	@ (80012fc <MX_GPIO_Init+0x8c>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	4b17      	ldr	r3, [pc, #92]	@ (80012fc <MX_GPIO_Init+0x8c>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a2:	4a16      	ldr	r2, [pc, #88]	@ (80012fc <MX_GPIO_Init+0x8c>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012aa:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <MX_GPIO_Init+0x8c>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <MX_GPIO_Init+0x8c>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ba:	4a10      	ldr	r2, [pc, #64]	@ (80012fc <MX_GPIO_Init+0x8c>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c2:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <MX_GPIO_Init+0x8c>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2108      	movs	r1, #8
 80012d2:	480b      	ldr	r0, [pc, #44]	@ (8001300 <MX_GPIO_Init+0x90>)
 80012d4:	f002 f972 	bl	80035bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80012d8:	2308      	movs	r3, #8
 80012da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	4619      	mov	r1, r3
 80012ee:	4804      	ldr	r0, [pc, #16]	@ (8001300 <MX_GPIO_Init+0x90>)
 80012f0:	f001 fffa 	bl	80032e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80012f4:	bf00      	nop
 80012f6:	3720      	adds	r7, #32
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40021000 	.word	0x40021000
 8001300:	48000400 	.word	0x48000400

08001304 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
/* ADC conversion complete callback */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  buffer_ready = 1;
 800130c:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <HAL_ADC_ConvCpltCallback+0x1c>)
 800130e:	2201      	movs	r2, #1
 8001310:	701a      	strb	r2, [r3, #0]
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	200013b8 	.word	0x200013b8

08001324 <process_fft>:

/* Process FFT */
void process_fft(void) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
  // Convert ADC samples to float32 (-1 to 1)
  for (int i = 0; i < FFT_SIZE; i++) {
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	e017      	b.n	8001360 <process_fft+0x3c>
    fft_input[i] = (float32_t)(adc_buffer[i] - 2048) / 2048.0f;
 8001330:	4a39      	ldr	r2, [pc, #228]	@ (8001418 <process_fft+0xf4>)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001338:	b29b      	uxth	r3, r3
 800133a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800133e:	ee07 3a90 	vmov	s15, r3
 8001342:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001346:	eddf 6a35 	vldr	s13, [pc, #212]	@ 800141c <process_fft+0xf8>
 800134a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800134e:	4a34      	ldr	r2, [pc, #208]	@ (8001420 <process_fft+0xfc>)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < FFT_SIZE; i++) {
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3301      	adds	r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001366:	dbe3      	blt.n	8001330 <process_fft+0xc>
  }
  // Calculate and remove mean
  float32_t mean;
  arm_mean_f32(fft_input, FFT_SIZE, &mean);
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	461a      	mov	r2, r3
 800136c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001370:	482b      	ldr	r0, [pc, #172]	@ (8001420 <process_fft+0xfc>)
 8001372:	f004 fe37 	bl	8005fe4 <arm_mean_f32>
  arm_offset_f32(fft_input, -mean, fft_input, FFT_SIZE);
 8001376:	edd7 7a01 	vldr	s15, [r7, #4]
 800137a:	eef1 7a67 	vneg.f32	s15, s15
 800137e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001382:	4927      	ldr	r1, [pc, #156]	@ (8001420 <process_fft+0xfc>)
 8001384:	eeb0 0a67 	vmov.f32	s0, s15
 8001388:	4825      	ldr	r0, [pc, #148]	@ (8001420 <process_fft+0xfc>)
 800138a:	f005 fbf3 	bl	8006b74 <arm_offset_f32>

  // Perform FFT
  arm_rfft_fast_f32(&fft_instance, fft_input, fft_output, 0);
 800138e:	2300      	movs	r3, #0
 8001390:	4a24      	ldr	r2, [pc, #144]	@ (8001424 <process_fft+0x100>)
 8001392:	4923      	ldr	r1, [pc, #140]	@ (8001420 <process_fft+0xfc>)
 8001394:	4824      	ldr	r0, [pc, #144]	@ (8001428 <process_fft+0x104>)
 8001396:	f005 f80f 	bl	80063b8 <arm_rfft_fast_f32>

  // Calculate magnitude
  for (int i = 0; i < FFT_SIZE/2; i++) {
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	e032      	b.n	8001406 <process_fft+0xe2>
    fft_mag[i] = sqrtf(fft_output[2*i]*fft_output[2*i] +
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001424 <process_fft+0x100>)
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	ed93 7a00 	vldr	s14, [r3]
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001424 <process_fft+0x100>)
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	ee27 7a27 	vmul.f32	s14, s14, s15
                       fft_output[2*i+1]*fft_output[2*i+1]);
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	3301      	adds	r3, #1
 80013c6:	4a17      	ldr	r2, [pc, #92]	@ (8001424 <process_fft+0x100>)
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	edd3 6a00 	vldr	s13, [r3]
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	3301      	adds	r3, #1
 80013d6:	4a13      	ldr	r2, [pc, #76]	@ (8001424 <process_fft+0x100>)
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	edd3 7a00 	vldr	s15, [r3]
 80013e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    fft_mag[i] = sqrtf(fft_output[2*i]*fft_output[2*i] +
 80013e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e8:	eeb0 0a67 	vmov.f32	s0, s15
 80013ec:	f008 fd10 	bl	8009e10 <sqrtf>
 80013f0:	eef0 7a40 	vmov.f32	s15, s0
 80013f4:	4a0d      	ldr	r2, [pc, #52]	@ (800142c <process_fft+0x108>)
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < FFT_SIZE/2; i++) {
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	3301      	adds	r3, #1
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800140c:	dbc8      	blt.n	80013a0 <process_fft+0x7c>
  }
}
 800140e:	bf00      	nop
 8001410:	bf00      	nop
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	200003b8 	.word	0x200003b8
 800141c:	45000000 	.word	0x45000000
 8001420:	200013c0 	.word	0x200013c0
 8001424:	200023c0 	.word	0x200023c0
 8001428:	20003bc0 	.word	0x20003bc0
 800142c:	200033c0 	.word	0x200033c0

08001430 <transmit_fft_results>:

/* Transmit FFT results via UART */
void transmit_fft_results(void) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b094      	sub	sp, #80	@ 0x50
 8001434:	af02      	add	r7, sp, #8
  char uart_buf[64];
  int len;

  // Send header
  len = sprintf(uart_buf, "FFT_DATA_START,%d\r\n", FFT_SIZE/2);
 8001436:	463b      	mov	r3, r7
 8001438:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800143c:	4921      	ldr	r1, [pc, #132]	@ (80014c4 <transmit_fft_results+0x94>)
 800143e:	4618      	mov	r0, r3
 8001440:	f006 fbb4 	bl	8007bac <siprintf>
 8001444:	6438      	str	r0, [r7, #64]	@ 0x40
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, len, HAL_MAX_DELAY);
 8001446:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001448:	b29a      	uxth	r2, r3
 800144a:	4639      	mov	r1, r7
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
 8001450:	481d      	ldr	r0, [pc, #116]	@ (80014c8 <transmit_fft_results+0x98>)
 8001452:	f004 f8f5 	bl	8005640 <HAL_UART_Transmit>

  // Send FFT magnitude points
  for (int i = 0; i < FFT_SIZE/2; i++) {
 8001456:	2300      	movs	r3, #0
 8001458:	647b      	str	r3, [r7, #68]	@ 0x44
 800145a:	e01c      	b.n	8001496 <transmit_fft_results+0x66>
    len = sprintf(uart_buf, "%d,%.4f\r\n", i, fft_mag[i]);
 800145c:	4a1b      	ldr	r2, [pc, #108]	@ (80014cc <transmit_fft_results+0x9c>)
 800145e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f86e 	bl	8000548 <__aeabi_f2d>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4638      	mov	r0, r7
 8001472:	e9cd 2300 	strd	r2, r3, [sp]
 8001476:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001478:	4915      	ldr	r1, [pc, #84]	@ (80014d0 <transmit_fft_results+0xa0>)
 800147a:	f006 fb97 	bl	8007bac <siprintf>
 800147e:	6438      	str	r0, [r7, #64]	@ 0x40
    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, len, HAL_MAX_DELAY);
 8001480:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001482:	b29a      	uxth	r2, r3
 8001484:	4639      	mov	r1, r7
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	480f      	ldr	r0, [pc, #60]	@ (80014c8 <transmit_fft_results+0x98>)
 800148c:	f004 f8d8 	bl	8005640 <HAL_UART_Transmit>
  for (int i = 0; i < FFT_SIZE/2; i++) {
 8001490:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001492:	3301      	adds	r3, #1
 8001494:	647b      	str	r3, [r7, #68]	@ 0x44
 8001496:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800149c:	dbde      	blt.n	800145c <transmit_fft_results+0x2c>
  }

  // Send footer
  len = sprintf(uart_buf, "FFT_DATA_END\r\n");
 800149e:	463b      	mov	r3, r7
 80014a0:	490c      	ldr	r1, [pc, #48]	@ (80014d4 <transmit_fft_results+0xa4>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f006 fb82 	bl	8007bac <siprintf>
 80014a8:	6438      	str	r0, [r7, #64]	@ 0x40
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, len, HAL_MAX_DELAY);
 80014aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	4639      	mov	r1, r7
 80014b0:	f04f 33ff 	mov.w	r3, #4294967295
 80014b4:	4804      	ldr	r0, [pc, #16]	@ (80014c8 <transmit_fft_results+0x98>)
 80014b6:	f004 f8c3 	bl	8005640 <HAL_UART_Transmit>
}
 80014ba:	bf00      	nop
 80014bc:	3748      	adds	r7, #72	@ 0x48
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	08009e70 	.word	0x08009e70
 80014c8:	200002e8 	.word	0x200002e8
 80014cc:	200033c0 	.word	0x200033c0
 80014d0:	08009e84 	.word	0x08009e84
 80014d4:	08009e90 	.word	0x08009e90

080014d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014dc:	b672      	cpsid	i
}
 80014de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <Error_Handler+0x8>

080014e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <HAL_MspInit+0x44>)
 80014ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001528 <HAL_MspInit+0x44>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80014f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <HAL_MspInit+0x44>)
 80014f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <HAL_MspInit+0x44>)
 8001504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001506:	4a08      	ldr	r2, [pc, #32]	@ (8001528 <HAL_MspInit+0x44>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800150c:	6593      	str	r3, [r2, #88]	@ 0x58
 800150e:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <HAL_MspInit+0x44>)
 8001510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000

0800152c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b09e      	sub	sp, #120	@ 0x78
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	2254      	movs	r2, #84	@ 0x54
 800154a:	2100      	movs	r1, #0
 800154c:	4618      	mov	r0, r3
 800154e:	f006 fb92 	bl	8007c76 <memset>
  if(hadc->Instance==ADC1)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a3b      	ldr	r2, [pc, #236]	@ (8001644 <HAL_ADC_MspInit+0x118>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d16e      	bne.n	800163a <HAL_ADC_MspInit+0x10e>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800155c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001560:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001562:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001566:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001568:	2301      	movs	r3, #1
 800156a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800156c:	2301      	movs	r3, #1
 800156e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001570:	2310      	movs	r3, #16
 8001572:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001574:	2307      	movs	r3, #7
 8001576:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001578:	2302      	movs	r3, #2
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800157c:	2302      	movs	r3, #2
 800157e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001580:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001584:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001586:	f107 0310 	add.w	r3, r7, #16
 800158a:	4618      	mov	r0, r3
 800158c:	f002 feda 	bl	8004344 <HAL_RCCEx_PeriphCLKConfig>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001596:	f7ff ff9f 	bl	80014d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800159a:	4b2b      	ldr	r3, [pc, #172]	@ (8001648 <HAL_ADC_MspInit+0x11c>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	4a2a      	ldr	r2, [pc, #168]	@ (8001648 <HAL_ADC_MspInit+0x11c>)
 80015a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a6:	4b28      	ldr	r3, [pc, #160]	@ (8001648 <HAL_ADC_MspInit+0x11c>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	4b25      	ldr	r3, [pc, #148]	@ (8001648 <HAL_ADC_MspInit+0x11c>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b6:	4a24      	ldr	r2, [pc, #144]	@ (8001648 <HAL_ADC_MspInit+0x11c>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015be:	4b22      	ldr	r3, [pc, #136]	@ (8001648 <HAL_ADC_MspInit+0x11c>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015ca:	2308      	movs	r3, #8
 80015cc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015ce:	230b      	movs	r3, #11
 80015d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015da:	4619      	mov	r1, r3
 80015dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e0:	f001 fe82 	bl	80032e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80015e4:	4b19      	ldr	r3, [pc, #100]	@ (800164c <HAL_ADC_MspInit+0x120>)
 80015e6:	4a1a      	ldr	r2, [pc, #104]	@ (8001650 <HAL_ADC_MspInit+0x124>)
 80015e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80015ea:	4b18      	ldr	r3, [pc, #96]	@ (800164c <HAL_ADC_MspInit+0x120>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015f0:	4b16      	ldr	r3, [pc, #88]	@ (800164c <HAL_ADC_MspInit+0x120>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f6:	4b15      	ldr	r3, [pc, #84]	@ (800164c <HAL_ADC_MspInit+0x120>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015fc:	4b13      	ldr	r3, [pc, #76]	@ (800164c <HAL_ADC_MspInit+0x120>)
 80015fe:	2280      	movs	r2, #128	@ 0x80
 8001600:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001602:	4b12      	ldr	r3, [pc, #72]	@ (800164c <HAL_ADC_MspInit+0x120>)
 8001604:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001608:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <HAL_ADC_MspInit+0x120>)
 800160c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001610:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001612:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <HAL_ADC_MspInit+0x120>)
 8001614:	2220      	movs	r2, #32
 8001616:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001618:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <HAL_ADC_MspInit+0x120>)
 800161a:	2200      	movs	r2, #0
 800161c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800161e:	480b      	ldr	r0, [pc, #44]	@ (800164c <HAL_ADC_MspInit+0x120>)
 8001620:	f001 fc6a 	bl	8002ef8 <HAL_DMA_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 800162a:	f7ff ff55 	bl	80014d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a06      	ldr	r2, [pc, #24]	@ (800164c <HAL_ADC_MspInit+0x120>)
 8001632:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001634:	4a05      	ldr	r2, [pc, #20]	@ (800164c <HAL_ADC_MspInit+0x120>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800163a:	bf00      	nop
 800163c:	3778      	adds	r7, #120	@ 0x78
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	50040000 	.word	0x50040000
 8001648:	40021000 	.word	0x40021000
 800164c:	20000254 	.word	0x20000254
 8001650:	40020008 	.word	0x40020008

08001654 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001664:	d10b      	bne.n	800167e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001666:	4b09      	ldr	r3, [pc, #36]	@ (800168c <HAL_TIM_Base_MspInit+0x38>)
 8001668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166a:	4a08      	ldr	r2, [pc, #32]	@ (800168c <HAL_TIM_Base_MspInit+0x38>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6593      	str	r3, [r2, #88]	@ 0x58
 8001672:	4b06      	ldr	r3, [pc, #24]	@ (800168c <HAL_TIM_Base_MspInit+0x38>)
 8001674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800167e:	bf00      	nop
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40021000 	.word	0x40021000

08001690 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016b0:	d11c      	bne.n	80016ec <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	4b10      	ldr	r3, [pc, #64]	@ (80016f4 <HAL_TIM_MspPostInit+0x64>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b6:	4a0f      	ldr	r2, [pc, #60]	@ (80016f4 <HAL_TIM_MspPostInit+0x64>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016be:	4b0d      	ldr	r3, [pc, #52]	@ (80016f4 <HAL_TIM_MspPostInit+0x64>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016ca:	2320      	movs	r3, #32
 80016cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016da:	2301      	movs	r3, #1
 80016dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	4619      	mov	r1, r3
 80016e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016e8:	f001 fdfe 	bl	80032e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80016ec:	bf00      	nop
 80016ee:	3720      	adds	r7, #32
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40021000 	.word	0x40021000

080016f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b09e      	sub	sp, #120	@ 0x78
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001710:	f107 0310 	add.w	r3, r7, #16
 8001714:	2254      	movs	r2, #84	@ 0x54
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f006 faac 	bl	8007c76 <memset>
  if(huart->Instance==USART2)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a3c      	ldr	r2, [pc, #240]	@ (8001814 <HAL_UART_MspInit+0x11c>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d171      	bne.n	800180c <HAL_UART_MspInit+0x114>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001728:	2302      	movs	r3, #2
 800172a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800172c:	2300      	movs	r3, #0
 800172e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	4618      	mov	r0, r3
 8001736:	f002 fe05 	bl	8004344 <HAL_RCCEx_PeriphCLKConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001740:	f7ff feca 	bl	80014d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001744:	4b34      	ldr	r3, [pc, #208]	@ (8001818 <HAL_UART_MspInit+0x120>)
 8001746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001748:	4a33      	ldr	r2, [pc, #204]	@ (8001818 <HAL_UART_MspInit+0x120>)
 800174a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800174e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001750:	4b31      	ldr	r3, [pc, #196]	@ (8001818 <HAL_UART_MspInit+0x120>)
 8001752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175c:	4b2e      	ldr	r3, [pc, #184]	@ (8001818 <HAL_UART_MspInit+0x120>)
 800175e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001760:	4a2d      	ldr	r2, [pc, #180]	@ (8001818 <HAL_UART_MspInit+0x120>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001768:	4b2b      	ldr	r3, [pc, #172]	@ (8001818 <HAL_UART_MspInit+0x120>)
 800176a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001774:	2304      	movs	r3, #4
 8001776:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001780:	2303      	movs	r3, #3
 8001782:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001784:	2307      	movs	r3, #7
 8001786:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800178c:	4619      	mov	r1, r3
 800178e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001792:	f001 fda9 	bl	80032e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001796:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800179a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a4:	2303      	movs	r3, #3
 80017a6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80017a8:	2303      	movs	r3, #3
 80017aa:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80017ac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017b0:	4619      	mov	r1, r3
 80017b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017b6:	f001 fd97 	bl	80032e8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80017ba:	4b18      	ldr	r3, [pc, #96]	@ (800181c <HAL_UART_MspInit+0x124>)
 80017bc:	4a18      	ldr	r2, [pc, #96]	@ (8001820 <HAL_UART_MspInit+0x128>)
 80017be:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80017c0:	4b16      	ldr	r3, [pc, #88]	@ (800181c <HAL_UART_MspInit+0x124>)
 80017c2:	2202      	movs	r2, #2
 80017c4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017c6:	4b15      	ldr	r3, [pc, #84]	@ (800181c <HAL_UART_MspInit+0x124>)
 80017c8:	2210      	movs	r2, #16
 80017ca:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017cc:	4b13      	ldr	r3, [pc, #76]	@ (800181c <HAL_UART_MspInit+0x124>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017d2:	4b12      	ldr	r3, [pc, #72]	@ (800181c <HAL_UART_MspInit+0x124>)
 80017d4:	2280      	movs	r2, #128	@ 0x80
 80017d6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017d8:	4b10      	ldr	r3, [pc, #64]	@ (800181c <HAL_UART_MspInit+0x124>)
 80017da:	2200      	movs	r2, #0
 80017dc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017de:	4b0f      	ldr	r3, [pc, #60]	@ (800181c <HAL_UART_MspInit+0x124>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80017e4:	4b0d      	ldr	r3, [pc, #52]	@ (800181c <HAL_UART_MspInit+0x124>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017ea:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <HAL_UART_MspInit+0x124>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80017f0:	480a      	ldr	r0, [pc, #40]	@ (800181c <HAL_UART_MspInit+0x124>)
 80017f2:	f001 fb81 	bl	8002ef8 <HAL_DMA_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80017fc:	f7ff fe6c 	bl	80014d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a06      	ldr	r2, [pc, #24]	@ (800181c <HAL_UART_MspInit+0x124>)
 8001804:	671a      	str	r2, [r3, #112]	@ 0x70
 8001806:	4a05      	ldr	r2, [pc, #20]	@ (800181c <HAL_UART_MspInit+0x124>)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800180c:	bf00      	nop
 800180e:	3778      	adds	r7, #120	@ 0x78
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40004400 	.word	0x40004400
 8001818:	40021000 	.word	0x40021000
 800181c:	20000370 	.word	0x20000370
 8001820:	40020080 	.word	0x40020080

08001824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <NMI_Handler+0x4>

0800182c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <HardFault_Handler+0x4>

08001834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <MemManage_Handler+0x4>

0800183c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <BusFault_Handler+0x4>

08001844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <UsageFault_Handler+0x4>

0800184c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800187a:	f000 f96d 	bl	8001b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001888:	4802      	ldr	r0, [pc, #8]	@ (8001894 <DMA1_Channel1_IRQHandler+0x10>)
 800188a:	f001 fc4d 	bl	8003128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000254 	.word	0x20000254

08001898 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800189c:	4802      	ldr	r0, [pc, #8]	@ (80018a8 <DMA1_Channel7_IRQHandler+0x10>)
 800189e:	f001 fc43 	bl	8003128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000370 	.word	0x20000370

080018ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return 1;
 80018b0:	2301      	movs	r3, #1
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <_kill>:

int _kill(int pid, int sig)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018c6:	f006 fa29 	bl	8007d1c <__errno>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2216      	movs	r2, #22
 80018ce:	601a      	str	r2, [r3, #0]
  return -1;
 80018d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <_exit>:

void _exit (int status)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ffe7 	bl	80018bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80018ee:	bf00      	nop
 80018f0:	e7fd      	b.n	80018ee <_exit+0x12>

080018f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	60f8      	str	r0, [r7, #12]
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	e00a      	b.n	800191a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001904:	f3af 8000 	nop.w
 8001908:	4601      	mov	r1, r0
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	60ba      	str	r2, [r7, #8]
 8001910:	b2ca      	uxtb	r2, r1
 8001912:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	3301      	adds	r3, #1
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	429a      	cmp	r2, r3
 8001920:	dbf0      	blt.n	8001904 <_read+0x12>
  }

  return len;
 8001922:	687b      	ldr	r3, [r7, #4]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	e009      	b.n	8001952 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	1c5a      	adds	r2, r3, #1
 8001942:	60ba      	str	r2, [r7, #8]
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	3301      	adds	r3, #1
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	429a      	cmp	r2, r3
 8001958:	dbf1      	blt.n	800193e <_write+0x12>
  }
  return len;
 800195a:	687b      	ldr	r3, [r7, #4]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <_close>:

int _close(int file)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800196c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800198c:	605a      	str	r2, [r3, #4]
  return 0;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <_isatty>:

int _isatty(int file)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019a4:	2301      	movs	r3, #1
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b085      	sub	sp, #20
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d4:	4a14      	ldr	r2, [pc, #80]	@ (8001a28 <_sbrk+0x5c>)
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <_sbrk+0x60>)
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e0:	4b13      	ldr	r3, [pc, #76]	@ (8001a30 <_sbrk+0x64>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e8:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <_sbrk+0x64>)
 80019ea:	4a12      	ldr	r2, [pc, #72]	@ (8001a34 <_sbrk+0x68>)
 80019ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ee:	4b10      	ldr	r3, [pc, #64]	@ (8001a30 <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d207      	bcs.n	8001a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019fc:	f006 f98e 	bl	8007d1c <__errno>
 8001a00:	4603      	mov	r3, r0
 8001a02:	220c      	movs	r2, #12
 8001a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	e009      	b.n	8001a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a0c:	4b08      	ldr	r3, [pc, #32]	@ (8001a30 <_sbrk+0x64>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a12:	4b07      	ldr	r3, [pc, #28]	@ (8001a30 <_sbrk+0x64>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	4a05      	ldr	r2, [pc, #20]	@ (8001a30 <_sbrk+0x64>)
 8001a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	2000c000 	.word	0x2000c000
 8001a2c:	00000400 	.word	0x00000400
 8001a30:	20003bd8 	.word	0x20003bd8
 8001a34:	20003d30 	.word	0x20003d30

08001a38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a3c:	4b06      	ldr	r3, [pc, #24]	@ (8001a58 <SystemInit+0x20>)
 8001a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a42:	4a05      	ldr	r2, [pc, #20]	@ (8001a58 <SystemInit+0x20>)
 8001a44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a94 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a60:	f7ff ffea 	bl	8001a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a64:	480c      	ldr	r0, [pc, #48]	@ (8001a98 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a66:	490d      	ldr	r1, [pc, #52]	@ (8001a9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a68:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa0 <LoopForever+0xe>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a6c:	e002      	b.n	8001a74 <LoopCopyDataInit>

08001a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a72:	3304      	adds	r3, #4

08001a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a78:	d3f9      	bcc.n	8001a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a7c:	4c0a      	ldr	r4, [pc, #40]	@ (8001aa8 <LoopForever+0x16>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a80:	e001      	b.n	8001a86 <LoopFillZerobss>

08001a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a84:	3204      	adds	r2, #4

08001a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a88:	d3fb      	bcc.n	8001a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a8a:	f006 f94d 	bl	8007d28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a8e:	f7ff fa21 	bl	8000ed4 <main>

08001a92 <LoopForever>:

LoopForever:
    b LoopForever
 8001a92:	e7fe      	b.n	8001a92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a94:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a9c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001aa0:	0801d254 	.word	0x0801d254
  ldr r2, =_sbss
 8001aa4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001aa8:	20003d2c 	.word	0x20003d2c

08001aac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001aac:	e7fe      	b.n	8001aac <ADC1_IRQHandler>

08001aae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab8:	2003      	movs	r0, #3
 8001aba:	f001 f9db 	bl	8002e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f000 f80e 	bl	8001ae0 <HAL_InitTick>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d002      	beq.n	8001ad0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	71fb      	strb	r3, [r7, #7]
 8001ace:	e001      	b.n	8001ad4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ad0:	f7ff fd08 	bl	80014e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001aec:	4b17      	ldr	r3, [pc, #92]	@ (8001b4c <HAL_InitTick+0x6c>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d023      	beq.n	8001b3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001af4:	4b16      	ldr	r3, [pc, #88]	@ (8001b50 <HAL_InitTick+0x70>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b14      	ldr	r3, [pc, #80]	@ (8001b4c <HAL_InitTick+0x6c>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4619      	mov	r1, r3
 8001afe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f001 f9e7 	bl	8002ede <HAL_SYSTICK_Config>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10f      	bne.n	8001b36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b0f      	cmp	r3, #15
 8001b1a:	d809      	bhi.n	8001b30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f001 f9b1 	bl	8002e8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b28:	4a0a      	ldr	r2, [pc, #40]	@ (8001b54 <HAL_InitTick+0x74>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	e007      	b.n	8001b40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
 8001b34:	e004      	b.n	8001b40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	73fb      	strb	r3, [r7, #15]
 8001b3a:	e001      	b.n	8001b40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000008 	.word	0x20000008
 8001b50:	20000000 	.word	0x20000000
 8001b54:	20000004 	.word	0x20000004

08001b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <HAL_IncTick+0x20>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <HAL_IncTick+0x24>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4413      	add	r3, r2
 8001b68:	4a04      	ldr	r2, [pc, #16]	@ (8001b7c <HAL_IncTick+0x24>)
 8001b6a:	6013      	str	r3, [r2, #0]
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20000008 	.word	0x20000008
 8001b7c:	20003bdc 	.word	0x20003bdc

08001b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return uwTick;
 8001b84:	4b03      	ldr	r3, [pc, #12]	@ (8001b94 <HAL_GetTick+0x14>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20003bdc 	.word	0x20003bdc

08001b98 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	431a      	orrs	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b087      	sub	sp, #28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
 8001c0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	3360      	adds	r3, #96	@ 0x60
 8001c12:	461a      	mov	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b08      	ldr	r3, [pc, #32]	@ (8001c44 <LL_ADC_SetOffset+0x44>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c38:	bf00      	nop
 8001c3a:	371c      	adds	r7, #28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	03fff000 	.word	0x03fff000

08001c48 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3360      	adds	r3, #96	@ 0x60
 8001c56:	461a      	mov	r2, r3
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b087      	sub	sp, #28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	3360      	adds	r3, #96	@ 0x60
 8001c84:	461a      	mov	r2, r3
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c9e:	bf00      	nop
 8001ca0:	371c      	adds	r7, #28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b087      	sub	sp, #28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	3330      	adds	r3, #48	@ 0x30
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	f003 030c 	and.w	r3, r3, #12
 8001cec:	4413      	add	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	211f      	movs	r1, #31
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	401a      	ands	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	0e9b      	lsrs	r3, r3, #26
 8001d08:	f003 011f 	and.w	r1, r3, #31
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	f003 031f 	and.w	r3, r3, #31
 8001d12:	fa01 f303 	lsl.w	r3, r1, r3
 8001d16:	431a      	orrs	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d1c:	bf00      	nop
 8001d1e:	371c      	adds	r7, #28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b087      	sub	sp, #28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3314      	adds	r3, #20
 8001d38:	461a      	mov	r2, r3
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	0e5b      	lsrs	r3, r3, #25
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	4413      	add	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	0d1b      	lsrs	r3, r3, #20
 8001d50:	f003 031f 	and.w	r3, r3, #31
 8001d54:	2107      	movs	r1, #7
 8001d56:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	401a      	ands	r2, r3
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	0d1b      	lsrs	r3, r3, #20
 8001d62:	f003 031f 	and.w	r3, r3, #31
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d72:	bf00      	nop
 8001d74:	371c      	adds	r7, #28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
	...

08001d80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f003 0318 	and.w	r3, r3, #24
 8001da2:	4908      	ldr	r1, [pc, #32]	@ (8001dc4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001da4:	40d9      	lsrs	r1, r3
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	400b      	ands	r3, r1
 8001daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dae:	431a      	orrs	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001db6:	bf00      	nop
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	0007ffff 	.word	0x0007ffff

08001dc8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001dd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6093      	str	r3, [r2, #8]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001dfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e00:	d101      	bne.n	8001e06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e28:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e50:	d101      	bne.n	8001e56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e78:	f043 0201 	orr.w	r2, r3, #1
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <LL_ADC_IsEnabled+0x18>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <LL_ADC_IsEnabled+0x1a>
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ec2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ec6:	f043 0204 	orr.w	r2, r3, #4
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d101      	bne.n	8001ef2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d101      	bne.n	8001f18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e126      	b.n	8002190 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d109      	bne.n	8001f64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff faeb 	bl	800152c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff3f 	bl	8001dec <LL_ADC_IsDeepPowerDownEnabled>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d004      	beq.n	8001f7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff25 	bl	8001dc8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ff5a 	bl	8001e3c <LL_ADC_IsInternalRegulatorEnabled>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d115      	bne.n	8001fba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff ff3e 	bl	8001e14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f98:	4b7f      	ldr	r3, [pc, #508]	@ (8002198 <HAL_ADC_Init+0x270>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	099b      	lsrs	r3, r3, #6
 8001f9e:	4a7f      	ldr	r2, [pc, #508]	@ (800219c <HAL_ADC_Init+0x274>)
 8001fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa4:	099b      	lsrs	r3, r3, #6
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fac:	e002      	b.n	8001fb4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f9      	bne.n	8001fae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ff3c 	bl	8001e3c <LL_ADC_IsInternalRegulatorEnabled>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10d      	bne.n	8001fe6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fce:	f043 0210 	orr.w	r2, r3, #16
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fda:	f043 0201 	orr.w	r2, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ff75 	bl	8001eda <LL_ADC_REG_IsConversionOngoing>
 8001ff0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f040 80bf 	bne.w	800217e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f040 80bb 	bne.w	800217e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800200c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002010:	f043 0202 	orr.w	r2, r3, #2
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff35 	bl	8001e8c <LL_ADC_IsEnabled>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10b      	bne.n	8002040 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002028:	485d      	ldr	r0, [pc, #372]	@ (80021a0 <HAL_ADC_Init+0x278>)
 800202a:	f7ff ff2f 	bl	8001e8c <LL_ADC_IsEnabled>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d105      	bne.n	8002040 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	4619      	mov	r1, r3
 800203a:	485a      	ldr	r0, [pc, #360]	@ (80021a4 <HAL_ADC_Init+0x27c>)
 800203c:	f7ff fdac 	bl	8001b98 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	7e5b      	ldrb	r3, [r3, #25]
 8002044:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800204a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002050:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002056:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800205e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3020 	ldrb.w	r3, [r3, #32]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d106      	bne.n	800207c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002072:	3b01      	subs	r3, #1
 8002074:	045b      	lsls	r3, r3, #17
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002080:	2b00      	cmp	r3, #0
 8002082:	d009      	beq.n	8002098 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002088:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002090:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	4b42      	ldr	r3, [pc, #264]	@ (80021a8 <HAL_ADC_Init+0x280>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6812      	ldr	r2, [r2, #0]
 80020a6:	69b9      	ldr	r1, [r7, #24]
 80020a8:	430b      	orrs	r3, r1
 80020aa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff25 	bl	8001f00 <LL_ADC_INJ_IsConversionOngoing>
 80020b6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d13d      	bne.n	800213a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d13a      	bne.n	800213a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020c8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020d0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020e0:	f023 0302 	bic.w	r3, r3, #2
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	69b9      	ldr	r1, [r7, #24]
 80020ea:	430b      	orrs	r3, r1
 80020ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d118      	bne.n	800212a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002102:	f023 0304 	bic.w	r3, r3, #4
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800210e:	4311      	orrs	r1, r2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002114:	4311      	orrs	r1, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800211a:	430a      	orrs	r2, r1
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0201 	orr.w	r2, r2, #1
 8002126:	611a      	str	r2, [r3, #16]
 8002128:	e007      	b.n	800213a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0201 	bic.w	r2, r2, #1
 8002138:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d10c      	bne.n	800215c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002148:	f023 010f 	bic.w	r1, r3, #15
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	1e5a      	subs	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	631a      	str	r2, [r3, #48]	@ 0x30
 800215a:	e007      	b.n	800216c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 020f 	bic.w	r2, r2, #15
 800216a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002170:	f023 0303 	bic.w	r3, r3, #3
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	655a      	str	r2, [r3, #84]	@ 0x54
 800217c:	e007      	b.n	800218e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002182:	f043 0210 	orr.w	r2, r3, #16
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800218e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3720      	adds	r7, #32
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000000 	.word	0x20000000
 800219c:	053e2d63 	.word	0x053e2d63
 80021a0:	50040000 	.word	0x50040000
 80021a4:	50040300 	.word	0x50040300
 80021a8:	fff0c007 	.word	0xfff0c007

080021ac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fe8c 	bl	8001eda <LL_ADC_REG_IsConversionOngoing>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d167      	bne.n	8002298 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d101      	bne.n	80021d6 <HAL_ADC_Start_DMA+0x2a>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e063      	b.n	800229e <HAL_ADC_Start_DMA+0xf2>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 fc5e 	bl	8002aa0 <ADC_Enable>
 80021e4:	4603      	mov	r3, r0
 80021e6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80021e8:	7dfb      	ldrb	r3, [r7, #23]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d14f      	bne.n	800228e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80021f6:	f023 0301 	bic.w	r3, r3, #1
 80021fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002206:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d006      	beq.n	800221c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002212:	f023 0206 	bic.w	r2, r3, #6
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	659a      	str	r2, [r3, #88]	@ 0x58
 800221a:	e002      	b.n	8002222 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002226:	4a20      	ldr	r2, [pc, #128]	@ (80022a8 <HAL_ADC_Start_DMA+0xfc>)
 8002228:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222e:	4a1f      	ldr	r2, [pc, #124]	@ (80022ac <HAL_ADC_Start_DMA+0x100>)
 8002230:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002236:	4a1e      	ldr	r2, [pc, #120]	@ (80022b0 <HAL_ADC_Start_DMA+0x104>)
 8002238:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	221c      	movs	r2, #28
 8002240:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0210 	orr.w	r2, r2, #16
 8002258:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f042 0201 	orr.w	r2, r2, #1
 8002268:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	3340      	adds	r3, #64	@ 0x40
 8002274:	4619      	mov	r1, r3
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f000 fef5 	bl	8003068 <HAL_DMA_Start_IT>
 800227e:	4603      	mov	r3, r0
 8002280:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff fe13 	bl	8001eb2 <LL_ADC_REG_StartConversion>
 800228c:	e006      	b.n	800229c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002296:	e001      	b.n	800229c <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002298:	2302      	movs	r3, #2
 800229a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800229c:	7dfb      	ldrb	r3, [r7, #23]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	08002bad 	.word	0x08002bad
 80022ac:	08002c85 	.word	0x08002c85
 80022b0:	08002ca1 	.word	0x08002ca1

080022b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b0b6      	sub	sp, #216	@ 0xd8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x22>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e3bb      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x79a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff fde5 	bl	8001eda <LL_ADC_REG_IsConversionOngoing>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	f040 83a0 	bne.w	8002a58 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b05      	cmp	r3, #5
 8002326:	d824      	bhi.n	8002372 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	3b02      	subs	r3, #2
 800232e:	2b03      	cmp	r3, #3
 8002330:	d81b      	bhi.n	800236a <HAL_ADC_ConfigChannel+0x8e>
 8002332:	a201      	add	r2, pc, #4	@ (adr r2, 8002338 <HAL_ADC_ConfigChannel+0x5c>)
 8002334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002338:	08002349 	.word	0x08002349
 800233c:	08002351 	.word	0x08002351
 8002340:	08002359 	.word	0x08002359
 8002344:	08002361 	.word	0x08002361
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002348:	230c      	movs	r3, #12
 800234a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800234e:	e010      	b.n	8002372 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002350:	2312      	movs	r3, #18
 8002352:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002356:	e00c      	b.n	8002372 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002358:	2318      	movs	r3, #24
 800235a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800235e:	e008      	b.n	8002372 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002360:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002364:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002368:	e003      	b.n	8002372 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800236a:	2306      	movs	r3, #6
 800236c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002370:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002380:	f7ff fca6 	bl	8001cd0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fda6 	bl	8001eda <LL_ADC_REG_IsConversionOngoing>
 800238e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fdb2 	bl	8001f00 <LL_ADC_INJ_IsConversionOngoing>
 800239c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f040 81a4 	bne.w	80026f2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 819f 	bne.w	80026f2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6818      	ldr	r0, [r3, #0]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	6819      	ldr	r1, [r3, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	461a      	mov	r2, r3
 80023c2:	f7ff fcb1 	bl	8001d28 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	695a      	ldr	r2, [r3, #20]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	08db      	lsrs	r3, r3, #3
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d00a      	beq.n	80023fe <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	6919      	ldr	r1, [r3, #16]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023f8:	f7ff fc02 	bl	8001c00 <LL_ADC_SetOffset>
 80023fc:	e179      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2100      	movs	r1, #0
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fc1f 	bl	8001c48 <LL_ADC_GetOffsetChannel>
 800240a:	4603      	mov	r3, r0
 800240c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10a      	bne.n	800242a <HAL_ADC_ConfigChannel+0x14e>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2100      	movs	r1, #0
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff fc14 	bl	8001c48 <LL_ADC_GetOffsetChannel>
 8002420:	4603      	mov	r3, r0
 8002422:	0e9b      	lsrs	r3, r3, #26
 8002424:	f003 021f 	and.w	r2, r3, #31
 8002428:	e01e      	b.n	8002468 <HAL_ADC_ConfigChannel+0x18c>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2100      	movs	r1, #0
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fc09 	bl	8001c48 <LL_ADC_GetOffsetChannel>
 8002436:	4603      	mov	r3, r0
 8002438:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002440:	fa93 f3a3 	rbit	r3, r3
 8002444:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002448:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800244c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002450:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002458:	2320      	movs	r3, #32
 800245a:	e004      	b.n	8002466 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800245c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002470:	2b00      	cmp	r3, #0
 8002472:	d105      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x1a4>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	0e9b      	lsrs	r3, r3, #26
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	e018      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x1d6>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800248c:	fa93 f3a3 	rbit	r3, r3
 8002490:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002494:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002498:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800249c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80024a4:	2320      	movs	r3, #32
 80024a6:	e004      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80024a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024ac:	fab3 f383 	clz	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d106      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2200      	movs	r2, #0
 80024bc:	2100      	movs	r1, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fbd8 	bl	8001c74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2101      	movs	r1, #1
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fbbc 	bl	8001c48 <LL_ADC_GetOffsetChannel>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10a      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x214>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2101      	movs	r1, #1
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fbb1 	bl	8001c48 <LL_ADC_GetOffsetChannel>
 80024e6:	4603      	mov	r3, r0
 80024e8:	0e9b      	lsrs	r3, r3, #26
 80024ea:	f003 021f 	and.w	r2, r3, #31
 80024ee:	e01e      	b.n	800252e <HAL_ADC_ConfigChannel+0x252>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2101      	movs	r1, #1
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fba6 	bl	8001c48 <LL_ADC_GetOffsetChannel>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002506:	fa93 f3a3 	rbit	r3, r3
 800250a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800250e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002512:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002516:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800251e:	2320      	movs	r3, #32
 8002520:	e004      	b.n	800252c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002522:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002526:	fab3 f383 	clz	r3, r3
 800252a:	b2db      	uxtb	r3, r3
 800252c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002536:	2b00      	cmp	r3, #0
 8002538:	d105      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x26a>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	0e9b      	lsrs	r3, r3, #26
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	e018      	b.n	8002578 <HAL_ADC_ConfigChannel+0x29c>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800255a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800255e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002562:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800256a:	2320      	movs	r3, #32
 800256c:	e004      	b.n	8002578 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800256e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002578:	429a      	cmp	r2, r3
 800257a:	d106      	bne.n	800258a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2200      	movs	r2, #0
 8002582:	2101      	movs	r1, #1
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fb75 	bl	8001c74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2102      	movs	r1, #2
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fb59 	bl	8001c48 <LL_ADC_GetOffsetChannel>
 8002596:	4603      	mov	r3, r0
 8002598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10a      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x2da>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2102      	movs	r1, #2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fb4e 	bl	8001c48 <LL_ADC_GetOffsetChannel>
 80025ac:	4603      	mov	r3, r0
 80025ae:	0e9b      	lsrs	r3, r3, #26
 80025b0:	f003 021f 	and.w	r2, r3, #31
 80025b4:	e01e      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x318>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2102      	movs	r1, #2
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fb43 	bl	8001c48 <LL_ADC_GetOffsetChannel>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80025d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80025dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80025e4:	2320      	movs	r3, #32
 80025e6:	e004      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80025e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025ec:	fab3 f383 	clz	r3, r3
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d105      	bne.n	800260c <HAL_ADC_ConfigChannel+0x330>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	0e9b      	lsrs	r3, r3, #26
 8002606:	f003 031f 	and.w	r3, r3, #31
 800260a:	e014      	b.n	8002636 <HAL_ADC_ConfigChannel+0x35a>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800261a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800261c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002620:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002628:	2320      	movs	r3, #32
 800262a:	e004      	b.n	8002636 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800262c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002630:	fab3 f383 	clz	r3, r3
 8002634:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002636:	429a      	cmp	r2, r3
 8002638:	d106      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2200      	movs	r2, #0
 8002640:	2102      	movs	r1, #2
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fb16 	bl	8001c74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2103      	movs	r1, #3
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fafa 	bl	8001c48 <LL_ADC_GetOffsetChannel>
 8002654:	4603      	mov	r3, r0
 8002656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10a      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x398>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2103      	movs	r1, #3
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff faef 	bl	8001c48 <LL_ADC_GetOffsetChannel>
 800266a:	4603      	mov	r3, r0
 800266c:	0e9b      	lsrs	r3, r3, #26
 800266e:	f003 021f 	and.w	r2, r3, #31
 8002672:	e017      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x3c8>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2103      	movs	r1, #3
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fae4 	bl	8001c48 <LL_ADC_GetOffsetChannel>
 8002680:	4603      	mov	r3, r0
 8002682:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800268c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800268e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002690:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002696:	2320      	movs	r3, #32
 8002698:	e003      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800269a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800269c:	fab3 f383 	clz	r3, r3
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d105      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x3e0>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	0e9b      	lsrs	r3, r3, #26
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	e011      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x404>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026c4:	fa93 f3a3 	rbit	r3, r3
 80026c8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80026ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026cc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80026ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80026d4:	2320      	movs	r3, #32
 80026d6:	e003      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80026d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026da:	fab3 f383 	clz	r3, r3
 80026de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d106      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2200      	movs	r2, #0
 80026ea:	2103      	movs	r1, #3
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fac1 	bl	8001c74 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fbc8 	bl	8001e8c <LL_ADC_IsEnabled>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f040 8140 	bne.w	8002984 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	6819      	ldr	r1, [r3, #0]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	461a      	mov	r2, r3
 8002712:	f7ff fb35 	bl	8001d80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	4a8f      	ldr	r2, [pc, #572]	@ (8002958 <HAL_ADC_ConfigChannel+0x67c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	f040 8131 	bne.w	8002984 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10b      	bne.n	800274a <HAL_ADC_ConfigChannel+0x46e>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	0e9b      	lsrs	r3, r3, #26
 8002738:	3301      	adds	r3, #1
 800273a:	f003 031f 	and.w	r3, r3, #31
 800273e:	2b09      	cmp	r3, #9
 8002740:	bf94      	ite	ls
 8002742:	2301      	movls	r3, #1
 8002744:	2300      	movhi	r3, #0
 8002746:	b2db      	uxtb	r3, r3
 8002748:	e019      	b.n	800277e <HAL_ADC_ConfigChannel+0x4a2>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002758:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800275a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800275c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002762:	2320      	movs	r3, #32
 8002764:	e003      	b.n	800276e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002766:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002768:	fab3 f383 	clz	r3, r3
 800276c:	b2db      	uxtb	r3, r3
 800276e:	3301      	adds	r3, #1
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	2b09      	cmp	r3, #9
 8002776:	bf94      	ite	ls
 8002778:	2301      	movls	r3, #1
 800277a:	2300      	movhi	r3, #0
 800277c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800277e:	2b00      	cmp	r3, #0
 8002780:	d079      	beq.n	8002876 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278a:	2b00      	cmp	r3, #0
 800278c:	d107      	bne.n	800279e <HAL_ADC_ConfigChannel+0x4c2>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	0e9b      	lsrs	r3, r3, #26
 8002794:	3301      	adds	r3, #1
 8002796:	069b      	lsls	r3, r3, #26
 8002798:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800279c:	e015      	b.n	80027ca <HAL_ADC_ConfigChannel+0x4ee>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80027ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027ae:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80027b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80027b6:	2320      	movs	r3, #32
 80027b8:	e003      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80027ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027bc:	fab3 f383 	clz	r3, r3
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	3301      	adds	r3, #1
 80027c4:	069b      	lsls	r3, r3, #26
 80027c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x50e>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	0e9b      	lsrs	r3, r3, #26
 80027dc:	3301      	adds	r3, #1
 80027de:	f003 031f 	and.w	r3, r3, #31
 80027e2:	2101      	movs	r1, #1
 80027e4:	fa01 f303 	lsl.w	r3, r1, r3
 80027e8:	e017      	b.n	800281a <HAL_ADC_ConfigChannel+0x53e>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80027f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027fa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80027fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002802:	2320      	movs	r3, #32
 8002804:	e003      	b.n	800280e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002806:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002808:	fab3 f383 	clz	r3, r3
 800280c:	b2db      	uxtb	r3, r3
 800280e:	3301      	adds	r3, #1
 8002810:	f003 031f 	and.w	r3, r3, #31
 8002814:	2101      	movs	r1, #1
 8002816:	fa01 f303 	lsl.w	r3, r1, r3
 800281a:	ea42 0103 	orr.w	r1, r2, r3
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10a      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x564>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	0e9b      	lsrs	r3, r3, #26
 8002830:	3301      	adds	r3, #1
 8002832:	f003 021f 	and.w	r2, r3, #31
 8002836:	4613      	mov	r3, r2
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	4413      	add	r3, r2
 800283c:	051b      	lsls	r3, r3, #20
 800283e:	e018      	b.n	8002872 <HAL_ADC_ConfigChannel+0x596>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800284e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002850:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002858:	2320      	movs	r3, #32
 800285a:	e003      	b.n	8002864 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800285c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	3301      	adds	r3, #1
 8002866:	f003 021f 	and.w	r2, r3, #31
 800286a:	4613      	mov	r3, r2
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	4413      	add	r3, r2
 8002870:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002872:	430b      	orrs	r3, r1
 8002874:	e081      	b.n	800297a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800287e:	2b00      	cmp	r3, #0
 8002880:	d107      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x5b6>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	0e9b      	lsrs	r3, r3, #26
 8002888:	3301      	adds	r3, #1
 800288a:	069b      	lsls	r3, r3, #26
 800288c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002890:	e015      	b.n	80028be <HAL_ADC_ConfigChannel+0x5e2>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80028a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80028a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80028aa:	2320      	movs	r3, #32
 80028ac:	e003      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80028ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028b0:	fab3 f383 	clz	r3, r3
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	3301      	adds	r3, #1
 80028b8:	069b      	lsls	r3, r3, #26
 80028ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d109      	bne.n	80028de <HAL_ADC_ConfigChannel+0x602>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	0e9b      	lsrs	r3, r3, #26
 80028d0:	3301      	adds	r3, #1
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	2101      	movs	r1, #1
 80028d8:	fa01 f303 	lsl.w	r3, r1, r3
 80028dc:	e017      	b.n	800290e <HAL_ADC_ConfigChannel+0x632>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	61bb      	str	r3, [r7, #24]
  return result;
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80028f6:	2320      	movs	r3, #32
 80028f8:	e003      	b.n	8002902 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	fab3 f383 	clz	r3, r3
 8002900:	b2db      	uxtb	r3, r3
 8002902:	3301      	adds	r3, #1
 8002904:	f003 031f 	and.w	r3, r3, #31
 8002908:	2101      	movs	r1, #1
 800290a:	fa01 f303 	lsl.w	r3, r1, r3
 800290e:	ea42 0103 	orr.w	r1, r2, r3
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10d      	bne.n	800293a <HAL_ADC_ConfigChannel+0x65e>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	0e9b      	lsrs	r3, r3, #26
 8002924:	3301      	adds	r3, #1
 8002926:	f003 021f 	and.w	r2, r3, #31
 800292a:	4613      	mov	r3, r2
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	4413      	add	r3, r2
 8002930:	3b1e      	subs	r3, #30
 8002932:	051b      	lsls	r3, r3, #20
 8002934:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002938:	e01e      	b.n	8002978 <HAL_ADC_ConfigChannel+0x69c>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	60fb      	str	r3, [r7, #12]
  return result;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d104      	bne.n	800295c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002952:	2320      	movs	r3, #32
 8002954:	e006      	b.n	8002964 <HAL_ADC_ConfigChannel+0x688>
 8002956:	bf00      	nop
 8002958:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	fab3 f383 	clz	r3, r3
 8002962:	b2db      	uxtb	r3, r3
 8002964:	3301      	adds	r3, #1
 8002966:	f003 021f 	and.w	r2, r3, #31
 800296a:	4613      	mov	r3, r2
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	4413      	add	r3, r2
 8002970:	3b1e      	subs	r3, #30
 8002972:	051b      	lsls	r3, r3, #20
 8002974:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002978:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800297e:	4619      	mov	r1, r3
 8002980:	f7ff f9d2 	bl	8001d28 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4b3d      	ldr	r3, [pc, #244]	@ (8002a80 <HAL_ADC_ConfigChannel+0x7a4>)
 800298a:	4013      	ands	r3, r2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d06c      	beq.n	8002a6a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002990:	483c      	ldr	r0, [pc, #240]	@ (8002a84 <HAL_ADC_ConfigChannel+0x7a8>)
 8002992:	f7ff f927 	bl	8001be4 <LL_ADC_GetCommonPathInternalCh>
 8002996:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a3a      	ldr	r2, [pc, #232]	@ (8002a88 <HAL_ADC_ConfigChannel+0x7ac>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d127      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d121      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a35      	ldr	r2, [pc, #212]	@ (8002a8c <HAL_ADC_ConfigChannel+0x7b0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d157      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029c2:	4619      	mov	r1, r3
 80029c4:	482f      	ldr	r0, [pc, #188]	@ (8002a84 <HAL_ADC_ConfigChannel+0x7a8>)
 80029c6:	f7ff f8fa 	bl	8001bbe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029ca:	4b31      	ldr	r3, [pc, #196]	@ (8002a90 <HAL_ADC_ConfigChannel+0x7b4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	099b      	lsrs	r3, r3, #6
 80029d0:	4a30      	ldr	r2, [pc, #192]	@ (8002a94 <HAL_ADC_ConfigChannel+0x7b8>)
 80029d2:	fba2 2303 	umull	r2, r3, r2, r3
 80029d6:	099b      	lsrs	r3, r3, #6
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	4613      	mov	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4413      	add	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80029e4:	e002      	b.n	80029ec <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f9      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029f2:	e03a      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a27      	ldr	r2, [pc, #156]	@ (8002a98 <HAL_ADC_ConfigChannel+0x7bc>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d113      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10d      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a1f      	ldr	r2, [pc, #124]	@ (8002a8c <HAL_ADC_ConfigChannel+0x7b0>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d12a      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4819      	ldr	r0, [pc, #100]	@ (8002a84 <HAL_ADC_ConfigChannel+0x7a8>)
 8002a20:	f7ff f8cd 	bl	8001bbe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a24:	e021      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8002a9c <HAL_ADC_ConfigChannel+0x7c0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d11c      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d116      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a12      	ldr	r2, [pc, #72]	@ (8002a8c <HAL_ADC_ConfigChannel+0x7b0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d111      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a4a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a4e:	4619      	mov	r1, r3
 8002a50:	480c      	ldr	r0, [pc, #48]	@ (8002a84 <HAL_ADC_ConfigChannel+0x7a8>)
 8002a52:	f7ff f8b4 	bl	8001bbe <LL_ADC_SetCommonPathInternalCh>
 8002a56:	e008      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a5c:	f043 0220 	orr.w	r2, r3, #32
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a72:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	37d8      	adds	r7, #216	@ 0xd8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	80080000 	.word	0x80080000
 8002a84:	50040300 	.word	0x50040300
 8002a88:	c7520000 	.word	0xc7520000
 8002a8c:	50040000 	.word	0x50040000
 8002a90:	20000000 	.word	0x20000000
 8002a94:	053e2d63 	.word	0x053e2d63
 8002a98:	cb840000 	.word	0xcb840000
 8002a9c:	80000001 	.word	0x80000001

08002aa0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff f9eb 	bl	8001e8c <LL_ADC_IsEnabled>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d169      	bne.n	8002b90 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	4b36      	ldr	r3, [pc, #216]	@ (8002b9c <ADC_Enable+0xfc>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00d      	beq.n	8002ae6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ace:	f043 0210 	orr.w	r2, r3, #16
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ada:	f043 0201 	orr.w	r2, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e055      	b.n	8002b92 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff f9ba 	bl	8001e64 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002af0:	482b      	ldr	r0, [pc, #172]	@ (8002ba0 <ADC_Enable+0x100>)
 8002af2:	f7ff f877 	bl	8001be4 <LL_ADC_GetCommonPathInternalCh>
 8002af6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002af8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d013      	beq.n	8002b28 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b00:	4b28      	ldr	r3, [pc, #160]	@ (8002ba4 <ADC_Enable+0x104>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	099b      	lsrs	r3, r3, #6
 8002b06:	4a28      	ldr	r2, [pc, #160]	@ (8002ba8 <ADC_Enable+0x108>)
 8002b08:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0c:	099b      	lsrs	r3, r3, #6
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	4613      	mov	r3, r2
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b1a:	e002      	b.n	8002b22 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1f9      	bne.n	8002b1c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b28:	f7ff f82a 	bl	8001b80 <HAL_GetTick>
 8002b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b2e:	e028      	b.n	8002b82 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff f9a9 	bl	8001e8c <LL_ADC_IsEnabled>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d104      	bne.n	8002b4a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff f98d 	bl	8001e64 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b4a:	f7ff f819 	bl	8001b80 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d914      	bls.n	8002b82 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d00d      	beq.n	8002b82 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6a:	f043 0210 	orr.w	r2, r3, #16
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b76:	f043 0201 	orr.w	r2, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e007      	b.n	8002b92 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d1cf      	bne.n	8002b30 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	8000003f 	.word	0x8000003f
 8002ba0:	50040300 	.word	0x50040300
 8002ba4:	20000000 	.word	0x20000000
 8002ba8:	053e2d63 	.word	0x053e2d63

08002bac <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bbe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d14b      	bne.n	8002c5e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bca:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d021      	beq.n	8002c24 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff f860 	bl	8001caa <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d032      	beq.n	8002c56 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d12b      	bne.n	8002c56 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c02:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d11f      	bne.n	8002c56 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c1a:	f043 0201 	orr.w	r2, r3, #1
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	655a      	str	r2, [r3, #84]	@ 0x54
 8002c22:	e018      	b.n	8002c56 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d111      	bne.n	8002c56 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c36:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d105      	bne.n	8002c56 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c4e:	f043 0201 	orr.w	r2, r3, #1
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f7fe fb54 	bl	8001304 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c5c:	e00e      	b.n	8002c7c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f7ff fb2c 	bl	80022c8 <HAL_ADC_ErrorCallback>
}
 8002c70:	e004      	b.n	8002c7c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	4798      	blx	r3
}
 8002c7c:	bf00      	nop
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c90:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f7ff fb0e 	bl	80022b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c98:	bf00      	nop
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cac:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cbe:	f043 0204 	orr.w	r2, r3, #4
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f7ff fafe 	bl	80022c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ccc:	bf00      	nop
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d18 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d06:	4a04      	ldr	r2, [pc, #16]	@ (8002d18 <__NVIC_SetPriorityGrouping+0x44>)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	60d3      	str	r3, [r2, #12]
}
 8002d0c:	bf00      	nop
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000ed00 	.word	0xe000ed00

08002d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d20:	4b04      	ldr	r3, [pc, #16]	@ (8002d34 <__NVIC_GetPriorityGrouping+0x18>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	0a1b      	lsrs	r3, r3, #8
 8002d26:	f003 0307 	and.w	r3, r3, #7
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	e000ed00 	.word	0xe000ed00

08002d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	db0b      	blt.n	8002d62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	f003 021f 	and.w	r2, r3, #31
 8002d50:	4907      	ldr	r1, [pc, #28]	@ (8002d70 <__NVIC_EnableIRQ+0x38>)
 8002d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	2001      	movs	r0, #1
 8002d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	e000e100 	.word	0xe000e100

08002d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	6039      	str	r1, [r7, #0]
 8002d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	db0a      	blt.n	8002d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	490c      	ldr	r1, [pc, #48]	@ (8002dc0 <__NVIC_SetPriority+0x4c>)
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	0112      	lsls	r2, r2, #4
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	440b      	add	r3, r1
 8002d98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d9c:	e00a      	b.n	8002db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	4908      	ldr	r1, [pc, #32]	@ (8002dc4 <__NVIC_SetPriority+0x50>)
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	3b04      	subs	r3, #4
 8002dac:	0112      	lsls	r2, r2, #4
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	440b      	add	r3, r1
 8002db2:	761a      	strb	r2, [r3, #24]
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	e000e100 	.word	0xe000e100
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b089      	sub	sp, #36	@ 0x24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f1c3 0307 	rsb	r3, r3, #7
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	bf28      	it	cs
 8002de6:	2304      	movcs	r3, #4
 8002de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3304      	adds	r3, #4
 8002dee:	2b06      	cmp	r3, #6
 8002df0:	d902      	bls.n	8002df8 <NVIC_EncodePriority+0x30>
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3b03      	subs	r3, #3
 8002df6:	e000      	b.n	8002dfa <NVIC_EncodePriority+0x32>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43da      	mvns	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	401a      	ands	r2, r3
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e10:	f04f 31ff 	mov.w	r1, #4294967295
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1a:	43d9      	mvns	r1, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e20:	4313      	orrs	r3, r2
         );
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3724      	adds	r7, #36	@ 0x24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
	...

08002e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e40:	d301      	bcc.n	8002e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e42:	2301      	movs	r3, #1
 8002e44:	e00f      	b.n	8002e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e46:	4a0a      	ldr	r2, [pc, #40]	@ (8002e70 <SysTick_Config+0x40>)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e4e:	210f      	movs	r1, #15
 8002e50:	f04f 30ff 	mov.w	r0, #4294967295
 8002e54:	f7ff ff8e 	bl	8002d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e58:	4b05      	ldr	r3, [pc, #20]	@ (8002e70 <SysTick_Config+0x40>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e5e:	4b04      	ldr	r3, [pc, #16]	@ (8002e70 <SysTick_Config+0x40>)
 8002e60:	2207      	movs	r2, #7
 8002e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	e000e010 	.word	0xe000e010

08002e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7ff ff29 	bl	8002cd4 <__NVIC_SetPriorityGrouping>
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b086      	sub	sp, #24
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	4603      	mov	r3, r0
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	607a      	str	r2, [r7, #4]
 8002e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e9c:	f7ff ff3e 	bl	8002d1c <__NVIC_GetPriorityGrouping>
 8002ea0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	68b9      	ldr	r1, [r7, #8]
 8002ea6:	6978      	ldr	r0, [r7, #20]
 8002ea8:	f7ff ff8e 	bl	8002dc8 <NVIC_EncodePriority>
 8002eac:	4602      	mov	r2, r0
 8002eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ff5d 	bl	8002d74 <__NVIC_SetPriority>
}
 8002eba:	bf00      	nop
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	4603      	mov	r3, r0
 8002eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ff31 	bl	8002d38 <__NVIC_EnableIRQ>
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7ff ffa2 	bl	8002e30 <SysTick_Config>
 8002eec:	4603      	mov	r3, r0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e098      	b.n	800303c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	4b4d      	ldr	r3, [pc, #308]	@ (8003048 <HAL_DMA_Init+0x150>)
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d80f      	bhi.n	8002f36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800304c <HAL_DMA_Init+0x154>)
 8002f1e:	4413      	add	r3, r2
 8002f20:	4a4b      	ldr	r2, [pc, #300]	@ (8003050 <HAL_DMA_Init+0x158>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	091b      	lsrs	r3, r3, #4
 8002f28:	009a      	lsls	r2, r3, #2
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a48      	ldr	r2, [pc, #288]	@ (8003054 <HAL_DMA_Init+0x15c>)
 8002f32:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f34:	e00e      	b.n	8002f54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4b46      	ldr	r3, [pc, #280]	@ (8003058 <HAL_DMA_Init+0x160>)
 8002f3e:	4413      	add	r3, r2
 8002f40:	4a43      	ldr	r2, [pc, #268]	@ (8003050 <HAL_DMA_Init+0x158>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	091b      	lsrs	r3, r3, #4
 8002f48:	009a      	lsls	r2, r3, #2
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a42      	ldr	r2, [pc, #264]	@ (800305c <HAL_DMA_Init+0x164>)
 8002f52:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fae:	d039      	beq.n	8003024 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb4:	4a27      	ldr	r2, [pc, #156]	@ (8003054 <HAL_DMA_Init+0x15c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d11a      	bne.n	8002ff0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002fba:	4b29      	ldr	r3, [pc, #164]	@ (8003060 <HAL_DMA_Init+0x168>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc2:	f003 031c 	and.w	r3, r3, #28
 8002fc6:	210f      	movs	r1, #15
 8002fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	4924      	ldr	r1, [pc, #144]	@ (8003060 <HAL_DMA_Init+0x168>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002fd4:	4b22      	ldr	r3, [pc, #136]	@ (8003060 <HAL_DMA_Init+0x168>)
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6859      	ldr	r1, [r3, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe0:	f003 031c 	and.w	r3, r3, #28
 8002fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe8:	491d      	ldr	r1, [pc, #116]	@ (8003060 <HAL_DMA_Init+0x168>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	600b      	str	r3, [r1, #0]
 8002fee:	e019      	b.n	8003024 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ff0:	4b1c      	ldr	r3, [pc, #112]	@ (8003064 <HAL_DMA_Init+0x16c>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff8:	f003 031c 	and.w	r3, r3, #28
 8002ffc:	210f      	movs	r1, #15
 8002ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8003002:	43db      	mvns	r3, r3
 8003004:	4917      	ldr	r1, [pc, #92]	@ (8003064 <HAL_DMA_Init+0x16c>)
 8003006:	4013      	ands	r3, r2
 8003008:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800300a:	4b16      	ldr	r3, [pc, #88]	@ (8003064 <HAL_DMA_Init+0x16c>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6859      	ldr	r1, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003016:	f003 031c 	and.w	r3, r3, #28
 800301a:	fa01 f303 	lsl.w	r3, r1, r3
 800301e:	4911      	ldr	r1, [pc, #68]	@ (8003064 <HAL_DMA_Init+0x16c>)
 8003020:	4313      	orrs	r3, r2
 8003022:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	40020407 	.word	0x40020407
 800304c:	bffdfff8 	.word	0xbffdfff8
 8003050:	cccccccd 	.word	0xcccccccd
 8003054:	40020000 	.word	0x40020000
 8003058:	bffdfbf8 	.word	0xbffdfbf8
 800305c:	40020400 	.word	0x40020400
 8003060:	400200a8 	.word	0x400200a8
 8003064:	400204a8 	.word	0x400204a8

08003068 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
 8003074:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_DMA_Start_IT+0x20>
 8003084:	2302      	movs	r3, #2
 8003086:	e04b      	b.n	8003120 <HAL_DMA_Start_IT+0xb8>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b01      	cmp	r3, #1
 800309a:	d13a      	bne.n	8003112 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0201 	bic.w	r2, r2, #1
 80030b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	68b9      	ldr	r1, [r7, #8]
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f8e0 	bl	8003286 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d008      	beq.n	80030e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f042 020e 	orr.w	r2, r2, #14
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	e00f      	b.n	8003100 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0204 	bic.w	r2, r2, #4
 80030ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 020a 	orr.w	r2, r2, #10
 80030fe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	e005      	b.n	800311e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800311a:	2302      	movs	r3, #2
 800311c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800311e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003144:	f003 031c 	and.w	r3, r3, #28
 8003148:	2204      	movs	r2, #4
 800314a:	409a      	lsls	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4013      	ands	r3, r2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d026      	beq.n	80031a2 <HAL_DMA_IRQHandler+0x7a>
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	2b00      	cmp	r3, #0
 800315c:	d021      	beq.n	80031a2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0320 	and.w	r3, r3, #32
 8003168:	2b00      	cmp	r3, #0
 800316a:	d107      	bne.n	800317c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0204 	bic.w	r2, r2, #4
 800317a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003180:	f003 021c 	and.w	r2, r3, #28
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003188:	2104      	movs	r1, #4
 800318a:	fa01 f202 	lsl.w	r2, r1, r2
 800318e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003194:	2b00      	cmp	r3, #0
 8003196:	d071      	beq.n	800327c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80031a0:	e06c      	b.n	800327c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a6:	f003 031c 	and.w	r3, r3, #28
 80031aa:	2202      	movs	r2, #2
 80031ac:	409a      	lsls	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d02e      	beq.n	8003214 <HAL_DMA_IRQHandler+0xec>
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d029      	beq.n	8003214 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10b      	bne.n	80031e6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 020a 	bic.w	r2, r2, #10
 80031dc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ea:	f003 021c 	and.w	r2, r3, #28
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f2:	2102      	movs	r1, #2
 80031f4:	fa01 f202 	lsl.w	r2, r1, r2
 80031f8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003206:	2b00      	cmp	r3, #0
 8003208:	d038      	beq.n	800327c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003212:	e033      	b.n	800327c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003218:	f003 031c 	and.w	r3, r3, #28
 800321c:	2208      	movs	r2, #8
 800321e:	409a      	lsls	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4013      	ands	r3, r2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d02a      	beq.n	800327e <HAL_DMA_IRQHandler+0x156>
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d025      	beq.n	800327e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 020e 	bic.w	r2, r2, #14
 8003240:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003246:	f003 021c 	and.w	r2, r3, #28
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324e:	2101      	movs	r1, #1
 8003250:	fa01 f202 	lsl.w	r2, r1, r2
 8003254:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003270:	2b00      	cmp	r3, #0
 8003272:	d004      	beq.n	800327e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800327c:	bf00      	nop
 800327e:	bf00      	nop
}
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003286:	b480      	push	{r7}
 8003288:	b085      	sub	sp, #20
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
 8003292:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003298:	f003 021c 	and.w	r2, r3, #28
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a0:	2101      	movs	r1, #1
 80032a2:	fa01 f202 	lsl.w	r2, r1, r2
 80032a6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	2b10      	cmp	r3, #16
 80032b6:	d108      	bne.n	80032ca <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032c8:	e007      	b.n	80032da <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	60da      	str	r2, [r3, #12]
}
 80032da:	bf00      	nop
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032f6:	e148      	b.n	800358a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	2101      	movs	r1, #1
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	fa01 f303 	lsl.w	r3, r1, r3
 8003304:	4013      	ands	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 813a 	beq.w	8003584 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	2b01      	cmp	r3, #1
 800331a:	d005      	beq.n	8003328 <HAL_GPIO_Init+0x40>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 0303 	and.w	r3, r3, #3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d130      	bne.n	800338a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	2203      	movs	r2, #3
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4013      	ands	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800335e:	2201      	movs	r2, #1
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4013      	ands	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	091b      	lsrs	r3, r3, #4
 8003374:	f003 0201 	and.w	r2, r3, #1
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	2b03      	cmp	r3, #3
 8003394:	d017      	beq.n	80033c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	2203      	movs	r2, #3
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43db      	mvns	r3, r3
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4013      	ands	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d123      	bne.n	800341a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	08da      	lsrs	r2, r3, #3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3208      	adds	r2, #8
 80033da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	220f      	movs	r2, #15
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43db      	mvns	r3, r3
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4013      	ands	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	691a      	ldr	r2, [r3, #16]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	08da      	lsrs	r2, r3, #3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3208      	adds	r2, #8
 8003414:	6939      	ldr	r1, [r7, #16]
 8003416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	2203      	movs	r2, #3
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43db      	mvns	r3, r3
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4013      	ands	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f003 0203 	and.w	r2, r3, #3
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 8094 	beq.w	8003584 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800345c:	4b52      	ldr	r3, [pc, #328]	@ (80035a8 <HAL_GPIO_Init+0x2c0>)
 800345e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003460:	4a51      	ldr	r2, [pc, #324]	@ (80035a8 <HAL_GPIO_Init+0x2c0>)
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	6613      	str	r3, [r2, #96]	@ 0x60
 8003468:	4b4f      	ldr	r3, [pc, #316]	@ (80035a8 <HAL_GPIO_Init+0x2c0>)
 800346a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003474:	4a4d      	ldr	r2, [pc, #308]	@ (80035ac <HAL_GPIO_Init+0x2c4>)
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	089b      	lsrs	r3, r3, #2
 800347a:	3302      	adds	r3, #2
 800347c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003480:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	220f      	movs	r2, #15
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4013      	ands	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800349e:	d00d      	beq.n	80034bc <HAL_GPIO_Init+0x1d4>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a43      	ldr	r2, [pc, #268]	@ (80035b0 <HAL_GPIO_Init+0x2c8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d007      	beq.n	80034b8 <HAL_GPIO_Init+0x1d0>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a42      	ldr	r2, [pc, #264]	@ (80035b4 <HAL_GPIO_Init+0x2cc>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d101      	bne.n	80034b4 <HAL_GPIO_Init+0x1cc>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e004      	b.n	80034be <HAL_GPIO_Init+0x1d6>
 80034b4:	2307      	movs	r3, #7
 80034b6:	e002      	b.n	80034be <HAL_GPIO_Init+0x1d6>
 80034b8:	2301      	movs	r3, #1
 80034ba:	e000      	b.n	80034be <HAL_GPIO_Init+0x1d6>
 80034bc:	2300      	movs	r3, #0
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	f002 0203 	and.w	r2, r2, #3
 80034c4:	0092      	lsls	r2, r2, #2
 80034c6:	4093      	lsls	r3, r2
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034ce:	4937      	ldr	r1, [pc, #220]	@ (80035ac <HAL_GPIO_Init+0x2c4>)
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	089b      	lsrs	r3, r3, #2
 80034d4:	3302      	adds	r3, #2
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034dc:	4b36      	ldr	r3, [pc, #216]	@ (80035b8 <HAL_GPIO_Init+0x2d0>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	43db      	mvns	r3, r3
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4013      	ands	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003500:	4a2d      	ldr	r2, [pc, #180]	@ (80035b8 <HAL_GPIO_Init+0x2d0>)
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003506:	4b2c      	ldr	r3, [pc, #176]	@ (80035b8 <HAL_GPIO_Init+0x2d0>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	43db      	mvns	r3, r3
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4013      	ands	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800352a:	4a23      	ldr	r2, [pc, #140]	@ (80035b8 <HAL_GPIO_Init+0x2d0>)
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003530:	4b21      	ldr	r3, [pc, #132]	@ (80035b8 <HAL_GPIO_Init+0x2d0>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	43db      	mvns	r3, r3
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4013      	ands	r3, r2
 800353e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003554:	4a18      	ldr	r2, [pc, #96]	@ (80035b8 <HAL_GPIO_Init+0x2d0>)
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800355a:	4b17      	ldr	r3, [pc, #92]	@ (80035b8 <HAL_GPIO_Init+0x2d0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	43db      	mvns	r3, r3
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4013      	ands	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800357e:	4a0e      	ldr	r2, [pc, #56]	@ (80035b8 <HAL_GPIO_Init+0x2d0>)
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	3301      	adds	r3, #1
 8003588:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	f47f aeaf 	bne.w	80032f8 <HAL_GPIO_Init+0x10>
  }
}
 800359a:	bf00      	nop
 800359c:	bf00      	nop
 800359e:	371c      	adds	r7, #28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	40021000 	.word	0x40021000
 80035ac:	40010000 	.word	0x40010000
 80035b0:	48000400 	.word	0x48000400
 80035b4:	48000800 	.word	0x48000800
 80035b8:	40010400 	.word	0x40010400

080035bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	807b      	strh	r3, [r7, #2]
 80035c8:	4613      	mov	r3, r2
 80035ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035cc:	787b      	ldrb	r3, [r7, #1]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035d2:	887a      	ldrh	r2, [r7, #2]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035d8:	e002      	b.n	80035e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035da:	887a      	ldrh	r2, [r7, #2]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035f0:	4b05      	ldr	r3, [pc, #20]	@ (8003608 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a04      	ldr	r2, [pc, #16]	@ (8003608 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035fa:	6013      	str	r3, [r2, #0]
}
 80035fc:	bf00      	nop
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40007000 	.word	0x40007000

0800360c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003610:	4b04      	ldr	r3, [pc, #16]	@ (8003624 <HAL_PWREx_GetVoltageRange+0x18>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003618:	4618      	mov	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	40007000 	.word	0x40007000

08003628 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003636:	d130      	bne.n	800369a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003638:	4b23      	ldr	r3, [pc, #140]	@ (80036c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003644:	d038      	beq.n	80036b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003646:	4b20      	ldr	r3, [pc, #128]	@ (80036c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800364e:	4a1e      	ldr	r2, [pc, #120]	@ (80036c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003650:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003654:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003656:	4b1d      	ldr	r3, [pc, #116]	@ (80036cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2232      	movs	r2, #50	@ 0x32
 800365c:	fb02 f303 	mul.w	r3, r2, r3
 8003660:	4a1b      	ldr	r2, [pc, #108]	@ (80036d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003662:	fba2 2303 	umull	r2, r3, r2, r3
 8003666:	0c9b      	lsrs	r3, r3, #18
 8003668:	3301      	adds	r3, #1
 800366a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800366c:	e002      	b.n	8003674 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	3b01      	subs	r3, #1
 8003672:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003674:	4b14      	ldr	r3, [pc, #80]	@ (80036c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800367c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003680:	d102      	bne.n	8003688 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f2      	bne.n	800366e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003688:	4b0f      	ldr	r3, [pc, #60]	@ (80036c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003690:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003694:	d110      	bne.n	80036b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e00f      	b.n	80036ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800369a:	4b0b      	ldr	r3, [pc, #44]	@ (80036c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036a6:	d007      	beq.n	80036b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036a8:	4b07      	ldr	r3, [pc, #28]	@ (80036c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036b0:	4a05      	ldr	r2, [pc, #20]	@ (80036c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40007000 	.word	0x40007000
 80036cc:	20000000 	.word	0x20000000
 80036d0:	431bde83 	.word	0x431bde83

080036d4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b088      	sub	sp, #32
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d102      	bne.n	80036e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	f000 bc02 	b.w	8003eec <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036e8:	4b96      	ldr	r3, [pc, #600]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 030c 	and.w	r3, r3, #12
 80036f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036f2:	4b94      	ldr	r3, [pc, #592]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0310 	and.w	r3, r3, #16
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80e4 	beq.w	80038d2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d007      	beq.n	8003720 <HAL_RCC_OscConfig+0x4c>
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	2b0c      	cmp	r3, #12
 8003714:	f040 808b 	bne.w	800382e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2b01      	cmp	r3, #1
 800371c:	f040 8087 	bne.w	800382e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003720:	4b88      	ldr	r3, [pc, #544]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <HAL_RCC_OscConfig+0x64>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e3d9      	b.n	8003eec <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1a      	ldr	r2, [r3, #32]
 800373c:	4b81      	ldr	r3, [pc, #516]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	2b00      	cmp	r3, #0
 8003746:	d004      	beq.n	8003752 <HAL_RCC_OscConfig+0x7e>
 8003748:	4b7e      	ldr	r3, [pc, #504]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003750:	e005      	b.n	800375e <HAL_RCC_OscConfig+0x8a>
 8003752:	4b7c      	ldr	r3, [pc, #496]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 8003754:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003758:	091b      	lsrs	r3, r3, #4
 800375a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800375e:	4293      	cmp	r3, r2
 8003760:	d223      	bcs.n	80037aa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	4618      	mov	r0, r3
 8003768:	f000 fd8c 	bl	8004284 <RCC_SetFlashLatencyFromMSIRange>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e3ba      	b.n	8003eec <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003776:	4b73      	ldr	r3, [pc, #460]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a72      	ldr	r2, [pc, #456]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 800377c:	f043 0308 	orr.w	r3, r3, #8
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	4b70      	ldr	r3, [pc, #448]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	496d      	ldr	r1, [pc, #436]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 8003790:	4313      	orrs	r3, r2
 8003792:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003794:	4b6b      	ldr	r3, [pc, #428]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	021b      	lsls	r3, r3, #8
 80037a2:	4968      	ldr	r1, [pc, #416]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	604b      	str	r3, [r1, #4]
 80037a8:	e025      	b.n	80037f6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037aa:	4b66      	ldr	r3, [pc, #408]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a65      	ldr	r2, [pc, #404]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 80037b0:	f043 0308 	orr.w	r3, r3, #8
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	4b63      	ldr	r3, [pc, #396]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	4960      	ldr	r1, [pc, #384]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037c8:	4b5e      	ldr	r3, [pc, #376]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	021b      	lsls	r3, r3, #8
 80037d6:	495b      	ldr	r1, [pc, #364]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d109      	bne.n	80037f6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fd4c 	bl	8004284 <RCC_SetFlashLatencyFromMSIRange>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e37a      	b.n	8003eec <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037f6:	f000 fc81 	bl	80040fc <HAL_RCC_GetSysClockFreq>
 80037fa:	4602      	mov	r2, r0
 80037fc:	4b51      	ldr	r3, [pc, #324]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	4950      	ldr	r1, [pc, #320]	@ (8003948 <HAL_RCC_OscConfig+0x274>)
 8003808:	5ccb      	ldrb	r3, [r1, r3]
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	fa22 f303 	lsr.w	r3, r2, r3
 8003812:	4a4e      	ldr	r2, [pc, #312]	@ (800394c <HAL_RCC_OscConfig+0x278>)
 8003814:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003816:	4b4e      	ldr	r3, [pc, #312]	@ (8003950 <HAL_RCC_OscConfig+0x27c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe f960 	bl	8001ae0 <HAL_InitTick>
 8003820:	4603      	mov	r3, r0
 8003822:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d052      	beq.n	80038d0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	e35e      	b.n	8003eec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d032      	beq.n	800389c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003836:	4b43      	ldr	r3, [pc, #268]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a42      	ldr	r2, [pc, #264]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 800383c:	f043 0301 	orr.w	r3, r3, #1
 8003840:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003842:	f7fe f99d 	bl	8001b80 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800384a:	f7fe f999 	bl	8001b80 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e347      	b.n	8003eec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800385c:	4b39      	ldr	r3, [pc, #228]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0f0      	beq.n	800384a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003868:	4b36      	ldr	r3, [pc, #216]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a35      	ldr	r2, [pc, #212]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 800386e:	f043 0308 	orr.w	r3, r3, #8
 8003872:	6013      	str	r3, [r2, #0]
 8003874:	4b33      	ldr	r3, [pc, #204]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	4930      	ldr	r1, [pc, #192]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 8003882:	4313      	orrs	r3, r2
 8003884:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003886:	4b2f      	ldr	r3, [pc, #188]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	021b      	lsls	r3, r3, #8
 8003894:	492b      	ldr	r1, [pc, #172]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 8003896:	4313      	orrs	r3, r2
 8003898:	604b      	str	r3, [r1, #4]
 800389a:	e01a      	b.n	80038d2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800389c:	4b29      	ldr	r3, [pc, #164]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a28      	ldr	r2, [pc, #160]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 80038a2:	f023 0301 	bic.w	r3, r3, #1
 80038a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038a8:	f7fe f96a 	bl	8001b80 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038b0:	f7fe f966 	bl	8001b80 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e314      	b.n	8003eec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038c2:	4b20      	ldr	r3, [pc, #128]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x1dc>
 80038ce:	e000      	b.n	80038d2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d073      	beq.n	80039c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d005      	beq.n	80038f0 <HAL_RCC_OscConfig+0x21c>
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	2b0c      	cmp	r3, #12
 80038e8:	d10e      	bne.n	8003908 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d10b      	bne.n	8003908 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f0:	4b14      	ldr	r3, [pc, #80]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d063      	beq.n	80039c4 <HAL_RCC_OscConfig+0x2f0>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d15f      	bne.n	80039c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e2f1      	b.n	8003eec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003910:	d106      	bne.n	8003920 <HAL_RCC_OscConfig+0x24c>
 8003912:	4b0c      	ldr	r3, [pc, #48]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a0b      	ldr	r2, [pc, #44]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 8003918:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	e025      	b.n	800396c <HAL_RCC_OscConfig+0x298>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003928:	d114      	bne.n	8003954 <HAL_RCC_OscConfig+0x280>
 800392a:	4b06      	ldr	r3, [pc, #24]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a05      	ldr	r2, [pc, #20]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 8003930:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	4b03      	ldr	r3, [pc, #12]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a02      	ldr	r2, [pc, #8]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 800393c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e013      	b.n	800396c <HAL_RCC_OscConfig+0x298>
 8003944:	40021000 	.word	0x40021000
 8003948:	08009ea0 	.word	0x08009ea0
 800394c:	20000000 	.word	0x20000000
 8003950:	20000004 	.word	0x20000004
 8003954:	4ba0      	ldr	r3, [pc, #640]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a9f      	ldr	r2, [pc, #636]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 800395a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	4b9d      	ldr	r3, [pc, #628]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a9c      	ldr	r2, [pc, #624]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800396a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d013      	beq.n	800399c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003974:	f7fe f904 	bl	8001b80 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800397c:	f7fe f900 	bl	8001b80 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b64      	cmp	r3, #100	@ 0x64
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e2ae      	b.n	8003eec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800398e:	4b92      	ldr	r3, [pc, #584]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0f0      	beq.n	800397c <HAL_RCC_OscConfig+0x2a8>
 800399a:	e014      	b.n	80039c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7fe f8f0 	bl	8001b80 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a4:	f7fe f8ec 	bl	8001b80 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b64      	cmp	r3, #100	@ 0x64
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e29a      	b.n	8003eec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039b6:	4b88      	ldr	r3, [pc, #544]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0x2d0>
 80039c2:	e000      	b.n	80039c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d060      	beq.n	8003a94 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d005      	beq.n	80039e4 <HAL_RCC_OscConfig+0x310>
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	2b0c      	cmp	r3, #12
 80039dc:	d119      	bne.n	8003a12 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d116      	bne.n	8003a12 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039e4:	4b7c      	ldr	r3, [pc, #496]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <HAL_RCC_OscConfig+0x328>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e277      	b.n	8003eec <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fc:	4b76      	ldr	r3, [pc, #472]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	061b      	lsls	r3, r3, #24
 8003a0a:	4973      	ldr	r1, [pc, #460]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a10:	e040      	b.n	8003a94 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d023      	beq.n	8003a62 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a1a:	4b6f      	ldr	r3, [pc, #444]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a6e      	ldr	r2, [pc, #440]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a26:	f7fe f8ab 	bl	8001b80 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a2e:	f7fe f8a7 	bl	8001b80 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e255      	b.n	8003eec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a40:	4b65      	ldr	r3, [pc, #404]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a4c:	4b62      	ldr	r3, [pc, #392]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	061b      	lsls	r3, r3, #24
 8003a5a:	495f      	ldr	r1, [pc, #380]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	604b      	str	r3, [r1, #4]
 8003a60:	e018      	b.n	8003a94 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a62:	4b5d      	ldr	r3, [pc, #372]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a5c      	ldr	r2, [pc, #368]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003a68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6e:	f7fe f887 	bl	8001b80 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a76:	f7fe f883 	bl	8001b80 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e231      	b.n	8003eec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a88:	4b53      	ldr	r3, [pc, #332]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1f0      	bne.n	8003a76 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d03c      	beq.n	8003b1a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01c      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa8:	4b4b      	ldr	r3, [pc, #300]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aae:	4a4a      	ldr	r2, [pc, #296]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab8:	f7fe f862 	bl	8001b80 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac0:	f7fe f85e 	bl	8001b80 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e20c      	b.n	8003eec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ad2:	4b41      	ldr	r3, [pc, #260]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0ef      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x3ec>
 8003ae0:	e01b      	b.n	8003b1a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ae8:	4a3b      	ldr	r2, [pc, #236]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003aea:	f023 0301 	bic.w	r3, r3, #1
 8003aee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af2:	f7fe f845 	bl	8001b80 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003afa:	f7fe f841 	bl	8001b80 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e1ef      	b.n	8003eec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b0c:	4b32      	ldr	r3, [pc, #200]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1ef      	bne.n	8003afa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 80a6 	beq.w	8003c74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b2c:	4b2a      	ldr	r3, [pc, #168]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10d      	bne.n	8003b54 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b38:	4b27      	ldr	r3, [pc, #156]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3c:	4a26      	ldr	r2, [pc, #152]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003b3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b42:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b44:	4b24      	ldr	r3, [pc, #144]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b50:	2301      	movs	r3, #1
 8003b52:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b54:	4b21      	ldr	r3, [pc, #132]	@ (8003bdc <HAL_RCC_OscConfig+0x508>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d118      	bne.n	8003b92 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b60:	4b1e      	ldr	r3, [pc, #120]	@ (8003bdc <HAL_RCC_OscConfig+0x508>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a1d      	ldr	r2, [pc, #116]	@ (8003bdc <HAL_RCC_OscConfig+0x508>)
 8003b66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b6c:	f7fe f808 	bl	8001b80 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b74:	f7fe f804 	bl	8001b80 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e1b2      	b.n	8003eec <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b86:	4b15      	ldr	r3, [pc, #84]	@ (8003bdc <HAL_RCC_OscConfig+0x508>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d108      	bne.n	8003bac <HAL_RCC_OscConfig+0x4d8>
 8003b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003ba2:	f043 0301 	orr.w	r3, r3, #1
 8003ba6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003baa:	e029      	b.n	8003c00 <HAL_RCC_OscConfig+0x52c>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2b05      	cmp	r3, #5
 8003bb2:	d115      	bne.n	8003be0 <HAL_RCC_OscConfig+0x50c>
 8003bb4:	4b08      	ldr	r3, [pc, #32]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bba:	4a07      	ldr	r2, [pc, #28]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003bbc:	f043 0304 	orr.w	r3, r3, #4
 8003bc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bc4:	4b04      	ldr	r3, [pc, #16]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bca:	4a03      	ldr	r2, [pc, #12]	@ (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bd4:	e014      	b.n	8003c00 <HAL_RCC_OscConfig+0x52c>
 8003bd6:	bf00      	nop
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	40007000 	.word	0x40007000
 8003be0:	4b9a      	ldr	r3, [pc, #616]	@ (8003e4c <HAL_RCC_OscConfig+0x778>)
 8003be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be6:	4a99      	ldr	r2, [pc, #612]	@ (8003e4c <HAL_RCC_OscConfig+0x778>)
 8003be8:	f023 0301 	bic.w	r3, r3, #1
 8003bec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bf0:	4b96      	ldr	r3, [pc, #600]	@ (8003e4c <HAL_RCC_OscConfig+0x778>)
 8003bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf6:	4a95      	ldr	r2, [pc, #596]	@ (8003e4c <HAL_RCC_OscConfig+0x778>)
 8003bf8:	f023 0304 	bic.w	r3, r3, #4
 8003bfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d016      	beq.n	8003c36 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c08:	f7fd ffba 	bl	8001b80 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c0e:	e00a      	b.n	8003c26 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c10:	f7fd ffb6 	bl	8001b80 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e162      	b.n	8003eec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c26:	4b89      	ldr	r3, [pc, #548]	@ (8003e4c <HAL_RCC_OscConfig+0x778>)
 8003c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0ed      	beq.n	8003c10 <HAL_RCC_OscConfig+0x53c>
 8003c34:	e015      	b.n	8003c62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c36:	f7fd ffa3 	bl	8001b80 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c3c:	e00a      	b.n	8003c54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3e:	f7fd ff9f 	bl	8001b80 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e14b      	b.n	8003eec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c54:	4b7d      	ldr	r3, [pc, #500]	@ (8003e4c <HAL_RCC_OscConfig+0x778>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1ed      	bne.n	8003c3e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c62:	7ffb      	ldrb	r3, [r7, #31]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d105      	bne.n	8003c74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c68:	4b78      	ldr	r3, [pc, #480]	@ (8003e4c <HAL_RCC_OscConfig+0x778>)
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6c:	4a77      	ldr	r2, [pc, #476]	@ (8003e4c <HAL_RCC_OscConfig+0x778>)
 8003c6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c72:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d03c      	beq.n	8003cfa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d01c      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c88:	4b70      	ldr	r3, [pc, #448]	@ (8003e4c <HAL_RCC_OscConfig+0x778>)
 8003c8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c8e:	4a6f      	ldr	r2, [pc, #444]	@ (8003e4c <HAL_RCC_OscConfig+0x778>)
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c98:	f7fd ff72 	bl	8001b80 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ca0:	f7fd ff6e 	bl	8001b80 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e11c      	b.n	8003eec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cb2:	4b66      	ldr	r3, [pc, #408]	@ (8003e4c <HAL_RCC_OscConfig+0x778>)
 8003cb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0ef      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x5cc>
 8003cc0:	e01b      	b.n	8003cfa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cc2:	4b62      	ldr	r3, [pc, #392]	@ (8003e4c <HAL_RCC_OscConfig+0x778>)
 8003cc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cc8:	4a60      	ldr	r2, [pc, #384]	@ (8003e4c <HAL_RCC_OscConfig+0x778>)
 8003cca:	f023 0301 	bic.w	r3, r3, #1
 8003cce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd2:	f7fd ff55 	bl	8001b80 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cda:	f7fd ff51 	bl	8001b80 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e0ff      	b.n	8003eec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cec:	4b57      	ldr	r3, [pc, #348]	@ (8003e4c <HAL_RCC_OscConfig+0x778>)
 8003cee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1ef      	bne.n	8003cda <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 80f3 	beq.w	8003eea <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	f040 80c9 	bne.w	8003ea0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d0e:	4b4f      	ldr	r3, [pc, #316]	@ (8003e4c <HAL_RCC_OscConfig+0x778>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f003 0203 	and.w	r2, r3, #3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d12c      	bne.n	8003d7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d123      	bne.n	8003d7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d3e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d11b      	bne.n	8003d7c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d4e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d113      	bne.n	8003d7c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d5e:	085b      	lsrs	r3, r3, #1
 8003d60:	3b01      	subs	r3, #1
 8003d62:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d109      	bne.n	8003d7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d72:	085b      	lsrs	r3, r3, #1
 8003d74:	3b01      	subs	r3, #1
 8003d76:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d06b      	beq.n	8003e54 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	2b0c      	cmp	r3, #12
 8003d80:	d062      	beq.n	8003e48 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d82:	4b32      	ldr	r3, [pc, #200]	@ (8003e4c <HAL_RCC_OscConfig+0x778>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e0ac      	b.n	8003eec <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d92:	4b2e      	ldr	r3, [pc, #184]	@ (8003e4c <HAL_RCC_OscConfig+0x778>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a2d      	ldr	r2, [pc, #180]	@ (8003e4c <HAL_RCC_OscConfig+0x778>)
 8003d98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d9c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d9e:	f7fd feef 	bl	8001b80 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da6:	f7fd feeb 	bl	8001b80 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e099      	b.n	8003eec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003db8:	4b24      	ldr	r3, [pc, #144]	@ (8003e4c <HAL_RCC_OscConfig+0x778>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1f0      	bne.n	8003da6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dc4:	4b21      	ldr	r3, [pc, #132]	@ (8003e4c <HAL_RCC_OscConfig+0x778>)
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	4b21      	ldr	r3, [pc, #132]	@ (8003e50 <HAL_RCC_OscConfig+0x77c>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003dd4:	3a01      	subs	r2, #1
 8003dd6:	0112      	lsls	r2, r2, #4
 8003dd8:	4311      	orrs	r1, r2
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003dde:	0212      	lsls	r2, r2, #8
 8003de0:	4311      	orrs	r1, r2
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003de6:	0852      	lsrs	r2, r2, #1
 8003de8:	3a01      	subs	r2, #1
 8003dea:	0552      	lsls	r2, r2, #21
 8003dec:	4311      	orrs	r1, r2
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003df2:	0852      	lsrs	r2, r2, #1
 8003df4:	3a01      	subs	r2, #1
 8003df6:	0652      	lsls	r2, r2, #25
 8003df8:	4311      	orrs	r1, r2
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003dfe:	06d2      	lsls	r2, r2, #27
 8003e00:	430a      	orrs	r2, r1
 8003e02:	4912      	ldr	r1, [pc, #72]	@ (8003e4c <HAL_RCC_OscConfig+0x778>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e08:	4b10      	ldr	r3, [pc, #64]	@ (8003e4c <HAL_RCC_OscConfig+0x778>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a0f      	ldr	r2, [pc, #60]	@ (8003e4c <HAL_RCC_OscConfig+0x778>)
 8003e0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e14:	4b0d      	ldr	r3, [pc, #52]	@ (8003e4c <HAL_RCC_OscConfig+0x778>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	4a0c      	ldr	r2, [pc, #48]	@ (8003e4c <HAL_RCC_OscConfig+0x778>)
 8003e1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e20:	f7fd feae 	bl	8001b80 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e28:	f7fd feaa 	bl	8001b80 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e058      	b.n	8003eec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e3a:	4b04      	ldr	r3, [pc, #16]	@ (8003e4c <HAL_RCC_OscConfig+0x778>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f0      	beq.n	8003e28 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e46:	e050      	b.n	8003eea <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e04f      	b.n	8003eec <HAL_RCC_OscConfig+0x818>
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e54:	4b27      	ldr	r3, [pc, #156]	@ (8003ef4 <HAL_RCC_OscConfig+0x820>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d144      	bne.n	8003eea <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e60:	4b24      	ldr	r3, [pc, #144]	@ (8003ef4 <HAL_RCC_OscConfig+0x820>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a23      	ldr	r2, [pc, #140]	@ (8003ef4 <HAL_RCC_OscConfig+0x820>)
 8003e66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e6c:	4b21      	ldr	r3, [pc, #132]	@ (8003ef4 <HAL_RCC_OscConfig+0x820>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	4a20      	ldr	r2, [pc, #128]	@ (8003ef4 <HAL_RCC_OscConfig+0x820>)
 8003e72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e78:	f7fd fe82 	bl	8001b80 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e80:	f7fd fe7e 	bl	8001b80 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e02c      	b.n	8003eec <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e92:	4b18      	ldr	r3, [pc, #96]	@ (8003ef4 <HAL_RCC_OscConfig+0x820>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0f0      	beq.n	8003e80 <HAL_RCC_OscConfig+0x7ac>
 8003e9e:	e024      	b.n	8003eea <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	2b0c      	cmp	r3, #12
 8003ea4:	d01f      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea6:	4b13      	ldr	r3, [pc, #76]	@ (8003ef4 <HAL_RCC_OscConfig+0x820>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a12      	ldr	r2, [pc, #72]	@ (8003ef4 <HAL_RCC_OscConfig+0x820>)
 8003eac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb2:	f7fd fe65 	bl	8001b80 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eba:	f7fd fe61 	bl	8001b80 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e00f      	b.n	8003eec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ecc:	4b09      	ldr	r3, [pc, #36]	@ (8003ef4 <HAL_RCC_OscConfig+0x820>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1f0      	bne.n	8003eba <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003ed8:	4b06      	ldr	r3, [pc, #24]	@ (8003ef4 <HAL_RCC_OscConfig+0x820>)
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	4905      	ldr	r1, [pc, #20]	@ (8003ef4 <HAL_RCC_OscConfig+0x820>)
 8003ede:	4b06      	ldr	r3, [pc, #24]	@ (8003ef8 <HAL_RCC_OscConfig+0x824>)
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	60cb      	str	r3, [r1, #12]
 8003ee4:	e001      	b.n	8003eea <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3720      	adds	r7, #32
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	feeefffc 	.word	0xfeeefffc

08003efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0e7      	b.n	80040e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f10:	4b75      	ldr	r3, [pc, #468]	@ (80040e8 <HAL_RCC_ClockConfig+0x1ec>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d910      	bls.n	8003f40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1e:	4b72      	ldr	r3, [pc, #456]	@ (80040e8 <HAL_RCC_ClockConfig+0x1ec>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f023 0207 	bic.w	r2, r3, #7
 8003f26:	4970      	ldr	r1, [pc, #448]	@ (80040e8 <HAL_RCC_ClockConfig+0x1ec>)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2e:	4b6e      	ldr	r3, [pc, #440]	@ (80040e8 <HAL_RCC_ClockConfig+0x1ec>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d001      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0cf      	b.n	80040e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d010      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	4b66      	ldr	r3, [pc, #408]	@ (80040ec <HAL_RCC_ClockConfig+0x1f0>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d908      	bls.n	8003f6e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f5c:	4b63      	ldr	r3, [pc, #396]	@ (80040ec <HAL_RCC_ClockConfig+0x1f0>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	4960      	ldr	r1, [pc, #384]	@ (80040ec <HAL_RCC_ClockConfig+0x1f0>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d04c      	beq.n	8004014 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	d107      	bne.n	8003f92 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f82:	4b5a      	ldr	r3, [pc, #360]	@ (80040ec <HAL_RCC_ClockConfig+0x1f0>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d121      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e0a6      	b.n	80040e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d107      	bne.n	8003faa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f9a:	4b54      	ldr	r3, [pc, #336]	@ (80040ec <HAL_RCC_ClockConfig+0x1f0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d115      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e09a      	b.n	80040e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d107      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fb2:	4b4e      	ldr	r3, [pc, #312]	@ (80040ec <HAL_RCC_ClockConfig+0x1f0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d109      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e08e      	b.n	80040e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fc2:	4b4a      	ldr	r3, [pc, #296]	@ (80040ec <HAL_RCC_ClockConfig+0x1f0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e086      	b.n	80040e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fd2:	4b46      	ldr	r3, [pc, #280]	@ (80040ec <HAL_RCC_ClockConfig+0x1f0>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f023 0203 	bic.w	r2, r3, #3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	4943      	ldr	r1, [pc, #268]	@ (80040ec <HAL_RCC_ClockConfig+0x1f0>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fe4:	f7fd fdcc 	bl	8001b80 <HAL_GetTick>
 8003fe8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fea:	e00a      	b.n	8004002 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fec:	f7fd fdc8 	bl	8001b80 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e06e      	b.n	80040e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004002:	4b3a      	ldr	r3, [pc, #232]	@ (80040ec <HAL_RCC_ClockConfig+0x1f0>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 020c 	and.w	r2, r3, #12
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	429a      	cmp	r2, r3
 8004012:	d1eb      	bne.n	8003fec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d010      	beq.n	8004042 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	4b31      	ldr	r3, [pc, #196]	@ (80040ec <HAL_RCC_ClockConfig+0x1f0>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800402c:	429a      	cmp	r2, r3
 800402e:	d208      	bcs.n	8004042 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004030:	4b2e      	ldr	r3, [pc, #184]	@ (80040ec <HAL_RCC_ClockConfig+0x1f0>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	492b      	ldr	r1, [pc, #172]	@ (80040ec <HAL_RCC_ClockConfig+0x1f0>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004042:	4b29      	ldr	r3, [pc, #164]	@ (80040e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	429a      	cmp	r2, r3
 800404e:	d210      	bcs.n	8004072 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004050:	4b25      	ldr	r3, [pc, #148]	@ (80040e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f023 0207 	bic.w	r2, r3, #7
 8004058:	4923      	ldr	r1, [pc, #140]	@ (80040e8 <HAL_RCC_ClockConfig+0x1ec>)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	4313      	orrs	r3, r2
 800405e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004060:	4b21      	ldr	r3, [pc, #132]	@ (80040e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d001      	beq.n	8004072 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e036      	b.n	80040e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	2b00      	cmp	r3, #0
 800407c:	d008      	beq.n	8004090 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800407e:	4b1b      	ldr	r3, [pc, #108]	@ (80040ec <HAL_RCC_ClockConfig+0x1f0>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	4918      	ldr	r1, [pc, #96]	@ (80040ec <HAL_RCC_ClockConfig+0x1f0>)
 800408c:	4313      	orrs	r3, r2
 800408e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0308 	and.w	r3, r3, #8
 8004098:	2b00      	cmp	r3, #0
 800409a:	d009      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800409c:	4b13      	ldr	r3, [pc, #76]	@ (80040ec <HAL_RCC_ClockConfig+0x1f0>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	4910      	ldr	r1, [pc, #64]	@ (80040ec <HAL_RCC_ClockConfig+0x1f0>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040b0:	f000 f824 	bl	80040fc <HAL_RCC_GetSysClockFreq>
 80040b4:	4602      	mov	r2, r0
 80040b6:	4b0d      	ldr	r3, [pc, #52]	@ (80040ec <HAL_RCC_ClockConfig+0x1f0>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	091b      	lsrs	r3, r3, #4
 80040bc:	f003 030f 	and.w	r3, r3, #15
 80040c0:	490b      	ldr	r1, [pc, #44]	@ (80040f0 <HAL_RCC_ClockConfig+0x1f4>)
 80040c2:	5ccb      	ldrb	r3, [r1, r3]
 80040c4:	f003 031f 	and.w	r3, r3, #31
 80040c8:	fa22 f303 	lsr.w	r3, r2, r3
 80040cc:	4a09      	ldr	r2, [pc, #36]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f8>)
 80040ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040d0:	4b09      	ldr	r3, [pc, #36]	@ (80040f8 <HAL_RCC_ClockConfig+0x1fc>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fd fd03 	bl	8001ae0 <HAL_InitTick>
 80040da:	4603      	mov	r3, r0
 80040dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80040de:	7afb      	ldrb	r3, [r7, #11]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40022000 	.word	0x40022000
 80040ec:	40021000 	.word	0x40021000
 80040f0:	08009ea0 	.word	0x08009ea0
 80040f4:	20000000 	.word	0x20000000
 80040f8:	20000004 	.word	0x20000004

080040fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b089      	sub	sp, #36	@ 0x24
 8004100:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	61fb      	str	r3, [r7, #28]
 8004106:	2300      	movs	r3, #0
 8004108:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800410a:	4b3e      	ldr	r3, [pc, #248]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x108>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 030c 	and.w	r3, r3, #12
 8004112:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004114:	4b3b      	ldr	r3, [pc, #236]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x108>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 0303 	and.w	r3, r3, #3
 800411c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_RCC_GetSysClockFreq+0x34>
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	2b0c      	cmp	r3, #12
 8004128:	d121      	bne.n	800416e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d11e      	bne.n	800416e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004130:	4b34      	ldr	r3, [pc, #208]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x108>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b00      	cmp	r3, #0
 800413a:	d107      	bne.n	800414c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800413c:	4b31      	ldr	r3, [pc, #196]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x108>)
 800413e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004142:	0a1b      	lsrs	r3, r3, #8
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	61fb      	str	r3, [r7, #28]
 800414a:	e005      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800414c:	4b2d      	ldr	r3, [pc, #180]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x108>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	091b      	lsrs	r3, r3, #4
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004158:	4a2b      	ldr	r2, [pc, #172]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x10c>)
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004160:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10d      	bne.n	8004184 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800416c:	e00a      	b.n	8004184 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b04      	cmp	r3, #4
 8004172:	d102      	bne.n	800417a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004174:	4b25      	ldr	r3, [pc, #148]	@ (800420c <HAL_RCC_GetSysClockFreq+0x110>)
 8004176:	61bb      	str	r3, [r7, #24]
 8004178:	e004      	b.n	8004184 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	2b08      	cmp	r3, #8
 800417e:	d101      	bne.n	8004184 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004180:	4b23      	ldr	r3, [pc, #140]	@ (8004210 <HAL_RCC_GetSysClockFreq+0x114>)
 8004182:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	2b0c      	cmp	r3, #12
 8004188:	d134      	bne.n	80041f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800418a:	4b1e      	ldr	r3, [pc, #120]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x108>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d003      	beq.n	80041a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b03      	cmp	r3, #3
 800419e:	d003      	beq.n	80041a8 <HAL_RCC_GetSysClockFreq+0xac>
 80041a0:	e005      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041a2:	4b1a      	ldr	r3, [pc, #104]	@ (800420c <HAL_RCC_GetSysClockFreq+0x110>)
 80041a4:	617b      	str	r3, [r7, #20]
      break;
 80041a6:	e005      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80041a8:	4b19      	ldr	r3, [pc, #100]	@ (8004210 <HAL_RCC_GetSysClockFreq+0x114>)
 80041aa:	617b      	str	r3, [r7, #20]
      break;
 80041ac:	e002      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	617b      	str	r3, [r7, #20]
      break;
 80041b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041b4:	4b13      	ldr	r3, [pc, #76]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x108>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	091b      	lsrs	r3, r3, #4
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	3301      	adds	r3, #1
 80041c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80041c2:	4b10      	ldr	r3, [pc, #64]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x108>)
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	0a1b      	lsrs	r3, r3, #8
 80041c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	fb03 f202 	mul.w	r2, r3, r2
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041da:	4b0a      	ldr	r3, [pc, #40]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x108>)
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	0e5b      	lsrs	r3, r3, #25
 80041e0:	f003 0303 	and.w	r3, r3, #3
 80041e4:	3301      	adds	r3, #1
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041f4:	69bb      	ldr	r3, [r7, #24]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3724      	adds	r7, #36	@ 0x24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40021000 	.word	0x40021000
 8004208:	08009eb8 	.word	0x08009eb8
 800420c:	00f42400 	.word	0x00f42400
 8004210:	007a1200 	.word	0x007a1200

08004214 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004218:	4b03      	ldr	r3, [pc, #12]	@ (8004228 <HAL_RCC_GetHCLKFreq+0x14>)
 800421a:	681b      	ldr	r3, [r3, #0]
}
 800421c:	4618      	mov	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20000000 	.word	0x20000000

0800422c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004230:	f7ff fff0 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 8004234:	4602      	mov	r2, r0
 8004236:	4b06      	ldr	r3, [pc, #24]	@ (8004250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	0a1b      	lsrs	r3, r3, #8
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	4904      	ldr	r1, [pc, #16]	@ (8004254 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004242:	5ccb      	ldrb	r3, [r1, r3]
 8004244:	f003 031f 	and.w	r3, r3, #31
 8004248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800424c:	4618      	mov	r0, r3
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40021000 	.word	0x40021000
 8004254:	08009eb0 	.word	0x08009eb0

08004258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800425c:	f7ff ffda 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 8004260:	4602      	mov	r2, r0
 8004262:	4b06      	ldr	r3, [pc, #24]	@ (800427c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	0adb      	lsrs	r3, r3, #11
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	4904      	ldr	r1, [pc, #16]	@ (8004280 <HAL_RCC_GetPCLK2Freq+0x28>)
 800426e:	5ccb      	ldrb	r3, [r1, r3]
 8004270:	f003 031f 	and.w	r3, r3, #31
 8004274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004278:	4618      	mov	r0, r3
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40021000 	.word	0x40021000
 8004280:	08009eb0 	.word	0x08009eb0

08004284 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800428c:	2300      	movs	r3, #0
 800428e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004290:	4b2a      	ldr	r3, [pc, #168]	@ (800433c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800429c:	f7ff f9b6 	bl	800360c <HAL_PWREx_GetVoltageRange>
 80042a0:	6178      	str	r0, [r7, #20]
 80042a2:	e014      	b.n	80042ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042a4:	4b25      	ldr	r3, [pc, #148]	@ (800433c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a8:	4a24      	ldr	r2, [pc, #144]	@ (800433c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80042b0:	4b22      	ldr	r3, [pc, #136]	@ (800433c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80042bc:	f7ff f9a6 	bl	800360c <HAL_PWREx_GetVoltageRange>
 80042c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80042c2:	4b1e      	ldr	r3, [pc, #120]	@ (800433c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c6:	4a1d      	ldr	r2, [pc, #116]	@ (800433c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042d4:	d10b      	bne.n	80042ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b80      	cmp	r3, #128	@ 0x80
 80042da:	d919      	bls.n	8004310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2ba0      	cmp	r3, #160	@ 0xa0
 80042e0:	d902      	bls.n	80042e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042e2:	2302      	movs	r3, #2
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	e013      	b.n	8004310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042e8:	2301      	movs	r3, #1
 80042ea:	613b      	str	r3, [r7, #16]
 80042ec:	e010      	b.n	8004310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b80      	cmp	r3, #128	@ 0x80
 80042f2:	d902      	bls.n	80042fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80042f4:	2303      	movs	r3, #3
 80042f6:	613b      	str	r3, [r7, #16]
 80042f8:	e00a      	b.n	8004310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b80      	cmp	r3, #128	@ 0x80
 80042fe:	d102      	bne.n	8004306 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004300:	2302      	movs	r3, #2
 8004302:	613b      	str	r3, [r7, #16]
 8004304:	e004      	b.n	8004310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b70      	cmp	r3, #112	@ 0x70
 800430a:	d101      	bne.n	8004310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800430c:	2301      	movs	r3, #1
 800430e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004310:	4b0b      	ldr	r3, [pc, #44]	@ (8004340 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f023 0207 	bic.w	r2, r3, #7
 8004318:	4909      	ldr	r1, [pc, #36]	@ (8004340 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	4313      	orrs	r3, r2
 800431e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004320:	4b07      	ldr	r3, [pc, #28]	@ (8004340 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	429a      	cmp	r2, r3
 800432c:	d001      	beq.n	8004332 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e000      	b.n	8004334 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3718      	adds	r7, #24
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40021000 	.word	0x40021000
 8004340:	40022000 	.word	0x40022000

08004344 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800434c:	2300      	movs	r3, #0
 800434e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004350:	2300      	movs	r3, #0
 8004352:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800435c:	2b00      	cmp	r3, #0
 800435e:	d031      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004364:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004368:	d01a      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800436a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800436e:	d814      	bhi.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004370:	2b00      	cmp	r3, #0
 8004372:	d009      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004374:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004378:	d10f      	bne.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800437a:	4b5d      	ldr	r3, [pc, #372]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	4a5c      	ldr	r2, [pc, #368]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004384:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004386:	e00c      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3304      	adds	r3, #4
 800438c:	2100      	movs	r1, #0
 800438e:	4618      	mov	r0, r3
 8004390:	f000 f9de 	bl	8004750 <RCCEx_PLLSAI1_Config>
 8004394:	4603      	mov	r3, r0
 8004396:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004398:	e003      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	74fb      	strb	r3, [r7, #19]
      break;
 800439e:	e000      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80043a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043a2:	7cfb      	ldrb	r3, [r7, #19]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10b      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043a8:	4b51      	ldr	r3, [pc, #324]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b6:	494e      	ldr	r1, [pc, #312]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80043be:	e001      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c0:	7cfb      	ldrb	r3, [r7, #19]
 80043c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 809e 	beq.w	800450e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043d2:	2300      	movs	r3, #0
 80043d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043d6:	4b46      	ldr	r3, [pc, #280]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80043e6:	2300      	movs	r3, #0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00d      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ec:	4b40      	ldr	r3, [pc, #256]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f0:	4a3f      	ldr	r2, [pc, #252]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80043f8:	4b3d      	ldr	r3, [pc, #244]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004400:	60bb      	str	r3, [r7, #8]
 8004402:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004404:	2301      	movs	r3, #1
 8004406:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004408:	4b3a      	ldr	r3, [pc, #232]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a39      	ldr	r2, [pc, #228]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800440e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004412:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004414:	f7fd fbb4 	bl	8001b80 <HAL_GetTick>
 8004418:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800441a:	e009      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800441c:	f7fd fbb0 	bl	8001b80 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d902      	bls.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	74fb      	strb	r3, [r7, #19]
        break;
 800442e:	e005      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004430:	4b30      	ldr	r3, [pc, #192]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0ef      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800443c:	7cfb      	ldrb	r3, [r7, #19]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d15a      	bne.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004442:	4b2b      	ldr	r3, [pc, #172]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004448:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800444c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d01e      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	429a      	cmp	r2, r3
 800445c:	d019      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800445e:	4b24      	ldr	r3, [pc, #144]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004464:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004468:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800446a:	4b21      	ldr	r3, [pc, #132]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800446c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004470:	4a1f      	ldr	r2, [pc, #124]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004472:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004476:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800447a:	4b1d      	ldr	r3, [pc, #116]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800447c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004480:	4a1b      	ldr	r2, [pc, #108]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004482:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004486:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800448a:	4a19      	ldr	r2, [pc, #100]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	d016      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449c:	f7fd fb70 	bl	8001b80 <HAL_GetTick>
 80044a0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044a2:	e00b      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a4:	f7fd fb6c 	bl	8001b80 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d902      	bls.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	74fb      	strb	r3, [r7, #19]
            break;
 80044ba:	e006      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044bc:	4b0c      	ldr	r3, [pc, #48]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0ec      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80044ca:	7cfb      	ldrb	r3, [r7, #19]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10b      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044d0:	4b07      	ldr	r3, [pc, #28]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044de:	4904      	ldr	r1, [pc, #16]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80044e6:	e009      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044e8:	7cfb      	ldrb	r3, [r7, #19]
 80044ea:	74bb      	strb	r3, [r7, #18]
 80044ec:	e006      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80044ee:	bf00      	nop
 80044f0:	40021000 	.word	0x40021000
 80044f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f8:	7cfb      	ldrb	r3, [r7, #19]
 80044fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044fc:	7c7b      	ldrb	r3, [r7, #17]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d105      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004502:	4b8a      	ldr	r3, [pc, #552]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004506:	4a89      	ldr	r2, [pc, #548]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004508:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800450c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800451a:	4b84      	ldr	r3, [pc, #528]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800451c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004520:	f023 0203 	bic.w	r2, r3, #3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	4980      	ldr	r1, [pc, #512]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800452a:	4313      	orrs	r3, r2
 800452c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00a      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800453c:	4b7b      	ldr	r3, [pc, #492]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800453e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004542:	f023 020c 	bic.w	r2, r3, #12
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454a:	4978      	ldr	r1, [pc, #480]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0320 	and.w	r3, r3, #32
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00a      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800455e:	4b73      	ldr	r3, [pc, #460]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004564:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456c:	496f      	ldr	r1, [pc, #444]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800456e:	4313      	orrs	r3, r2
 8004570:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00a      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004580:	4b6a      	ldr	r3, [pc, #424]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004586:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800458e:	4967      	ldr	r1, [pc, #412]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00a      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045a2:	4b62      	ldr	r3, [pc, #392]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b0:	495e      	ldr	r1, [pc, #376]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00a      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045c4:	4b59      	ldr	r3, [pc, #356]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ca:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d2:	4956      	ldr	r1, [pc, #344]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045e6:	4b51      	ldr	r3, [pc, #324]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f4:	494d      	ldr	r1, [pc, #308]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d028      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004608:	4b48      	ldr	r3, [pc, #288]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800460a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800460e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004616:	4945      	ldr	r1, [pc, #276]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004618:	4313      	orrs	r3, r2
 800461a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004622:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004626:	d106      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004628:	4b40      	ldr	r3, [pc, #256]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	4a3f      	ldr	r2, [pc, #252]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800462e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004632:	60d3      	str	r3, [r2, #12]
 8004634:	e011      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800463e:	d10c      	bne.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3304      	adds	r3, #4
 8004644:	2101      	movs	r1, #1
 8004646:	4618      	mov	r0, r3
 8004648:	f000 f882 	bl	8004750 <RCCEx_PLLSAI1_Config>
 800464c:	4603      	mov	r3, r0
 800464e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004650:	7cfb      	ldrb	r3, [r7, #19]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004656:	7cfb      	ldrb	r3, [r7, #19]
 8004658:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d028      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004666:	4b31      	ldr	r3, [pc, #196]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800466c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004674:	492d      	ldr	r1, [pc, #180]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004676:	4313      	orrs	r3, r2
 8004678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004680:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004684:	d106      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004686:	4b29      	ldr	r3, [pc, #164]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	4a28      	ldr	r2, [pc, #160]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800468c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004690:	60d3      	str	r3, [r2, #12]
 8004692:	e011      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004698:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800469c:	d10c      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3304      	adds	r3, #4
 80046a2:	2101      	movs	r1, #1
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 f853 	bl	8004750 <RCCEx_PLLSAI1_Config>
 80046aa:	4603      	mov	r3, r0
 80046ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046ae:	7cfb      	ldrb	r3, [r7, #19]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80046b4:	7cfb      	ldrb	r3, [r7, #19]
 80046b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d01c      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046c4:	4b19      	ldr	r3, [pc, #100]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046d2:	4916      	ldr	r1, [pc, #88]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046e2:	d10c      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3304      	adds	r3, #4
 80046e8:	2102      	movs	r1, #2
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 f830 	bl	8004750 <RCCEx_PLLSAI1_Config>
 80046f0:	4603      	mov	r3, r0
 80046f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046f4:	7cfb      	ldrb	r3, [r7, #19]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80046fa:	7cfb      	ldrb	r3, [r7, #19]
 80046fc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800470a:	4b08      	ldr	r3, [pc, #32]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800470c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004710:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004718:	4904      	ldr	r1, [pc, #16]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004720:	7cbb      	ldrb	r3, [r7, #18]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40021000 	.word	0x40021000

08004730 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004734:	4b05      	ldr	r3, [pc, #20]	@ (800474c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a04      	ldr	r2, [pc, #16]	@ (800474c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800473a:	f043 0304 	orr.w	r3, r3, #4
 800473e:	6013      	str	r3, [r2, #0]
}
 8004740:	bf00      	nop
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	40021000 	.word	0x40021000

08004750 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800475a:	2300      	movs	r3, #0
 800475c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800475e:	4b74      	ldr	r3, [pc, #464]	@ (8004930 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d018      	beq.n	800479c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800476a:	4b71      	ldr	r3, [pc, #452]	@ (8004930 <RCCEx_PLLSAI1_Config+0x1e0>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f003 0203 	and.w	r2, r3, #3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d10d      	bne.n	8004796 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
       ||
 800477e:	2b00      	cmp	r3, #0
 8004780:	d009      	beq.n	8004796 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004782:	4b6b      	ldr	r3, [pc, #428]	@ (8004930 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	091b      	lsrs	r3, r3, #4
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	1c5a      	adds	r2, r3, #1
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
       ||
 8004792:	429a      	cmp	r2, r3
 8004794:	d047      	beq.n	8004826 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	73fb      	strb	r3, [r7, #15]
 800479a:	e044      	b.n	8004826 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b03      	cmp	r3, #3
 80047a2:	d018      	beq.n	80047d6 <RCCEx_PLLSAI1_Config+0x86>
 80047a4:	2b03      	cmp	r3, #3
 80047a6:	d825      	bhi.n	80047f4 <RCCEx_PLLSAI1_Config+0xa4>
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d002      	beq.n	80047b2 <RCCEx_PLLSAI1_Config+0x62>
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d009      	beq.n	80047c4 <RCCEx_PLLSAI1_Config+0x74>
 80047b0:	e020      	b.n	80047f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047b2:	4b5f      	ldr	r3, [pc, #380]	@ (8004930 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d11d      	bne.n	80047fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047c2:	e01a      	b.n	80047fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047c4:	4b5a      	ldr	r3, [pc, #360]	@ (8004930 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d116      	bne.n	80047fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047d4:	e013      	b.n	80047fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047d6:	4b56      	ldr	r3, [pc, #344]	@ (8004930 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10f      	bne.n	8004802 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047e2:	4b53      	ldr	r3, [pc, #332]	@ (8004930 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d109      	bne.n	8004802 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047f2:	e006      	b.n	8004802 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	73fb      	strb	r3, [r7, #15]
      break;
 80047f8:	e004      	b.n	8004804 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047fa:	bf00      	nop
 80047fc:	e002      	b.n	8004804 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047fe:	bf00      	nop
 8004800:	e000      	b.n	8004804 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004802:	bf00      	nop
    }

    if(status == HAL_OK)
 8004804:	7bfb      	ldrb	r3, [r7, #15]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10d      	bne.n	8004826 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800480a:	4b49      	ldr	r3, [pc, #292]	@ (8004930 <RCCEx_PLLSAI1_Config+0x1e0>)
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6819      	ldr	r1, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	3b01      	subs	r3, #1
 800481c:	011b      	lsls	r3, r3, #4
 800481e:	430b      	orrs	r3, r1
 8004820:	4943      	ldr	r1, [pc, #268]	@ (8004930 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004822:	4313      	orrs	r3, r2
 8004824:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004826:	7bfb      	ldrb	r3, [r7, #15]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d17c      	bne.n	8004926 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800482c:	4b40      	ldr	r3, [pc, #256]	@ (8004930 <RCCEx_PLLSAI1_Config+0x1e0>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a3f      	ldr	r2, [pc, #252]	@ (8004930 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004832:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004838:	f7fd f9a2 	bl	8001b80 <HAL_GetTick>
 800483c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800483e:	e009      	b.n	8004854 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004840:	f7fd f99e 	bl	8001b80 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d902      	bls.n	8004854 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	73fb      	strb	r3, [r7, #15]
        break;
 8004852:	e005      	b.n	8004860 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004854:	4b36      	ldr	r3, [pc, #216]	@ (8004930 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1ef      	bne.n	8004840 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004860:	7bfb      	ldrb	r3, [r7, #15]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d15f      	bne.n	8004926 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d110      	bne.n	800488e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800486c:	4b30      	ldr	r3, [pc, #192]	@ (8004930 <RCCEx_PLLSAI1_Config+0x1e0>)
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004874:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6892      	ldr	r2, [r2, #8]
 800487c:	0211      	lsls	r1, r2, #8
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	68d2      	ldr	r2, [r2, #12]
 8004882:	06d2      	lsls	r2, r2, #27
 8004884:	430a      	orrs	r2, r1
 8004886:	492a      	ldr	r1, [pc, #168]	@ (8004930 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004888:	4313      	orrs	r3, r2
 800488a:	610b      	str	r3, [r1, #16]
 800488c:	e027      	b.n	80048de <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d112      	bne.n	80048ba <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004894:	4b26      	ldr	r3, [pc, #152]	@ (8004930 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800489c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6892      	ldr	r2, [r2, #8]
 80048a4:	0211      	lsls	r1, r2, #8
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	6912      	ldr	r2, [r2, #16]
 80048aa:	0852      	lsrs	r2, r2, #1
 80048ac:	3a01      	subs	r2, #1
 80048ae:	0552      	lsls	r2, r2, #21
 80048b0:	430a      	orrs	r2, r1
 80048b2:	491f      	ldr	r1, [pc, #124]	@ (8004930 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	610b      	str	r3, [r1, #16]
 80048b8:	e011      	b.n	80048de <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004930 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80048c2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6892      	ldr	r2, [r2, #8]
 80048ca:	0211      	lsls	r1, r2, #8
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6952      	ldr	r2, [r2, #20]
 80048d0:	0852      	lsrs	r2, r2, #1
 80048d2:	3a01      	subs	r2, #1
 80048d4:	0652      	lsls	r2, r2, #25
 80048d6:	430a      	orrs	r2, r1
 80048d8:	4915      	ldr	r1, [pc, #84]	@ (8004930 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048de:	4b14      	ldr	r3, [pc, #80]	@ (8004930 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a13      	ldr	r2, [pc, #76]	@ (8004930 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048e8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ea:	f7fd f949 	bl	8001b80 <HAL_GetTick>
 80048ee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048f0:	e009      	b.n	8004906 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048f2:	f7fd f945 	bl	8001b80 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d902      	bls.n	8004906 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	73fb      	strb	r3, [r7, #15]
          break;
 8004904:	e005      	b.n	8004912 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004906:	4b0a      	ldr	r3, [pc, #40]	@ (8004930 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0ef      	beq.n	80048f2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d106      	bne.n	8004926 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004918:	4b05      	ldr	r3, [pc, #20]	@ (8004930 <RCCEx_PLLSAI1_Config+0x1e0>)
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	4903      	ldr	r1, [pc, #12]	@ (8004930 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004922:	4313      	orrs	r3, r2
 8004924:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004926:	7bfb      	ldrb	r3, [r7, #15]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40021000 	.word	0x40021000

08004934 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e049      	b.n	80049da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d106      	bne.n	8004960 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7fc fe7a 	bl	8001654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3304      	adds	r3, #4
 8004970:	4619      	mov	r1, r3
 8004972:	4610      	mov	r0, r2
 8004974:	f000 fa28 	bl	8004dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
	...

080049e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d001      	beq.n	80049fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e033      	b.n	8004a64 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a19      	ldr	r2, [pc, #100]	@ (8004a70 <HAL_TIM_Base_Start+0x8c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d009      	beq.n	8004a22 <HAL_TIM_Base_Start+0x3e>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a16:	d004      	beq.n	8004a22 <HAL_TIM_Base_Start+0x3e>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a15      	ldr	r2, [pc, #84]	@ (8004a74 <HAL_TIM_Base_Start+0x90>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d115      	bne.n	8004a4e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	4b13      	ldr	r3, [pc, #76]	@ (8004a78 <HAL_TIM_Base_Start+0x94>)
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2b06      	cmp	r3, #6
 8004a32:	d015      	beq.n	8004a60 <HAL_TIM_Base_Start+0x7c>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a3a:	d011      	beq.n	8004a60 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a4c:	e008      	b.n	8004a60 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0201 	orr.w	r2, r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	e000      	b.n	8004a62 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	40012c00 	.word	0x40012c00
 8004a74:	40014000 	.word	0x40014000
 8004a78:	00010007 	.word	0x00010007

08004a7c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e049      	b.n	8004b22 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f841 	bl	8004b2a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4610      	mov	r0, r2
 8004abc:	f000 f984 	bl	8004dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
	...

08004b40 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d101      	bne.n	8004b5e <HAL_TIM_OC_ConfigChannel+0x1e>
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	e066      	b.n	8004c2c <HAL_TIM_OC_ConfigChannel+0xec>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b14      	cmp	r3, #20
 8004b6a:	d857      	bhi.n	8004c1c <HAL_TIM_OC_ConfigChannel+0xdc>
 8004b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b74 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b72:	bf00      	nop
 8004b74:	08004bc9 	.word	0x08004bc9
 8004b78:	08004c1d 	.word	0x08004c1d
 8004b7c:	08004c1d 	.word	0x08004c1d
 8004b80:	08004c1d 	.word	0x08004c1d
 8004b84:	08004bd7 	.word	0x08004bd7
 8004b88:	08004c1d 	.word	0x08004c1d
 8004b8c:	08004c1d 	.word	0x08004c1d
 8004b90:	08004c1d 	.word	0x08004c1d
 8004b94:	08004be5 	.word	0x08004be5
 8004b98:	08004c1d 	.word	0x08004c1d
 8004b9c:	08004c1d 	.word	0x08004c1d
 8004ba0:	08004c1d 	.word	0x08004c1d
 8004ba4:	08004bf3 	.word	0x08004bf3
 8004ba8:	08004c1d 	.word	0x08004c1d
 8004bac:	08004c1d 	.word	0x08004c1d
 8004bb0:	08004c1d 	.word	0x08004c1d
 8004bb4:	08004c01 	.word	0x08004c01
 8004bb8:	08004c1d 	.word	0x08004c1d
 8004bbc:	08004c1d 	.word	0x08004c1d
 8004bc0:	08004c1d 	.word	0x08004c1d
 8004bc4:	08004c0f 	.word	0x08004c0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68b9      	ldr	r1, [r7, #8]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 f96a 	bl	8004ea8 <TIM_OC1_SetConfig>
      break;
 8004bd4:	e025      	b.n	8004c22 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 f9df 	bl	8004fa0 <TIM_OC2_SetConfig>
      break;
 8004be2:	e01e      	b.n	8004c22 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68b9      	ldr	r1, [r7, #8]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fa52 	bl	8005094 <TIM_OC3_SetConfig>
      break;
 8004bf0:	e017      	b.n	8004c22 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68b9      	ldr	r1, [r7, #8]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 fac3 	bl	8005184 <TIM_OC4_SetConfig>
      break;
 8004bfe:	e010      	b.n	8004c22 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68b9      	ldr	r1, [r7, #8]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 fb1a 	bl	8005240 <TIM_OC5_SetConfig>
      break;
 8004c0c:	e009      	b.n	8004c22 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 fb6b 	bl	80052f0 <TIM_OC6_SetConfig>
      break;
 8004c1a:	e002      	b.n	8004c22 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_TIM_ConfigClockSource+0x1c>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e0b6      	b.n	8004dbe <HAL_TIM_ConfigClockSource+0x18a>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c6e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c8c:	d03e      	beq.n	8004d0c <HAL_TIM_ConfigClockSource+0xd8>
 8004c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c92:	f200 8087 	bhi.w	8004da4 <HAL_TIM_ConfigClockSource+0x170>
 8004c96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c9a:	f000 8086 	beq.w	8004daa <HAL_TIM_ConfigClockSource+0x176>
 8004c9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ca2:	d87f      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x170>
 8004ca4:	2b70      	cmp	r3, #112	@ 0x70
 8004ca6:	d01a      	beq.n	8004cde <HAL_TIM_ConfigClockSource+0xaa>
 8004ca8:	2b70      	cmp	r3, #112	@ 0x70
 8004caa:	d87b      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x170>
 8004cac:	2b60      	cmp	r3, #96	@ 0x60
 8004cae:	d050      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x11e>
 8004cb0:	2b60      	cmp	r3, #96	@ 0x60
 8004cb2:	d877      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x170>
 8004cb4:	2b50      	cmp	r3, #80	@ 0x50
 8004cb6:	d03c      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0xfe>
 8004cb8:	2b50      	cmp	r3, #80	@ 0x50
 8004cba:	d873      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x170>
 8004cbc:	2b40      	cmp	r3, #64	@ 0x40
 8004cbe:	d058      	beq.n	8004d72 <HAL_TIM_ConfigClockSource+0x13e>
 8004cc0:	2b40      	cmp	r3, #64	@ 0x40
 8004cc2:	d86f      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x170>
 8004cc4:	2b30      	cmp	r3, #48	@ 0x30
 8004cc6:	d064      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x15e>
 8004cc8:	2b30      	cmp	r3, #48	@ 0x30
 8004cca:	d86b      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x170>
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d060      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x15e>
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	d867      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x170>
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d05c      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x15e>
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d05a      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x15e>
 8004cdc:	e062      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cee:	f000 fbd3 	bl	8005498 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	609a      	str	r2, [r3, #8]
      break;
 8004d0a:	e04f      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d1c:	f000 fbbc 	bl	8005498 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d2e:	609a      	str	r2, [r3, #8]
      break;
 8004d30:	e03c      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f000 fb30 	bl	80053a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2150      	movs	r1, #80	@ 0x50
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 fb89 	bl	8005462 <TIM_ITRx_SetConfig>
      break;
 8004d50:	e02c      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f000 fb4f 	bl	8005402 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2160      	movs	r1, #96	@ 0x60
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 fb79 	bl	8005462 <TIM_ITRx_SetConfig>
      break;
 8004d70:	e01c      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f000 fb10 	bl	80053a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2140      	movs	r1, #64	@ 0x40
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 fb69 	bl	8005462 <TIM_ITRx_SetConfig>
      break;
 8004d90:	e00c      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	f000 fb60 	bl	8005462 <TIM_ITRx_SetConfig>
      break;
 8004da2:	e003      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
      break;
 8004da8:	e000      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004daa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a30      	ldr	r2, [pc, #192]	@ (8004e9c <TIM_Base_SetConfig+0xd4>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d003      	beq.n	8004de8 <TIM_Base_SetConfig+0x20>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004de6:	d108      	bne.n	8004dfa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a27      	ldr	r2, [pc, #156]	@ (8004e9c <TIM_Base_SetConfig+0xd4>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d00b      	beq.n	8004e1a <TIM_Base_SetConfig+0x52>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e08:	d007      	beq.n	8004e1a <TIM_Base_SetConfig+0x52>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a24      	ldr	r2, [pc, #144]	@ (8004ea0 <TIM_Base_SetConfig+0xd8>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d003      	beq.n	8004e1a <TIM_Base_SetConfig+0x52>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a23      	ldr	r2, [pc, #140]	@ (8004ea4 <TIM_Base_SetConfig+0xdc>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d108      	bne.n	8004e2c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	689a      	ldr	r2, [r3, #8]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a12      	ldr	r2, [pc, #72]	@ (8004e9c <TIM_Base_SetConfig+0xd4>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d007      	beq.n	8004e68 <TIM_Base_SetConfig+0xa0>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a11      	ldr	r2, [pc, #68]	@ (8004ea0 <TIM_Base_SetConfig+0xd8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <TIM_Base_SetConfig+0xa0>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a10      	ldr	r2, [pc, #64]	@ (8004ea4 <TIM_Base_SetConfig+0xdc>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d103      	bne.n	8004e70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d105      	bne.n	8004e8e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	f023 0201 	bic.w	r2, r3, #1
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	611a      	str	r2, [r3, #16]
  }
}
 8004e8e:	bf00      	nop
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	40012c00 	.word	0x40012c00
 8004ea0:	40014000 	.word	0x40014000
 8004ea4:	40014400 	.word	0x40014400

08004ea8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	f023 0201 	bic.w	r2, r3, #1
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0303 	bic.w	r3, r3, #3
 8004ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f023 0302 	bic.w	r3, r3, #2
 8004ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a24      	ldr	r2, [pc, #144]	@ (8004f94 <TIM_OC1_SetConfig+0xec>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d007      	beq.n	8004f18 <TIM_OC1_SetConfig+0x70>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a23      	ldr	r2, [pc, #140]	@ (8004f98 <TIM_OC1_SetConfig+0xf0>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d003      	beq.n	8004f18 <TIM_OC1_SetConfig+0x70>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a22      	ldr	r2, [pc, #136]	@ (8004f9c <TIM_OC1_SetConfig+0xf4>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d10c      	bne.n	8004f32 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f023 0308 	bic.w	r3, r3, #8
 8004f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f023 0304 	bic.w	r3, r3, #4
 8004f30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a17      	ldr	r2, [pc, #92]	@ (8004f94 <TIM_OC1_SetConfig+0xec>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d007      	beq.n	8004f4a <TIM_OC1_SetConfig+0xa2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a16      	ldr	r2, [pc, #88]	@ (8004f98 <TIM_OC1_SetConfig+0xf0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d003      	beq.n	8004f4a <TIM_OC1_SetConfig+0xa2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a15      	ldr	r2, [pc, #84]	@ (8004f9c <TIM_OC1_SetConfig+0xf4>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d111      	bne.n	8004f6e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	621a      	str	r2, [r3, #32]
}
 8004f88:	bf00      	nop
 8004f8a:	371c      	adds	r7, #28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	40012c00 	.word	0x40012c00
 8004f98:	40014000 	.word	0x40014000
 8004f9c:	40014400 	.word	0x40014400

08004fa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	f023 0210 	bic.w	r2, r3, #16
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	021b      	lsls	r3, r3, #8
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f023 0320 	bic.w	r3, r3, #32
 8004fee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a22      	ldr	r2, [pc, #136]	@ (8005088 <TIM_OC2_SetConfig+0xe8>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d10d      	bne.n	8005020 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800500a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	4313      	orrs	r3, r2
 8005016:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800501e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a19      	ldr	r2, [pc, #100]	@ (8005088 <TIM_OC2_SetConfig+0xe8>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d007      	beq.n	8005038 <TIM_OC2_SetConfig+0x98>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a18      	ldr	r2, [pc, #96]	@ (800508c <TIM_OC2_SetConfig+0xec>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d003      	beq.n	8005038 <TIM_OC2_SetConfig+0x98>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a17      	ldr	r2, [pc, #92]	@ (8005090 <TIM_OC2_SetConfig+0xf0>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d113      	bne.n	8005060 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800503e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005046:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	4313      	orrs	r3, r2
 800505e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	621a      	str	r2, [r3, #32]
}
 800507a:	bf00      	nop
 800507c:	371c      	adds	r7, #28
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	40012c00 	.word	0x40012c00
 800508c:	40014000 	.word	0x40014000
 8005090:	40014400 	.word	0x40014400

08005094 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a1b      	ldr	r3, [r3, #32]
 80050a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0303 	bic.w	r3, r3, #3
 80050ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	021b      	lsls	r3, r3, #8
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a21      	ldr	r2, [pc, #132]	@ (8005178 <TIM_OC3_SetConfig+0xe4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d10d      	bne.n	8005112 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	021b      	lsls	r3, r3, #8
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	4313      	orrs	r3, r2
 8005108:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005110:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a18      	ldr	r2, [pc, #96]	@ (8005178 <TIM_OC3_SetConfig+0xe4>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d007      	beq.n	800512a <TIM_OC3_SetConfig+0x96>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a17      	ldr	r2, [pc, #92]	@ (800517c <TIM_OC3_SetConfig+0xe8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d003      	beq.n	800512a <TIM_OC3_SetConfig+0x96>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a16      	ldr	r2, [pc, #88]	@ (8005180 <TIM_OC3_SetConfig+0xec>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d113      	bne.n	8005152 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005130:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005138:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	4313      	orrs	r3, r2
 8005144:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	621a      	str	r2, [r3, #32]
}
 800516c:	bf00      	nop
 800516e:	371c      	adds	r7, #28
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	40012c00 	.word	0x40012c00
 800517c:	40014000 	.word	0x40014000
 8005180:	40014400 	.word	0x40014400

08005184 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	021b      	lsls	r3, r3, #8
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	031b      	lsls	r3, r3, #12
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	4313      	orrs	r3, r2
 80051de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a14      	ldr	r2, [pc, #80]	@ (8005234 <TIM_OC4_SetConfig+0xb0>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d007      	beq.n	80051f8 <TIM_OC4_SetConfig+0x74>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a13      	ldr	r2, [pc, #76]	@ (8005238 <TIM_OC4_SetConfig+0xb4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d003      	beq.n	80051f8 <TIM_OC4_SetConfig+0x74>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a12      	ldr	r2, [pc, #72]	@ (800523c <TIM_OC4_SetConfig+0xb8>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d109      	bne.n	800520c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	019b      	lsls	r3, r3, #6
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	4313      	orrs	r3, r2
 800520a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	621a      	str	r2, [r3, #32]
}
 8005226:	bf00      	nop
 8005228:	371c      	adds	r7, #28
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	40012c00 	.word	0x40012c00
 8005238:	40014000 	.word	0x40014000
 800523c:	40014400 	.word	0x40014400

08005240 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800526e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005284:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	041b      	lsls	r3, r3, #16
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	4313      	orrs	r3, r2
 8005290:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a13      	ldr	r2, [pc, #76]	@ (80052e4 <TIM_OC5_SetConfig+0xa4>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d007      	beq.n	80052aa <TIM_OC5_SetConfig+0x6a>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a12      	ldr	r2, [pc, #72]	@ (80052e8 <TIM_OC5_SetConfig+0xa8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d003      	beq.n	80052aa <TIM_OC5_SetConfig+0x6a>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a11      	ldr	r2, [pc, #68]	@ (80052ec <TIM_OC5_SetConfig+0xac>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d109      	bne.n	80052be <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	021b      	lsls	r3, r3, #8
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	621a      	str	r2, [r3, #32]
}
 80052d8:	bf00      	nop
 80052da:	371c      	adds	r7, #28
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	40012c00 	.word	0x40012c00
 80052e8:	40014000 	.word	0x40014000
 80052ec:	40014400 	.word	0x40014400

080052f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800531e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	021b      	lsls	r3, r3, #8
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4313      	orrs	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005336:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	051b      	lsls	r3, r3, #20
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a14      	ldr	r2, [pc, #80]	@ (8005398 <TIM_OC6_SetConfig+0xa8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d007      	beq.n	800535c <TIM_OC6_SetConfig+0x6c>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a13      	ldr	r2, [pc, #76]	@ (800539c <TIM_OC6_SetConfig+0xac>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d003      	beq.n	800535c <TIM_OC6_SetConfig+0x6c>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a12      	ldr	r2, [pc, #72]	@ (80053a0 <TIM_OC6_SetConfig+0xb0>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d109      	bne.n	8005370 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005362:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	029b      	lsls	r3, r3, #10
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	4313      	orrs	r3, r2
 800536e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	621a      	str	r2, [r3, #32]
}
 800538a:	bf00      	nop
 800538c:	371c      	adds	r7, #28
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	40012c00 	.word	0x40012c00
 800539c:	40014000 	.word	0x40014000
 80053a0:	40014400 	.word	0x40014400

080053a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b087      	sub	sp, #28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	f023 0201 	bic.w	r2, r3, #1
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	011b      	lsls	r3, r3, #4
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f023 030a 	bic.w	r3, r3, #10
 80053e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	621a      	str	r2, [r3, #32]
}
 80053f6:	bf00      	nop
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005402:	b480      	push	{r7}
 8005404:	b087      	sub	sp, #28
 8005406:	af00      	add	r7, sp, #0
 8005408:	60f8      	str	r0, [r7, #12]
 800540a:	60b9      	str	r1, [r7, #8]
 800540c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	f023 0210 	bic.w	r2, r3, #16
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800542c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	031b      	lsls	r3, r3, #12
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	4313      	orrs	r3, r2
 8005436:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800543e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	011b      	lsls	r3, r3, #4
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	4313      	orrs	r3, r2
 8005448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	621a      	str	r2, [r3, #32]
}
 8005456:	bf00      	nop
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005462:	b480      	push	{r7}
 8005464:	b085      	sub	sp, #20
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005478:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	f043 0307 	orr.w	r3, r3, #7
 8005484:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	609a      	str	r2, [r3, #8]
}
 800548c:	bf00      	nop
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
 80054a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	021a      	lsls	r2, r3, #8
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	431a      	orrs	r2, r3
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4313      	orrs	r3, r2
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	609a      	str	r2, [r3, #8]
}
 80054cc:	bf00      	nop
 80054ce:	371c      	adds	r7, #28
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d101      	bne.n	80054f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054ec:	2302      	movs	r3, #2
 80054ee:	e04f      	b.n	8005590 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a21      	ldr	r2, [pc, #132]	@ (800559c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d108      	bne.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005520:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005532:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a14      	ldr	r2, [pc, #80]	@ (800559c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d009      	beq.n	8005564 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005558:	d004      	beq.n	8005564 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a10      	ldr	r2, [pc, #64]	@ (80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d10c      	bne.n	800557e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800556a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	4313      	orrs	r3, r2
 8005574:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	40012c00 	.word	0x40012c00
 80055a0:	40014000 	.word	0x40014000

080055a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e040      	b.n	8005638 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d106      	bne.n	80055cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fc f896 	bl	80016f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2224      	movs	r2, #36	@ 0x24
 80055d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 0201 	bic.w	r2, r2, #1
 80055e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fade 	bl	8005bac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f8af 	bl	8005754 <UART_SetConfig>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d101      	bne.n	8005600 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e01b      	b.n	8005638 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800560e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689a      	ldr	r2, [r3, #8]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800561e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0201 	orr.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 fb5d 	bl	8005cf0 <UART_CheckIdleState>
 8005636:	4603      	mov	r3, r0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b08a      	sub	sp, #40	@ 0x28
 8005644:	af02      	add	r7, sp, #8
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	603b      	str	r3, [r7, #0]
 800564c:	4613      	mov	r3, r2
 800564e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005654:	2b20      	cmp	r3, #32
 8005656:	d177      	bne.n	8005748 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <HAL_UART_Transmit+0x24>
 800565e:	88fb      	ldrh	r3, [r7, #6]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e070      	b.n	800574a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2221      	movs	r2, #33	@ 0x21
 8005674:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005676:	f7fc fa83 	bl	8001b80 <HAL_GetTick>
 800567a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	88fa      	ldrh	r2, [r7, #6]
 8005680:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	88fa      	ldrh	r2, [r7, #6]
 8005688:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005694:	d108      	bne.n	80056a8 <HAL_UART_Transmit+0x68>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d104      	bne.n	80056a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800569e:	2300      	movs	r3, #0
 80056a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	61bb      	str	r3, [r7, #24]
 80056a6:	e003      	b.n	80056b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056ac:	2300      	movs	r3, #0
 80056ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056b0:	e02f      	b.n	8005712 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2200      	movs	r2, #0
 80056ba:	2180      	movs	r1, #128	@ 0x80
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 fbbf 	bl	8005e40 <UART_WaitOnFlagUntilTimeout>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d004      	beq.n	80056d2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2220      	movs	r2, #32
 80056cc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e03b      	b.n	800574a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10b      	bne.n	80056f0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	881a      	ldrh	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056e4:	b292      	uxth	r2, r2
 80056e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	3302      	adds	r3, #2
 80056ec:	61bb      	str	r3, [r7, #24]
 80056ee:	e007      	b.n	8005700 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	781a      	ldrb	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	3301      	adds	r3, #1
 80056fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005706:	b29b      	uxth	r3, r3
 8005708:	3b01      	subs	r3, #1
 800570a:	b29a      	uxth	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005718:	b29b      	uxth	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1c9      	bne.n	80056b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	2200      	movs	r2, #0
 8005726:	2140      	movs	r1, #64	@ 0x40
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 fb89 	bl	8005e40 <UART_WaitOnFlagUntilTimeout>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d004      	beq.n	800573e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2220      	movs	r2, #32
 8005738:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e005      	b.n	800574a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2220      	movs	r2, #32
 8005742:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005744:	2300      	movs	r3, #0
 8005746:	e000      	b.n	800574a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005748:	2302      	movs	r3, #2
  }
}
 800574a:	4618      	mov	r0, r3
 800574c:	3720      	adds	r7, #32
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
	...

08005754 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005758:	b08a      	sub	sp, #40	@ 0x28
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	431a      	orrs	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	431a      	orrs	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	4313      	orrs	r3, r2
 800577a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	4bb4      	ldr	r3, [pc, #720]	@ (8005a54 <UART_SetConfig+0x300>)
 8005784:	4013      	ands	r3, r2
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	6812      	ldr	r2, [r2, #0]
 800578a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800578c:	430b      	orrs	r3, r1
 800578e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	68da      	ldr	r2, [r3, #12]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4aa9      	ldr	r2, [pc, #676]	@ (8005a58 <UART_SetConfig+0x304>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d004      	beq.n	80057c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057bc:	4313      	orrs	r3, r2
 80057be:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057d0:	430a      	orrs	r2, r1
 80057d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4aa0      	ldr	r2, [pc, #640]	@ (8005a5c <UART_SetConfig+0x308>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d126      	bne.n	800582c <UART_SetConfig+0xd8>
 80057de:	4ba0      	ldr	r3, [pc, #640]	@ (8005a60 <UART_SetConfig+0x30c>)
 80057e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e4:	f003 0303 	and.w	r3, r3, #3
 80057e8:	2b03      	cmp	r3, #3
 80057ea:	d81b      	bhi.n	8005824 <UART_SetConfig+0xd0>
 80057ec:	a201      	add	r2, pc, #4	@ (adr r2, 80057f4 <UART_SetConfig+0xa0>)
 80057ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f2:	bf00      	nop
 80057f4:	08005805 	.word	0x08005805
 80057f8:	08005815 	.word	0x08005815
 80057fc:	0800580d 	.word	0x0800580d
 8005800:	0800581d 	.word	0x0800581d
 8005804:	2301      	movs	r3, #1
 8005806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800580a:	e080      	b.n	800590e <UART_SetConfig+0x1ba>
 800580c:	2302      	movs	r3, #2
 800580e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005812:	e07c      	b.n	800590e <UART_SetConfig+0x1ba>
 8005814:	2304      	movs	r3, #4
 8005816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800581a:	e078      	b.n	800590e <UART_SetConfig+0x1ba>
 800581c:	2308      	movs	r3, #8
 800581e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005822:	e074      	b.n	800590e <UART_SetConfig+0x1ba>
 8005824:	2310      	movs	r3, #16
 8005826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800582a:	e070      	b.n	800590e <UART_SetConfig+0x1ba>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a8c      	ldr	r2, [pc, #560]	@ (8005a64 <UART_SetConfig+0x310>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d138      	bne.n	80058a8 <UART_SetConfig+0x154>
 8005836:	4b8a      	ldr	r3, [pc, #552]	@ (8005a60 <UART_SetConfig+0x30c>)
 8005838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800583c:	f003 030c 	and.w	r3, r3, #12
 8005840:	2b0c      	cmp	r3, #12
 8005842:	d82d      	bhi.n	80058a0 <UART_SetConfig+0x14c>
 8005844:	a201      	add	r2, pc, #4	@ (adr r2, 800584c <UART_SetConfig+0xf8>)
 8005846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584a:	bf00      	nop
 800584c:	08005881 	.word	0x08005881
 8005850:	080058a1 	.word	0x080058a1
 8005854:	080058a1 	.word	0x080058a1
 8005858:	080058a1 	.word	0x080058a1
 800585c:	08005891 	.word	0x08005891
 8005860:	080058a1 	.word	0x080058a1
 8005864:	080058a1 	.word	0x080058a1
 8005868:	080058a1 	.word	0x080058a1
 800586c:	08005889 	.word	0x08005889
 8005870:	080058a1 	.word	0x080058a1
 8005874:	080058a1 	.word	0x080058a1
 8005878:	080058a1 	.word	0x080058a1
 800587c:	08005899 	.word	0x08005899
 8005880:	2300      	movs	r3, #0
 8005882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005886:	e042      	b.n	800590e <UART_SetConfig+0x1ba>
 8005888:	2302      	movs	r3, #2
 800588a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800588e:	e03e      	b.n	800590e <UART_SetConfig+0x1ba>
 8005890:	2304      	movs	r3, #4
 8005892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005896:	e03a      	b.n	800590e <UART_SetConfig+0x1ba>
 8005898:	2308      	movs	r3, #8
 800589a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800589e:	e036      	b.n	800590e <UART_SetConfig+0x1ba>
 80058a0:	2310      	movs	r3, #16
 80058a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058a6:	e032      	b.n	800590e <UART_SetConfig+0x1ba>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a6a      	ldr	r2, [pc, #424]	@ (8005a58 <UART_SetConfig+0x304>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d12a      	bne.n	8005908 <UART_SetConfig+0x1b4>
 80058b2:	4b6b      	ldr	r3, [pc, #428]	@ (8005a60 <UART_SetConfig+0x30c>)
 80058b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80058bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058c0:	d01a      	beq.n	80058f8 <UART_SetConfig+0x1a4>
 80058c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058c6:	d81b      	bhi.n	8005900 <UART_SetConfig+0x1ac>
 80058c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058cc:	d00c      	beq.n	80058e8 <UART_SetConfig+0x194>
 80058ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058d2:	d815      	bhi.n	8005900 <UART_SetConfig+0x1ac>
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d003      	beq.n	80058e0 <UART_SetConfig+0x18c>
 80058d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058dc:	d008      	beq.n	80058f0 <UART_SetConfig+0x19c>
 80058de:	e00f      	b.n	8005900 <UART_SetConfig+0x1ac>
 80058e0:	2300      	movs	r3, #0
 80058e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058e6:	e012      	b.n	800590e <UART_SetConfig+0x1ba>
 80058e8:	2302      	movs	r3, #2
 80058ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058ee:	e00e      	b.n	800590e <UART_SetConfig+0x1ba>
 80058f0:	2304      	movs	r3, #4
 80058f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058f6:	e00a      	b.n	800590e <UART_SetConfig+0x1ba>
 80058f8:	2308      	movs	r3, #8
 80058fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058fe:	e006      	b.n	800590e <UART_SetConfig+0x1ba>
 8005900:	2310      	movs	r3, #16
 8005902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005906:	e002      	b.n	800590e <UART_SetConfig+0x1ba>
 8005908:	2310      	movs	r3, #16
 800590a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a51      	ldr	r2, [pc, #324]	@ (8005a58 <UART_SetConfig+0x304>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d17a      	bne.n	8005a0e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005918:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800591c:	2b08      	cmp	r3, #8
 800591e:	d824      	bhi.n	800596a <UART_SetConfig+0x216>
 8005920:	a201      	add	r2, pc, #4	@ (adr r2, 8005928 <UART_SetConfig+0x1d4>)
 8005922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005926:	bf00      	nop
 8005928:	0800594d 	.word	0x0800594d
 800592c:	0800596b 	.word	0x0800596b
 8005930:	08005955 	.word	0x08005955
 8005934:	0800596b 	.word	0x0800596b
 8005938:	0800595b 	.word	0x0800595b
 800593c:	0800596b 	.word	0x0800596b
 8005940:	0800596b 	.word	0x0800596b
 8005944:	0800596b 	.word	0x0800596b
 8005948:	08005963 	.word	0x08005963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800594c:	f7fe fc6e 	bl	800422c <HAL_RCC_GetPCLK1Freq>
 8005950:	61f8      	str	r0, [r7, #28]
        break;
 8005952:	e010      	b.n	8005976 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005954:	4b44      	ldr	r3, [pc, #272]	@ (8005a68 <UART_SetConfig+0x314>)
 8005956:	61fb      	str	r3, [r7, #28]
        break;
 8005958:	e00d      	b.n	8005976 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800595a:	f7fe fbcf 	bl	80040fc <HAL_RCC_GetSysClockFreq>
 800595e:	61f8      	str	r0, [r7, #28]
        break;
 8005960:	e009      	b.n	8005976 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005966:	61fb      	str	r3, [r7, #28]
        break;
 8005968:	e005      	b.n	8005976 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005974:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 8107 	beq.w	8005b8c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	4613      	mov	r3, r2
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	4413      	add	r3, r2
 8005988:	69fa      	ldr	r2, [r7, #28]
 800598a:	429a      	cmp	r2, r3
 800598c:	d305      	bcc.n	800599a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005994:	69fa      	ldr	r2, [r7, #28]
 8005996:	429a      	cmp	r2, r3
 8005998:	d903      	bls.n	80059a2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80059a0:	e0f4      	b.n	8005b8c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	2200      	movs	r2, #0
 80059a6:	461c      	mov	r4, r3
 80059a8:	4615      	mov	r5, r2
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	f04f 0300 	mov.w	r3, #0
 80059b2:	022b      	lsls	r3, r5, #8
 80059b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80059b8:	0222      	lsls	r2, r4, #8
 80059ba:	68f9      	ldr	r1, [r7, #12]
 80059bc:	6849      	ldr	r1, [r1, #4]
 80059be:	0849      	lsrs	r1, r1, #1
 80059c0:	2000      	movs	r0, #0
 80059c2:	4688      	mov	r8, r1
 80059c4:	4681      	mov	r9, r0
 80059c6:	eb12 0a08 	adds.w	sl, r2, r8
 80059ca:	eb43 0b09 	adc.w	fp, r3, r9
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	603b      	str	r3, [r7, #0]
 80059d6:	607a      	str	r2, [r7, #4]
 80059d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059dc:	4650      	mov	r0, sl
 80059de:	4659      	mov	r1, fp
 80059e0:	f7fb f8e2 	bl	8000ba8 <__aeabi_uldivmod>
 80059e4:	4602      	mov	r2, r0
 80059e6:	460b      	mov	r3, r1
 80059e8:	4613      	mov	r3, r2
 80059ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059f2:	d308      	bcc.n	8005a06 <UART_SetConfig+0x2b2>
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059fa:	d204      	bcs.n	8005a06 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	60da      	str	r2, [r3, #12]
 8005a04:	e0c2      	b.n	8005b8c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005a0c:	e0be      	b.n	8005b8c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a16:	d16a      	bne.n	8005aee <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005a18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a1c:	2b08      	cmp	r3, #8
 8005a1e:	d834      	bhi.n	8005a8a <UART_SetConfig+0x336>
 8005a20:	a201      	add	r2, pc, #4	@ (adr r2, 8005a28 <UART_SetConfig+0x2d4>)
 8005a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a26:	bf00      	nop
 8005a28:	08005a4d 	.word	0x08005a4d
 8005a2c:	08005a6d 	.word	0x08005a6d
 8005a30:	08005a75 	.word	0x08005a75
 8005a34:	08005a8b 	.word	0x08005a8b
 8005a38:	08005a7b 	.word	0x08005a7b
 8005a3c:	08005a8b 	.word	0x08005a8b
 8005a40:	08005a8b 	.word	0x08005a8b
 8005a44:	08005a8b 	.word	0x08005a8b
 8005a48:	08005a83 	.word	0x08005a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a4c:	f7fe fbee 	bl	800422c <HAL_RCC_GetPCLK1Freq>
 8005a50:	61f8      	str	r0, [r7, #28]
        break;
 8005a52:	e020      	b.n	8005a96 <UART_SetConfig+0x342>
 8005a54:	efff69f3 	.word	0xefff69f3
 8005a58:	40008000 	.word	0x40008000
 8005a5c:	40013800 	.word	0x40013800
 8005a60:	40021000 	.word	0x40021000
 8005a64:	40004400 	.word	0x40004400
 8005a68:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a6c:	f7fe fbf4 	bl	8004258 <HAL_RCC_GetPCLK2Freq>
 8005a70:	61f8      	str	r0, [r7, #28]
        break;
 8005a72:	e010      	b.n	8005a96 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a74:	4b4c      	ldr	r3, [pc, #304]	@ (8005ba8 <UART_SetConfig+0x454>)
 8005a76:	61fb      	str	r3, [r7, #28]
        break;
 8005a78:	e00d      	b.n	8005a96 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a7a:	f7fe fb3f 	bl	80040fc <HAL_RCC_GetSysClockFreq>
 8005a7e:	61f8      	str	r0, [r7, #28]
        break;
 8005a80:	e009      	b.n	8005a96 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a86:	61fb      	str	r3, [r7, #28]
        break;
 8005a88:	e005      	b.n	8005a96 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d077      	beq.n	8005b8c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	005a      	lsls	r2, r3, #1
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	085b      	lsrs	r3, r3, #1
 8005aa6:	441a      	add	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	2b0f      	cmp	r3, #15
 8005ab6:	d916      	bls.n	8005ae6 <UART_SetConfig+0x392>
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005abe:	d212      	bcs.n	8005ae6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	f023 030f 	bic.w	r3, r3, #15
 8005ac8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	085b      	lsrs	r3, r3, #1
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	f003 0307 	and.w	r3, r3, #7
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	8afb      	ldrh	r3, [r7, #22]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	8afa      	ldrh	r2, [r7, #22]
 8005ae2:	60da      	str	r2, [r3, #12]
 8005ae4:	e052      	b.n	8005b8c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005aec:	e04e      	b.n	8005b8c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005aee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	d827      	bhi.n	8005b46 <UART_SetConfig+0x3f2>
 8005af6:	a201      	add	r2, pc, #4	@ (adr r2, 8005afc <UART_SetConfig+0x3a8>)
 8005af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afc:	08005b21 	.word	0x08005b21
 8005b00:	08005b29 	.word	0x08005b29
 8005b04:	08005b31 	.word	0x08005b31
 8005b08:	08005b47 	.word	0x08005b47
 8005b0c:	08005b37 	.word	0x08005b37
 8005b10:	08005b47 	.word	0x08005b47
 8005b14:	08005b47 	.word	0x08005b47
 8005b18:	08005b47 	.word	0x08005b47
 8005b1c:	08005b3f 	.word	0x08005b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b20:	f7fe fb84 	bl	800422c <HAL_RCC_GetPCLK1Freq>
 8005b24:	61f8      	str	r0, [r7, #28]
        break;
 8005b26:	e014      	b.n	8005b52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b28:	f7fe fb96 	bl	8004258 <HAL_RCC_GetPCLK2Freq>
 8005b2c:	61f8      	str	r0, [r7, #28]
        break;
 8005b2e:	e010      	b.n	8005b52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b30:	4b1d      	ldr	r3, [pc, #116]	@ (8005ba8 <UART_SetConfig+0x454>)
 8005b32:	61fb      	str	r3, [r7, #28]
        break;
 8005b34:	e00d      	b.n	8005b52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b36:	f7fe fae1 	bl	80040fc <HAL_RCC_GetSysClockFreq>
 8005b3a:	61f8      	str	r0, [r7, #28]
        break;
 8005b3c:	e009      	b.n	8005b52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b42:	61fb      	str	r3, [r7, #28]
        break;
 8005b44:	e005      	b.n	8005b52 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005b46:	2300      	movs	r3, #0
 8005b48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005b50:	bf00      	nop
    }

    if (pclk != 0U)
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d019      	beq.n	8005b8c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	085a      	lsrs	r2, r3, #1
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	441a      	add	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	2b0f      	cmp	r3, #15
 8005b70:	d909      	bls.n	8005b86 <UART_SetConfig+0x432>
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b78:	d205      	bcs.n	8005b86 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	60da      	str	r2, [r3, #12]
 8005b84:	e002      	b.n	8005b8c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005b98:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3728      	adds	r7, #40	@ 0x28
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ba6:	bf00      	nop
 8005ba8:	00f42400 	.word	0x00f42400

08005bac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb8:	f003 0308 	and.w	r3, r3, #8
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00a      	beq.n	8005bd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00a      	beq.n	8005bf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfc:	f003 0302 	and.w	r3, r3, #2
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00a      	beq.n	8005c1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	430a      	orrs	r2, r1
 8005c18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1e:	f003 0304 	and.w	r3, r3, #4
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00a      	beq.n	8005c3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c40:	f003 0310 	and.w	r3, r3, #16
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00a      	beq.n	8005c5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c62:	f003 0320 	and.w	r3, r3, #32
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d01a      	beq.n	8005cc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005caa:	d10a      	bne.n	8005cc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	605a      	str	r2, [r3, #4]
  }
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b098      	sub	sp, #96	@ 0x60
 8005cf4:	af02      	add	r7, sp, #8
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d00:	f7fb ff3e 	bl	8001b80 <HAL_GetTick>
 8005d04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0308 	and.w	r3, r3, #8
 8005d10:	2b08      	cmp	r3, #8
 8005d12:	d12e      	bne.n	8005d72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f88c 	bl	8005e40 <UART_WaitOnFlagUntilTimeout>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d021      	beq.n	8005d72 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d36:	e853 3f00 	ldrex	r3, [r3]
 8005d3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d42:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	461a      	mov	r2, r3
 8005d4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d4e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d54:	e841 2300 	strex	r3, r2, [r1]
 8005d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1e6      	bne.n	8005d2e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2220      	movs	r2, #32
 8005d64:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e062      	b.n	8005e38 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	2b04      	cmp	r3, #4
 8005d7e:	d149      	bne.n	8005e14 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f856 	bl	8005e40 <UART_WaitOnFlagUntilTimeout>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d03c      	beq.n	8005e14 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da2:	e853 3f00 	ldrex	r3, [r3]
 8005da6:	623b      	str	r3, [r7, #32]
   return(result);
 8005da8:	6a3b      	ldr	r3, [r7, #32]
 8005daa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	461a      	mov	r2, r3
 8005db6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005db8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005dbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dc0:	e841 2300 	strex	r3, r2, [r1]
 8005dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1e6      	bne.n	8005d9a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3308      	adds	r3, #8
 8005dd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	e853 3f00 	ldrex	r3, [r3]
 8005dda:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 0301 	bic.w	r3, r3, #1
 8005de2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3308      	adds	r3, #8
 8005dea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dec:	61fa      	str	r2, [r7, #28]
 8005dee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df0:	69b9      	ldr	r1, [r7, #24]
 8005df2:	69fa      	ldr	r2, [r7, #28]
 8005df4:	e841 2300 	strex	r3, r2, [r1]
 8005df8:	617b      	str	r3, [r7, #20]
   return(result);
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1e5      	bne.n	8005dcc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2220      	movs	r2, #32
 8005e04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e011      	b.n	8005e38 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2220      	movs	r2, #32
 8005e18:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3758      	adds	r7, #88	@ 0x58
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	603b      	str	r3, [r7, #0]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e50:	e04f      	b.n	8005ef2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e58:	d04b      	beq.n	8005ef2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e5a:	f7fb fe91 	bl	8001b80 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d302      	bcc.n	8005e70 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e04e      	b.n	8005f12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0304 	and.w	r3, r3, #4
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d037      	beq.n	8005ef2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2b80      	cmp	r3, #128	@ 0x80
 8005e86:	d034      	beq.n	8005ef2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2b40      	cmp	r3, #64	@ 0x40
 8005e8c:	d031      	beq.n	8005ef2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	f003 0308 	and.w	r3, r3, #8
 8005e98:	2b08      	cmp	r3, #8
 8005e9a:	d110      	bne.n	8005ebe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2208      	movs	r2, #8
 8005ea2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 f838 	bl	8005f1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2208      	movs	r2, #8
 8005eae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e029      	b.n	8005f12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ec8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ecc:	d111      	bne.n	8005ef2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ed6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 f81e 	bl	8005f1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e00f      	b.n	8005f12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69da      	ldr	r2, [r3, #28]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	4013      	ands	r3, r2
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	bf0c      	ite	eq
 8005f02:	2301      	moveq	r3, #1
 8005f04:	2300      	movne	r3, #0
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	461a      	mov	r2, r3
 8005f0a:	79fb      	ldrb	r3, [r7, #7]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d0a0      	beq.n	8005e52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b095      	sub	sp, #84	@ 0x54
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f2a:	e853 3f00 	ldrex	r3, [r3]
 8005f2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f40:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f42:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f48:	e841 2300 	strex	r3, r2, [r1]
 8005f4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1e6      	bne.n	8005f22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3308      	adds	r3, #8
 8005f5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5c:	6a3b      	ldr	r3, [r7, #32]
 8005f5e:	e853 3f00 	ldrex	r3, [r3]
 8005f62:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	f023 0301 	bic.w	r3, r3, #1
 8005f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3308      	adds	r3, #8
 8005f72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f7c:	e841 2300 	strex	r3, r2, [r1]
 8005f80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1e5      	bne.n	8005f54 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d118      	bne.n	8005fc2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	e853 3f00 	ldrex	r3, [r3]
 8005f9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f023 0310 	bic.w	r3, r3, #16
 8005fa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fae:	61bb      	str	r3, [r7, #24]
 8005fb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	6979      	ldr	r1, [r7, #20]
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	613b      	str	r3, [r7, #16]
   return(result);
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e6      	bne.n	8005f90 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005fd6:	bf00      	nop
 8005fd8:	3754      	adds	r7, #84	@ 0x54
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
	...

08005fe4 <arm_mean_f32>:
 8005fe4:	b430      	push	{r4, r5}
 8005fe6:	088d      	lsrs	r5, r1, #2
 8005fe8:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 800605c <arm_mean_f32+0x78>
 8005fec:	d018      	beq.n	8006020 <arm_mean_f32+0x3c>
 8005fee:	f100 0310 	add.w	r3, r0, #16
 8005ff2:	462c      	mov	r4, r5
 8005ff4:	ed53 5a04 	vldr	s11, [r3, #-16]
 8005ff8:	ed13 6a03 	vldr	s12, [r3, #-12]
 8005ffc:	ed53 6a02 	vldr	s13, [r3, #-8]
 8006000:	ed13 7a01 	vldr	s14, [r3, #-4]
 8006004:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006008:	3c01      	subs	r4, #1
 800600a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800600e:	f103 0310 	add.w	r3, r3, #16
 8006012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006016:	ee77 7a87 	vadd.f32	s15, s15, s14
 800601a:	d1eb      	bne.n	8005ff4 <arm_mean_f32+0x10>
 800601c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8006020:	f011 0303 	ands.w	r3, r1, #3
 8006024:	d00f      	beq.n	8006046 <arm_mean_f32+0x62>
 8006026:	ed90 7a00 	vldr	s14, [r0]
 800602a:	3b01      	subs	r3, #1
 800602c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006030:	d009      	beq.n	8006046 <arm_mean_f32+0x62>
 8006032:	ed90 7a01 	vldr	s14, [r0, #4]
 8006036:	2b01      	cmp	r3, #1
 8006038:	ee77 7a87 	vadd.f32	s15, s15, s14
 800603c:	bf1c      	itt	ne
 800603e:	ed90 7a02 	vldrne	s14, [r0, #8]
 8006042:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8006046:	ee07 1a10 	vmov	s14, r1
 800604a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800604e:	bc30      	pop	{r4, r5}
 8006050:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006054:	edc2 6a00 	vstr	s13, [r2]
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	00000000 	.word	0x00000000

08006060 <arm_rfft_32_fast_init_f32>:
 8006060:	b178      	cbz	r0, 8006082 <arm_rfft_32_fast_init_f32+0x22>
 8006062:	b430      	push	{r4, r5}
 8006064:	4908      	ldr	r1, [pc, #32]	@ (8006088 <arm_rfft_32_fast_init_f32+0x28>)
 8006066:	4a09      	ldr	r2, [pc, #36]	@ (800608c <arm_rfft_32_fast_init_f32+0x2c>)
 8006068:	2310      	movs	r3, #16
 800606a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800606e:	8003      	strh	r3, [r0, #0]
 8006070:	2520      	movs	r5, #32
 8006072:	2414      	movs	r4, #20
 8006074:	4b06      	ldr	r3, [pc, #24]	@ (8006090 <arm_rfft_32_fast_init_f32+0x30>)
 8006076:	8205      	strh	r5, [r0, #16]
 8006078:	8184      	strh	r4, [r0, #12]
 800607a:	6143      	str	r3, [r0, #20]
 800607c:	bc30      	pop	{r4, r5}
 800607e:	2000      	movs	r0, #0
 8006080:	4770      	bx	lr
 8006082:	f04f 30ff 	mov.w	r0, #4294967295
 8006086:	4770      	bx	lr
 8006088:	0800ae98 	.word	0x0800ae98
 800608c:	0800f7d0 	.word	0x0800f7d0
 8006090:	08018550 	.word	0x08018550

08006094 <arm_rfft_64_fast_init_f32>:
 8006094:	b178      	cbz	r0, 80060b6 <arm_rfft_64_fast_init_f32+0x22>
 8006096:	b430      	push	{r4, r5}
 8006098:	4908      	ldr	r1, [pc, #32]	@ (80060bc <arm_rfft_64_fast_init_f32+0x28>)
 800609a:	4a09      	ldr	r2, [pc, #36]	@ (80060c0 <arm_rfft_64_fast_init_f32+0x2c>)
 800609c:	2320      	movs	r3, #32
 800609e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80060a2:	8003      	strh	r3, [r0, #0]
 80060a4:	2540      	movs	r5, #64	@ 0x40
 80060a6:	2430      	movs	r4, #48	@ 0x30
 80060a8:	4b06      	ldr	r3, [pc, #24]	@ (80060c4 <arm_rfft_64_fast_init_f32+0x30>)
 80060aa:	8205      	strh	r5, [r0, #16]
 80060ac:	8184      	strh	r4, [r0, #12]
 80060ae:	6143      	str	r3, [r0, #20]
 80060b0:	bc30      	pop	{r4, r5}
 80060b2:	2000      	movs	r0, #0
 80060b4:	4770      	bx	lr
 80060b6:	f04f 30ff 	mov.w	r0, #4294967295
 80060ba:	4770      	bx	lr
 80060bc:	0800cff0 	.word	0x0800cff0
 80060c0:	08014050 	.word	0x08014050
 80060c4:	0801cdd0 	.word	0x0801cdd0

080060c8 <arm_rfft_256_fast_init_f32>:
 80060c8:	b180      	cbz	r0, 80060ec <arm_rfft_256_fast_init_f32+0x24>
 80060ca:	b430      	push	{r4, r5}
 80060cc:	4909      	ldr	r1, [pc, #36]	@ (80060f4 <arm_rfft_256_fast_init_f32+0x2c>)
 80060ce:	4a0a      	ldr	r2, [pc, #40]	@ (80060f8 <arm_rfft_256_fast_init_f32+0x30>)
 80060d0:	2380      	movs	r3, #128	@ 0x80
 80060d2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80060d6:	8003      	strh	r3, [r0, #0]
 80060d8:	f44f 7580 	mov.w	r5, #256	@ 0x100
 80060dc:	24d0      	movs	r4, #208	@ 0xd0
 80060de:	4b07      	ldr	r3, [pc, #28]	@ (80060fc <arm_rfft_256_fast_init_f32+0x34>)
 80060e0:	8205      	strh	r5, [r0, #16]
 80060e2:	8184      	strh	r4, [r0, #12]
 80060e4:	6143      	str	r3, [r0, #20]
 80060e6:	bc30      	pop	{r4, r5}
 80060e8:	2000      	movs	r0, #0
 80060ea:	4770      	bx	lr
 80060ec:	f04f 30ff 	mov.w	r0, #4294967295
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	0800acf8 	.word	0x0800acf8
 80060f8:	0800f3d0 	.word	0x0800f3d0
 80060fc:	08018150 	.word	0x08018150

08006100 <arm_rfft_512_fast_init_f32>:
 8006100:	b190      	cbz	r0, 8006128 <arm_rfft_512_fast_init_f32+0x28>
 8006102:	b430      	push	{r4, r5}
 8006104:	490a      	ldr	r1, [pc, #40]	@ (8006130 <arm_rfft_512_fast_init_f32+0x30>)
 8006106:	4a0b      	ldr	r2, [pc, #44]	@ (8006134 <arm_rfft_512_fast_init_f32+0x34>)
 8006108:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800610c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006110:	8003      	strh	r3, [r0, #0]
 8006112:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8006116:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 800611a:	4b07      	ldr	r3, [pc, #28]	@ (8006138 <arm_rfft_512_fast_init_f32+0x38>)
 800611c:	8205      	strh	r5, [r0, #16]
 800611e:	8184      	strh	r4, [r0, #12]
 8006120:	6143      	str	r3, [r0, #20]
 8006122:	bc30      	pop	{r4, r5}
 8006124:	2000      	movs	r0, #0
 8006126:	4770      	bx	lr
 8006128:	f04f 30ff 	mov.w	r0, #4294967295
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	0800cc80 	.word	0x0800cc80
 8006134:	08013850 	.word	0x08013850
 8006138:	0801c5d0 	.word	0x0801c5d0

0800613c <arm_rfft_1024_fast_init_f32>:
 800613c:	b190      	cbz	r0, 8006164 <arm_rfft_1024_fast_init_f32+0x28>
 800613e:	b430      	push	{r4, r5}
 8006140:	490a      	ldr	r1, [pc, #40]	@ (800616c <arm_rfft_1024_fast_init_f32+0x30>)
 8006142:	4a0b      	ldr	r2, [pc, #44]	@ (8006170 <arm_rfft_1024_fast_init_f32+0x34>)
 8006144:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006148:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800614c:	8003      	strh	r3, [r0, #0]
 800614e:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 8006152:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 8006156:	4b07      	ldr	r3, [pc, #28]	@ (8006174 <arm_rfft_1024_fast_init_f32+0x38>)
 8006158:	8205      	strh	r5, [r0, #16]
 800615a:	8184      	strh	r4, [r0, #12]
 800615c:	6143      	str	r3, [r0, #20]
 800615e:	bc30      	pop	{r4, r5}
 8006160:	2000      	movs	r0, #0
 8006162:	4770      	bx	lr
 8006164:	f04f 30ff 	mov.w	r0, #4294967295
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	0800d050 	.word	0x0800d050
 8006170:	08014150 	.word	0x08014150
 8006174:	08015150 	.word	0x08015150

08006178 <arm_rfft_2048_fast_init_f32>:
 8006178:	b190      	cbz	r0, 80061a0 <arm_rfft_2048_fast_init_f32+0x28>
 800617a:	b430      	push	{r4, r5}
 800617c:	490a      	ldr	r1, [pc, #40]	@ (80061a8 <arm_rfft_2048_fast_init_f32+0x30>)
 800617e:	4a0b      	ldr	r2, [pc, #44]	@ (80061ac <arm_rfft_2048_fast_init_f32+0x34>)
 8006180:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006184:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006188:	8003      	strh	r3, [r0, #0]
 800618a:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800618e:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 8006192:	4b07      	ldr	r3, [pc, #28]	@ (80061b0 <arm_rfft_2048_fast_init_f32+0x38>)
 8006194:	8205      	strh	r5, [r0, #16]
 8006196:	8184      	strh	r4, [r0, #12]
 8006198:	6143      	str	r3, [r0, #20]
 800619a:	bc30      	pop	{r4, r5}
 800619c:	2000      	movs	r0, #0
 800619e:	4770      	bx	lr
 80061a0:	f04f 30ff 	mov.w	r0, #4294967295
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	08009ee8 	.word	0x08009ee8
 80061ac:	0800d3d0 	.word	0x0800d3d0
 80061b0:	08016150 	.word	0x08016150

080061b4 <arm_rfft_4096_fast_init_f32>:
 80061b4:	b190      	cbz	r0, 80061dc <arm_rfft_4096_fast_init_f32+0x28>
 80061b6:	b430      	push	{r4, r5}
 80061b8:	490a      	ldr	r1, [pc, #40]	@ (80061e4 <arm_rfft_4096_fast_init_f32+0x30>)
 80061ba:	4a0b      	ldr	r2, [pc, #44]	@ (80061e8 <arm_rfft_4096_fast_init_f32+0x34>)
 80061bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80061c0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80061c4:	8003      	strh	r3, [r0, #0]
 80061c6:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 80061ca:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 80061ce:	4b07      	ldr	r3, [pc, #28]	@ (80061ec <arm_rfft_4096_fast_init_f32+0x38>)
 80061d0:	8205      	strh	r5, [r0, #16]
 80061d2:	8184      	strh	r4, [r0, #12]
 80061d4:	6143      	str	r3, [r0, #20]
 80061d6:	bc30      	pop	{r4, r5}
 80061d8:	2000      	movs	r0, #0
 80061da:	4770      	bx	lr
 80061dc:	f04f 30ff 	mov.w	r0, #4294967295
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	0800aec0 	.word	0x0800aec0
 80061e8:	0800f850 	.word	0x0800f850
 80061ec:	080185d0 	.word	0x080185d0

080061f0 <arm_rfft_fast_init_f32>:
 80061f0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80061f4:	d01f      	beq.n	8006236 <arm_rfft_fast_init_f32+0x46>
 80061f6:	d90b      	bls.n	8006210 <arm_rfft_fast_init_f32+0x20>
 80061f8:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80061fc:	d019      	beq.n	8006232 <arm_rfft_fast_init_f32+0x42>
 80061fe:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8006202:	d012      	beq.n	800622a <arm_rfft_fast_init_f32+0x3a>
 8006204:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006208:	d00d      	beq.n	8006226 <arm_rfft_fast_init_f32+0x36>
 800620a:	f04f 30ff 	mov.w	r0, #4294967295
 800620e:	4770      	bx	lr
 8006210:	2940      	cmp	r1, #64	@ 0x40
 8006212:	d00c      	beq.n	800622e <arm_rfft_fast_init_f32+0x3e>
 8006214:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8006218:	d003      	beq.n	8006222 <arm_rfft_fast_init_f32+0x32>
 800621a:	2920      	cmp	r1, #32
 800621c:	d1f5      	bne.n	800620a <arm_rfft_fast_init_f32+0x1a>
 800621e:	4b07      	ldr	r3, [pc, #28]	@ (800623c <arm_rfft_fast_init_f32+0x4c>)
 8006220:	4718      	bx	r3
 8006222:	4b07      	ldr	r3, [pc, #28]	@ (8006240 <arm_rfft_fast_init_f32+0x50>)
 8006224:	4718      	bx	r3
 8006226:	4b07      	ldr	r3, [pc, #28]	@ (8006244 <arm_rfft_fast_init_f32+0x54>)
 8006228:	4718      	bx	r3
 800622a:	4b07      	ldr	r3, [pc, #28]	@ (8006248 <arm_rfft_fast_init_f32+0x58>)
 800622c:	4718      	bx	r3
 800622e:	4b07      	ldr	r3, [pc, #28]	@ (800624c <arm_rfft_fast_init_f32+0x5c>)
 8006230:	e7f6      	b.n	8006220 <arm_rfft_fast_init_f32+0x30>
 8006232:	4b07      	ldr	r3, [pc, #28]	@ (8006250 <arm_rfft_fast_init_f32+0x60>)
 8006234:	e7f4      	b.n	8006220 <arm_rfft_fast_init_f32+0x30>
 8006236:	4b07      	ldr	r3, [pc, #28]	@ (8006254 <arm_rfft_fast_init_f32+0x64>)
 8006238:	e7f2      	b.n	8006220 <arm_rfft_fast_init_f32+0x30>
 800623a:	bf00      	nop
 800623c:	08006061 	.word	0x08006061
 8006240:	080060c9 	.word	0x080060c9
 8006244:	0800613d 	.word	0x0800613d
 8006248:	080061b5 	.word	0x080061b5
 800624c:	08006095 	.word	0x08006095
 8006250:	08006179 	.word	0x08006179
 8006254:	08006101 	.word	0x08006101

08006258 <stage_rfft_f32>:
 8006258:	b410      	push	{r4}
 800625a:	edd1 7a00 	vldr	s15, [r1]
 800625e:	ed91 7a01 	vldr	s14, [r1, #4]
 8006262:	8804      	ldrh	r4, [r0, #0]
 8006264:	6940      	ldr	r0, [r0, #20]
 8006266:	ee37 7a07 	vadd.f32	s14, s14, s14
 800626a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800626e:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8006272:	ee77 6a87 	vadd.f32	s13, s15, s14
 8006276:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800627a:	3c01      	subs	r4, #1
 800627c:	ee26 7a84 	vmul.f32	s14, s13, s8
 8006280:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006284:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8006288:	ed82 7a00 	vstr	s14, [r2]
 800628c:	edc2 7a01 	vstr	s15, [r2, #4]
 8006290:	3010      	adds	r0, #16
 8006292:	3210      	adds	r2, #16
 8006294:	3b08      	subs	r3, #8
 8006296:	3110      	adds	r1, #16
 8006298:	ed11 5a02 	vldr	s10, [r1, #-8]
 800629c:	ed93 7a02 	vldr	s14, [r3, #8]
 80062a0:	ed50 6a02 	vldr	s13, [r0, #-8]
 80062a4:	edd3 4a03 	vldr	s9, [r3, #12]
 80062a8:	ed51 7a01 	vldr	s15, [r1, #-4]
 80062ac:	ed10 6a01 	vldr	s12, [r0, #-4]
 80062b0:	ee77 5a45 	vsub.f32	s11, s14, s10
 80062b4:	ee37 7a05 	vadd.f32	s14, s14, s10
 80062b8:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80062bc:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80062c0:	ee66 5a25 	vmul.f32	s11, s12, s11
 80062c4:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80062c8:	ee37 7a23 	vadd.f32	s14, s14, s7
 80062cc:	ee66 6a85 	vmul.f32	s13, s13, s10
 80062d0:	ee26 6a05 	vmul.f32	s12, s12, s10
 80062d4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80062d8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80062dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80062e0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80062e4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80062e8:	3c01      	subs	r4, #1
 80062ea:	ed02 7a02 	vstr	s14, [r2, #-8]
 80062ee:	ed42 7a01 	vstr	s15, [r2, #-4]
 80062f2:	f1a3 0308 	sub.w	r3, r3, #8
 80062f6:	f101 0108 	add.w	r1, r1, #8
 80062fa:	f100 0008 	add.w	r0, r0, #8
 80062fe:	f102 0208 	add.w	r2, r2, #8
 8006302:	d1c9      	bne.n	8006298 <stage_rfft_f32+0x40>
 8006304:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop

0800630c <merge_rfft_f32>:
 800630c:	b410      	push	{r4}
 800630e:	edd1 7a00 	vldr	s15, [r1]
 8006312:	edd1 6a01 	vldr	s13, [r1, #4]
 8006316:	8804      	ldrh	r4, [r0, #0]
 8006318:	6940      	ldr	r0, [r0, #20]
 800631a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800631e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006322:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8006326:	ee27 7a04 	vmul.f32	s14, s14, s8
 800632a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800632e:	3c01      	subs	r4, #1
 8006330:	ed82 7a00 	vstr	s14, [r2]
 8006334:	edc2 7a01 	vstr	s15, [r2, #4]
 8006338:	b3dc      	cbz	r4, 80063b2 <merge_rfft_f32+0xa6>
 800633a:	00e3      	lsls	r3, r4, #3
 800633c:	3b08      	subs	r3, #8
 800633e:	440b      	add	r3, r1
 8006340:	3010      	adds	r0, #16
 8006342:	3210      	adds	r2, #16
 8006344:	3110      	adds	r1, #16
 8006346:	ed11 5a02 	vldr	s10, [r1, #-8]
 800634a:	ed93 7a02 	vldr	s14, [r3, #8]
 800634e:	ed50 6a02 	vldr	s13, [r0, #-8]
 8006352:	edd3 4a03 	vldr	s9, [r3, #12]
 8006356:	ed51 7a01 	vldr	s15, [r1, #-4]
 800635a:	ed10 6a01 	vldr	s12, [r0, #-4]
 800635e:	ee75 5a47 	vsub.f32	s11, s10, s14
 8006362:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006366:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800636a:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800636e:	ee66 5a25 	vmul.f32	s11, s12, s11
 8006372:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8006376:	ee37 7a63 	vsub.f32	s14, s14, s7
 800637a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800637e:	ee26 6a05 	vmul.f32	s12, s12, s10
 8006382:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006386:	ee37 7a46 	vsub.f32	s14, s14, s12
 800638a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800638e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006392:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006396:	3c01      	subs	r4, #1
 8006398:	ed02 7a02 	vstr	s14, [r2, #-8]
 800639c:	ed42 7a01 	vstr	s15, [r2, #-4]
 80063a0:	f1a3 0308 	sub.w	r3, r3, #8
 80063a4:	f101 0108 	add.w	r1, r1, #8
 80063a8:	f100 0008 	add.w	r0, r0, #8
 80063ac:	f102 0208 	add.w	r2, r2, #8
 80063b0:	d1c9      	bne.n	8006346 <merge_rfft_f32+0x3a>
 80063b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <arm_rfft_fast_f32>:
 80063b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063bc:	8a05      	ldrh	r5, [r0, #16]
 80063be:	086d      	lsrs	r5, r5, #1
 80063c0:	8005      	strh	r5, [r0, #0]
 80063c2:	4604      	mov	r4, r0
 80063c4:	4616      	mov	r6, r2
 80063c6:	461d      	mov	r5, r3
 80063c8:	b14b      	cbz	r3, 80063de <arm_rfft_fast_f32+0x26>
 80063ca:	f7ff ff9f 	bl	800630c <merge_rfft_f32>
 80063ce:	462a      	mov	r2, r5
 80063d0:	4631      	mov	r1, r6
 80063d2:	4620      	mov	r0, r4
 80063d4:	2301      	movs	r3, #1
 80063d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063da:	f000 bb33 	b.w	8006a44 <arm_cfft_f32>
 80063de:	460f      	mov	r7, r1
 80063e0:	461a      	mov	r2, r3
 80063e2:	2301      	movs	r3, #1
 80063e4:	f000 fb2e 	bl	8006a44 <arm_cfft_f32>
 80063e8:	4632      	mov	r2, r6
 80063ea:	4639      	mov	r1, r7
 80063ec:	4620      	mov	r0, r4
 80063ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063f2:	f7ff bf31 	b.w	8006258 <stage_rfft_f32>
 80063f6:	bf00      	nop

080063f8 <arm_cfft_radix8by2_f32>:
 80063f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063fc:	ed2d 8b08 	vpush	{d8-d11}
 8006400:	4607      	mov	r7, r0
 8006402:	4608      	mov	r0, r1
 8006404:	f8b7 c000 	ldrh.w	ip, [r7]
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800640e:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8006412:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006416:	f000 80b0 	beq.w	800657a <arm_cfft_radix8by2_f32+0x182>
 800641a:	008c      	lsls	r4, r1, #2
 800641c:	3410      	adds	r4, #16
 800641e:	f100 0310 	add.w	r3, r0, #16
 8006422:	1906      	adds	r6, r0, r4
 8006424:	3210      	adds	r2, #16
 8006426:	4444      	add	r4, r8
 8006428:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800642c:	f108 0510 	add.w	r5, r8, #16
 8006430:	ed15 2a04 	vldr	s4, [r5, #-16]
 8006434:	ed55 2a03 	vldr	s5, [r5, #-12]
 8006438:	ed54 4a04 	vldr	s9, [r4, #-16]
 800643c:	ed14 4a03 	vldr	s8, [r4, #-12]
 8006440:	ed14 6a02 	vldr	s12, [r4, #-8]
 8006444:	ed54 5a01 	vldr	s11, [r4, #-4]
 8006448:	ed53 3a04 	vldr	s7, [r3, #-16]
 800644c:	ed15 0a02 	vldr	s0, [r5, #-8]
 8006450:	ed55 0a01 	vldr	s1, [r5, #-4]
 8006454:	ed56 6a04 	vldr	s13, [r6, #-16]
 8006458:	ed16 3a03 	vldr	s6, [r6, #-12]
 800645c:	ed13 7a03 	vldr	s14, [r3, #-12]
 8006460:	ed13 5a02 	vldr	s10, [r3, #-8]
 8006464:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006468:	ed16 1a02 	vldr	s2, [r6, #-8]
 800646c:	ed56 1a01 	vldr	s3, [r6, #-4]
 8006470:	ee73 ba82 	vadd.f32	s23, s7, s4
 8006474:	ee37 ba22 	vadd.f32	s22, s14, s5
 8006478:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800647c:	ee33 9a04 	vadd.f32	s18, s6, s8
 8006480:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8006484:	ee75 aa00 	vadd.f32	s21, s10, s0
 8006488:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800648c:	ee71 8a06 	vadd.f32	s17, s2, s12
 8006490:	ed43 ba04 	vstr	s23, [r3, #-16]
 8006494:	ed03 ba03 	vstr	s22, [r3, #-12]
 8006498:	ed43 aa02 	vstr	s21, [r3, #-8]
 800649c:	ed03 aa01 	vstr	s20, [r3, #-4]
 80064a0:	ed06 8a01 	vstr	s16, [r6, #-4]
 80064a4:	ed46 9a04 	vstr	s19, [r6, #-16]
 80064a8:	ed06 9a03 	vstr	s18, [r6, #-12]
 80064ac:	ed46 8a02 	vstr	s17, [r6, #-8]
 80064b0:	ee37 7a62 	vsub.f32	s14, s14, s5
 80064b4:	ee74 4ae6 	vsub.f32	s9, s9, s13
 80064b8:	ee34 4a43 	vsub.f32	s8, s8, s6
 80064bc:	ed52 6a03 	vldr	s13, [r2, #-12]
 80064c0:	ed12 3a04 	vldr	s6, [r2, #-16]
 80064c4:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80064c8:	ee27 8a26 	vmul.f32	s16, s14, s13
 80064cc:	ee64 2aa6 	vmul.f32	s5, s9, s13
 80064d0:	ee23 2a83 	vmul.f32	s4, s7, s6
 80064d4:	ee64 4a83 	vmul.f32	s9, s9, s6
 80064d8:	ee63 3aa6 	vmul.f32	s7, s7, s13
 80064dc:	ee27 7a03 	vmul.f32	s14, s14, s6
 80064e0:	ee64 6a26 	vmul.f32	s13, s8, s13
 80064e4:	ee24 4a03 	vmul.f32	s8, s8, s6
 80064e8:	ee37 7a63 	vsub.f32	s14, s14, s7
 80064ec:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80064f0:	ee32 4ac4 	vsub.f32	s8, s5, s8
 80064f4:	ee32 3a08 	vadd.f32	s6, s4, s16
 80064f8:	ed05 7a03 	vstr	s14, [r5, #-12]
 80064fc:	ed05 3a04 	vstr	s6, [r5, #-16]
 8006500:	ed04 4a04 	vstr	s8, [r4, #-16]
 8006504:	ed44 6a03 	vstr	s13, [r4, #-12]
 8006508:	ed12 7a01 	vldr	s14, [r2, #-4]
 800650c:	ee76 6a41 	vsub.f32	s13, s12, s2
 8006510:	ee35 5a40 	vsub.f32	s10, s10, s0
 8006514:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8006518:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800651c:	ed52 5a02 	vldr	s11, [r2, #-8]
 8006520:	ee67 3a87 	vmul.f32	s7, s15, s14
 8006524:	ee66 4a87 	vmul.f32	s9, s13, s14
 8006528:	ee25 4a25 	vmul.f32	s8, s10, s11
 800652c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006530:	ee25 5a07 	vmul.f32	s10, s10, s14
 8006534:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8006538:	ee26 7a07 	vmul.f32	s14, s12, s14
 800653c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8006540:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8006544:	ee74 5a23 	vadd.f32	s11, s8, s7
 8006548:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800654c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006550:	3310      	adds	r3, #16
 8006552:	4563      	cmp	r3, ip
 8006554:	ed45 5a02 	vstr	s11, [r5, #-8]
 8006558:	f106 0610 	add.w	r6, r6, #16
 800655c:	ed45 7a01 	vstr	s15, [r5, #-4]
 8006560:	f102 0210 	add.w	r2, r2, #16
 8006564:	ed04 6a02 	vstr	s12, [r4, #-8]
 8006568:	ed04 7a01 	vstr	s14, [r4, #-4]
 800656c:	f105 0510 	add.w	r5, r5, #16
 8006570:	f104 0410 	add.w	r4, r4, #16
 8006574:	f47f af5c 	bne.w	8006430 <arm_cfft_radix8by2_f32+0x38>
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	b28c      	uxth	r4, r1
 800657c:	4621      	mov	r1, r4
 800657e:	2302      	movs	r3, #2
 8006580:	f000 fb3c 	bl	8006bfc <arm_radix8_butterfly_f32>
 8006584:	ecbd 8b08 	vpop	{d8-d11}
 8006588:	4621      	mov	r1, r4
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	4640      	mov	r0, r8
 800658e:	2302      	movs	r3, #2
 8006590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006594:	f000 bb32 	b.w	8006bfc <arm_radix8_butterfly_f32>

08006598 <arm_cfft_radix8by4_f32>:
 8006598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800659c:	ed2d 8b0a 	vpush	{d8-d12}
 80065a0:	b08d      	sub	sp, #52	@ 0x34
 80065a2:	460d      	mov	r5, r1
 80065a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80065a6:	8801      	ldrh	r1, [r0, #0]
 80065a8:	6842      	ldr	r2, [r0, #4]
 80065aa:	900a      	str	r0, [sp, #40]	@ 0x28
 80065ac:	0849      	lsrs	r1, r1, #1
 80065ae:	008b      	lsls	r3, r1, #2
 80065b0:	18ee      	adds	r6, r5, r3
 80065b2:	18f0      	adds	r0, r6, r3
 80065b4:	edd0 5a00 	vldr	s11, [r0]
 80065b8:	edd5 7a00 	vldr	s15, [r5]
 80065bc:	ed96 7a00 	vldr	s14, [r6]
 80065c0:	edd0 3a01 	vldr	s7, [r0, #4]
 80065c4:	ed96 4a01 	vldr	s8, [r6, #4]
 80065c8:	ed95 5a01 	vldr	s10, [r5, #4]
 80065cc:	9008      	str	r0, [sp, #32]
 80065ce:	ee37 6aa5 	vadd.f32	s12, s15, s11
 80065d2:	18c7      	adds	r7, r0, r3
 80065d4:	edd7 4a00 	vldr	s9, [r7]
 80065d8:	ed97 3a01 	vldr	s6, [r7, #4]
 80065dc:	9701      	str	r7, [sp, #4]
 80065de:	ee77 6a06 	vadd.f32	s13, s14, s12
 80065e2:	462c      	mov	r4, r5
 80065e4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80065e8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80065ec:	ee16 ca90 	vmov	ip, s13
 80065f0:	f844 cb08 	str.w	ip, [r4], #8
 80065f4:	ee75 6a23 	vadd.f32	s13, s10, s7
 80065f8:	edd6 5a01 	vldr	s11, [r6, #4]
 80065fc:	edd7 2a01 	vldr	s5, [r7, #4]
 8006600:	9404      	str	r4, [sp, #16]
 8006602:	ee35 5a63 	vsub.f32	s10, s10, s7
 8006606:	ee74 3a27 	vadd.f32	s7, s8, s15
 800660a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800660e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8006612:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8006616:	0849      	lsrs	r1, r1, #1
 8006618:	f102 0e08 	add.w	lr, r2, #8
 800661c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8006620:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8006624:	9109      	str	r1, [sp, #36]	@ 0x24
 8006626:	ee35 4a47 	vsub.f32	s8, s10, s14
 800662a:	f1a1 0902 	sub.w	r9, r1, #2
 800662e:	f8cd e00c 	str.w	lr, [sp, #12]
 8006632:	4631      	mov	r1, r6
 8006634:	ee13 ea90 	vmov	lr, s7
 8006638:	ee36 6a64 	vsub.f32	s12, s12, s9
 800663c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8006640:	4604      	mov	r4, r0
 8006642:	edc5 5a01 	vstr	s11, [r5, #4]
 8006646:	ee37 7a05 	vadd.f32	s14, s14, s10
 800664a:	f841 eb08 	str.w	lr, [r1], #8
 800664e:	ee34 5a24 	vadd.f32	s10, s8, s9
 8006652:	ee16 ea10 	vmov	lr, s12
 8006656:	ed86 5a01 	vstr	s10, [r6, #4]
 800665a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800665e:	f844 eb08 	str.w	lr, [r4], #8
 8006662:	ee77 7a83 	vadd.f32	s15, s15, s6
 8006666:	edc0 6a01 	vstr	s13, [r0, #4]
 800666a:	9405      	str	r4, [sp, #20]
 800666c:	4604      	mov	r4, r0
 800666e:	ee17 0a90 	vmov	r0, s15
 8006672:	9106      	str	r1, [sp, #24]
 8006674:	ee37 7a64 	vsub.f32	s14, s14, s9
 8006678:	f102 0110 	add.w	r1, r2, #16
 800667c:	46bc      	mov	ip, r7
 800667e:	9100      	str	r1, [sp, #0]
 8006680:	f847 0b08 	str.w	r0, [r7], #8
 8006684:	f102 0118 	add.w	r1, r2, #24
 8006688:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800668c:	9102      	str	r1, [sp, #8]
 800668e:	ed8c 7a01 	vstr	s14, [ip, #4]
 8006692:	9007      	str	r0, [sp, #28]
 8006694:	f000 8134 	beq.w	8006900 <arm_cfft_radix8by4_f32+0x368>
 8006698:	f102 0920 	add.w	r9, r2, #32
 800669c:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 80066a0:	9a01      	ldr	r2, [sp, #4]
 80066a2:	f8dd a000 	ldr.w	sl, [sp]
 80066a6:	3b0c      	subs	r3, #12
 80066a8:	4683      	mov	fp, r0
 80066aa:	4463      	add	r3, ip
 80066ac:	f105 0e10 	add.w	lr, r5, #16
 80066b0:	f1a4 010c 	sub.w	r1, r4, #12
 80066b4:	f104 0510 	add.w	r5, r4, #16
 80066b8:	f1a6 0c0c 	sub.w	ip, r6, #12
 80066bc:	f1a2 040c 	sub.w	r4, r2, #12
 80066c0:	f106 0010 	add.w	r0, r6, #16
 80066c4:	3210      	adds	r2, #16
 80066c6:	ed1e 5a02 	vldr	s10, [lr, #-8]
 80066ca:	ed55 5a02 	vldr	s11, [r5, #-8]
 80066ce:	ed50 7a02 	vldr	s15, [r0, #-8]
 80066d2:	ed52 1a02 	vldr	s3, [r2, #-8]
 80066d6:	ed55 6a01 	vldr	s13, [r5, #-4]
 80066da:	ed1e 0a01 	vldr	s0, [lr, #-4]
 80066de:	ed12 1a01 	vldr	s2, [r2, #-4]
 80066e2:	ed10 8a01 	vldr	s16, [r0, #-4]
 80066e6:	ee35 4a25 	vadd.f32	s8, s10, s11
 80066ea:	ee30 6a26 	vadd.f32	s12, s0, s13
 80066ee:	ee37 7a84 	vadd.f32	s14, s15, s8
 80066f2:	ee30 0a66 	vsub.f32	s0, s0, s13
 80066f6:	ee37 7a21 	vadd.f32	s14, s14, s3
 80066fa:	ee75 5a65 	vsub.f32	s11, s10, s11
 80066fe:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8006702:	ed10 7a01 	vldr	s14, [r0, #-4]
 8006706:	ed52 6a01 	vldr	s13, [r2, #-4]
 800670a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800670e:	ee78 aa25 	vadd.f32	s21, s16, s11
 8006712:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006716:	ee70 3a67 	vsub.f32	s7, s0, s15
 800671a:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800671e:	ed94 7a02 	vldr	s14, [r4, #8]
 8006722:	ed9c 2a02 	vldr	s4, [ip, #8]
 8006726:	ed91 ba02 	vldr	s22, [r1, #8]
 800672a:	edd3 9a02 	vldr	s19, [r3, #8]
 800672e:	edd4 2a01 	vldr	s5, [r4, #4]
 8006732:	ed9c 9a01 	vldr	s18, [ip, #4]
 8006736:	ed93 5a01 	vldr	s10, [r3, #4]
 800673a:	edd1 0a01 	vldr	s1, [r1, #4]
 800673e:	ee72 6a07 	vadd.f32	s13, s4, s14
 8006742:	ee32 2a47 	vsub.f32	s4, s4, s14
 8006746:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800674a:	ee79 4a22 	vadd.f32	s9, s18, s5
 800674e:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8006752:	ee79 2a62 	vsub.f32	s5, s18, s5
 8006756:	ed8c 7a02 	vstr	s14, [ip, #8]
 800675a:	ed91 7a01 	vldr	s14, [r1, #4]
 800675e:	edd3 8a01 	vldr	s17, [r3, #4]
 8006762:	ee34 7a87 	vadd.f32	s14, s9, s14
 8006766:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800676a:	ee37 7a28 	vadd.f32	s14, s14, s17
 800676e:	ee32 9a60 	vsub.f32	s18, s4, s1
 8006772:	ed8c 7a01 	vstr	s14, [ip, #4]
 8006776:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800677a:	ed1a aa02 	vldr	s20, [sl, #-8]
 800677e:	ee73 8a22 	vadd.f32	s17, s6, s5
 8006782:	ee39 9a05 	vadd.f32	s18, s18, s10
 8006786:	ee7a aac1 	vsub.f32	s21, s21, s2
 800678a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800678e:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8006792:	ee69 ba07 	vmul.f32	s23, s18, s14
 8006796:	ee6a aa87 	vmul.f32	s21, s21, s14
 800679a:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800679e:	ee63 ca87 	vmul.f32	s25, s7, s14
 80067a2:	ee63 3a8a 	vmul.f32	s7, s7, s20
 80067a6:	ee28 aa8a 	vmul.f32	s20, s17, s20
 80067aa:	ee68 8a87 	vmul.f32	s17, s17, s14
 80067ae:	ee73 3aea 	vsub.f32	s7, s7, s21
 80067b2:	ee78 8a89 	vadd.f32	s17, s17, s18
 80067b6:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 80067ba:	ee3b aaca 	vsub.f32	s20, s23, s20
 80067be:	ee34 4a67 	vsub.f32	s8, s8, s15
 80067c2:	ee76 6acb 	vsub.f32	s13, s13, s22
 80067c6:	ee36 6a48 	vsub.f32	s12, s12, s16
 80067ca:	ee74 4ae0 	vsub.f32	s9, s9, s1
 80067ce:	ed00 7a02 	vstr	s14, [r0, #-8]
 80067d2:	ed40 3a01 	vstr	s7, [r0, #-4]
 80067d6:	edc1 8a01 	vstr	s17, [r1, #4]
 80067da:	ed81 aa02 	vstr	s20, [r1, #8]
 80067de:	ed59 3a04 	vldr	s7, [r9, #-16]
 80067e2:	ee36 7ae9 	vsub.f32	s14, s13, s19
 80067e6:	ee74 4ac5 	vsub.f32	s9, s9, s10
 80067ea:	ed59 6a03 	vldr	s13, [r9, #-12]
 80067ee:	ee34 4a61 	vsub.f32	s8, s8, s3
 80067f2:	ee36 6a41 	vsub.f32	s12, s12, s2
 80067f6:	ee67 8a63 	vnmul.f32	s17, s14, s7
 80067fa:	ee66 9a26 	vmul.f32	s19, s12, s13
 80067fe:	ee24 9a23 	vmul.f32	s18, s8, s7
 8006802:	ee26 6a23 	vmul.f32	s12, s12, s7
 8006806:	ee24 4a26 	vmul.f32	s8, s8, s13
 800680a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800680e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8006812:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8006816:	ee36 6a44 	vsub.f32	s12, s12, s8
 800681a:	ee37 7a64 	vsub.f32	s14, s14, s9
 800681e:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8006822:	ee79 3a29 	vadd.f32	s7, s18, s19
 8006826:	ee75 6a60 	vsub.f32	s13, s10, s1
 800682a:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800682e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006832:	ed45 3a02 	vstr	s7, [r5, #-8]
 8006836:	ed05 6a01 	vstr	s12, [r5, #-4]
 800683a:	ed84 7a01 	vstr	s14, [r4, #4]
 800683e:	ed84 4a02 	vstr	s8, [r4, #8]
 8006842:	ee35 6a81 	vadd.f32	s12, s11, s2
 8006846:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800684a:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 800684e:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 8006852:	ee33 3a62 	vsub.f32	s6, s6, s5
 8006856:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800685a:	ee67 2a26 	vmul.f32	s5, s14, s13
 800685e:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8006862:	ee26 5a25 	vmul.f32	s10, s12, s11
 8006866:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800686a:	ee26 6a26 	vmul.f32	s12, s12, s13
 800686e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006872:	ee63 6a26 	vmul.f32	s13, s6, s13
 8006876:	ee23 3a25 	vmul.f32	s6, s6, s11
 800687a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800687e:	ee75 5a24 	vadd.f32	s11, s10, s9
 8006882:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8006886:	ee36 7a87 	vadd.f32	s14, s13, s14
 800688a:	f1bb 0b01 	subs.w	fp, fp, #1
 800688e:	ed42 5a02 	vstr	s11, [r2, #-8]
 8006892:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006896:	f10e 0e08 	add.w	lr, lr, #8
 800689a:	ed83 3a02 	vstr	s6, [r3, #8]
 800689e:	ed83 7a01 	vstr	s14, [r3, #4]
 80068a2:	f1ac 0c08 	sub.w	ip, ip, #8
 80068a6:	f10a 0a08 	add.w	sl, sl, #8
 80068aa:	f100 0008 	add.w	r0, r0, #8
 80068ae:	f1a1 0108 	sub.w	r1, r1, #8
 80068b2:	f109 0910 	add.w	r9, r9, #16
 80068b6:	f105 0508 	add.w	r5, r5, #8
 80068ba:	f1a4 0408 	sub.w	r4, r4, #8
 80068be:	f108 0818 	add.w	r8, r8, #24
 80068c2:	f102 0208 	add.w	r2, r2, #8
 80068c6:	f1a3 0308 	sub.w	r3, r3, #8
 80068ca:	f47f aefc 	bne.w	80066c6 <arm_cfft_radix8by4_f32+0x12e>
 80068ce:	9907      	ldr	r1, [sp, #28]
 80068d0:	9800      	ldr	r0, [sp, #0]
 80068d2:	00cb      	lsls	r3, r1, #3
 80068d4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80068d8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80068dc:	9100      	str	r1, [sp, #0]
 80068de:	9904      	ldr	r1, [sp, #16]
 80068e0:	4419      	add	r1, r3
 80068e2:	9104      	str	r1, [sp, #16]
 80068e4:	9903      	ldr	r1, [sp, #12]
 80068e6:	4419      	add	r1, r3
 80068e8:	9103      	str	r1, [sp, #12]
 80068ea:	9906      	ldr	r1, [sp, #24]
 80068ec:	4419      	add	r1, r3
 80068ee:	9106      	str	r1, [sp, #24]
 80068f0:	9905      	ldr	r1, [sp, #20]
 80068f2:	441f      	add	r7, r3
 80068f4:	4419      	add	r1, r3
 80068f6:	9b02      	ldr	r3, [sp, #8]
 80068f8:	9105      	str	r1, [sp, #20]
 80068fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068fe:	9302      	str	r3, [sp, #8]
 8006900:	9904      	ldr	r1, [sp, #16]
 8006902:	9805      	ldr	r0, [sp, #20]
 8006904:	ed91 4a00 	vldr	s8, [r1]
 8006908:	edd0 6a00 	vldr	s13, [r0]
 800690c:	9b06      	ldr	r3, [sp, #24]
 800690e:	ed97 3a00 	vldr	s6, [r7]
 8006912:	edd3 7a00 	vldr	s15, [r3]
 8006916:	edd0 4a01 	vldr	s9, [r0, #4]
 800691a:	edd1 3a01 	vldr	s7, [r1, #4]
 800691e:	ed97 2a01 	vldr	s4, [r7, #4]
 8006922:	ed93 7a01 	vldr	s14, [r3, #4]
 8006926:	9a03      	ldr	r2, [sp, #12]
 8006928:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 800692c:	ee34 6a26 	vadd.f32	s12, s8, s13
 8006930:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8006934:	ee37 5a86 	vadd.f32	s10, s15, s12
 8006938:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800693c:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006940:	ee74 6a66 	vsub.f32	s13, s8, s13
 8006944:	ed81 5a00 	vstr	s10, [r1]
 8006948:	ed93 5a01 	vldr	s10, [r3, #4]
 800694c:	edd7 4a01 	vldr	s9, [r7, #4]
 8006950:	ee35 5a85 	vadd.f32	s10, s11, s10
 8006954:	ee37 4a26 	vadd.f32	s8, s14, s13
 8006958:	ee35 5a24 	vadd.f32	s10, s10, s9
 800695c:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8006960:	ed81 5a01 	vstr	s10, [r1, #4]
 8006964:	edd2 1a00 	vldr	s3, [r2]
 8006968:	edd2 2a01 	vldr	s5, [r2, #4]
 800696c:	ee34 5a83 	vadd.f32	s10, s9, s6
 8006970:	ee34 4a42 	vsub.f32	s8, s8, s4
 8006974:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006978:	ee64 4a21 	vmul.f32	s9, s8, s3
 800697c:	ee24 4a22 	vmul.f32	s8, s8, s5
 8006980:	ee65 2a22 	vmul.f32	s5, s10, s5
 8006984:	ee25 5a21 	vmul.f32	s10, s10, s3
 8006988:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800698c:	ee35 5a44 	vsub.f32	s10, s10, s8
 8006990:	edc3 2a00 	vstr	s5, [r3]
 8006994:	ed83 5a01 	vstr	s10, [r3, #4]
 8006998:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800699c:	9b00      	ldr	r3, [sp, #0]
 800699e:	ee36 6a43 	vsub.f32	s12, s12, s6
 80069a2:	ed93 4a01 	vldr	s8, [r3, #4]
 80069a6:	ed93 5a00 	vldr	s10, [r3]
 80069aa:	9b02      	ldr	r3, [sp, #8]
 80069ac:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80069b0:	ee66 4a05 	vmul.f32	s9, s12, s10
 80069b4:	ee25 5a85 	vmul.f32	s10, s11, s10
 80069b8:	ee26 6a04 	vmul.f32	s12, s12, s8
 80069bc:	ee65 5a84 	vmul.f32	s11, s11, s8
 80069c0:	ee35 6a46 	vsub.f32	s12, s10, s12
 80069c4:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80069c8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80069cc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80069d0:	ed80 6a01 	vstr	s12, [r0, #4]
 80069d4:	edc0 5a00 	vstr	s11, [r0]
 80069d8:	edd3 5a01 	vldr	s11, [r3, #4]
 80069dc:	edd3 6a00 	vldr	s13, [r3]
 80069e0:	ee37 7a02 	vadd.f32	s14, s14, s4
 80069e4:	ee77 7ac3 	vsub.f32	s15, s15, s6
 80069e8:	ee27 6a26 	vmul.f32	s12, s14, s13
 80069ec:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80069f0:	ee27 7a25 	vmul.f32	s14, s14, s11
 80069f4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80069f8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80069fc:	ee76 7a27 	vadd.f32	s15, s12, s15
 8006a00:	ed87 7a01 	vstr	s14, [r7, #4]
 8006a04:	edc7 7a00 	vstr	s15, [r7]
 8006a08:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 8006a0c:	4621      	mov	r1, r4
 8006a0e:	686a      	ldr	r2, [r5, #4]
 8006a10:	2304      	movs	r3, #4
 8006a12:	f000 f8f3 	bl	8006bfc <arm_radix8_butterfly_f32>
 8006a16:	4630      	mov	r0, r6
 8006a18:	4621      	mov	r1, r4
 8006a1a:	686a      	ldr	r2, [r5, #4]
 8006a1c:	2304      	movs	r3, #4
 8006a1e:	f000 f8ed 	bl	8006bfc <arm_radix8_butterfly_f32>
 8006a22:	9808      	ldr	r0, [sp, #32]
 8006a24:	686a      	ldr	r2, [r5, #4]
 8006a26:	4621      	mov	r1, r4
 8006a28:	2304      	movs	r3, #4
 8006a2a:	f000 f8e7 	bl	8006bfc <arm_radix8_butterfly_f32>
 8006a2e:	686a      	ldr	r2, [r5, #4]
 8006a30:	9801      	ldr	r0, [sp, #4]
 8006a32:	4621      	mov	r1, r4
 8006a34:	2304      	movs	r3, #4
 8006a36:	b00d      	add	sp, #52	@ 0x34
 8006a38:	ecbd 8b0a 	vpop	{d8-d12}
 8006a3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a40:	f000 b8dc 	b.w	8006bfc <arm_radix8_butterfly_f32>

08006a44 <arm_cfft_f32>:
 8006a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a48:	2a01      	cmp	r2, #1
 8006a4a:	4606      	mov	r6, r0
 8006a4c:	4617      	mov	r7, r2
 8006a4e:	460c      	mov	r4, r1
 8006a50:	4698      	mov	r8, r3
 8006a52:	8805      	ldrh	r5, [r0, #0]
 8006a54:	d056      	beq.n	8006b04 <arm_cfft_f32+0xc0>
 8006a56:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8006a5a:	d063      	beq.n	8006b24 <arm_cfft_f32+0xe0>
 8006a5c:	d916      	bls.n	8006a8c <arm_cfft_f32+0x48>
 8006a5e:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8006a62:	d01a      	beq.n	8006a9a <arm_cfft_f32+0x56>
 8006a64:	d947      	bls.n	8006af6 <arm_cfft_f32+0xb2>
 8006a66:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8006a6a:	d05b      	beq.n	8006b24 <arm_cfft_f32+0xe0>
 8006a6c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8006a70:	d105      	bne.n	8006a7e <arm_cfft_f32+0x3a>
 8006a72:	2301      	movs	r3, #1
 8006a74:	6872      	ldr	r2, [r6, #4]
 8006a76:	4629      	mov	r1, r5
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f000 f8bf 	bl	8006bfc <arm_radix8_butterfly_f32>
 8006a7e:	f1b8 0f00 	cmp.w	r8, #0
 8006a82:	d111      	bne.n	8006aa8 <arm_cfft_f32+0x64>
 8006a84:	2f01      	cmp	r7, #1
 8006a86:	d016      	beq.n	8006ab6 <arm_cfft_f32+0x72>
 8006a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a8c:	2d20      	cmp	r5, #32
 8006a8e:	d049      	beq.n	8006b24 <arm_cfft_f32+0xe0>
 8006a90:	d935      	bls.n	8006afe <arm_cfft_f32+0xba>
 8006a92:	2d40      	cmp	r5, #64	@ 0x40
 8006a94:	d0ed      	beq.n	8006a72 <arm_cfft_f32+0x2e>
 8006a96:	2d80      	cmp	r5, #128	@ 0x80
 8006a98:	d1f1      	bne.n	8006a7e <arm_cfft_f32+0x3a>
 8006a9a:	4621      	mov	r1, r4
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	f7ff fcab 	bl	80063f8 <arm_cfft_radix8by2_f32>
 8006aa2:	f1b8 0f00 	cmp.w	r8, #0
 8006aa6:	d0ed      	beq.n	8006a84 <arm_cfft_f32+0x40>
 8006aa8:	68b2      	ldr	r2, [r6, #8]
 8006aaa:	89b1      	ldrh	r1, [r6, #12]
 8006aac:	4620      	mov	r0, r4
 8006aae:	f000 f841 	bl	8006b34 <arm_bitreversal_32>
 8006ab2:	2f01      	cmp	r7, #1
 8006ab4:	d1e8      	bne.n	8006a88 <arm_cfft_f32+0x44>
 8006ab6:	ee07 5a90 	vmov	s15, r5
 8006aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006abe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ac2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006ac6:	2d00      	cmp	r5, #0
 8006ac8:	d0de      	beq.n	8006a88 <arm_cfft_f32+0x44>
 8006aca:	f104 0108 	add.w	r1, r4, #8
 8006ace:	2300      	movs	r3, #0
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	429d      	cmp	r5, r3
 8006ad4:	f101 0108 	add.w	r1, r1, #8
 8006ad8:	ed11 7a04 	vldr	s14, [r1, #-16]
 8006adc:	ed51 7a03 	vldr	s15, [r1, #-12]
 8006ae0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006ae4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006ae8:	ed01 7a04 	vstr	s14, [r1, #-16]
 8006aec:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006af0:	d1ee      	bne.n	8006ad0 <arm_cfft_f32+0x8c>
 8006af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006af6:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8006afa:	d0ba      	beq.n	8006a72 <arm_cfft_f32+0x2e>
 8006afc:	e7bf      	b.n	8006a7e <arm_cfft_f32+0x3a>
 8006afe:	2d10      	cmp	r5, #16
 8006b00:	d0cb      	beq.n	8006a9a <arm_cfft_f32+0x56>
 8006b02:	e7bc      	b.n	8006a7e <arm_cfft_f32+0x3a>
 8006b04:	b19d      	cbz	r5, 8006b2e <arm_cfft_f32+0xea>
 8006b06:	f101 030c 	add.w	r3, r1, #12
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	ed53 7a02 	vldr	s15, [r3, #-8]
 8006b10:	3201      	adds	r2, #1
 8006b12:	eef1 7a67 	vneg.f32	s15, s15
 8006b16:	4295      	cmp	r5, r2
 8006b18:	ed43 7a02 	vstr	s15, [r3, #-8]
 8006b1c:	f103 0308 	add.w	r3, r3, #8
 8006b20:	d1f4      	bne.n	8006b0c <arm_cfft_f32+0xc8>
 8006b22:	e798      	b.n	8006a56 <arm_cfft_f32+0x12>
 8006b24:	4621      	mov	r1, r4
 8006b26:	4630      	mov	r0, r6
 8006b28:	f7ff fd36 	bl	8006598 <arm_cfft_radix8by4_f32>
 8006b2c:	e7a7      	b.n	8006a7e <arm_cfft_f32+0x3a>
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0aa      	beq.n	8006a88 <arm_cfft_f32+0x44>
 8006b32:	e7b9      	b.n	8006aa8 <arm_cfft_f32+0x64>

08006b34 <arm_bitreversal_32>:
 8006b34:	b1e9      	cbz	r1, 8006b72 <arm_bitreversal_32+0x3e>
 8006b36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b38:	2500      	movs	r5, #0
 8006b3a:	f102 0e02 	add.w	lr, r2, #2
 8006b3e:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8006b42:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8006b46:	08a4      	lsrs	r4, r4, #2
 8006b48:	089b      	lsrs	r3, r3, #2
 8006b4a:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8006b4e:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8006b52:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8006b56:	00a6      	lsls	r6, r4, #2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8006b5e:	3304      	adds	r3, #4
 8006b60:	1d34      	adds	r4, r6, #4
 8006b62:	3502      	adds	r5, #2
 8006b64:	58c6      	ldr	r6, [r0, r3]
 8006b66:	5907      	ldr	r7, [r0, r4]
 8006b68:	50c7      	str	r7, [r0, r3]
 8006b6a:	428d      	cmp	r5, r1
 8006b6c:	5106      	str	r6, [r0, r4]
 8006b6e:	d3e6      	bcc.n	8006b3e <arm_bitreversal_32+0xa>
 8006b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b72:	4770      	bx	lr

08006b74 <arm_offset_f32>:
 8006b74:	b470      	push	{r4, r5, r6}
 8006b76:	0896      	lsrs	r6, r2, #2
 8006b78:	d025      	beq.n	8006bc6 <arm_offset_f32+0x52>
 8006b7a:	f100 0410 	add.w	r4, r0, #16
 8006b7e:	f101 0310 	add.w	r3, r1, #16
 8006b82:	4635      	mov	r5, r6
 8006b84:	ed54 7a04 	vldr	s15, [r4, #-16]
 8006b88:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006b8c:	3d01      	subs	r5, #1
 8006b8e:	ed43 7a04 	vstr	s15, [r3, #-16]
 8006b92:	ed54 7a03 	vldr	s15, [r4, #-12]
 8006b96:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006b9a:	f104 0410 	add.w	r4, r4, #16
 8006b9e:	ed43 7a03 	vstr	s15, [r3, #-12]
 8006ba2:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 8006ba6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006baa:	f103 0310 	add.w	r3, r3, #16
 8006bae:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 8006bb2:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 8006bb6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006bba:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8006bbe:	d1e1      	bne.n	8006b84 <arm_offset_f32+0x10>
 8006bc0:	0136      	lsls	r6, r6, #4
 8006bc2:	4430      	add	r0, r6
 8006bc4:	4431      	add	r1, r6
 8006bc6:	f012 0203 	ands.w	r2, r2, #3
 8006bca:	d015      	beq.n	8006bf8 <arm_offset_f32+0x84>
 8006bcc:	edd0 7a00 	vldr	s15, [r0]
 8006bd0:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006bd4:	3a01      	subs	r2, #1
 8006bd6:	edc1 7a00 	vstr	s15, [r1]
 8006bda:	d00d      	beq.n	8006bf8 <arm_offset_f32+0x84>
 8006bdc:	edd0 7a01 	vldr	s15, [r0, #4]
 8006be0:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006be4:	2a01      	cmp	r2, #1
 8006be6:	edc1 7a01 	vstr	s15, [r1, #4]
 8006bea:	d005      	beq.n	8006bf8 <arm_offset_f32+0x84>
 8006bec:	edd0 7a02 	vldr	s15, [r0, #8]
 8006bf0:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006bf4:	ed81 0a02 	vstr	s0, [r1, #8]
 8006bf8:	bc70      	pop	{r4, r5, r6}
 8006bfa:	4770      	bx	lr

08006bfc <arm_radix8_butterfly_f32>:
 8006bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c00:	ed2d 8b10 	vpush	{d8-d15}
 8006c04:	b095      	sub	sp, #84	@ 0x54
 8006c06:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	3304      	adds	r3, #4
 8006c0e:	ed9f bab9 	vldr	s22, [pc, #740]	@ 8006ef4 <arm_radix8_butterfly_f32+0x2f8>
 8006c12:	9012      	str	r0, [sp, #72]	@ 0x48
 8006c14:	468b      	mov	fp, r1
 8006c16:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c18:	4689      	mov	r9, r1
 8006c1a:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8006c1e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006c20:	960f      	str	r6, [sp, #60]	@ 0x3c
 8006c22:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8006c26:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8006c2a:	eb03 0508 	add.w	r5, r3, r8
 8006c2e:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8006c32:	eb05 040e 	add.w	r4, r5, lr
 8006c36:	0137      	lsls	r7, r6, #4
 8006c38:	eba6 030a 	sub.w	r3, r6, sl
 8006c3c:	eb04 000e 	add.w	r0, r4, lr
 8006c40:	44b2      	add	sl, r6
 8006c42:	1d3a      	adds	r2, r7, #4
 8006c44:	9702      	str	r7, [sp, #8]
 8006c46:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006c4a:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8006c4e:	ebae 0c06 	sub.w	ip, lr, r6
 8006c52:	9703      	str	r7, [sp, #12]
 8006c54:	eb03 0708 	add.w	r7, r3, r8
 8006c58:	9701      	str	r7, [sp, #4]
 8006c5a:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8006c5e:	9706      	str	r7, [sp, #24]
 8006c60:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8006c62:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8006c66:	f10e 0104 	add.w	r1, lr, #4
 8006c6a:	4439      	add	r1, r7
 8006c6c:	443a      	add	r2, r7
 8006c6e:	0137      	lsls	r7, r6, #4
 8006c70:	00f6      	lsls	r6, r6, #3
 8006c72:	9704      	str	r7, [sp, #16]
 8006c74:	9605      	str	r6, [sp, #20]
 8006c76:	9f01      	ldr	r7, [sp, #4]
 8006c78:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006c7a:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8006c7e:	f04f 0c00 	mov.w	ip, #0
 8006c82:	edd4 6a00 	vldr	s13, [r4]
 8006c86:	edd7 1a00 	vldr	s3, [r7]
 8006c8a:	ed16 aa01 	vldr	s20, [r6, #-4]
 8006c8e:	edd5 5a00 	vldr	s11, [r5]
 8006c92:	ed52 9a01 	vldr	s19, [r2, #-4]
 8006c96:	ed90 6a00 	vldr	s12, [r0]
 8006c9a:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006c9e:	ed93 3a00 	vldr	s6, [r3]
 8006ca2:	ee39 0a86 	vadd.f32	s0, s19, s12
 8006ca6:	ee33 2a21 	vadd.f32	s4, s6, s3
 8006caa:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8006cae:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8006cb2:	ee35 7a02 	vadd.f32	s14, s10, s4
 8006cb6:	ee34 4a80 	vadd.f32	s8, s9, s0
 8006cba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006cbe:	ee74 6a07 	vadd.f32	s13, s8, s14
 8006cc2:	ee34 4a47 	vsub.f32	s8, s8, s14
 8006cc6:	ed46 6a01 	vstr	s13, [r6, #-4]
 8006cca:	ed85 4a00 	vstr	s8, [r5]
 8006cce:	edd1 6a00 	vldr	s13, [r1]
 8006cd2:	ed94 9a01 	vldr	s18, [r4, #4]
 8006cd6:	edd3 2a01 	vldr	s5, [r3, #4]
 8006cda:	edd7 8a01 	vldr	s17, [r7, #4]
 8006cde:	edd6 0a00 	vldr	s1, [r6]
 8006ce2:	edd5 3a01 	vldr	s7, [r5, #4]
 8006ce6:	ed90 8a01 	vldr	s16, [r0, #4]
 8006cea:	ed92 7a00 	vldr	s14, [r2]
 8006cee:	ee33 3a61 	vsub.f32	s6, s6, s3
 8006cf2:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8006cf6:	ee72 aae8 	vsub.f32	s21, s5, s17
 8006cfa:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8006cfe:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8006d02:	ee77 7a83 	vadd.f32	s15, s15, s6
 8006d06:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8006d0a:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8006d0e:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8006d12:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8006d16:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8006d1a:	ee77 0a08 	vadd.f32	s1, s14, s16
 8006d1e:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8006d22:	ee37 7a48 	vsub.f32	s14, s14, s16
 8006d26:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8006d2a:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8006d2e:	ee76 6a89 	vadd.f32	s13, s13, s18
 8006d32:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8006d36:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006d3a:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8006d3e:	ee35 5a42 	vsub.f32	s10, s10, s4
 8006d42:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8006d46:	ee33 2a20 	vadd.f32	s4, s6, s1
 8006d4a:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8006d4e:	ee33 3a60 	vsub.f32	s6, s6, s1
 8006d52:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8006d56:	ee77 0a01 	vadd.f32	s1, s14, s2
 8006d5a:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8006d5e:	ee37 7a41 	vsub.f32	s14, s14, s2
 8006d62:	ee73 1a84 	vadd.f32	s3, s7, s8
 8006d66:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8006d6a:	ee76 3a27 	vadd.f32	s7, s12, s15
 8006d6e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006d72:	ee32 8a00 	vadd.f32	s16, s4, s0
 8006d76:	ee33 1a45 	vsub.f32	s2, s6, s10
 8006d7a:	ee32 2a40 	vsub.f32	s4, s4, s0
 8006d7e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006d82:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8006d86:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8006d8a:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8006d8e:	ee34 6a67 	vsub.f32	s12, s8, s15
 8006d92:	ee75 4a87 	vadd.f32	s9, s11, s14
 8006d96:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8006d9a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8006d9e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8006da2:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8006da6:	44dc      	add	ip, fp
 8006da8:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8006dac:	45e1      	cmp	r9, ip
 8006dae:	ed86 8a00 	vstr	s16, [r6]
 8006db2:	ed85 2a01 	vstr	s4, [r5, #4]
 8006db6:	4456      	add	r6, sl
 8006db8:	ed02 0a01 	vstr	s0, [r2, #-4]
 8006dbc:	4455      	add	r5, sl
 8006dbe:	edc0 6a00 	vstr	s13, [r0]
 8006dc2:	ed82 1a00 	vstr	s2, [r2]
 8006dc6:	ed80 5a01 	vstr	s10, [r0, #4]
 8006dca:	4452      	add	r2, sl
 8006dcc:	ed01 3a01 	vstr	s6, [r1, #-4]
 8006dd0:	4450      	add	r0, sl
 8006dd2:	edc7 2a00 	vstr	s5, [r7]
 8006dd6:	edc4 4a00 	vstr	s9, [r4]
 8006dda:	ed83 7a00 	vstr	s14, [r3]
 8006dde:	edc1 5a00 	vstr	s11, [r1]
 8006de2:	edc7 3a01 	vstr	s7, [r7, #4]
 8006de6:	4451      	add	r1, sl
 8006de8:	ed84 6a01 	vstr	s12, [r4, #4]
 8006dec:	4457      	add	r7, sl
 8006dee:	edc3 7a01 	vstr	s15, [r3, #4]
 8006df2:	4454      	add	r4, sl
 8006df4:	4453      	add	r3, sl
 8006df6:	f63f af44 	bhi.w	8006c82 <arm_radix8_butterfly_f32+0x86>
 8006dfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006dfc:	2b07      	cmp	r3, #7
 8006dfe:	f240 81b7 	bls.w	8007170 <arm_radix8_butterfly_f32+0x574>
 8006e02:	9b06      	ldr	r3, [sp, #24]
 8006e04:	9903      	ldr	r1, [sp, #12]
 8006e06:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006e08:	9e05      	ldr	r6, [sp, #20]
 8006e0a:	9a04      	ldr	r2, [sp, #16]
 8006e0c:	f103 0c08 	add.w	ip, r3, #8
 8006e10:	9b02      	ldr	r3, [sp, #8]
 8006e12:	3108      	adds	r1, #8
 8006e14:	f108 0808 	add.w	r8, r8, #8
 8006e18:	1841      	adds	r1, r0, r1
 8006e1a:	3608      	adds	r6, #8
 8006e1c:	330c      	adds	r3, #12
 8006e1e:	4604      	mov	r4, r0
 8006e20:	4444      	add	r4, r8
 8006e22:	18c3      	adds	r3, r0, r3
 8006e24:	9109      	str	r1, [sp, #36]	@ 0x24
 8006e26:	1981      	adds	r1, r0, r6
 8006e28:	f10e 0e08 	add.w	lr, lr, #8
 8006e2c:	3208      	adds	r2, #8
 8006e2e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006e30:	9107      	str	r1, [sp, #28]
 8006e32:	4604      	mov	r4, r0
 8006e34:	4601      	mov	r1, r0
 8006e36:	9304      	str	r3, [sp, #16]
 8006e38:	f100 030c 	add.w	r3, r0, #12
 8006e3c:	4474      	add	r4, lr
 8006e3e:	f04f 0801 	mov.w	r8, #1
 8006e42:	1882      	adds	r2, r0, r2
 8006e44:	4461      	add	r1, ip
 8006e46:	9305      	str	r3, [sp, #20]
 8006e48:	464b      	mov	r3, r9
 8006e4a:	940a      	str	r4, [sp, #40]	@ 0x28
 8006e4c:	46c1      	mov	r9, r8
 8006e4e:	9208      	str	r2, [sp, #32]
 8006e50:	46d8      	mov	r8, fp
 8006e52:	9106      	str	r1, [sp, #24]
 8006e54:	f04f 0e00 	mov.w	lr, #0
 8006e58:	469b      	mov	fp, r3
 8006e5a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006e5c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006e5e:	449e      	add	lr, r3
 8006e60:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8006e64:	441a      	add	r2, r3
 8006e66:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e68:	441a      	add	r2, r3
 8006e6a:	18d4      	adds	r4, r2, r3
 8006e6c:	18e5      	adds	r5, r4, r3
 8006e6e:	18ee      	adds	r6, r5, r3
 8006e70:	18f7      	adds	r7, r6, r3
 8006e72:	eb07 0c03 	add.w	ip, r7, r3
 8006e76:	920d      	str	r2, [sp, #52]	@ 0x34
 8006e78:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8006e7c:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8006e80:	910c      	str	r1, [sp, #48]	@ 0x30
 8006e82:	4419      	add	r1, r3
 8006e84:	9103      	str	r1, [sp, #12]
 8006e86:	4419      	add	r1, r3
 8006e88:	18ca      	adds	r2, r1, r3
 8006e8a:	9202      	str	r2, [sp, #8]
 8006e8c:	441a      	add	r2, r3
 8006e8e:	18d0      	adds	r0, r2, r3
 8006e90:	ed92 ea01 	vldr	s28, [r2, #4]
 8006e94:	9a02      	ldr	r2, [sp, #8]
 8006e96:	edd4 7a00 	vldr	s15, [r4]
 8006e9a:	edd2 da01 	vldr	s27, [r2, #4]
 8006e9e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006ea0:	ed91 da01 	vldr	s26, [r1, #4]
 8006ea4:	ed92 ca01 	vldr	s24, [r2, #4]
 8006ea8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006eaa:	9903      	ldr	r1, [sp, #12]
 8006eac:	edcd 7a03 	vstr	s15, [sp, #12]
 8006eb0:	edd2 7a00 	vldr	s15, [r2]
 8006eb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006eb6:	edcd 7a02 	vstr	s15, [sp, #8]
 8006eba:	edd2 7a00 	vldr	s15, [r2]
 8006ebe:	edd0 ea01 	vldr	s29, [r0, #4]
 8006ec2:	edd1 ca01 	vldr	s25, [r1, #4]
 8006ec6:	eddc ba00 	vldr	s23, [ip]
 8006eca:	edd7 aa00 	vldr	s21, [r7]
 8006ece:	ed96 aa00 	vldr	s20, [r6]
 8006ed2:	edd5 9a00 	vldr	s19, [r5]
 8006ed6:	edcd 7a01 	vstr	s15, [sp, #4]
 8006eda:	4403      	add	r3, r0
 8006edc:	ed93 fa01 	vldr	s30, [r3, #4]
 8006ee0:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8006ee4:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8006ee8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006eec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8006ef0:	46cc      	mov	ip, r9
 8006ef2:	e001      	b.n	8006ef8 <arm_radix8_butterfly_f32+0x2fc>
 8006ef4:	3f3504f3 	.word	0x3f3504f3
 8006ef8:	ed91 6a00 	vldr	s12, [r1]
 8006efc:	ed93 5a00 	vldr	s10, [r3]
 8006f00:	edd0 fa00 	vldr	s31, [r0]
 8006f04:	edd4 7a00 	vldr	s15, [r4]
 8006f08:	ed95 7a00 	vldr	s14, [r5]
 8006f0c:	ed56 3a01 	vldr	s7, [r6, #-4]
 8006f10:	ed17 3a01 	vldr	s6, [r7, #-4]
 8006f14:	ed92 2a00 	vldr	s4, [r2]
 8006f18:	ed96 0a00 	vldr	s0, [r6]
 8006f1c:	ee33 8a85 	vadd.f32	s16, s7, s10
 8006f20:	ee32 1a06 	vadd.f32	s2, s4, s12
 8006f24:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8006f28:	ee77 4a87 	vadd.f32	s9, s15, s14
 8006f2c:	ee78 1a04 	vadd.f32	s3, s16, s8
 8006f30:	ee71 6a24 	vadd.f32	s13, s2, s9
 8006f34:	ee32 2a46 	vsub.f32	s4, s4, s12
 8006f38:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8006f3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006f40:	ed06 6a01 	vstr	s12, [r6, #-4]
 8006f44:	edd4 8a01 	vldr	s17, [r4, #4]
 8006f48:	ed92 9a01 	vldr	s18, [r2, #4]
 8006f4c:	edd7 0a00 	vldr	s1, [r7]
 8006f50:	edd1 2a01 	vldr	s5, [r1, #4]
 8006f54:	ed95 7a01 	vldr	s14, [r5, #4]
 8006f58:	ed93 6a01 	vldr	s12, [r3, #4]
 8006f5c:	edd0 5a01 	vldr	s11, [r0, #4]
 8006f60:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8006f64:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8006f68:	ee39 5a62 	vsub.f32	s10, s18, s5
 8006f6c:	ee78 fac7 	vsub.f32	s31, s17, s14
 8006f70:	ee38 4a44 	vsub.f32	s8, s16, s8
 8006f74:	ee38 7a87 	vadd.f32	s14, s17, s14
 8006f78:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8006f7c:	ee79 2a22 	vadd.f32	s5, s18, s5
 8006f80:	ee32 9a27 	vadd.f32	s18, s4, s15
 8006f84:	ee72 7a67 	vsub.f32	s15, s4, s15
 8006f88:	ee30 2a06 	vadd.f32	s4, s0, s12
 8006f8c:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8006f90:	ee71 4a64 	vsub.f32	s9, s2, s9
 8006f94:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8006f98:	ee32 1a08 	vadd.f32	s2, s4, s16
 8006f9c:	ee72 fa87 	vadd.f32	s31, s5, s14
 8006fa0:	ee32 2a48 	vsub.f32	s4, s4, s16
 8006fa4:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8006fa8:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8006fac:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8006fb0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8006fb4:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8006fb8:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8006fbc:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8006fc0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006fc4:	ee30 6a46 	vsub.f32	s12, s0, s12
 8006fc8:	ee74 0a22 	vadd.f32	s1, s8, s5
 8006fcc:	ee36 0a28 	vadd.f32	s0, s12, s17
 8006fd0:	ee74 2a62 	vsub.f32	s5, s8, s5
 8006fd4:	ee36 6a68 	vsub.f32	s12, s12, s17
 8006fd8:	ee32 4a64 	vsub.f32	s8, s4, s9
 8006fdc:	ee73 8a09 	vadd.f32	s17, s6, s18
 8006fe0:	ee74 4a82 	vadd.f32	s9, s9, s4
 8006fe4:	ee33 9a49 	vsub.f32	s18, s6, s18
 8006fe8:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8006fec:	ee35 3a85 	vadd.f32	s6, s11, s10
 8006ff0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8006ff4:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8006ff8:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8006ffc:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8007000:	ee30 7a68 	vsub.f32	s14, s0, s17
 8007004:	ee35 8a03 	vadd.f32	s16, s10, s6
 8007008:	ee38 0a80 	vadd.f32	s0, s17, s0
 800700c:	ee73 3a82 	vadd.f32	s7, s7, s4
 8007010:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8007014:	ed9d 2a01 	vldr	s4, [sp, #4]
 8007018:	eddd 1a02 	vldr	s3, [sp, #8]
 800701c:	ee35 5a43 	vsub.f32	s10, s10, s6
 8007020:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8007024:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8007028:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800702c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8007030:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8007034:	ee76 5a49 	vsub.f32	s11, s12, s18
 8007038:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800703c:	ee39 6a06 	vadd.f32	s12, s18, s12
 8007040:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8007044:	ee21 4a84 	vmul.f32	s8, s3, s8
 8007048:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800704c:	ee22 7a07 	vmul.f32	s14, s4, s14
 8007050:	ee22 2a08 	vmul.f32	s4, s4, s16
 8007054:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8007058:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800705c:	ee31 1a09 	vadd.f32	s2, s2, s18
 8007060:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8007064:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8007068:	ee74 0a60 	vsub.f32	s1, s8, s1
 800706c:	ee37 7a48 	vsub.f32	s14, s14, s16
 8007070:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8007074:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8007078:	ee72 1a21 	vadd.f32	s3, s4, s3
 800707c:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8007080:	ee38 2a89 	vadd.f32	s4, s17, s18
 8007084:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8007088:	ee38 8a04 	vadd.f32	s16, s16, s8
 800708c:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8007090:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8007094:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8007098:	eddd 5a03 	vldr	s11, [sp, #12]
 800709c:	edc6 fa00 	vstr	s31, [r6]
 80070a0:	ee2b 0a80 	vmul.f32	s0, s23, s0
 80070a4:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80070a8:	ee30 0a45 	vsub.f32	s0, s0, s10
 80070ac:	ee6a 4a03 	vmul.f32	s9, s20, s6
 80070b0:	ee65 8aa7 	vmul.f32	s17, s11, s15
 80070b4:	ee2d 5a06 	vmul.f32	s10, s26, s12
 80070b8:	ee2e 3a03 	vmul.f32	s6, s28, s6
 80070bc:	ee6d 7a27 	vmul.f32	s15, s26, s15
 80070c0:	ee25 6a86 	vmul.f32	s12, s11, s12
 80070c4:	ee74 4a89 	vadd.f32	s9, s9, s18
 80070c8:	ee34 3a43 	vsub.f32	s6, s8, s6
 80070cc:	ee78 8a85 	vadd.f32	s17, s17, s10
 80070d0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80070d4:	44c4      	add	ip, r8
 80070d6:	45e3      	cmp	fp, ip
 80070d8:	edc3 3a00 	vstr	s7, [r3]
 80070dc:	edc3 6a01 	vstr	s13, [r3, #4]
 80070e0:	4456      	add	r6, sl
 80070e2:	ed07 1a01 	vstr	s2, [r7, #-4]
 80070e6:	edc7 0a00 	vstr	s1, [r7]
 80070ea:	4453      	add	r3, sl
 80070ec:	ed80 2a00 	vstr	s4, [r0]
 80070f0:	edc0 2a01 	vstr	s5, [r0, #4]
 80070f4:	4457      	add	r7, sl
 80070f6:	edc2 1a00 	vstr	s3, [r2]
 80070fa:	ed82 7a01 	vstr	s14, [r2, #4]
 80070fe:	4450      	add	r0, sl
 8007100:	ed85 8a00 	vstr	s16, [r5]
 8007104:	ed85 0a01 	vstr	s0, [r5, #4]
 8007108:	4452      	add	r2, sl
 800710a:	edc1 4a00 	vstr	s9, [r1]
 800710e:	4455      	add	r5, sl
 8007110:	ed81 3a01 	vstr	s6, [r1, #4]
 8007114:	edc4 8a00 	vstr	s17, [r4]
 8007118:	ed84 6a01 	vstr	s12, [r4, #4]
 800711c:	4451      	add	r1, sl
 800711e:	4454      	add	r4, sl
 8007120:	f63f aeea 	bhi.w	8006ef8 <arm_radix8_butterfly_f32+0x2fc>
 8007124:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007126:	3308      	adds	r3, #8
 8007128:	930b      	str	r3, [sp, #44]	@ 0x2c
 800712a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800712c:	3308      	adds	r3, #8
 800712e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007132:	3308      	adds	r3, #8
 8007134:	9309      	str	r3, [sp, #36]	@ 0x24
 8007136:	9b08      	ldr	r3, [sp, #32]
 8007138:	3308      	adds	r3, #8
 800713a:	9308      	str	r3, [sp, #32]
 800713c:	9b07      	ldr	r3, [sp, #28]
 800713e:	3308      	adds	r3, #8
 8007140:	9307      	str	r3, [sp, #28]
 8007142:	9b06      	ldr	r3, [sp, #24]
 8007144:	3308      	adds	r3, #8
 8007146:	9306      	str	r3, [sp, #24]
 8007148:	9b05      	ldr	r3, [sp, #20]
 800714a:	3308      	adds	r3, #8
 800714c:	9305      	str	r3, [sp, #20]
 800714e:	9b04      	ldr	r3, [sp, #16]
 8007150:	3308      	adds	r3, #8
 8007152:	9304      	str	r3, [sp, #16]
 8007154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007156:	f109 0901 	add.w	r9, r9, #1
 800715a:	454b      	cmp	r3, r9
 800715c:	f47f ae7d 	bne.w	8006e5a <arm_radix8_butterfly_f32+0x25e>
 8007160:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007162:	00db      	lsls	r3, r3, #3
 8007164:	b29b      	uxth	r3, r3
 8007166:	46d9      	mov	r9, fp
 8007168:	9310      	str	r3, [sp, #64]	@ 0x40
 800716a:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800716e:	e554      	b.n	8006c1a <arm_radix8_butterfly_f32+0x1e>
 8007170:	b015      	add	sp, #84	@ 0x54
 8007172:	ecbd 8b10 	vpop	{d8-d15}
 8007176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800717a:	bf00      	nop

0800717c <__cvt>:
 800717c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007180:	ec57 6b10 	vmov	r6, r7, d0
 8007184:	2f00      	cmp	r7, #0
 8007186:	460c      	mov	r4, r1
 8007188:	4619      	mov	r1, r3
 800718a:	463b      	mov	r3, r7
 800718c:	bfbb      	ittet	lt
 800718e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007192:	461f      	movlt	r7, r3
 8007194:	2300      	movge	r3, #0
 8007196:	232d      	movlt	r3, #45	@ 0x2d
 8007198:	700b      	strb	r3, [r1, #0]
 800719a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800719c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80071a0:	4691      	mov	r9, r2
 80071a2:	f023 0820 	bic.w	r8, r3, #32
 80071a6:	bfbc      	itt	lt
 80071a8:	4632      	movlt	r2, r6
 80071aa:	4616      	movlt	r6, r2
 80071ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80071b0:	d005      	beq.n	80071be <__cvt+0x42>
 80071b2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80071b6:	d100      	bne.n	80071ba <__cvt+0x3e>
 80071b8:	3401      	adds	r4, #1
 80071ba:	2102      	movs	r1, #2
 80071bc:	e000      	b.n	80071c0 <__cvt+0x44>
 80071be:	2103      	movs	r1, #3
 80071c0:	ab03      	add	r3, sp, #12
 80071c2:	9301      	str	r3, [sp, #4]
 80071c4:	ab02      	add	r3, sp, #8
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	ec47 6b10 	vmov	d0, r6, r7
 80071cc:	4653      	mov	r3, sl
 80071ce:	4622      	mov	r2, r4
 80071d0:	f000 fe5a 	bl	8007e88 <_dtoa_r>
 80071d4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80071d8:	4605      	mov	r5, r0
 80071da:	d119      	bne.n	8007210 <__cvt+0x94>
 80071dc:	f019 0f01 	tst.w	r9, #1
 80071e0:	d00e      	beq.n	8007200 <__cvt+0x84>
 80071e2:	eb00 0904 	add.w	r9, r0, r4
 80071e6:	2200      	movs	r2, #0
 80071e8:	2300      	movs	r3, #0
 80071ea:	4630      	mov	r0, r6
 80071ec:	4639      	mov	r1, r7
 80071ee:	f7f9 fc6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80071f2:	b108      	cbz	r0, 80071f8 <__cvt+0x7c>
 80071f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80071f8:	2230      	movs	r2, #48	@ 0x30
 80071fa:	9b03      	ldr	r3, [sp, #12]
 80071fc:	454b      	cmp	r3, r9
 80071fe:	d31e      	bcc.n	800723e <__cvt+0xc2>
 8007200:	9b03      	ldr	r3, [sp, #12]
 8007202:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007204:	1b5b      	subs	r3, r3, r5
 8007206:	4628      	mov	r0, r5
 8007208:	6013      	str	r3, [r2, #0]
 800720a:	b004      	add	sp, #16
 800720c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007210:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007214:	eb00 0904 	add.w	r9, r0, r4
 8007218:	d1e5      	bne.n	80071e6 <__cvt+0x6a>
 800721a:	7803      	ldrb	r3, [r0, #0]
 800721c:	2b30      	cmp	r3, #48	@ 0x30
 800721e:	d10a      	bne.n	8007236 <__cvt+0xba>
 8007220:	2200      	movs	r2, #0
 8007222:	2300      	movs	r3, #0
 8007224:	4630      	mov	r0, r6
 8007226:	4639      	mov	r1, r7
 8007228:	f7f9 fc4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800722c:	b918      	cbnz	r0, 8007236 <__cvt+0xba>
 800722e:	f1c4 0401 	rsb	r4, r4, #1
 8007232:	f8ca 4000 	str.w	r4, [sl]
 8007236:	f8da 3000 	ldr.w	r3, [sl]
 800723a:	4499      	add	r9, r3
 800723c:	e7d3      	b.n	80071e6 <__cvt+0x6a>
 800723e:	1c59      	adds	r1, r3, #1
 8007240:	9103      	str	r1, [sp, #12]
 8007242:	701a      	strb	r2, [r3, #0]
 8007244:	e7d9      	b.n	80071fa <__cvt+0x7e>

08007246 <__exponent>:
 8007246:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007248:	2900      	cmp	r1, #0
 800724a:	bfba      	itte	lt
 800724c:	4249      	neglt	r1, r1
 800724e:	232d      	movlt	r3, #45	@ 0x2d
 8007250:	232b      	movge	r3, #43	@ 0x2b
 8007252:	2909      	cmp	r1, #9
 8007254:	7002      	strb	r2, [r0, #0]
 8007256:	7043      	strb	r3, [r0, #1]
 8007258:	dd29      	ble.n	80072ae <__exponent+0x68>
 800725a:	f10d 0307 	add.w	r3, sp, #7
 800725e:	461d      	mov	r5, r3
 8007260:	270a      	movs	r7, #10
 8007262:	461a      	mov	r2, r3
 8007264:	fbb1 f6f7 	udiv	r6, r1, r7
 8007268:	fb07 1416 	mls	r4, r7, r6, r1
 800726c:	3430      	adds	r4, #48	@ 0x30
 800726e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007272:	460c      	mov	r4, r1
 8007274:	2c63      	cmp	r4, #99	@ 0x63
 8007276:	f103 33ff 	add.w	r3, r3, #4294967295
 800727a:	4631      	mov	r1, r6
 800727c:	dcf1      	bgt.n	8007262 <__exponent+0x1c>
 800727e:	3130      	adds	r1, #48	@ 0x30
 8007280:	1e94      	subs	r4, r2, #2
 8007282:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007286:	1c41      	adds	r1, r0, #1
 8007288:	4623      	mov	r3, r4
 800728a:	42ab      	cmp	r3, r5
 800728c:	d30a      	bcc.n	80072a4 <__exponent+0x5e>
 800728e:	f10d 0309 	add.w	r3, sp, #9
 8007292:	1a9b      	subs	r3, r3, r2
 8007294:	42ac      	cmp	r4, r5
 8007296:	bf88      	it	hi
 8007298:	2300      	movhi	r3, #0
 800729a:	3302      	adds	r3, #2
 800729c:	4403      	add	r3, r0
 800729e:	1a18      	subs	r0, r3, r0
 80072a0:	b003      	add	sp, #12
 80072a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80072a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80072ac:	e7ed      	b.n	800728a <__exponent+0x44>
 80072ae:	2330      	movs	r3, #48	@ 0x30
 80072b0:	3130      	adds	r1, #48	@ 0x30
 80072b2:	7083      	strb	r3, [r0, #2]
 80072b4:	70c1      	strb	r1, [r0, #3]
 80072b6:	1d03      	adds	r3, r0, #4
 80072b8:	e7f1      	b.n	800729e <__exponent+0x58>
	...

080072bc <_printf_float>:
 80072bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c0:	b08d      	sub	sp, #52	@ 0x34
 80072c2:	460c      	mov	r4, r1
 80072c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80072c8:	4616      	mov	r6, r2
 80072ca:	461f      	mov	r7, r3
 80072cc:	4605      	mov	r5, r0
 80072ce:	f000 fcdb 	bl	8007c88 <_localeconv_r>
 80072d2:	6803      	ldr	r3, [r0, #0]
 80072d4:	9304      	str	r3, [sp, #16]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7f8 ffca 	bl	8000270 <strlen>
 80072dc:	2300      	movs	r3, #0
 80072de:	930a      	str	r3, [sp, #40]	@ 0x28
 80072e0:	f8d8 3000 	ldr.w	r3, [r8]
 80072e4:	9005      	str	r0, [sp, #20]
 80072e6:	3307      	adds	r3, #7
 80072e8:	f023 0307 	bic.w	r3, r3, #7
 80072ec:	f103 0208 	add.w	r2, r3, #8
 80072f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80072f4:	f8d4 b000 	ldr.w	fp, [r4]
 80072f8:	f8c8 2000 	str.w	r2, [r8]
 80072fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007300:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007304:	9307      	str	r3, [sp, #28]
 8007306:	f8cd 8018 	str.w	r8, [sp, #24]
 800730a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800730e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007312:	4b9c      	ldr	r3, [pc, #624]	@ (8007584 <_printf_float+0x2c8>)
 8007314:	f04f 32ff 	mov.w	r2, #4294967295
 8007318:	f7f9 fc08 	bl	8000b2c <__aeabi_dcmpun>
 800731c:	bb70      	cbnz	r0, 800737c <_printf_float+0xc0>
 800731e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007322:	4b98      	ldr	r3, [pc, #608]	@ (8007584 <_printf_float+0x2c8>)
 8007324:	f04f 32ff 	mov.w	r2, #4294967295
 8007328:	f7f9 fbe2 	bl	8000af0 <__aeabi_dcmple>
 800732c:	bb30      	cbnz	r0, 800737c <_printf_float+0xc0>
 800732e:	2200      	movs	r2, #0
 8007330:	2300      	movs	r3, #0
 8007332:	4640      	mov	r0, r8
 8007334:	4649      	mov	r1, r9
 8007336:	f7f9 fbd1 	bl	8000adc <__aeabi_dcmplt>
 800733a:	b110      	cbz	r0, 8007342 <_printf_float+0x86>
 800733c:	232d      	movs	r3, #45	@ 0x2d
 800733e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007342:	4a91      	ldr	r2, [pc, #580]	@ (8007588 <_printf_float+0x2cc>)
 8007344:	4b91      	ldr	r3, [pc, #580]	@ (800758c <_printf_float+0x2d0>)
 8007346:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800734a:	bf8c      	ite	hi
 800734c:	4690      	movhi	r8, r2
 800734e:	4698      	movls	r8, r3
 8007350:	2303      	movs	r3, #3
 8007352:	6123      	str	r3, [r4, #16]
 8007354:	f02b 0304 	bic.w	r3, fp, #4
 8007358:	6023      	str	r3, [r4, #0]
 800735a:	f04f 0900 	mov.w	r9, #0
 800735e:	9700      	str	r7, [sp, #0]
 8007360:	4633      	mov	r3, r6
 8007362:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007364:	4621      	mov	r1, r4
 8007366:	4628      	mov	r0, r5
 8007368:	f000 f9d2 	bl	8007710 <_printf_common>
 800736c:	3001      	adds	r0, #1
 800736e:	f040 808d 	bne.w	800748c <_printf_float+0x1d0>
 8007372:	f04f 30ff 	mov.w	r0, #4294967295
 8007376:	b00d      	add	sp, #52	@ 0x34
 8007378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800737c:	4642      	mov	r2, r8
 800737e:	464b      	mov	r3, r9
 8007380:	4640      	mov	r0, r8
 8007382:	4649      	mov	r1, r9
 8007384:	f7f9 fbd2 	bl	8000b2c <__aeabi_dcmpun>
 8007388:	b140      	cbz	r0, 800739c <_printf_float+0xe0>
 800738a:	464b      	mov	r3, r9
 800738c:	2b00      	cmp	r3, #0
 800738e:	bfbc      	itt	lt
 8007390:	232d      	movlt	r3, #45	@ 0x2d
 8007392:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007396:	4a7e      	ldr	r2, [pc, #504]	@ (8007590 <_printf_float+0x2d4>)
 8007398:	4b7e      	ldr	r3, [pc, #504]	@ (8007594 <_printf_float+0x2d8>)
 800739a:	e7d4      	b.n	8007346 <_printf_float+0x8a>
 800739c:	6863      	ldr	r3, [r4, #4]
 800739e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80073a2:	9206      	str	r2, [sp, #24]
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	d13b      	bne.n	8007420 <_printf_float+0x164>
 80073a8:	2306      	movs	r3, #6
 80073aa:	6063      	str	r3, [r4, #4]
 80073ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80073b0:	2300      	movs	r3, #0
 80073b2:	6022      	str	r2, [r4, #0]
 80073b4:	9303      	str	r3, [sp, #12]
 80073b6:	ab0a      	add	r3, sp, #40	@ 0x28
 80073b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80073bc:	ab09      	add	r3, sp, #36	@ 0x24
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	6861      	ldr	r1, [r4, #4]
 80073c2:	ec49 8b10 	vmov	d0, r8, r9
 80073c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80073ca:	4628      	mov	r0, r5
 80073cc:	f7ff fed6 	bl	800717c <__cvt>
 80073d0:	9b06      	ldr	r3, [sp, #24]
 80073d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80073d4:	2b47      	cmp	r3, #71	@ 0x47
 80073d6:	4680      	mov	r8, r0
 80073d8:	d129      	bne.n	800742e <_printf_float+0x172>
 80073da:	1cc8      	adds	r0, r1, #3
 80073dc:	db02      	blt.n	80073e4 <_printf_float+0x128>
 80073de:	6863      	ldr	r3, [r4, #4]
 80073e0:	4299      	cmp	r1, r3
 80073e2:	dd41      	ble.n	8007468 <_printf_float+0x1ac>
 80073e4:	f1aa 0a02 	sub.w	sl, sl, #2
 80073e8:	fa5f fa8a 	uxtb.w	sl, sl
 80073ec:	3901      	subs	r1, #1
 80073ee:	4652      	mov	r2, sl
 80073f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80073f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80073f6:	f7ff ff26 	bl	8007246 <__exponent>
 80073fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80073fc:	1813      	adds	r3, r2, r0
 80073fe:	2a01      	cmp	r2, #1
 8007400:	4681      	mov	r9, r0
 8007402:	6123      	str	r3, [r4, #16]
 8007404:	dc02      	bgt.n	800740c <_printf_float+0x150>
 8007406:	6822      	ldr	r2, [r4, #0]
 8007408:	07d2      	lsls	r2, r2, #31
 800740a:	d501      	bpl.n	8007410 <_printf_float+0x154>
 800740c:	3301      	adds	r3, #1
 800740e:	6123      	str	r3, [r4, #16]
 8007410:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007414:	2b00      	cmp	r3, #0
 8007416:	d0a2      	beq.n	800735e <_printf_float+0xa2>
 8007418:	232d      	movs	r3, #45	@ 0x2d
 800741a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800741e:	e79e      	b.n	800735e <_printf_float+0xa2>
 8007420:	9a06      	ldr	r2, [sp, #24]
 8007422:	2a47      	cmp	r2, #71	@ 0x47
 8007424:	d1c2      	bne.n	80073ac <_printf_float+0xf0>
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1c0      	bne.n	80073ac <_printf_float+0xf0>
 800742a:	2301      	movs	r3, #1
 800742c:	e7bd      	b.n	80073aa <_printf_float+0xee>
 800742e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007432:	d9db      	bls.n	80073ec <_printf_float+0x130>
 8007434:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007438:	d118      	bne.n	800746c <_printf_float+0x1b0>
 800743a:	2900      	cmp	r1, #0
 800743c:	6863      	ldr	r3, [r4, #4]
 800743e:	dd0b      	ble.n	8007458 <_printf_float+0x19c>
 8007440:	6121      	str	r1, [r4, #16]
 8007442:	b913      	cbnz	r3, 800744a <_printf_float+0x18e>
 8007444:	6822      	ldr	r2, [r4, #0]
 8007446:	07d0      	lsls	r0, r2, #31
 8007448:	d502      	bpl.n	8007450 <_printf_float+0x194>
 800744a:	3301      	adds	r3, #1
 800744c:	440b      	add	r3, r1
 800744e:	6123      	str	r3, [r4, #16]
 8007450:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007452:	f04f 0900 	mov.w	r9, #0
 8007456:	e7db      	b.n	8007410 <_printf_float+0x154>
 8007458:	b913      	cbnz	r3, 8007460 <_printf_float+0x1a4>
 800745a:	6822      	ldr	r2, [r4, #0]
 800745c:	07d2      	lsls	r2, r2, #31
 800745e:	d501      	bpl.n	8007464 <_printf_float+0x1a8>
 8007460:	3302      	adds	r3, #2
 8007462:	e7f4      	b.n	800744e <_printf_float+0x192>
 8007464:	2301      	movs	r3, #1
 8007466:	e7f2      	b.n	800744e <_printf_float+0x192>
 8007468:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800746c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800746e:	4299      	cmp	r1, r3
 8007470:	db05      	blt.n	800747e <_printf_float+0x1c2>
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	6121      	str	r1, [r4, #16]
 8007476:	07d8      	lsls	r0, r3, #31
 8007478:	d5ea      	bpl.n	8007450 <_printf_float+0x194>
 800747a:	1c4b      	adds	r3, r1, #1
 800747c:	e7e7      	b.n	800744e <_printf_float+0x192>
 800747e:	2900      	cmp	r1, #0
 8007480:	bfd4      	ite	le
 8007482:	f1c1 0202 	rsble	r2, r1, #2
 8007486:	2201      	movgt	r2, #1
 8007488:	4413      	add	r3, r2
 800748a:	e7e0      	b.n	800744e <_printf_float+0x192>
 800748c:	6823      	ldr	r3, [r4, #0]
 800748e:	055a      	lsls	r2, r3, #21
 8007490:	d407      	bmi.n	80074a2 <_printf_float+0x1e6>
 8007492:	6923      	ldr	r3, [r4, #16]
 8007494:	4642      	mov	r2, r8
 8007496:	4631      	mov	r1, r6
 8007498:	4628      	mov	r0, r5
 800749a:	47b8      	blx	r7
 800749c:	3001      	adds	r0, #1
 800749e:	d12b      	bne.n	80074f8 <_printf_float+0x23c>
 80074a0:	e767      	b.n	8007372 <_printf_float+0xb6>
 80074a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80074a6:	f240 80dd 	bls.w	8007664 <_printf_float+0x3a8>
 80074aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80074ae:	2200      	movs	r2, #0
 80074b0:	2300      	movs	r3, #0
 80074b2:	f7f9 fb09 	bl	8000ac8 <__aeabi_dcmpeq>
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d033      	beq.n	8007522 <_printf_float+0x266>
 80074ba:	4a37      	ldr	r2, [pc, #220]	@ (8007598 <_printf_float+0x2dc>)
 80074bc:	2301      	movs	r3, #1
 80074be:	4631      	mov	r1, r6
 80074c0:	4628      	mov	r0, r5
 80074c2:	47b8      	blx	r7
 80074c4:	3001      	adds	r0, #1
 80074c6:	f43f af54 	beq.w	8007372 <_printf_float+0xb6>
 80074ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80074ce:	4543      	cmp	r3, r8
 80074d0:	db02      	blt.n	80074d8 <_printf_float+0x21c>
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	07d8      	lsls	r0, r3, #31
 80074d6:	d50f      	bpl.n	80074f8 <_printf_float+0x23c>
 80074d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074dc:	4631      	mov	r1, r6
 80074de:	4628      	mov	r0, r5
 80074e0:	47b8      	blx	r7
 80074e2:	3001      	adds	r0, #1
 80074e4:	f43f af45 	beq.w	8007372 <_printf_float+0xb6>
 80074e8:	f04f 0900 	mov.w	r9, #0
 80074ec:	f108 38ff 	add.w	r8, r8, #4294967295
 80074f0:	f104 0a1a 	add.w	sl, r4, #26
 80074f4:	45c8      	cmp	r8, r9
 80074f6:	dc09      	bgt.n	800750c <_printf_float+0x250>
 80074f8:	6823      	ldr	r3, [r4, #0]
 80074fa:	079b      	lsls	r3, r3, #30
 80074fc:	f100 8103 	bmi.w	8007706 <_printf_float+0x44a>
 8007500:	68e0      	ldr	r0, [r4, #12]
 8007502:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007504:	4298      	cmp	r0, r3
 8007506:	bfb8      	it	lt
 8007508:	4618      	movlt	r0, r3
 800750a:	e734      	b.n	8007376 <_printf_float+0xba>
 800750c:	2301      	movs	r3, #1
 800750e:	4652      	mov	r2, sl
 8007510:	4631      	mov	r1, r6
 8007512:	4628      	mov	r0, r5
 8007514:	47b8      	blx	r7
 8007516:	3001      	adds	r0, #1
 8007518:	f43f af2b 	beq.w	8007372 <_printf_float+0xb6>
 800751c:	f109 0901 	add.w	r9, r9, #1
 8007520:	e7e8      	b.n	80074f4 <_printf_float+0x238>
 8007522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007524:	2b00      	cmp	r3, #0
 8007526:	dc39      	bgt.n	800759c <_printf_float+0x2e0>
 8007528:	4a1b      	ldr	r2, [pc, #108]	@ (8007598 <_printf_float+0x2dc>)
 800752a:	2301      	movs	r3, #1
 800752c:	4631      	mov	r1, r6
 800752e:	4628      	mov	r0, r5
 8007530:	47b8      	blx	r7
 8007532:	3001      	adds	r0, #1
 8007534:	f43f af1d 	beq.w	8007372 <_printf_float+0xb6>
 8007538:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800753c:	ea59 0303 	orrs.w	r3, r9, r3
 8007540:	d102      	bne.n	8007548 <_printf_float+0x28c>
 8007542:	6823      	ldr	r3, [r4, #0]
 8007544:	07d9      	lsls	r1, r3, #31
 8007546:	d5d7      	bpl.n	80074f8 <_printf_float+0x23c>
 8007548:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800754c:	4631      	mov	r1, r6
 800754e:	4628      	mov	r0, r5
 8007550:	47b8      	blx	r7
 8007552:	3001      	adds	r0, #1
 8007554:	f43f af0d 	beq.w	8007372 <_printf_float+0xb6>
 8007558:	f04f 0a00 	mov.w	sl, #0
 800755c:	f104 0b1a 	add.w	fp, r4, #26
 8007560:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007562:	425b      	negs	r3, r3
 8007564:	4553      	cmp	r3, sl
 8007566:	dc01      	bgt.n	800756c <_printf_float+0x2b0>
 8007568:	464b      	mov	r3, r9
 800756a:	e793      	b.n	8007494 <_printf_float+0x1d8>
 800756c:	2301      	movs	r3, #1
 800756e:	465a      	mov	r2, fp
 8007570:	4631      	mov	r1, r6
 8007572:	4628      	mov	r0, r5
 8007574:	47b8      	blx	r7
 8007576:	3001      	adds	r0, #1
 8007578:	f43f aefb 	beq.w	8007372 <_printf_float+0xb6>
 800757c:	f10a 0a01 	add.w	sl, sl, #1
 8007580:	e7ee      	b.n	8007560 <_printf_float+0x2a4>
 8007582:	bf00      	nop
 8007584:	7fefffff 	.word	0x7fefffff
 8007588:	0801ced4 	.word	0x0801ced4
 800758c:	0801ced0 	.word	0x0801ced0
 8007590:	0801cedc 	.word	0x0801cedc
 8007594:	0801ced8 	.word	0x0801ced8
 8007598:	0801cee0 	.word	0x0801cee0
 800759c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800759e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80075a2:	4553      	cmp	r3, sl
 80075a4:	bfa8      	it	ge
 80075a6:	4653      	movge	r3, sl
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	4699      	mov	r9, r3
 80075ac:	dc36      	bgt.n	800761c <_printf_float+0x360>
 80075ae:	f04f 0b00 	mov.w	fp, #0
 80075b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075b6:	f104 021a 	add.w	r2, r4, #26
 80075ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80075bc:	9306      	str	r3, [sp, #24]
 80075be:	eba3 0309 	sub.w	r3, r3, r9
 80075c2:	455b      	cmp	r3, fp
 80075c4:	dc31      	bgt.n	800762a <_printf_float+0x36e>
 80075c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075c8:	459a      	cmp	sl, r3
 80075ca:	dc3a      	bgt.n	8007642 <_printf_float+0x386>
 80075cc:	6823      	ldr	r3, [r4, #0]
 80075ce:	07da      	lsls	r2, r3, #31
 80075d0:	d437      	bmi.n	8007642 <_printf_float+0x386>
 80075d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075d4:	ebaa 0903 	sub.w	r9, sl, r3
 80075d8:	9b06      	ldr	r3, [sp, #24]
 80075da:	ebaa 0303 	sub.w	r3, sl, r3
 80075de:	4599      	cmp	r9, r3
 80075e0:	bfa8      	it	ge
 80075e2:	4699      	movge	r9, r3
 80075e4:	f1b9 0f00 	cmp.w	r9, #0
 80075e8:	dc33      	bgt.n	8007652 <_printf_float+0x396>
 80075ea:	f04f 0800 	mov.w	r8, #0
 80075ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075f2:	f104 0b1a 	add.w	fp, r4, #26
 80075f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075f8:	ebaa 0303 	sub.w	r3, sl, r3
 80075fc:	eba3 0309 	sub.w	r3, r3, r9
 8007600:	4543      	cmp	r3, r8
 8007602:	f77f af79 	ble.w	80074f8 <_printf_float+0x23c>
 8007606:	2301      	movs	r3, #1
 8007608:	465a      	mov	r2, fp
 800760a:	4631      	mov	r1, r6
 800760c:	4628      	mov	r0, r5
 800760e:	47b8      	blx	r7
 8007610:	3001      	adds	r0, #1
 8007612:	f43f aeae 	beq.w	8007372 <_printf_float+0xb6>
 8007616:	f108 0801 	add.w	r8, r8, #1
 800761a:	e7ec      	b.n	80075f6 <_printf_float+0x33a>
 800761c:	4642      	mov	r2, r8
 800761e:	4631      	mov	r1, r6
 8007620:	4628      	mov	r0, r5
 8007622:	47b8      	blx	r7
 8007624:	3001      	adds	r0, #1
 8007626:	d1c2      	bne.n	80075ae <_printf_float+0x2f2>
 8007628:	e6a3      	b.n	8007372 <_printf_float+0xb6>
 800762a:	2301      	movs	r3, #1
 800762c:	4631      	mov	r1, r6
 800762e:	4628      	mov	r0, r5
 8007630:	9206      	str	r2, [sp, #24]
 8007632:	47b8      	blx	r7
 8007634:	3001      	adds	r0, #1
 8007636:	f43f ae9c 	beq.w	8007372 <_printf_float+0xb6>
 800763a:	9a06      	ldr	r2, [sp, #24]
 800763c:	f10b 0b01 	add.w	fp, fp, #1
 8007640:	e7bb      	b.n	80075ba <_printf_float+0x2fe>
 8007642:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007646:	4631      	mov	r1, r6
 8007648:	4628      	mov	r0, r5
 800764a:	47b8      	blx	r7
 800764c:	3001      	adds	r0, #1
 800764e:	d1c0      	bne.n	80075d2 <_printf_float+0x316>
 8007650:	e68f      	b.n	8007372 <_printf_float+0xb6>
 8007652:	9a06      	ldr	r2, [sp, #24]
 8007654:	464b      	mov	r3, r9
 8007656:	4442      	add	r2, r8
 8007658:	4631      	mov	r1, r6
 800765a:	4628      	mov	r0, r5
 800765c:	47b8      	blx	r7
 800765e:	3001      	adds	r0, #1
 8007660:	d1c3      	bne.n	80075ea <_printf_float+0x32e>
 8007662:	e686      	b.n	8007372 <_printf_float+0xb6>
 8007664:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007668:	f1ba 0f01 	cmp.w	sl, #1
 800766c:	dc01      	bgt.n	8007672 <_printf_float+0x3b6>
 800766e:	07db      	lsls	r3, r3, #31
 8007670:	d536      	bpl.n	80076e0 <_printf_float+0x424>
 8007672:	2301      	movs	r3, #1
 8007674:	4642      	mov	r2, r8
 8007676:	4631      	mov	r1, r6
 8007678:	4628      	mov	r0, r5
 800767a:	47b8      	blx	r7
 800767c:	3001      	adds	r0, #1
 800767e:	f43f ae78 	beq.w	8007372 <_printf_float+0xb6>
 8007682:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007686:	4631      	mov	r1, r6
 8007688:	4628      	mov	r0, r5
 800768a:	47b8      	blx	r7
 800768c:	3001      	adds	r0, #1
 800768e:	f43f ae70 	beq.w	8007372 <_printf_float+0xb6>
 8007692:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007696:	2200      	movs	r2, #0
 8007698:	2300      	movs	r3, #0
 800769a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800769e:	f7f9 fa13 	bl	8000ac8 <__aeabi_dcmpeq>
 80076a2:	b9c0      	cbnz	r0, 80076d6 <_printf_float+0x41a>
 80076a4:	4653      	mov	r3, sl
 80076a6:	f108 0201 	add.w	r2, r8, #1
 80076aa:	4631      	mov	r1, r6
 80076ac:	4628      	mov	r0, r5
 80076ae:	47b8      	blx	r7
 80076b0:	3001      	adds	r0, #1
 80076b2:	d10c      	bne.n	80076ce <_printf_float+0x412>
 80076b4:	e65d      	b.n	8007372 <_printf_float+0xb6>
 80076b6:	2301      	movs	r3, #1
 80076b8:	465a      	mov	r2, fp
 80076ba:	4631      	mov	r1, r6
 80076bc:	4628      	mov	r0, r5
 80076be:	47b8      	blx	r7
 80076c0:	3001      	adds	r0, #1
 80076c2:	f43f ae56 	beq.w	8007372 <_printf_float+0xb6>
 80076c6:	f108 0801 	add.w	r8, r8, #1
 80076ca:	45d0      	cmp	r8, sl
 80076cc:	dbf3      	blt.n	80076b6 <_printf_float+0x3fa>
 80076ce:	464b      	mov	r3, r9
 80076d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80076d4:	e6df      	b.n	8007496 <_printf_float+0x1da>
 80076d6:	f04f 0800 	mov.w	r8, #0
 80076da:	f104 0b1a 	add.w	fp, r4, #26
 80076de:	e7f4      	b.n	80076ca <_printf_float+0x40e>
 80076e0:	2301      	movs	r3, #1
 80076e2:	4642      	mov	r2, r8
 80076e4:	e7e1      	b.n	80076aa <_printf_float+0x3ee>
 80076e6:	2301      	movs	r3, #1
 80076e8:	464a      	mov	r2, r9
 80076ea:	4631      	mov	r1, r6
 80076ec:	4628      	mov	r0, r5
 80076ee:	47b8      	blx	r7
 80076f0:	3001      	adds	r0, #1
 80076f2:	f43f ae3e 	beq.w	8007372 <_printf_float+0xb6>
 80076f6:	f108 0801 	add.w	r8, r8, #1
 80076fa:	68e3      	ldr	r3, [r4, #12]
 80076fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80076fe:	1a5b      	subs	r3, r3, r1
 8007700:	4543      	cmp	r3, r8
 8007702:	dcf0      	bgt.n	80076e6 <_printf_float+0x42a>
 8007704:	e6fc      	b.n	8007500 <_printf_float+0x244>
 8007706:	f04f 0800 	mov.w	r8, #0
 800770a:	f104 0919 	add.w	r9, r4, #25
 800770e:	e7f4      	b.n	80076fa <_printf_float+0x43e>

08007710 <_printf_common>:
 8007710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007714:	4616      	mov	r6, r2
 8007716:	4698      	mov	r8, r3
 8007718:	688a      	ldr	r2, [r1, #8]
 800771a:	690b      	ldr	r3, [r1, #16]
 800771c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007720:	4293      	cmp	r3, r2
 8007722:	bfb8      	it	lt
 8007724:	4613      	movlt	r3, r2
 8007726:	6033      	str	r3, [r6, #0]
 8007728:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800772c:	4607      	mov	r7, r0
 800772e:	460c      	mov	r4, r1
 8007730:	b10a      	cbz	r2, 8007736 <_printf_common+0x26>
 8007732:	3301      	adds	r3, #1
 8007734:	6033      	str	r3, [r6, #0]
 8007736:	6823      	ldr	r3, [r4, #0]
 8007738:	0699      	lsls	r1, r3, #26
 800773a:	bf42      	ittt	mi
 800773c:	6833      	ldrmi	r3, [r6, #0]
 800773e:	3302      	addmi	r3, #2
 8007740:	6033      	strmi	r3, [r6, #0]
 8007742:	6825      	ldr	r5, [r4, #0]
 8007744:	f015 0506 	ands.w	r5, r5, #6
 8007748:	d106      	bne.n	8007758 <_printf_common+0x48>
 800774a:	f104 0a19 	add.w	sl, r4, #25
 800774e:	68e3      	ldr	r3, [r4, #12]
 8007750:	6832      	ldr	r2, [r6, #0]
 8007752:	1a9b      	subs	r3, r3, r2
 8007754:	42ab      	cmp	r3, r5
 8007756:	dc26      	bgt.n	80077a6 <_printf_common+0x96>
 8007758:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800775c:	6822      	ldr	r2, [r4, #0]
 800775e:	3b00      	subs	r3, #0
 8007760:	bf18      	it	ne
 8007762:	2301      	movne	r3, #1
 8007764:	0692      	lsls	r2, r2, #26
 8007766:	d42b      	bmi.n	80077c0 <_printf_common+0xb0>
 8007768:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800776c:	4641      	mov	r1, r8
 800776e:	4638      	mov	r0, r7
 8007770:	47c8      	blx	r9
 8007772:	3001      	adds	r0, #1
 8007774:	d01e      	beq.n	80077b4 <_printf_common+0xa4>
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	6922      	ldr	r2, [r4, #16]
 800777a:	f003 0306 	and.w	r3, r3, #6
 800777e:	2b04      	cmp	r3, #4
 8007780:	bf02      	ittt	eq
 8007782:	68e5      	ldreq	r5, [r4, #12]
 8007784:	6833      	ldreq	r3, [r6, #0]
 8007786:	1aed      	subeq	r5, r5, r3
 8007788:	68a3      	ldr	r3, [r4, #8]
 800778a:	bf0c      	ite	eq
 800778c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007790:	2500      	movne	r5, #0
 8007792:	4293      	cmp	r3, r2
 8007794:	bfc4      	itt	gt
 8007796:	1a9b      	subgt	r3, r3, r2
 8007798:	18ed      	addgt	r5, r5, r3
 800779a:	2600      	movs	r6, #0
 800779c:	341a      	adds	r4, #26
 800779e:	42b5      	cmp	r5, r6
 80077a0:	d11a      	bne.n	80077d8 <_printf_common+0xc8>
 80077a2:	2000      	movs	r0, #0
 80077a4:	e008      	b.n	80077b8 <_printf_common+0xa8>
 80077a6:	2301      	movs	r3, #1
 80077a8:	4652      	mov	r2, sl
 80077aa:	4641      	mov	r1, r8
 80077ac:	4638      	mov	r0, r7
 80077ae:	47c8      	blx	r9
 80077b0:	3001      	adds	r0, #1
 80077b2:	d103      	bne.n	80077bc <_printf_common+0xac>
 80077b4:	f04f 30ff 	mov.w	r0, #4294967295
 80077b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077bc:	3501      	adds	r5, #1
 80077be:	e7c6      	b.n	800774e <_printf_common+0x3e>
 80077c0:	18e1      	adds	r1, r4, r3
 80077c2:	1c5a      	adds	r2, r3, #1
 80077c4:	2030      	movs	r0, #48	@ 0x30
 80077c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80077ca:	4422      	add	r2, r4
 80077cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80077d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80077d4:	3302      	adds	r3, #2
 80077d6:	e7c7      	b.n	8007768 <_printf_common+0x58>
 80077d8:	2301      	movs	r3, #1
 80077da:	4622      	mov	r2, r4
 80077dc:	4641      	mov	r1, r8
 80077de:	4638      	mov	r0, r7
 80077e0:	47c8      	blx	r9
 80077e2:	3001      	adds	r0, #1
 80077e4:	d0e6      	beq.n	80077b4 <_printf_common+0xa4>
 80077e6:	3601      	adds	r6, #1
 80077e8:	e7d9      	b.n	800779e <_printf_common+0x8e>
	...

080077ec <_printf_i>:
 80077ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077f0:	7e0f      	ldrb	r7, [r1, #24]
 80077f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80077f4:	2f78      	cmp	r7, #120	@ 0x78
 80077f6:	4691      	mov	r9, r2
 80077f8:	4680      	mov	r8, r0
 80077fa:	460c      	mov	r4, r1
 80077fc:	469a      	mov	sl, r3
 80077fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007802:	d807      	bhi.n	8007814 <_printf_i+0x28>
 8007804:	2f62      	cmp	r7, #98	@ 0x62
 8007806:	d80a      	bhi.n	800781e <_printf_i+0x32>
 8007808:	2f00      	cmp	r7, #0
 800780a:	f000 80d1 	beq.w	80079b0 <_printf_i+0x1c4>
 800780e:	2f58      	cmp	r7, #88	@ 0x58
 8007810:	f000 80b8 	beq.w	8007984 <_printf_i+0x198>
 8007814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007818:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800781c:	e03a      	b.n	8007894 <_printf_i+0xa8>
 800781e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007822:	2b15      	cmp	r3, #21
 8007824:	d8f6      	bhi.n	8007814 <_printf_i+0x28>
 8007826:	a101      	add	r1, pc, #4	@ (adr r1, 800782c <_printf_i+0x40>)
 8007828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800782c:	08007885 	.word	0x08007885
 8007830:	08007899 	.word	0x08007899
 8007834:	08007815 	.word	0x08007815
 8007838:	08007815 	.word	0x08007815
 800783c:	08007815 	.word	0x08007815
 8007840:	08007815 	.word	0x08007815
 8007844:	08007899 	.word	0x08007899
 8007848:	08007815 	.word	0x08007815
 800784c:	08007815 	.word	0x08007815
 8007850:	08007815 	.word	0x08007815
 8007854:	08007815 	.word	0x08007815
 8007858:	08007997 	.word	0x08007997
 800785c:	080078c3 	.word	0x080078c3
 8007860:	08007951 	.word	0x08007951
 8007864:	08007815 	.word	0x08007815
 8007868:	08007815 	.word	0x08007815
 800786c:	080079b9 	.word	0x080079b9
 8007870:	08007815 	.word	0x08007815
 8007874:	080078c3 	.word	0x080078c3
 8007878:	08007815 	.word	0x08007815
 800787c:	08007815 	.word	0x08007815
 8007880:	08007959 	.word	0x08007959
 8007884:	6833      	ldr	r3, [r6, #0]
 8007886:	1d1a      	adds	r2, r3, #4
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	6032      	str	r2, [r6, #0]
 800788c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007890:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007894:	2301      	movs	r3, #1
 8007896:	e09c      	b.n	80079d2 <_printf_i+0x1e6>
 8007898:	6833      	ldr	r3, [r6, #0]
 800789a:	6820      	ldr	r0, [r4, #0]
 800789c:	1d19      	adds	r1, r3, #4
 800789e:	6031      	str	r1, [r6, #0]
 80078a0:	0606      	lsls	r6, r0, #24
 80078a2:	d501      	bpl.n	80078a8 <_printf_i+0xbc>
 80078a4:	681d      	ldr	r5, [r3, #0]
 80078a6:	e003      	b.n	80078b0 <_printf_i+0xc4>
 80078a8:	0645      	lsls	r5, r0, #25
 80078aa:	d5fb      	bpl.n	80078a4 <_printf_i+0xb8>
 80078ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80078b0:	2d00      	cmp	r5, #0
 80078b2:	da03      	bge.n	80078bc <_printf_i+0xd0>
 80078b4:	232d      	movs	r3, #45	@ 0x2d
 80078b6:	426d      	negs	r5, r5
 80078b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078bc:	4858      	ldr	r0, [pc, #352]	@ (8007a20 <_printf_i+0x234>)
 80078be:	230a      	movs	r3, #10
 80078c0:	e011      	b.n	80078e6 <_printf_i+0xfa>
 80078c2:	6821      	ldr	r1, [r4, #0]
 80078c4:	6833      	ldr	r3, [r6, #0]
 80078c6:	0608      	lsls	r0, r1, #24
 80078c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80078cc:	d402      	bmi.n	80078d4 <_printf_i+0xe8>
 80078ce:	0649      	lsls	r1, r1, #25
 80078d0:	bf48      	it	mi
 80078d2:	b2ad      	uxthmi	r5, r5
 80078d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80078d6:	4852      	ldr	r0, [pc, #328]	@ (8007a20 <_printf_i+0x234>)
 80078d8:	6033      	str	r3, [r6, #0]
 80078da:	bf14      	ite	ne
 80078dc:	230a      	movne	r3, #10
 80078de:	2308      	moveq	r3, #8
 80078e0:	2100      	movs	r1, #0
 80078e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80078e6:	6866      	ldr	r6, [r4, #4]
 80078e8:	60a6      	str	r6, [r4, #8]
 80078ea:	2e00      	cmp	r6, #0
 80078ec:	db05      	blt.n	80078fa <_printf_i+0x10e>
 80078ee:	6821      	ldr	r1, [r4, #0]
 80078f0:	432e      	orrs	r6, r5
 80078f2:	f021 0104 	bic.w	r1, r1, #4
 80078f6:	6021      	str	r1, [r4, #0]
 80078f8:	d04b      	beq.n	8007992 <_printf_i+0x1a6>
 80078fa:	4616      	mov	r6, r2
 80078fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8007900:	fb03 5711 	mls	r7, r3, r1, r5
 8007904:	5dc7      	ldrb	r7, [r0, r7]
 8007906:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800790a:	462f      	mov	r7, r5
 800790c:	42bb      	cmp	r3, r7
 800790e:	460d      	mov	r5, r1
 8007910:	d9f4      	bls.n	80078fc <_printf_i+0x110>
 8007912:	2b08      	cmp	r3, #8
 8007914:	d10b      	bne.n	800792e <_printf_i+0x142>
 8007916:	6823      	ldr	r3, [r4, #0]
 8007918:	07df      	lsls	r7, r3, #31
 800791a:	d508      	bpl.n	800792e <_printf_i+0x142>
 800791c:	6923      	ldr	r3, [r4, #16]
 800791e:	6861      	ldr	r1, [r4, #4]
 8007920:	4299      	cmp	r1, r3
 8007922:	bfde      	ittt	le
 8007924:	2330      	movle	r3, #48	@ 0x30
 8007926:	f806 3c01 	strble.w	r3, [r6, #-1]
 800792a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800792e:	1b92      	subs	r2, r2, r6
 8007930:	6122      	str	r2, [r4, #16]
 8007932:	f8cd a000 	str.w	sl, [sp]
 8007936:	464b      	mov	r3, r9
 8007938:	aa03      	add	r2, sp, #12
 800793a:	4621      	mov	r1, r4
 800793c:	4640      	mov	r0, r8
 800793e:	f7ff fee7 	bl	8007710 <_printf_common>
 8007942:	3001      	adds	r0, #1
 8007944:	d14a      	bne.n	80079dc <_printf_i+0x1f0>
 8007946:	f04f 30ff 	mov.w	r0, #4294967295
 800794a:	b004      	add	sp, #16
 800794c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007950:	6823      	ldr	r3, [r4, #0]
 8007952:	f043 0320 	orr.w	r3, r3, #32
 8007956:	6023      	str	r3, [r4, #0]
 8007958:	4832      	ldr	r0, [pc, #200]	@ (8007a24 <_printf_i+0x238>)
 800795a:	2778      	movs	r7, #120	@ 0x78
 800795c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007960:	6823      	ldr	r3, [r4, #0]
 8007962:	6831      	ldr	r1, [r6, #0]
 8007964:	061f      	lsls	r7, r3, #24
 8007966:	f851 5b04 	ldr.w	r5, [r1], #4
 800796a:	d402      	bmi.n	8007972 <_printf_i+0x186>
 800796c:	065f      	lsls	r7, r3, #25
 800796e:	bf48      	it	mi
 8007970:	b2ad      	uxthmi	r5, r5
 8007972:	6031      	str	r1, [r6, #0]
 8007974:	07d9      	lsls	r1, r3, #31
 8007976:	bf44      	itt	mi
 8007978:	f043 0320 	orrmi.w	r3, r3, #32
 800797c:	6023      	strmi	r3, [r4, #0]
 800797e:	b11d      	cbz	r5, 8007988 <_printf_i+0x19c>
 8007980:	2310      	movs	r3, #16
 8007982:	e7ad      	b.n	80078e0 <_printf_i+0xf4>
 8007984:	4826      	ldr	r0, [pc, #152]	@ (8007a20 <_printf_i+0x234>)
 8007986:	e7e9      	b.n	800795c <_printf_i+0x170>
 8007988:	6823      	ldr	r3, [r4, #0]
 800798a:	f023 0320 	bic.w	r3, r3, #32
 800798e:	6023      	str	r3, [r4, #0]
 8007990:	e7f6      	b.n	8007980 <_printf_i+0x194>
 8007992:	4616      	mov	r6, r2
 8007994:	e7bd      	b.n	8007912 <_printf_i+0x126>
 8007996:	6833      	ldr	r3, [r6, #0]
 8007998:	6825      	ldr	r5, [r4, #0]
 800799a:	6961      	ldr	r1, [r4, #20]
 800799c:	1d18      	adds	r0, r3, #4
 800799e:	6030      	str	r0, [r6, #0]
 80079a0:	062e      	lsls	r6, r5, #24
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	d501      	bpl.n	80079aa <_printf_i+0x1be>
 80079a6:	6019      	str	r1, [r3, #0]
 80079a8:	e002      	b.n	80079b0 <_printf_i+0x1c4>
 80079aa:	0668      	lsls	r0, r5, #25
 80079ac:	d5fb      	bpl.n	80079a6 <_printf_i+0x1ba>
 80079ae:	8019      	strh	r1, [r3, #0]
 80079b0:	2300      	movs	r3, #0
 80079b2:	6123      	str	r3, [r4, #16]
 80079b4:	4616      	mov	r6, r2
 80079b6:	e7bc      	b.n	8007932 <_printf_i+0x146>
 80079b8:	6833      	ldr	r3, [r6, #0]
 80079ba:	1d1a      	adds	r2, r3, #4
 80079bc:	6032      	str	r2, [r6, #0]
 80079be:	681e      	ldr	r6, [r3, #0]
 80079c0:	6862      	ldr	r2, [r4, #4]
 80079c2:	2100      	movs	r1, #0
 80079c4:	4630      	mov	r0, r6
 80079c6:	f7f8 fc03 	bl	80001d0 <memchr>
 80079ca:	b108      	cbz	r0, 80079d0 <_printf_i+0x1e4>
 80079cc:	1b80      	subs	r0, r0, r6
 80079ce:	6060      	str	r0, [r4, #4]
 80079d0:	6863      	ldr	r3, [r4, #4]
 80079d2:	6123      	str	r3, [r4, #16]
 80079d4:	2300      	movs	r3, #0
 80079d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079da:	e7aa      	b.n	8007932 <_printf_i+0x146>
 80079dc:	6923      	ldr	r3, [r4, #16]
 80079de:	4632      	mov	r2, r6
 80079e0:	4649      	mov	r1, r9
 80079e2:	4640      	mov	r0, r8
 80079e4:	47d0      	blx	sl
 80079e6:	3001      	adds	r0, #1
 80079e8:	d0ad      	beq.n	8007946 <_printf_i+0x15a>
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	079b      	lsls	r3, r3, #30
 80079ee:	d413      	bmi.n	8007a18 <_printf_i+0x22c>
 80079f0:	68e0      	ldr	r0, [r4, #12]
 80079f2:	9b03      	ldr	r3, [sp, #12]
 80079f4:	4298      	cmp	r0, r3
 80079f6:	bfb8      	it	lt
 80079f8:	4618      	movlt	r0, r3
 80079fa:	e7a6      	b.n	800794a <_printf_i+0x15e>
 80079fc:	2301      	movs	r3, #1
 80079fe:	4632      	mov	r2, r6
 8007a00:	4649      	mov	r1, r9
 8007a02:	4640      	mov	r0, r8
 8007a04:	47d0      	blx	sl
 8007a06:	3001      	adds	r0, #1
 8007a08:	d09d      	beq.n	8007946 <_printf_i+0x15a>
 8007a0a:	3501      	adds	r5, #1
 8007a0c:	68e3      	ldr	r3, [r4, #12]
 8007a0e:	9903      	ldr	r1, [sp, #12]
 8007a10:	1a5b      	subs	r3, r3, r1
 8007a12:	42ab      	cmp	r3, r5
 8007a14:	dcf2      	bgt.n	80079fc <_printf_i+0x210>
 8007a16:	e7eb      	b.n	80079f0 <_printf_i+0x204>
 8007a18:	2500      	movs	r5, #0
 8007a1a:	f104 0619 	add.w	r6, r4, #25
 8007a1e:	e7f5      	b.n	8007a0c <_printf_i+0x220>
 8007a20:	0801cee2 	.word	0x0801cee2
 8007a24:	0801cef3 	.word	0x0801cef3

08007a28 <std>:
 8007a28:	2300      	movs	r3, #0
 8007a2a:	b510      	push	{r4, lr}
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	e9c0 3300 	strd	r3, r3, [r0]
 8007a32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a36:	6083      	str	r3, [r0, #8]
 8007a38:	8181      	strh	r1, [r0, #12]
 8007a3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007a3c:	81c2      	strh	r2, [r0, #14]
 8007a3e:	6183      	str	r3, [r0, #24]
 8007a40:	4619      	mov	r1, r3
 8007a42:	2208      	movs	r2, #8
 8007a44:	305c      	adds	r0, #92	@ 0x5c
 8007a46:	f000 f916 	bl	8007c76 <memset>
 8007a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8007a80 <std+0x58>)
 8007a4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a84 <std+0x5c>)
 8007a50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007a52:	4b0d      	ldr	r3, [pc, #52]	@ (8007a88 <std+0x60>)
 8007a54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007a56:	4b0d      	ldr	r3, [pc, #52]	@ (8007a8c <std+0x64>)
 8007a58:	6323      	str	r3, [r4, #48]	@ 0x30
 8007a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007a90 <std+0x68>)
 8007a5c:	6224      	str	r4, [r4, #32]
 8007a5e:	429c      	cmp	r4, r3
 8007a60:	d006      	beq.n	8007a70 <std+0x48>
 8007a62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007a66:	4294      	cmp	r4, r2
 8007a68:	d002      	beq.n	8007a70 <std+0x48>
 8007a6a:	33d0      	adds	r3, #208	@ 0xd0
 8007a6c:	429c      	cmp	r4, r3
 8007a6e:	d105      	bne.n	8007a7c <std+0x54>
 8007a70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a78:	f000 b97a 	b.w	8007d70 <__retarget_lock_init_recursive>
 8007a7c:	bd10      	pop	{r4, pc}
 8007a7e:	bf00      	nop
 8007a80:	08007bf1 	.word	0x08007bf1
 8007a84:	08007c13 	.word	0x08007c13
 8007a88:	08007c4b 	.word	0x08007c4b
 8007a8c:	08007c6f 	.word	0x08007c6f
 8007a90:	20003be0 	.word	0x20003be0

08007a94 <stdio_exit_handler>:
 8007a94:	4a02      	ldr	r2, [pc, #8]	@ (8007aa0 <stdio_exit_handler+0xc>)
 8007a96:	4903      	ldr	r1, [pc, #12]	@ (8007aa4 <stdio_exit_handler+0x10>)
 8007a98:	4803      	ldr	r0, [pc, #12]	@ (8007aa8 <stdio_exit_handler+0x14>)
 8007a9a:	f000 b869 	b.w	8007b70 <_fwalk_sglue>
 8007a9e:	bf00      	nop
 8007aa0:	2000000c 	.word	0x2000000c
 8007aa4:	080096d5 	.word	0x080096d5
 8007aa8:	2000001c 	.word	0x2000001c

08007aac <cleanup_stdio>:
 8007aac:	6841      	ldr	r1, [r0, #4]
 8007aae:	4b0c      	ldr	r3, [pc, #48]	@ (8007ae0 <cleanup_stdio+0x34>)
 8007ab0:	4299      	cmp	r1, r3
 8007ab2:	b510      	push	{r4, lr}
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	d001      	beq.n	8007abc <cleanup_stdio+0x10>
 8007ab8:	f001 fe0c 	bl	80096d4 <_fflush_r>
 8007abc:	68a1      	ldr	r1, [r4, #8]
 8007abe:	4b09      	ldr	r3, [pc, #36]	@ (8007ae4 <cleanup_stdio+0x38>)
 8007ac0:	4299      	cmp	r1, r3
 8007ac2:	d002      	beq.n	8007aca <cleanup_stdio+0x1e>
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	f001 fe05 	bl	80096d4 <_fflush_r>
 8007aca:	68e1      	ldr	r1, [r4, #12]
 8007acc:	4b06      	ldr	r3, [pc, #24]	@ (8007ae8 <cleanup_stdio+0x3c>)
 8007ace:	4299      	cmp	r1, r3
 8007ad0:	d004      	beq.n	8007adc <cleanup_stdio+0x30>
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ad8:	f001 bdfc 	b.w	80096d4 <_fflush_r>
 8007adc:	bd10      	pop	{r4, pc}
 8007ade:	bf00      	nop
 8007ae0:	20003be0 	.word	0x20003be0
 8007ae4:	20003c48 	.word	0x20003c48
 8007ae8:	20003cb0 	.word	0x20003cb0

08007aec <global_stdio_init.part.0>:
 8007aec:	b510      	push	{r4, lr}
 8007aee:	4b0b      	ldr	r3, [pc, #44]	@ (8007b1c <global_stdio_init.part.0+0x30>)
 8007af0:	4c0b      	ldr	r4, [pc, #44]	@ (8007b20 <global_stdio_init.part.0+0x34>)
 8007af2:	4a0c      	ldr	r2, [pc, #48]	@ (8007b24 <global_stdio_init.part.0+0x38>)
 8007af4:	601a      	str	r2, [r3, #0]
 8007af6:	4620      	mov	r0, r4
 8007af8:	2200      	movs	r2, #0
 8007afa:	2104      	movs	r1, #4
 8007afc:	f7ff ff94 	bl	8007a28 <std>
 8007b00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b04:	2201      	movs	r2, #1
 8007b06:	2109      	movs	r1, #9
 8007b08:	f7ff ff8e 	bl	8007a28 <std>
 8007b0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007b10:	2202      	movs	r2, #2
 8007b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b16:	2112      	movs	r1, #18
 8007b18:	f7ff bf86 	b.w	8007a28 <std>
 8007b1c:	20003d18 	.word	0x20003d18
 8007b20:	20003be0 	.word	0x20003be0
 8007b24:	08007a95 	.word	0x08007a95

08007b28 <__sfp_lock_acquire>:
 8007b28:	4801      	ldr	r0, [pc, #4]	@ (8007b30 <__sfp_lock_acquire+0x8>)
 8007b2a:	f000 b922 	b.w	8007d72 <__retarget_lock_acquire_recursive>
 8007b2e:	bf00      	nop
 8007b30:	20003d21 	.word	0x20003d21

08007b34 <__sfp_lock_release>:
 8007b34:	4801      	ldr	r0, [pc, #4]	@ (8007b3c <__sfp_lock_release+0x8>)
 8007b36:	f000 b91d 	b.w	8007d74 <__retarget_lock_release_recursive>
 8007b3a:	bf00      	nop
 8007b3c:	20003d21 	.word	0x20003d21

08007b40 <__sinit>:
 8007b40:	b510      	push	{r4, lr}
 8007b42:	4604      	mov	r4, r0
 8007b44:	f7ff fff0 	bl	8007b28 <__sfp_lock_acquire>
 8007b48:	6a23      	ldr	r3, [r4, #32]
 8007b4a:	b11b      	cbz	r3, 8007b54 <__sinit+0x14>
 8007b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b50:	f7ff bff0 	b.w	8007b34 <__sfp_lock_release>
 8007b54:	4b04      	ldr	r3, [pc, #16]	@ (8007b68 <__sinit+0x28>)
 8007b56:	6223      	str	r3, [r4, #32]
 8007b58:	4b04      	ldr	r3, [pc, #16]	@ (8007b6c <__sinit+0x2c>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1f5      	bne.n	8007b4c <__sinit+0xc>
 8007b60:	f7ff ffc4 	bl	8007aec <global_stdio_init.part.0>
 8007b64:	e7f2      	b.n	8007b4c <__sinit+0xc>
 8007b66:	bf00      	nop
 8007b68:	08007aad 	.word	0x08007aad
 8007b6c:	20003d18 	.word	0x20003d18

08007b70 <_fwalk_sglue>:
 8007b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b74:	4607      	mov	r7, r0
 8007b76:	4688      	mov	r8, r1
 8007b78:	4614      	mov	r4, r2
 8007b7a:	2600      	movs	r6, #0
 8007b7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b80:	f1b9 0901 	subs.w	r9, r9, #1
 8007b84:	d505      	bpl.n	8007b92 <_fwalk_sglue+0x22>
 8007b86:	6824      	ldr	r4, [r4, #0]
 8007b88:	2c00      	cmp	r4, #0
 8007b8a:	d1f7      	bne.n	8007b7c <_fwalk_sglue+0xc>
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b92:	89ab      	ldrh	r3, [r5, #12]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d907      	bls.n	8007ba8 <_fwalk_sglue+0x38>
 8007b98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	d003      	beq.n	8007ba8 <_fwalk_sglue+0x38>
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	4638      	mov	r0, r7
 8007ba4:	47c0      	blx	r8
 8007ba6:	4306      	orrs	r6, r0
 8007ba8:	3568      	adds	r5, #104	@ 0x68
 8007baa:	e7e9      	b.n	8007b80 <_fwalk_sglue+0x10>

08007bac <siprintf>:
 8007bac:	b40e      	push	{r1, r2, r3}
 8007bae:	b510      	push	{r4, lr}
 8007bb0:	b09d      	sub	sp, #116	@ 0x74
 8007bb2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007bb4:	9002      	str	r0, [sp, #8]
 8007bb6:	9006      	str	r0, [sp, #24]
 8007bb8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007bbc:	480a      	ldr	r0, [pc, #40]	@ (8007be8 <siprintf+0x3c>)
 8007bbe:	9107      	str	r1, [sp, #28]
 8007bc0:	9104      	str	r1, [sp, #16]
 8007bc2:	490a      	ldr	r1, [pc, #40]	@ (8007bec <siprintf+0x40>)
 8007bc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bc8:	9105      	str	r1, [sp, #20]
 8007bca:	2400      	movs	r4, #0
 8007bcc:	a902      	add	r1, sp, #8
 8007bce:	6800      	ldr	r0, [r0, #0]
 8007bd0:	9301      	str	r3, [sp, #4]
 8007bd2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007bd4:	f001 fbfe 	bl	80093d4 <_svfiprintf_r>
 8007bd8:	9b02      	ldr	r3, [sp, #8]
 8007bda:	701c      	strb	r4, [r3, #0]
 8007bdc:	b01d      	add	sp, #116	@ 0x74
 8007bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007be2:	b003      	add	sp, #12
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	20000018 	.word	0x20000018
 8007bec:	ffff0208 	.word	0xffff0208

08007bf0 <__sread>:
 8007bf0:	b510      	push	{r4, lr}
 8007bf2:	460c      	mov	r4, r1
 8007bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf8:	f000 f86c 	bl	8007cd4 <_read_r>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	bfab      	itete	ge
 8007c00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007c02:	89a3      	ldrhlt	r3, [r4, #12]
 8007c04:	181b      	addge	r3, r3, r0
 8007c06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007c0a:	bfac      	ite	ge
 8007c0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007c0e:	81a3      	strhlt	r3, [r4, #12]
 8007c10:	bd10      	pop	{r4, pc}

08007c12 <__swrite>:
 8007c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c16:	461f      	mov	r7, r3
 8007c18:	898b      	ldrh	r3, [r1, #12]
 8007c1a:	05db      	lsls	r3, r3, #23
 8007c1c:	4605      	mov	r5, r0
 8007c1e:	460c      	mov	r4, r1
 8007c20:	4616      	mov	r6, r2
 8007c22:	d505      	bpl.n	8007c30 <__swrite+0x1e>
 8007c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c28:	2302      	movs	r3, #2
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f000 f840 	bl	8007cb0 <_lseek_r>
 8007c30:	89a3      	ldrh	r3, [r4, #12]
 8007c32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c3a:	81a3      	strh	r3, [r4, #12]
 8007c3c:	4632      	mov	r2, r6
 8007c3e:	463b      	mov	r3, r7
 8007c40:	4628      	mov	r0, r5
 8007c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c46:	f000 b857 	b.w	8007cf8 <_write_r>

08007c4a <__sseek>:
 8007c4a:	b510      	push	{r4, lr}
 8007c4c:	460c      	mov	r4, r1
 8007c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c52:	f000 f82d 	bl	8007cb0 <_lseek_r>
 8007c56:	1c43      	adds	r3, r0, #1
 8007c58:	89a3      	ldrh	r3, [r4, #12]
 8007c5a:	bf15      	itete	ne
 8007c5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c66:	81a3      	strheq	r3, [r4, #12]
 8007c68:	bf18      	it	ne
 8007c6a:	81a3      	strhne	r3, [r4, #12]
 8007c6c:	bd10      	pop	{r4, pc}

08007c6e <__sclose>:
 8007c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c72:	f000 b80d 	b.w	8007c90 <_close_r>

08007c76 <memset>:
 8007c76:	4402      	add	r2, r0
 8007c78:	4603      	mov	r3, r0
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d100      	bne.n	8007c80 <memset+0xa>
 8007c7e:	4770      	bx	lr
 8007c80:	f803 1b01 	strb.w	r1, [r3], #1
 8007c84:	e7f9      	b.n	8007c7a <memset+0x4>
	...

08007c88 <_localeconv_r>:
 8007c88:	4800      	ldr	r0, [pc, #0]	@ (8007c8c <_localeconv_r+0x4>)
 8007c8a:	4770      	bx	lr
 8007c8c:	20000158 	.word	0x20000158

08007c90 <_close_r>:
 8007c90:	b538      	push	{r3, r4, r5, lr}
 8007c92:	4d06      	ldr	r5, [pc, #24]	@ (8007cac <_close_r+0x1c>)
 8007c94:	2300      	movs	r3, #0
 8007c96:	4604      	mov	r4, r0
 8007c98:	4608      	mov	r0, r1
 8007c9a:	602b      	str	r3, [r5, #0]
 8007c9c:	f7f9 fe62 	bl	8001964 <_close>
 8007ca0:	1c43      	adds	r3, r0, #1
 8007ca2:	d102      	bne.n	8007caa <_close_r+0x1a>
 8007ca4:	682b      	ldr	r3, [r5, #0]
 8007ca6:	b103      	cbz	r3, 8007caa <_close_r+0x1a>
 8007ca8:	6023      	str	r3, [r4, #0]
 8007caa:	bd38      	pop	{r3, r4, r5, pc}
 8007cac:	20003d1c 	.word	0x20003d1c

08007cb0 <_lseek_r>:
 8007cb0:	b538      	push	{r3, r4, r5, lr}
 8007cb2:	4d07      	ldr	r5, [pc, #28]	@ (8007cd0 <_lseek_r+0x20>)
 8007cb4:	4604      	mov	r4, r0
 8007cb6:	4608      	mov	r0, r1
 8007cb8:	4611      	mov	r1, r2
 8007cba:	2200      	movs	r2, #0
 8007cbc:	602a      	str	r2, [r5, #0]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	f7f9 fe77 	bl	80019b2 <_lseek>
 8007cc4:	1c43      	adds	r3, r0, #1
 8007cc6:	d102      	bne.n	8007cce <_lseek_r+0x1e>
 8007cc8:	682b      	ldr	r3, [r5, #0]
 8007cca:	b103      	cbz	r3, 8007cce <_lseek_r+0x1e>
 8007ccc:	6023      	str	r3, [r4, #0]
 8007cce:	bd38      	pop	{r3, r4, r5, pc}
 8007cd0:	20003d1c 	.word	0x20003d1c

08007cd4 <_read_r>:
 8007cd4:	b538      	push	{r3, r4, r5, lr}
 8007cd6:	4d07      	ldr	r5, [pc, #28]	@ (8007cf4 <_read_r+0x20>)
 8007cd8:	4604      	mov	r4, r0
 8007cda:	4608      	mov	r0, r1
 8007cdc:	4611      	mov	r1, r2
 8007cde:	2200      	movs	r2, #0
 8007ce0:	602a      	str	r2, [r5, #0]
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	f7f9 fe05 	bl	80018f2 <_read>
 8007ce8:	1c43      	adds	r3, r0, #1
 8007cea:	d102      	bne.n	8007cf2 <_read_r+0x1e>
 8007cec:	682b      	ldr	r3, [r5, #0]
 8007cee:	b103      	cbz	r3, 8007cf2 <_read_r+0x1e>
 8007cf0:	6023      	str	r3, [r4, #0]
 8007cf2:	bd38      	pop	{r3, r4, r5, pc}
 8007cf4:	20003d1c 	.word	0x20003d1c

08007cf8 <_write_r>:
 8007cf8:	b538      	push	{r3, r4, r5, lr}
 8007cfa:	4d07      	ldr	r5, [pc, #28]	@ (8007d18 <_write_r+0x20>)
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	4608      	mov	r0, r1
 8007d00:	4611      	mov	r1, r2
 8007d02:	2200      	movs	r2, #0
 8007d04:	602a      	str	r2, [r5, #0]
 8007d06:	461a      	mov	r2, r3
 8007d08:	f7f9 fe10 	bl	800192c <_write>
 8007d0c:	1c43      	adds	r3, r0, #1
 8007d0e:	d102      	bne.n	8007d16 <_write_r+0x1e>
 8007d10:	682b      	ldr	r3, [r5, #0]
 8007d12:	b103      	cbz	r3, 8007d16 <_write_r+0x1e>
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	bd38      	pop	{r3, r4, r5, pc}
 8007d18:	20003d1c 	.word	0x20003d1c

08007d1c <__errno>:
 8007d1c:	4b01      	ldr	r3, [pc, #4]	@ (8007d24 <__errno+0x8>)
 8007d1e:	6818      	ldr	r0, [r3, #0]
 8007d20:	4770      	bx	lr
 8007d22:	bf00      	nop
 8007d24:	20000018 	.word	0x20000018

08007d28 <__libc_init_array>:
 8007d28:	b570      	push	{r4, r5, r6, lr}
 8007d2a:	4d0d      	ldr	r5, [pc, #52]	@ (8007d60 <__libc_init_array+0x38>)
 8007d2c:	4c0d      	ldr	r4, [pc, #52]	@ (8007d64 <__libc_init_array+0x3c>)
 8007d2e:	1b64      	subs	r4, r4, r5
 8007d30:	10a4      	asrs	r4, r4, #2
 8007d32:	2600      	movs	r6, #0
 8007d34:	42a6      	cmp	r6, r4
 8007d36:	d109      	bne.n	8007d4c <__libc_init_array+0x24>
 8007d38:	4d0b      	ldr	r5, [pc, #44]	@ (8007d68 <__libc_init_array+0x40>)
 8007d3a:	4c0c      	ldr	r4, [pc, #48]	@ (8007d6c <__libc_init_array+0x44>)
 8007d3c:	f002 f88a 	bl	8009e54 <_init>
 8007d40:	1b64      	subs	r4, r4, r5
 8007d42:	10a4      	asrs	r4, r4, #2
 8007d44:	2600      	movs	r6, #0
 8007d46:	42a6      	cmp	r6, r4
 8007d48:	d105      	bne.n	8007d56 <__libc_init_array+0x2e>
 8007d4a:	bd70      	pop	{r4, r5, r6, pc}
 8007d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d50:	4798      	blx	r3
 8007d52:	3601      	adds	r6, #1
 8007d54:	e7ee      	b.n	8007d34 <__libc_init_array+0xc>
 8007d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d5a:	4798      	blx	r3
 8007d5c:	3601      	adds	r6, #1
 8007d5e:	e7f2      	b.n	8007d46 <__libc_init_array+0x1e>
 8007d60:	0801d24c 	.word	0x0801d24c
 8007d64:	0801d24c 	.word	0x0801d24c
 8007d68:	0801d24c 	.word	0x0801d24c
 8007d6c:	0801d250 	.word	0x0801d250

08007d70 <__retarget_lock_init_recursive>:
 8007d70:	4770      	bx	lr

08007d72 <__retarget_lock_acquire_recursive>:
 8007d72:	4770      	bx	lr

08007d74 <__retarget_lock_release_recursive>:
 8007d74:	4770      	bx	lr

08007d76 <quorem>:
 8007d76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7a:	6903      	ldr	r3, [r0, #16]
 8007d7c:	690c      	ldr	r4, [r1, #16]
 8007d7e:	42a3      	cmp	r3, r4
 8007d80:	4607      	mov	r7, r0
 8007d82:	db7e      	blt.n	8007e82 <quorem+0x10c>
 8007d84:	3c01      	subs	r4, #1
 8007d86:	f101 0814 	add.w	r8, r1, #20
 8007d8a:	00a3      	lsls	r3, r4, #2
 8007d8c:	f100 0514 	add.w	r5, r0, #20
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d96:	9301      	str	r3, [sp, #4]
 8007d98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007da0:	3301      	adds	r3, #1
 8007da2:	429a      	cmp	r2, r3
 8007da4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007da8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007dac:	d32e      	bcc.n	8007e0c <quorem+0x96>
 8007dae:	f04f 0a00 	mov.w	sl, #0
 8007db2:	46c4      	mov	ip, r8
 8007db4:	46ae      	mov	lr, r5
 8007db6:	46d3      	mov	fp, sl
 8007db8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007dbc:	b298      	uxth	r0, r3
 8007dbe:	fb06 a000 	mla	r0, r6, r0, sl
 8007dc2:	0c02      	lsrs	r2, r0, #16
 8007dc4:	0c1b      	lsrs	r3, r3, #16
 8007dc6:	fb06 2303 	mla	r3, r6, r3, r2
 8007dca:	f8de 2000 	ldr.w	r2, [lr]
 8007dce:	b280      	uxth	r0, r0
 8007dd0:	b292      	uxth	r2, r2
 8007dd2:	1a12      	subs	r2, r2, r0
 8007dd4:	445a      	add	r2, fp
 8007dd6:	f8de 0000 	ldr.w	r0, [lr]
 8007dda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007de4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007de8:	b292      	uxth	r2, r2
 8007dea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007dee:	45e1      	cmp	r9, ip
 8007df0:	f84e 2b04 	str.w	r2, [lr], #4
 8007df4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007df8:	d2de      	bcs.n	8007db8 <quorem+0x42>
 8007dfa:	9b00      	ldr	r3, [sp, #0]
 8007dfc:	58eb      	ldr	r3, [r5, r3]
 8007dfe:	b92b      	cbnz	r3, 8007e0c <quorem+0x96>
 8007e00:	9b01      	ldr	r3, [sp, #4]
 8007e02:	3b04      	subs	r3, #4
 8007e04:	429d      	cmp	r5, r3
 8007e06:	461a      	mov	r2, r3
 8007e08:	d32f      	bcc.n	8007e6a <quorem+0xf4>
 8007e0a:	613c      	str	r4, [r7, #16]
 8007e0c:	4638      	mov	r0, r7
 8007e0e:	f001 f97d 	bl	800910c <__mcmp>
 8007e12:	2800      	cmp	r0, #0
 8007e14:	db25      	blt.n	8007e62 <quorem+0xec>
 8007e16:	4629      	mov	r1, r5
 8007e18:	2000      	movs	r0, #0
 8007e1a:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e1e:	f8d1 c000 	ldr.w	ip, [r1]
 8007e22:	fa1f fe82 	uxth.w	lr, r2
 8007e26:	fa1f f38c 	uxth.w	r3, ip
 8007e2a:	eba3 030e 	sub.w	r3, r3, lr
 8007e2e:	4403      	add	r3, r0
 8007e30:	0c12      	lsrs	r2, r2, #16
 8007e32:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007e36:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e40:	45c1      	cmp	r9, r8
 8007e42:	f841 3b04 	str.w	r3, [r1], #4
 8007e46:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007e4a:	d2e6      	bcs.n	8007e1a <quorem+0xa4>
 8007e4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e54:	b922      	cbnz	r2, 8007e60 <quorem+0xea>
 8007e56:	3b04      	subs	r3, #4
 8007e58:	429d      	cmp	r5, r3
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	d30b      	bcc.n	8007e76 <quorem+0x100>
 8007e5e:	613c      	str	r4, [r7, #16]
 8007e60:	3601      	adds	r6, #1
 8007e62:	4630      	mov	r0, r6
 8007e64:	b003      	add	sp, #12
 8007e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e6a:	6812      	ldr	r2, [r2, #0]
 8007e6c:	3b04      	subs	r3, #4
 8007e6e:	2a00      	cmp	r2, #0
 8007e70:	d1cb      	bne.n	8007e0a <quorem+0x94>
 8007e72:	3c01      	subs	r4, #1
 8007e74:	e7c6      	b.n	8007e04 <quorem+0x8e>
 8007e76:	6812      	ldr	r2, [r2, #0]
 8007e78:	3b04      	subs	r3, #4
 8007e7a:	2a00      	cmp	r2, #0
 8007e7c:	d1ef      	bne.n	8007e5e <quorem+0xe8>
 8007e7e:	3c01      	subs	r4, #1
 8007e80:	e7ea      	b.n	8007e58 <quorem+0xe2>
 8007e82:	2000      	movs	r0, #0
 8007e84:	e7ee      	b.n	8007e64 <quorem+0xee>
	...

08007e88 <_dtoa_r>:
 8007e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8c:	69c7      	ldr	r7, [r0, #28]
 8007e8e:	b097      	sub	sp, #92	@ 0x5c
 8007e90:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007e94:	ec55 4b10 	vmov	r4, r5, d0
 8007e98:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007e9a:	9107      	str	r1, [sp, #28]
 8007e9c:	4681      	mov	r9, r0
 8007e9e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007ea0:	9311      	str	r3, [sp, #68]	@ 0x44
 8007ea2:	b97f      	cbnz	r7, 8007ec4 <_dtoa_r+0x3c>
 8007ea4:	2010      	movs	r0, #16
 8007ea6:	f000 fe09 	bl	8008abc <malloc>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	f8c9 001c 	str.w	r0, [r9, #28]
 8007eb0:	b920      	cbnz	r0, 8007ebc <_dtoa_r+0x34>
 8007eb2:	4ba9      	ldr	r3, [pc, #676]	@ (8008158 <_dtoa_r+0x2d0>)
 8007eb4:	21ef      	movs	r1, #239	@ 0xef
 8007eb6:	48a9      	ldr	r0, [pc, #676]	@ (800815c <_dtoa_r+0x2d4>)
 8007eb8:	f001 fc6c 	bl	8009794 <__assert_func>
 8007ebc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007ec0:	6007      	str	r7, [r0, #0]
 8007ec2:	60c7      	str	r7, [r0, #12]
 8007ec4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ec8:	6819      	ldr	r1, [r3, #0]
 8007eca:	b159      	cbz	r1, 8007ee4 <_dtoa_r+0x5c>
 8007ecc:	685a      	ldr	r2, [r3, #4]
 8007ece:	604a      	str	r2, [r1, #4]
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	4093      	lsls	r3, r2
 8007ed4:	608b      	str	r3, [r1, #8]
 8007ed6:	4648      	mov	r0, r9
 8007ed8:	f000 fee6 	bl	8008ca8 <_Bfree>
 8007edc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	601a      	str	r2, [r3, #0]
 8007ee4:	1e2b      	subs	r3, r5, #0
 8007ee6:	bfb9      	ittee	lt
 8007ee8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007eec:	9305      	strlt	r3, [sp, #20]
 8007eee:	2300      	movge	r3, #0
 8007ef0:	6033      	strge	r3, [r6, #0]
 8007ef2:	9f05      	ldr	r7, [sp, #20]
 8007ef4:	4b9a      	ldr	r3, [pc, #616]	@ (8008160 <_dtoa_r+0x2d8>)
 8007ef6:	bfbc      	itt	lt
 8007ef8:	2201      	movlt	r2, #1
 8007efa:	6032      	strlt	r2, [r6, #0]
 8007efc:	43bb      	bics	r3, r7
 8007efe:	d112      	bne.n	8007f26 <_dtoa_r+0x9e>
 8007f00:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007f02:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007f06:	6013      	str	r3, [r2, #0]
 8007f08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007f0c:	4323      	orrs	r3, r4
 8007f0e:	f000 855a 	beq.w	80089c6 <_dtoa_r+0xb3e>
 8007f12:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f14:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008174 <_dtoa_r+0x2ec>
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f000 855c 	beq.w	80089d6 <_dtoa_r+0xb4e>
 8007f1e:	f10a 0303 	add.w	r3, sl, #3
 8007f22:	f000 bd56 	b.w	80089d2 <_dtoa_r+0xb4a>
 8007f26:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	ec51 0b17 	vmov	r0, r1, d7
 8007f30:	2300      	movs	r3, #0
 8007f32:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007f36:	f7f8 fdc7 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f3a:	4680      	mov	r8, r0
 8007f3c:	b158      	cbz	r0, 8007f56 <_dtoa_r+0xce>
 8007f3e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007f40:	2301      	movs	r3, #1
 8007f42:	6013      	str	r3, [r2, #0]
 8007f44:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f46:	b113      	cbz	r3, 8007f4e <_dtoa_r+0xc6>
 8007f48:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007f4a:	4b86      	ldr	r3, [pc, #536]	@ (8008164 <_dtoa_r+0x2dc>)
 8007f4c:	6013      	str	r3, [r2, #0]
 8007f4e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008178 <_dtoa_r+0x2f0>
 8007f52:	f000 bd40 	b.w	80089d6 <_dtoa_r+0xb4e>
 8007f56:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007f5a:	aa14      	add	r2, sp, #80	@ 0x50
 8007f5c:	a915      	add	r1, sp, #84	@ 0x54
 8007f5e:	4648      	mov	r0, r9
 8007f60:	f001 f984 	bl	800926c <__d2b>
 8007f64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007f68:	9002      	str	r0, [sp, #8]
 8007f6a:	2e00      	cmp	r6, #0
 8007f6c:	d078      	beq.n	8008060 <_dtoa_r+0x1d8>
 8007f6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f70:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007f7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007f80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007f84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007f88:	4619      	mov	r1, r3
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	4b76      	ldr	r3, [pc, #472]	@ (8008168 <_dtoa_r+0x2e0>)
 8007f8e:	f7f8 f97b 	bl	8000288 <__aeabi_dsub>
 8007f92:	a36b      	add	r3, pc, #428	@ (adr r3, 8008140 <_dtoa_r+0x2b8>)
 8007f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f98:	f7f8 fb2e 	bl	80005f8 <__aeabi_dmul>
 8007f9c:	a36a      	add	r3, pc, #424	@ (adr r3, 8008148 <_dtoa_r+0x2c0>)
 8007f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa2:	f7f8 f973 	bl	800028c <__adddf3>
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	4630      	mov	r0, r6
 8007faa:	460d      	mov	r5, r1
 8007fac:	f7f8 faba 	bl	8000524 <__aeabi_i2d>
 8007fb0:	a367      	add	r3, pc, #412	@ (adr r3, 8008150 <_dtoa_r+0x2c8>)
 8007fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb6:	f7f8 fb1f 	bl	80005f8 <__aeabi_dmul>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	4629      	mov	r1, r5
 8007fc2:	f7f8 f963 	bl	800028c <__adddf3>
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	460d      	mov	r5, r1
 8007fca:	f7f8 fdc5 	bl	8000b58 <__aeabi_d2iz>
 8007fce:	2200      	movs	r2, #0
 8007fd0:	4607      	mov	r7, r0
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	4629      	mov	r1, r5
 8007fd8:	f7f8 fd80 	bl	8000adc <__aeabi_dcmplt>
 8007fdc:	b140      	cbz	r0, 8007ff0 <_dtoa_r+0x168>
 8007fde:	4638      	mov	r0, r7
 8007fe0:	f7f8 faa0 	bl	8000524 <__aeabi_i2d>
 8007fe4:	4622      	mov	r2, r4
 8007fe6:	462b      	mov	r3, r5
 8007fe8:	f7f8 fd6e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fec:	b900      	cbnz	r0, 8007ff0 <_dtoa_r+0x168>
 8007fee:	3f01      	subs	r7, #1
 8007ff0:	2f16      	cmp	r7, #22
 8007ff2:	d852      	bhi.n	800809a <_dtoa_r+0x212>
 8007ff4:	4b5d      	ldr	r3, [pc, #372]	@ (800816c <_dtoa_r+0x2e4>)
 8007ff6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008002:	f7f8 fd6b 	bl	8000adc <__aeabi_dcmplt>
 8008006:	2800      	cmp	r0, #0
 8008008:	d049      	beq.n	800809e <_dtoa_r+0x216>
 800800a:	3f01      	subs	r7, #1
 800800c:	2300      	movs	r3, #0
 800800e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008010:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008012:	1b9b      	subs	r3, r3, r6
 8008014:	1e5a      	subs	r2, r3, #1
 8008016:	bf45      	ittet	mi
 8008018:	f1c3 0301 	rsbmi	r3, r3, #1
 800801c:	9300      	strmi	r3, [sp, #0]
 800801e:	2300      	movpl	r3, #0
 8008020:	2300      	movmi	r3, #0
 8008022:	9206      	str	r2, [sp, #24]
 8008024:	bf54      	ite	pl
 8008026:	9300      	strpl	r3, [sp, #0]
 8008028:	9306      	strmi	r3, [sp, #24]
 800802a:	2f00      	cmp	r7, #0
 800802c:	db39      	blt.n	80080a2 <_dtoa_r+0x21a>
 800802e:	9b06      	ldr	r3, [sp, #24]
 8008030:	970d      	str	r7, [sp, #52]	@ 0x34
 8008032:	443b      	add	r3, r7
 8008034:	9306      	str	r3, [sp, #24]
 8008036:	2300      	movs	r3, #0
 8008038:	9308      	str	r3, [sp, #32]
 800803a:	9b07      	ldr	r3, [sp, #28]
 800803c:	2b09      	cmp	r3, #9
 800803e:	d863      	bhi.n	8008108 <_dtoa_r+0x280>
 8008040:	2b05      	cmp	r3, #5
 8008042:	bfc4      	itt	gt
 8008044:	3b04      	subgt	r3, #4
 8008046:	9307      	strgt	r3, [sp, #28]
 8008048:	9b07      	ldr	r3, [sp, #28]
 800804a:	f1a3 0302 	sub.w	r3, r3, #2
 800804e:	bfcc      	ite	gt
 8008050:	2400      	movgt	r4, #0
 8008052:	2401      	movle	r4, #1
 8008054:	2b03      	cmp	r3, #3
 8008056:	d863      	bhi.n	8008120 <_dtoa_r+0x298>
 8008058:	e8df f003 	tbb	[pc, r3]
 800805c:	2b375452 	.word	0x2b375452
 8008060:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008064:	441e      	add	r6, r3
 8008066:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800806a:	2b20      	cmp	r3, #32
 800806c:	bfc1      	itttt	gt
 800806e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008072:	409f      	lslgt	r7, r3
 8008074:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008078:	fa24 f303 	lsrgt.w	r3, r4, r3
 800807c:	bfd6      	itet	le
 800807e:	f1c3 0320 	rsble	r3, r3, #32
 8008082:	ea47 0003 	orrgt.w	r0, r7, r3
 8008086:	fa04 f003 	lslle.w	r0, r4, r3
 800808a:	f7f8 fa3b 	bl	8000504 <__aeabi_ui2d>
 800808e:	2201      	movs	r2, #1
 8008090:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008094:	3e01      	subs	r6, #1
 8008096:	9212      	str	r2, [sp, #72]	@ 0x48
 8008098:	e776      	b.n	8007f88 <_dtoa_r+0x100>
 800809a:	2301      	movs	r3, #1
 800809c:	e7b7      	b.n	800800e <_dtoa_r+0x186>
 800809e:	9010      	str	r0, [sp, #64]	@ 0x40
 80080a0:	e7b6      	b.n	8008010 <_dtoa_r+0x188>
 80080a2:	9b00      	ldr	r3, [sp, #0]
 80080a4:	1bdb      	subs	r3, r3, r7
 80080a6:	9300      	str	r3, [sp, #0]
 80080a8:	427b      	negs	r3, r7
 80080aa:	9308      	str	r3, [sp, #32]
 80080ac:	2300      	movs	r3, #0
 80080ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80080b0:	e7c3      	b.n	800803a <_dtoa_r+0x1b2>
 80080b2:	2301      	movs	r3, #1
 80080b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80080b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80080b8:	eb07 0b03 	add.w	fp, r7, r3
 80080bc:	f10b 0301 	add.w	r3, fp, #1
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	9303      	str	r3, [sp, #12]
 80080c4:	bfb8      	it	lt
 80080c6:	2301      	movlt	r3, #1
 80080c8:	e006      	b.n	80080d8 <_dtoa_r+0x250>
 80080ca:	2301      	movs	r3, #1
 80080cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80080ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	dd28      	ble.n	8008126 <_dtoa_r+0x29e>
 80080d4:	469b      	mov	fp, r3
 80080d6:	9303      	str	r3, [sp, #12]
 80080d8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80080dc:	2100      	movs	r1, #0
 80080de:	2204      	movs	r2, #4
 80080e0:	f102 0514 	add.w	r5, r2, #20
 80080e4:	429d      	cmp	r5, r3
 80080e6:	d926      	bls.n	8008136 <_dtoa_r+0x2ae>
 80080e8:	6041      	str	r1, [r0, #4]
 80080ea:	4648      	mov	r0, r9
 80080ec:	f000 fd9c 	bl	8008c28 <_Balloc>
 80080f0:	4682      	mov	sl, r0
 80080f2:	2800      	cmp	r0, #0
 80080f4:	d142      	bne.n	800817c <_dtoa_r+0x2f4>
 80080f6:	4b1e      	ldr	r3, [pc, #120]	@ (8008170 <_dtoa_r+0x2e8>)
 80080f8:	4602      	mov	r2, r0
 80080fa:	f240 11af 	movw	r1, #431	@ 0x1af
 80080fe:	e6da      	b.n	8007eb6 <_dtoa_r+0x2e>
 8008100:	2300      	movs	r3, #0
 8008102:	e7e3      	b.n	80080cc <_dtoa_r+0x244>
 8008104:	2300      	movs	r3, #0
 8008106:	e7d5      	b.n	80080b4 <_dtoa_r+0x22c>
 8008108:	2401      	movs	r4, #1
 800810a:	2300      	movs	r3, #0
 800810c:	9307      	str	r3, [sp, #28]
 800810e:	9409      	str	r4, [sp, #36]	@ 0x24
 8008110:	f04f 3bff 	mov.w	fp, #4294967295
 8008114:	2200      	movs	r2, #0
 8008116:	f8cd b00c 	str.w	fp, [sp, #12]
 800811a:	2312      	movs	r3, #18
 800811c:	920c      	str	r2, [sp, #48]	@ 0x30
 800811e:	e7db      	b.n	80080d8 <_dtoa_r+0x250>
 8008120:	2301      	movs	r3, #1
 8008122:	9309      	str	r3, [sp, #36]	@ 0x24
 8008124:	e7f4      	b.n	8008110 <_dtoa_r+0x288>
 8008126:	f04f 0b01 	mov.w	fp, #1
 800812a:	f8cd b00c 	str.w	fp, [sp, #12]
 800812e:	465b      	mov	r3, fp
 8008130:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008134:	e7d0      	b.n	80080d8 <_dtoa_r+0x250>
 8008136:	3101      	adds	r1, #1
 8008138:	0052      	lsls	r2, r2, #1
 800813a:	e7d1      	b.n	80080e0 <_dtoa_r+0x258>
 800813c:	f3af 8000 	nop.w
 8008140:	636f4361 	.word	0x636f4361
 8008144:	3fd287a7 	.word	0x3fd287a7
 8008148:	8b60c8b3 	.word	0x8b60c8b3
 800814c:	3fc68a28 	.word	0x3fc68a28
 8008150:	509f79fb 	.word	0x509f79fb
 8008154:	3fd34413 	.word	0x3fd34413
 8008158:	0801cf11 	.word	0x0801cf11
 800815c:	0801cf28 	.word	0x0801cf28
 8008160:	7ff00000 	.word	0x7ff00000
 8008164:	0801cee1 	.word	0x0801cee1
 8008168:	3ff80000 	.word	0x3ff80000
 800816c:	0801d078 	.word	0x0801d078
 8008170:	0801cf80 	.word	0x0801cf80
 8008174:	0801cf0d 	.word	0x0801cf0d
 8008178:	0801cee0 	.word	0x0801cee0
 800817c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008180:	6018      	str	r0, [r3, #0]
 8008182:	9b03      	ldr	r3, [sp, #12]
 8008184:	2b0e      	cmp	r3, #14
 8008186:	f200 80a1 	bhi.w	80082cc <_dtoa_r+0x444>
 800818a:	2c00      	cmp	r4, #0
 800818c:	f000 809e 	beq.w	80082cc <_dtoa_r+0x444>
 8008190:	2f00      	cmp	r7, #0
 8008192:	dd33      	ble.n	80081fc <_dtoa_r+0x374>
 8008194:	4b9c      	ldr	r3, [pc, #624]	@ (8008408 <_dtoa_r+0x580>)
 8008196:	f007 020f 	and.w	r2, r7, #15
 800819a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800819e:	ed93 7b00 	vldr	d7, [r3]
 80081a2:	05f8      	lsls	r0, r7, #23
 80081a4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80081a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80081ac:	d516      	bpl.n	80081dc <_dtoa_r+0x354>
 80081ae:	4b97      	ldr	r3, [pc, #604]	@ (800840c <_dtoa_r+0x584>)
 80081b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80081b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081b8:	f7f8 fb48 	bl	800084c <__aeabi_ddiv>
 80081bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081c0:	f004 040f 	and.w	r4, r4, #15
 80081c4:	2603      	movs	r6, #3
 80081c6:	4d91      	ldr	r5, [pc, #580]	@ (800840c <_dtoa_r+0x584>)
 80081c8:	b954      	cbnz	r4, 80081e0 <_dtoa_r+0x358>
 80081ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80081ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081d2:	f7f8 fb3b 	bl	800084c <__aeabi_ddiv>
 80081d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081da:	e028      	b.n	800822e <_dtoa_r+0x3a6>
 80081dc:	2602      	movs	r6, #2
 80081de:	e7f2      	b.n	80081c6 <_dtoa_r+0x33e>
 80081e0:	07e1      	lsls	r1, r4, #31
 80081e2:	d508      	bpl.n	80081f6 <_dtoa_r+0x36e>
 80081e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80081e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80081ec:	f7f8 fa04 	bl	80005f8 <__aeabi_dmul>
 80081f0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80081f4:	3601      	adds	r6, #1
 80081f6:	1064      	asrs	r4, r4, #1
 80081f8:	3508      	adds	r5, #8
 80081fa:	e7e5      	b.n	80081c8 <_dtoa_r+0x340>
 80081fc:	f000 80af 	beq.w	800835e <_dtoa_r+0x4d6>
 8008200:	427c      	negs	r4, r7
 8008202:	4b81      	ldr	r3, [pc, #516]	@ (8008408 <_dtoa_r+0x580>)
 8008204:	4d81      	ldr	r5, [pc, #516]	@ (800840c <_dtoa_r+0x584>)
 8008206:	f004 020f 	and.w	r2, r4, #15
 800820a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800820e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008212:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008216:	f7f8 f9ef 	bl	80005f8 <__aeabi_dmul>
 800821a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800821e:	1124      	asrs	r4, r4, #4
 8008220:	2300      	movs	r3, #0
 8008222:	2602      	movs	r6, #2
 8008224:	2c00      	cmp	r4, #0
 8008226:	f040 808f 	bne.w	8008348 <_dtoa_r+0x4c0>
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1d3      	bne.n	80081d6 <_dtoa_r+0x34e>
 800822e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008230:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008234:	2b00      	cmp	r3, #0
 8008236:	f000 8094 	beq.w	8008362 <_dtoa_r+0x4da>
 800823a:	4b75      	ldr	r3, [pc, #468]	@ (8008410 <_dtoa_r+0x588>)
 800823c:	2200      	movs	r2, #0
 800823e:	4620      	mov	r0, r4
 8008240:	4629      	mov	r1, r5
 8008242:	f7f8 fc4b 	bl	8000adc <__aeabi_dcmplt>
 8008246:	2800      	cmp	r0, #0
 8008248:	f000 808b 	beq.w	8008362 <_dtoa_r+0x4da>
 800824c:	9b03      	ldr	r3, [sp, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	f000 8087 	beq.w	8008362 <_dtoa_r+0x4da>
 8008254:	f1bb 0f00 	cmp.w	fp, #0
 8008258:	dd34      	ble.n	80082c4 <_dtoa_r+0x43c>
 800825a:	4620      	mov	r0, r4
 800825c:	4b6d      	ldr	r3, [pc, #436]	@ (8008414 <_dtoa_r+0x58c>)
 800825e:	2200      	movs	r2, #0
 8008260:	4629      	mov	r1, r5
 8008262:	f7f8 f9c9 	bl	80005f8 <__aeabi_dmul>
 8008266:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800826a:	f107 38ff 	add.w	r8, r7, #4294967295
 800826e:	3601      	adds	r6, #1
 8008270:	465c      	mov	r4, fp
 8008272:	4630      	mov	r0, r6
 8008274:	f7f8 f956 	bl	8000524 <__aeabi_i2d>
 8008278:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800827c:	f7f8 f9bc 	bl	80005f8 <__aeabi_dmul>
 8008280:	4b65      	ldr	r3, [pc, #404]	@ (8008418 <_dtoa_r+0x590>)
 8008282:	2200      	movs	r2, #0
 8008284:	f7f8 f802 	bl	800028c <__adddf3>
 8008288:	4605      	mov	r5, r0
 800828a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800828e:	2c00      	cmp	r4, #0
 8008290:	d16a      	bne.n	8008368 <_dtoa_r+0x4e0>
 8008292:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008296:	4b61      	ldr	r3, [pc, #388]	@ (800841c <_dtoa_r+0x594>)
 8008298:	2200      	movs	r2, #0
 800829a:	f7f7 fff5 	bl	8000288 <__aeabi_dsub>
 800829e:	4602      	mov	r2, r0
 80082a0:	460b      	mov	r3, r1
 80082a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80082a6:	462a      	mov	r2, r5
 80082a8:	4633      	mov	r3, r6
 80082aa:	f7f8 fc35 	bl	8000b18 <__aeabi_dcmpgt>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	f040 8298 	bne.w	80087e4 <_dtoa_r+0x95c>
 80082b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082b8:	462a      	mov	r2, r5
 80082ba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80082be:	f7f8 fc0d 	bl	8000adc <__aeabi_dcmplt>
 80082c2:	bb38      	cbnz	r0, 8008314 <_dtoa_r+0x48c>
 80082c4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80082c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80082cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f2c0 8157 	blt.w	8008582 <_dtoa_r+0x6fa>
 80082d4:	2f0e      	cmp	r7, #14
 80082d6:	f300 8154 	bgt.w	8008582 <_dtoa_r+0x6fa>
 80082da:	4b4b      	ldr	r3, [pc, #300]	@ (8008408 <_dtoa_r+0x580>)
 80082dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80082e0:	ed93 7b00 	vldr	d7, [r3]
 80082e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	ed8d 7b00 	vstr	d7, [sp]
 80082ec:	f280 80e5 	bge.w	80084ba <_dtoa_r+0x632>
 80082f0:	9b03      	ldr	r3, [sp, #12]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f300 80e1 	bgt.w	80084ba <_dtoa_r+0x632>
 80082f8:	d10c      	bne.n	8008314 <_dtoa_r+0x48c>
 80082fa:	4b48      	ldr	r3, [pc, #288]	@ (800841c <_dtoa_r+0x594>)
 80082fc:	2200      	movs	r2, #0
 80082fe:	ec51 0b17 	vmov	r0, r1, d7
 8008302:	f7f8 f979 	bl	80005f8 <__aeabi_dmul>
 8008306:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800830a:	f7f8 fbfb 	bl	8000b04 <__aeabi_dcmpge>
 800830e:	2800      	cmp	r0, #0
 8008310:	f000 8266 	beq.w	80087e0 <_dtoa_r+0x958>
 8008314:	2400      	movs	r4, #0
 8008316:	4625      	mov	r5, r4
 8008318:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800831a:	4656      	mov	r6, sl
 800831c:	ea6f 0803 	mvn.w	r8, r3
 8008320:	2700      	movs	r7, #0
 8008322:	4621      	mov	r1, r4
 8008324:	4648      	mov	r0, r9
 8008326:	f000 fcbf 	bl	8008ca8 <_Bfree>
 800832a:	2d00      	cmp	r5, #0
 800832c:	f000 80bd 	beq.w	80084aa <_dtoa_r+0x622>
 8008330:	b12f      	cbz	r7, 800833e <_dtoa_r+0x4b6>
 8008332:	42af      	cmp	r7, r5
 8008334:	d003      	beq.n	800833e <_dtoa_r+0x4b6>
 8008336:	4639      	mov	r1, r7
 8008338:	4648      	mov	r0, r9
 800833a:	f000 fcb5 	bl	8008ca8 <_Bfree>
 800833e:	4629      	mov	r1, r5
 8008340:	4648      	mov	r0, r9
 8008342:	f000 fcb1 	bl	8008ca8 <_Bfree>
 8008346:	e0b0      	b.n	80084aa <_dtoa_r+0x622>
 8008348:	07e2      	lsls	r2, r4, #31
 800834a:	d505      	bpl.n	8008358 <_dtoa_r+0x4d0>
 800834c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008350:	f7f8 f952 	bl	80005f8 <__aeabi_dmul>
 8008354:	3601      	adds	r6, #1
 8008356:	2301      	movs	r3, #1
 8008358:	1064      	asrs	r4, r4, #1
 800835a:	3508      	adds	r5, #8
 800835c:	e762      	b.n	8008224 <_dtoa_r+0x39c>
 800835e:	2602      	movs	r6, #2
 8008360:	e765      	b.n	800822e <_dtoa_r+0x3a6>
 8008362:	9c03      	ldr	r4, [sp, #12]
 8008364:	46b8      	mov	r8, r7
 8008366:	e784      	b.n	8008272 <_dtoa_r+0x3ea>
 8008368:	4b27      	ldr	r3, [pc, #156]	@ (8008408 <_dtoa_r+0x580>)
 800836a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800836c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008370:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008374:	4454      	add	r4, sl
 8008376:	2900      	cmp	r1, #0
 8008378:	d054      	beq.n	8008424 <_dtoa_r+0x59c>
 800837a:	4929      	ldr	r1, [pc, #164]	@ (8008420 <_dtoa_r+0x598>)
 800837c:	2000      	movs	r0, #0
 800837e:	f7f8 fa65 	bl	800084c <__aeabi_ddiv>
 8008382:	4633      	mov	r3, r6
 8008384:	462a      	mov	r2, r5
 8008386:	f7f7 ff7f 	bl	8000288 <__aeabi_dsub>
 800838a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800838e:	4656      	mov	r6, sl
 8008390:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008394:	f7f8 fbe0 	bl	8000b58 <__aeabi_d2iz>
 8008398:	4605      	mov	r5, r0
 800839a:	f7f8 f8c3 	bl	8000524 <__aeabi_i2d>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083a6:	f7f7 ff6f 	bl	8000288 <__aeabi_dsub>
 80083aa:	3530      	adds	r5, #48	@ 0x30
 80083ac:	4602      	mov	r2, r0
 80083ae:	460b      	mov	r3, r1
 80083b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80083b4:	f806 5b01 	strb.w	r5, [r6], #1
 80083b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80083bc:	f7f8 fb8e 	bl	8000adc <__aeabi_dcmplt>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	d172      	bne.n	80084aa <_dtoa_r+0x622>
 80083c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083c8:	4911      	ldr	r1, [pc, #68]	@ (8008410 <_dtoa_r+0x588>)
 80083ca:	2000      	movs	r0, #0
 80083cc:	f7f7 ff5c 	bl	8000288 <__aeabi_dsub>
 80083d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80083d4:	f7f8 fb82 	bl	8000adc <__aeabi_dcmplt>
 80083d8:	2800      	cmp	r0, #0
 80083da:	f040 80b4 	bne.w	8008546 <_dtoa_r+0x6be>
 80083de:	42a6      	cmp	r6, r4
 80083e0:	f43f af70 	beq.w	80082c4 <_dtoa_r+0x43c>
 80083e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80083e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008414 <_dtoa_r+0x58c>)
 80083ea:	2200      	movs	r2, #0
 80083ec:	f7f8 f904 	bl	80005f8 <__aeabi_dmul>
 80083f0:	4b08      	ldr	r3, [pc, #32]	@ (8008414 <_dtoa_r+0x58c>)
 80083f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80083f6:	2200      	movs	r2, #0
 80083f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083fc:	f7f8 f8fc 	bl	80005f8 <__aeabi_dmul>
 8008400:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008404:	e7c4      	b.n	8008390 <_dtoa_r+0x508>
 8008406:	bf00      	nop
 8008408:	0801d078 	.word	0x0801d078
 800840c:	0801d050 	.word	0x0801d050
 8008410:	3ff00000 	.word	0x3ff00000
 8008414:	40240000 	.word	0x40240000
 8008418:	401c0000 	.word	0x401c0000
 800841c:	40140000 	.word	0x40140000
 8008420:	3fe00000 	.word	0x3fe00000
 8008424:	4631      	mov	r1, r6
 8008426:	4628      	mov	r0, r5
 8008428:	f7f8 f8e6 	bl	80005f8 <__aeabi_dmul>
 800842c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008430:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008432:	4656      	mov	r6, sl
 8008434:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008438:	f7f8 fb8e 	bl	8000b58 <__aeabi_d2iz>
 800843c:	4605      	mov	r5, r0
 800843e:	f7f8 f871 	bl	8000524 <__aeabi_i2d>
 8008442:	4602      	mov	r2, r0
 8008444:	460b      	mov	r3, r1
 8008446:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800844a:	f7f7 ff1d 	bl	8000288 <__aeabi_dsub>
 800844e:	3530      	adds	r5, #48	@ 0x30
 8008450:	f806 5b01 	strb.w	r5, [r6], #1
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	42a6      	cmp	r6, r4
 800845a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800845e:	f04f 0200 	mov.w	r2, #0
 8008462:	d124      	bne.n	80084ae <_dtoa_r+0x626>
 8008464:	4baf      	ldr	r3, [pc, #700]	@ (8008724 <_dtoa_r+0x89c>)
 8008466:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800846a:	f7f7 ff0f 	bl	800028c <__adddf3>
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008476:	f7f8 fb4f 	bl	8000b18 <__aeabi_dcmpgt>
 800847a:	2800      	cmp	r0, #0
 800847c:	d163      	bne.n	8008546 <_dtoa_r+0x6be>
 800847e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008482:	49a8      	ldr	r1, [pc, #672]	@ (8008724 <_dtoa_r+0x89c>)
 8008484:	2000      	movs	r0, #0
 8008486:	f7f7 feff 	bl	8000288 <__aeabi_dsub>
 800848a:	4602      	mov	r2, r0
 800848c:	460b      	mov	r3, r1
 800848e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008492:	f7f8 fb23 	bl	8000adc <__aeabi_dcmplt>
 8008496:	2800      	cmp	r0, #0
 8008498:	f43f af14 	beq.w	80082c4 <_dtoa_r+0x43c>
 800849c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800849e:	1e73      	subs	r3, r6, #1
 80084a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80084a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80084a6:	2b30      	cmp	r3, #48	@ 0x30
 80084a8:	d0f8      	beq.n	800849c <_dtoa_r+0x614>
 80084aa:	4647      	mov	r7, r8
 80084ac:	e03b      	b.n	8008526 <_dtoa_r+0x69e>
 80084ae:	4b9e      	ldr	r3, [pc, #632]	@ (8008728 <_dtoa_r+0x8a0>)
 80084b0:	f7f8 f8a2 	bl	80005f8 <__aeabi_dmul>
 80084b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084b8:	e7bc      	b.n	8008434 <_dtoa_r+0x5ac>
 80084ba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80084be:	4656      	mov	r6, sl
 80084c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084c4:	4620      	mov	r0, r4
 80084c6:	4629      	mov	r1, r5
 80084c8:	f7f8 f9c0 	bl	800084c <__aeabi_ddiv>
 80084cc:	f7f8 fb44 	bl	8000b58 <__aeabi_d2iz>
 80084d0:	4680      	mov	r8, r0
 80084d2:	f7f8 f827 	bl	8000524 <__aeabi_i2d>
 80084d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084da:	f7f8 f88d 	bl	80005f8 <__aeabi_dmul>
 80084de:	4602      	mov	r2, r0
 80084e0:	460b      	mov	r3, r1
 80084e2:	4620      	mov	r0, r4
 80084e4:	4629      	mov	r1, r5
 80084e6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80084ea:	f7f7 fecd 	bl	8000288 <__aeabi_dsub>
 80084ee:	f806 4b01 	strb.w	r4, [r6], #1
 80084f2:	9d03      	ldr	r5, [sp, #12]
 80084f4:	eba6 040a 	sub.w	r4, r6, sl
 80084f8:	42a5      	cmp	r5, r4
 80084fa:	4602      	mov	r2, r0
 80084fc:	460b      	mov	r3, r1
 80084fe:	d133      	bne.n	8008568 <_dtoa_r+0x6e0>
 8008500:	f7f7 fec4 	bl	800028c <__adddf3>
 8008504:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008508:	4604      	mov	r4, r0
 800850a:	460d      	mov	r5, r1
 800850c:	f7f8 fb04 	bl	8000b18 <__aeabi_dcmpgt>
 8008510:	b9c0      	cbnz	r0, 8008544 <_dtoa_r+0x6bc>
 8008512:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008516:	4620      	mov	r0, r4
 8008518:	4629      	mov	r1, r5
 800851a:	f7f8 fad5 	bl	8000ac8 <__aeabi_dcmpeq>
 800851e:	b110      	cbz	r0, 8008526 <_dtoa_r+0x69e>
 8008520:	f018 0f01 	tst.w	r8, #1
 8008524:	d10e      	bne.n	8008544 <_dtoa_r+0x6bc>
 8008526:	9902      	ldr	r1, [sp, #8]
 8008528:	4648      	mov	r0, r9
 800852a:	f000 fbbd 	bl	8008ca8 <_Bfree>
 800852e:	2300      	movs	r3, #0
 8008530:	7033      	strb	r3, [r6, #0]
 8008532:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008534:	3701      	adds	r7, #1
 8008536:	601f      	str	r7, [r3, #0]
 8008538:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800853a:	2b00      	cmp	r3, #0
 800853c:	f000 824b 	beq.w	80089d6 <_dtoa_r+0xb4e>
 8008540:	601e      	str	r6, [r3, #0]
 8008542:	e248      	b.n	80089d6 <_dtoa_r+0xb4e>
 8008544:	46b8      	mov	r8, r7
 8008546:	4633      	mov	r3, r6
 8008548:	461e      	mov	r6, r3
 800854a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800854e:	2a39      	cmp	r2, #57	@ 0x39
 8008550:	d106      	bne.n	8008560 <_dtoa_r+0x6d8>
 8008552:	459a      	cmp	sl, r3
 8008554:	d1f8      	bne.n	8008548 <_dtoa_r+0x6c0>
 8008556:	2230      	movs	r2, #48	@ 0x30
 8008558:	f108 0801 	add.w	r8, r8, #1
 800855c:	f88a 2000 	strb.w	r2, [sl]
 8008560:	781a      	ldrb	r2, [r3, #0]
 8008562:	3201      	adds	r2, #1
 8008564:	701a      	strb	r2, [r3, #0]
 8008566:	e7a0      	b.n	80084aa <_dtoa_r+0x622>
 8008568:	4b6f      	ldr	r3, [pc, #444]	@ (8008728 <_dtoa_r+0x8a0>)
 800856a:	2200      	movs	r2, #0
 800856c:	f7f8 f844 	bl	80005f8 <__aeabi_dmul>
 8008570:	2200      	movs	r2, #0
 8008572:	2300      	movs	r3, #0
 8008574:	4604      	mov	r4, r0
 8008576:	460d      	mov	r5, r1
 8008578:	f7f8 faa6 	bl	8000ac8 <__aeabi_dcmpeq>
 800857c:	2800      	cmp	r0, #0
 800857e:	d09f      	beq.n	80084c0 <_dtoa_r+0x638>
 8008580:	e7d1      	b.n	8008526 <_dtoa_r+0x69e>
 8008582:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008584:	2a00      	cmp	r2, #0
 8008586:	f000 80ea 	beq.w	800875e <_dtoa_r+0x8d6>
 800858a:	9a07      	ldr	r2, [sp, #28]
 800858c:	2a01      	cmp	r2, #1
 800858e:	f300 80cd 	bgt.w	800872c <_dtoa_r+0x8a4>
 8008592:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008594:	2a00      	cmp	r2, #0
 8008596:	f000 80c1 	beq.w	800871c <_dtoa_r+0x894>
 800859a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800859e:	9c08      	ldr	r4, [sp, #32]
 80085a0:	9e00      	ldr	r6, [sp, #0]
 80085a2:	9a00      	ldr	r2, [sp, #0]
 80085a4:	441a      	add	r2, r3
 80085a6:	9200      	str	r2, [sp, #0]
 80085a8:	9a06      	ldr	r2, [sp, #24]
 80085aa:	2101      	movs	r1, #1
 80085ac:	441a      	add	r2, r3
 80085ae:	4648      	mov	r0, r9
 80085b0:	9206      	str	r2, [sp, #24]
 80085b2:	f000 fc2d 	bl	8008e10 <__i2b>
 80085b6:	4605      	mov	r5, r0
 80085b8:	b166      	cbz	r6, 80085d4 <_dtoa_r+0x74c>
 80085ba:	9b06      	ldr	r3, [sp, #24]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	dd09      	ble.n	80085d4 <_dtoa_r+0x74c>
 80085c0:	42b3      	cmp	r3, r6
 80085c2:	9a00      	ldr	r2, [sp, #0]
 80085c4:	bfa8      	it	ge
 80085c6:	4633      	movge	r3, r6
 80085c8:	1ad2      	subs	r2, r2, r3
 80085ca:	9200      	str	r2, [sp, #0]
 80085cc:	9a06      	ldr	r2, [sp, #24]
 80085ce:	1af6      	subs	r6, r6, r3
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	9306      	str	r3, [sp, #24]
 80085d4:	9b08      	ldr	r3, [sp, #32]
 80085d6:	b30b      	cbz	r3, 800861c <_dtoa_r+0x794>
 80085d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 80c6 	beq.w	800876c <_dtoa_r+0x8e4>
 80085e0:	2c00      	cmp	r4, #0
 80085e2:	f000 80c0 	beq.w	8008766 <_dtoa_r+0x8de>
 80085e6:	4629      	mov	r1, r5
 80085e8:	4622      	mov	r2, r4
 80085ea:	4648      	mov	r0, r9
 80085ec:	f000 fcc8 	bl	8008f80 <__pow5mult>
 80085f0:	9a02      	ldr	r2, [sp, #8]
 80085f2:	4601      	mov	r1, r0
 80085f4:	4605      	mov	r5, r0
 80085f6:	4648      	mov	r0, r9
 80085f8:	f000 fc20 	bl	8008e3c <__multiply>
 80085fc:	9902      	ldr	r1, [sp, #8]
 80085fe:	4680      	mov	r8, r0
 8008600:	4648      	mov	r0, r9
 8008602:	f000 fb51 	bl	8008ca8 <_Bfree>
 8008606:	9b08      	ldr	r3, [sp, #32]
 8008608:	1b1b      	subs	r3, r3, r4
 800860a:	9308      	str	r3, [sp, #32]
 800860c:	f000 80b1 	beq.w	8008772 <_dtoa_r+0x8ea>
 8008610:	9a08      	ldr	r2, [sp, #32]
 8008612:	4641      	mov	r1, r8
 8008614:	4648      	mov	r0, r9
 8008616:	f000 fcb3 	bl	8008f80 <__pow5mult>
 800861a:	9002      	str	r0, [sp, #8]
 800861c:	2101      	movs	r1, #1
 800861e:	4648      	mov	r0, r9
 8008620:	f000 fbf6 	bl	8008e10 <__i2b>
 8008624:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008626:	4604      	mov	r4, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 81d8 	beq.w	80089de <_dtoa_r+0xb56>
 800862e:	461a      	mov	r2, r3
 8008630:	4601      	mov	r1, r0
 8008632:	4648      	mov	r0, r9
 8008634:	f000 fca4 	bl	8008f80 <__pow5mult>
 8008638:	9b07      	ldr	r3, [sp, #28]
 800863a:	2b01      	cmp	r3, #1
 800863c:	4604      	mov	r4, r0
 800863e:	f300 809f 	bgt.w	8008780 <_dtoa_r+0x8f8>
 8008642:	9b04      	ldr	r3, [sp, #16]
 8008644:	2b00      	cmp	r3, #0
 8008646:	f040 8097 	bne.w	8008778 <_dtoa_r+0x8f0>
 800864a:	9b05      	ldr	r3, [sp, #20]
 800864c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008650:	2b00      	cmp	r3, #0
 8008652:	f040 8093 	bne.w	800877c <_dtoa_r+0x8f4>
 8008656:	9b05      	ldr	r3, [sp, #20]
 8008658:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800865c:	0d1b      	lsrs	r3, r3, #20
 800865e:	051b      	lsls	r3, r3, #20
 8008660:	b133      	cbz	r3, 8008670 <_dtoa_r+0x7e8>
 8008662:	9b00      	ldr	r3, [sp, #0]
 8008664:	3301      	adds	r3, #1
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	9b06      	ldr	r3, [sp, #24]
 800866a:	3301      	adds	r3, #1
 800866c:	9306      	str	r3, [sp, #24]
 800866e:	2301      	movs	r3, #1
 8008670:	9308      	str	r3, [sp, #32]
 8008672:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008674:	2b00      	cmp	r3, #0
 8008676:	f000 81b8 	beq.w	80089ea <_dtoa_r+0xb62>
 800867a:	6923      	ldr	r3, [r4, #16]
 800867c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008680:	6918      	ldr	r0, [r3, #16]
 8008682:	f000 fb79 	bl	8008d78 <__hi0bits>
 8008686:	f1c0 0020 	rsb	r0, r0, #32
 800868a:	9b06      	ldr	r3, [sp, #24]
 800868c:	4418      	add	r0, r3
 800868e:	f010 001f 	ands.w	r0, r0, #31
 8008692:	f000 8082 	beq.w	800879a <_dtoa_r+0x912>
 8008696:	f1c0 0320 	rsb	r3, r0, #32
 800869a:	2b04      	cmp	r3, #4
 800869c:	dd73      	ble.n	8008786 <_dtoa_r+0x8fe>
 800869e:	9b00      	ldr	r3, [sp, #0]
 80086a0:	f1c0 001c 	rsb	r0, r0, #28
 80086a4:	4403      	add	r3, r0
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	9b06      	ldr	r3, [sp, #24]
 80086aa:	4403      	add	r3, r0
 80086ac:	4406      	add	r6, r0
 80086ae:	9306      	str	r3, [sp, #24]
 80086b0:	9b00      	ldr	r3, [sp, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	dd05      	ble.n	80086c2 <_dtoa_r+0x83a>
 80086b6:	9902      	ldr	r1, [sp, #8]
 80086b8:	461a      	mov	r2, r3
 80086ba:	4648      	mov	r0, r9
 80086bc:	f000 fcba 	bl	8009034 <__lshift>
 80086c0:	9002      	str	r0, [sp, #8]
 80086c2:	9b06      	ldr	r3, [sp, #24]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	dd05      	ble.n	80086d4 <_dtoa_r+0x84c>
 80086c8:	4621      	mov	r1, r4
 80086ca:	461a      	mov	r2, r3
 80086cc:	4648      	mov	r0, r9
 80086ce:	f000 fcb1 	bl	8009034 <__lshift>
 80086d2:	4604      	mov	r4, r0
 80086d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d061      	beq.n	800879e <_dtoa_r+0x916>
 80086da:	9802      	ldr	r0, [sp, #8]
 80086dc:	4621      	mov	r1, r4
 80086de:	f000 fd15 	bl	800910c <__mcmp>
 80086e2:	2800      	cmp	r0, #0
 80086e4:	da5b      	bge.n	800879e <_dtoa_r+0x916>
 80086e6:	2300      	movs	r3, #0
 80086e8:	9902      	ldr	r1, [sp, #8]
 80086ea:	220a      	movs	r2, #10
 80086ec:	4648      	mov	r0, r9
 80086ee:	f000 fafd 	bl	8008cec <__multadd>
 80086f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086f4:	9002      	str	r0, [sp, #8]
 80086f6:	f107 38ff 	add.w	r8, r7, #4294967295
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	f000 8177 	beq.w	80089ee <_dtoa_r+0xb66>
 8008700:	4629      	mov	r1, r5
 8008702:	2300      	movs	r3, #0
 8008704:	220a      	movs	r2, #10
 8008706:	4648      	mov	r0, r9
 8008708:	f000 faf0 	bl	8008cec <__multadd>
 800870c:	f1bb 0f00 	cmp.w	fp, #0
 8008710:	4605      	mov	r5, r0
 8008712:	dc6f      	bgt.n	80087f4 <_dtoa_r+0x96c>
 8008714:	9b07      	ldr	r3, [sp, #28]
 8008716:	2b02      	cmp	r3, #2
 8008718:	dc49      	bgt.n	80087ae <_dtoa_r+0x926>
 800871a:	e06b      	b.n	80087f4 <_dtoa_r+0x96c>
 800871c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800871e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008722:	e73c      	b.n	800859e <_dtoa_r+0x716>
 8008724:	3fe00000 	.word	0x3fe00000
 8008728:	40240000 	.word	0x40240000
 800872c:	9b03      	ldr	r3, [sp, #12]
 800872e:	1e5c      	subs	r4, r3, #1
 8008730:	9b08      	ldr	r3, [sp, #32]
 8008732:	42a3      	cmp	r3, r4
 8008734:	db09      	blt.n	800874a <_dtoa_r+0x8c2>
 8008736:	1b1c      	subs	r4, r3, r4
 8008738:	9b03      	ldr	r3, [sp, #12]
 800873a:	2b00      	cmp	r3, #0
 800873c:	f6bf af30 	bge.w	80085a0 <_dtoa_r+0x718>
 8008740:	9b00      	ldr	r3, [sp, #0]
 8008742:	9a03      	ldr	r2, [sp, #12]
 8008744:	1a9e      	subs	r6, r3, r2
 8008746:	2300      	movs	r3, #0
 8008748:	e72b      	b.n	80085a2 <_dtoa_r+0x71a>
 800874a:	9b08      	ldr	r3, [sp, #32]
 800874c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800874e:	9408      	str	r4, [sp, #32]
 8008750:	1ae3      	subs	r3, r4, r3
 8008752:	441a      	add	r2, r3
 8008754:	9e00      	ldr	r6, [sp, #0]
 8008756:	9b03      	ldr	r3, [sp, #12]
 8008758:	920d      	str	r2, [sp, #52]	@ 0x34
 800875a:	2400      	movs	r4, #0
 800875c:	e721      	b.n	80085a2 <_dtoa_r+0x71a>
 800875e:	9c08      	ldr	r4, [sp, #32]
 8008760:	9e00      	ldr	r6, [sp, #0]
 8008762:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008764:	e728      	b.n	80085b8 <_dtoa_r+0x730>
 8008766:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800876a:	e751      	b.n	8008610 <_dtoa_r+0x788>
 800876c:	9a08      	ldr	r2, [sp, #32]
 800876e:	9902      	ldr	r1, [sp, #8]
 8008770:	e750      	b.n	8008614 <_dtoa_r+0x78c>
 8008772:	f8cd 8008 	str.w	r8, [sp, #8]
 8008776:	e751      	b.n	800861c <_dtoa_r+0x794>
 8008778:	2300      	movs	r3, #0
 800877a:	e779      	b.n	8008670 <_dtoa_r+0x7e8>
 800877c:	9b04      	ldr	r3, [sp, #16]
 800877e:	e777      	b.n	8008670 <_dtoa_r+0x7e8>
 8008780:	2300      	movs	r3, #0
 8008782:	9308      	str	r3, [sp, #32]
 8008784:	e779      	b.n	800867a <_dtoa_r+0x7f2>
 8008786:	d093      	beq.n	80086b0 <_dtoa_r+0x828>
 8008788:	9a00      	ldr	r2, [sp, #0]
 800878a:	331c      	adds	r3, #28
 800878c:	441a      	add	r2, r3
 800878e:	9200      	str	r2, [sp, #0]
 8008790:	9a06      	ldr	r2, [sp, #24]
 8008792:	441a      	add	r2, r3
 8008794:	441e      	add	r6, r3
 8008796:	9206      	str	r2, [sp, #24]
 8008798:	e78a      	b.n	80086b0 <_dtoa_r+0x828>
 800879a:	4603      	mov	r3, r0
 800879c:	e7f4      	b.n	8008788 <_dtoa_r+0x900>
 800879e:	9b03      	ldr	r3, [sp, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	46b8      	mov	r8, r7
 80087a4:	dc20      	bgt.n	80087e8 <_dtoa_r+0x960>
 80087a6:	469b      	mov	fp, r3
 80087a8:	9b07      	ldr	r3, [sp, #28]
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	dd1e      	ble.n	80087ec <_dtoa_r+0x964>
 80087ae:	f1bb 0f00 	cmp.w	fp, #0
 80087b2:	f47f adb1 	bne.w	8008318 <_dtoa_r+0x490>
 80087b6:	4621      	mov	r1, r4
 80087b8:	465b      	mov	r3, fp
 80087ba:	2205      	movs	r2, #5
 80087bc:	4648      	mov	r0, r9
 80087be:	f000 fa95 	bl	8008cec <__multadd>
 80087c2:	4601      	mov	r1, r0
 80087c4:	4604      	mov	r4, r0
 80087c6:	9802      	ldr	r0, [sp, #8]
 80087c8:	f000 fca0 	bl	800910c <__mcmp>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	f77f ada3 	ble.w	8008318 <_dtoa_r+0x490>
 80087d2:	4656      	mov	r6, sl
 80087d4:	2331      	movs	r3, #49	@ 0x31
 80087d6:	f806 3b01 	strb.w	r3, [r6], #1
 80087da:	f108 0801 	add.w	r8, r8, #1
 80087de:	e59f      	b.n	8008320 <_dtoa_r+0x498>
 80087e0:	9c03      	ldr	r4, [sp, #12]
 80087e2:	46b8      	mov	r8, r7
 80087e4:	4625      	mov	r5, r4
 80087e6:	e7f4      	b.n	80087d2 <_dtoa_r+0x94a>
 80087e8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80087ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f000 8101 	beq.w	80089f6 <_dtoa_r+0xb6e>
 80087f4:	2e00      	cmp	r6, #0
 80087f6:	dd05      	ble.n	8008804 <_dtoa_r+0x97c>
 80087f8:	4629      	mov	r1, r5
 80087fa:	4632      	mov	r2, r6
 80087fc:	4648      	mov	r0, r9
 80087fe:	f000 fc19 	bl	8009034 <__lshift>
 8008802:	4605      	mov	r5, r0
 8008804:	9b08      	ldr	r3, [sp, #32]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d05c      	beq.n	80088c4 <_dtoa_r+0xa3c>
 800880a:	6869      	ldr	r1, [r5, #4]
 800880c:	4648      	mov	r0, r9
 800880e:	f000 fa0b 	bl	8008c28 <_Balloc>
 8008812:	4606      	mov	r6, r0
 8008814:	b928      	cbnz	r0, 8008822 <_dtoa_r+0x99a>
 8008816:	4b82      	ldr	r3, [pc, #520]	@ (8008a20 <_dtoa_r+0xb98>)
 8008818:	4602      	mov	r2, r0
 800881a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800881e:	f7ff bb4a 	b.w	8007eb6 <_dtoa_r+0x2e>
 8008822:	692a      	ldr	r2, [r5, #16]
 8008824:	3202      	adds	r2, #2
 8008826:	0092      	lsls	r2, r2, #2
 8008828:	f105 010c 	add.w	r1, r5, #12
 800882c:	300c      	adds	r0, #12
 800882e:	f000 ffa3 	bl	8009778 <memcpy>
 8008832:	2201      	movs	r2, #1
 8008834:	4631      	mov	r1, r6
 8008836:	4648      	mov	r0, r9
 8008838:	f000 fbfc 	bl	8009034 <__lshift>
 800883c:	f10a 0301 	add.w	r3, sl, #1
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	eb0a 030b 	add.w	r3, sl, fp
 8008846:	9308      	str	r3, [sp, #32]
 8008848:	9b04      	ldr	r3, [sp, #16]
 800884a:	f003 0301 	and.w	r3, r3, #1
 800884e:	462f      	mov	r7, r5
 8008850:	9306      	str	r3, [sp, #24]
 8008852:	4605      	mov	r5, r0
 8008854:	9b00      	ldr	r3, [sp, #0]
 8008856:	9802      	ldr	r0, [sp, #8]
 8008858:	4621      	mov	r1, r4
 800885a:	f103 3bff 	add.w	fp, r3, #4294967295
 800885e:	f7ff fa8a 	bl	8007d76 <quorem>
 8008862:	4603      	mov	r3, r0
 8008864:	3330      	adds	r3, #48	@ 0x30
 8008866:	9003      	str	r0, [sp, #12]
 8008868:	4639      	mov	r1, r7
 800886a:	9802      	ldr	r0, [sp, #8]
 800886c:	9309      	str	r3, [sp, #36]	@ 0x24
 800886e:	f000 fc4d 	bl	800910c <__mcmp>
 8008872:	462a      	mov	r2, r5
 8008874:	9004      	str	r0, [sp, #16]
 8008876:	4621      	mov	r1, r4
 8008878:	4648      	mov	r0, r9
 800887a:	f000 fc63 	bl	8009144 <__mdiff>
 800887e:	68c2      	ldr	r2, [r0, #12]
 8008880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008882:	4606      	mov	r6, r0
 8008884:	bb02      	cbnz	r2, 80088c8 <_dtoa_r+0xa40>
 8008886:	4601      	mov	r1, r0
 8008888:	9802      	ldr	r0, [sp, #8]
 800888a:	f000 fc3f 	bl	800910c <__mcmp>
 800888e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008890:	4602      	mov	r2, r0
 8008892:	4631      	mov	r1, r6
 8008894:	4648      	mov	r0, r9
 8008896:	920c      	str	r2, [sp, #48]	@ 0x30
 8008898:	9309      	str	r3, [sp, #36]	@ 0x24
 800889a:	f000 fa05 	bl	8008ca8 <_Bfree>
 800889e:	9b07      	ldr	r3, [sp, #28]
 80088a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80088a2:	9e00      	ldr	r6, [sp, #0]
 80088a4:	ea42 0103 	orr.w	r1, r2, r3
 80088a8:	9b06      	ldr	r3, [sp, #24]
 80088aa:	4319      	orrs	r1, r3
 80088ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088ae:	d10d      	bne.n	80088cc <_dtoa_r+0xa44>
 80088b0:	2b39      	cmp	r3, #57	@ 0x39
 80088b2:	d027      	beq.n	8008904 <_dtoa_r+0xa7c>
 80088b4:	9a04      	ldr	r2, [sp, #16]
 80088b6:	2a00      	cmp	r2, #0
 80088b8:	dd01      	ble.n	80088be <_dtoa_r+0xa36>
 80088ba:	9b03      	ldr	r3, [sp, #12]
 80088bc:	3331      	adds	r3, #49	@ 0x31
 80088be:	f88b 3000 	strb.w	r3, [fp]
 80088c2:	e52e      	b.n	8008322 <_dtoa_r+0x49a>
 80088c4:	4628      	mov	r0, r5
 80088c6:	e7b9      	b.n	800883c <_dtoa_r+0x9b4>
 80088c8:	2201      	movs	r2, #1
 80088ca:	e7e2      	b.n	8008892 <_dtoa_r+0xa0a>
 80088cc:	9904      	ldr	r1, [sp, #16]
 80088ce:	2900      	cmp	r1, #0
 80088d0:	db04      	blt.n	80088dc <_dtoa_r+0xa54>
 80088d2:	9807      	ldr	r0, [sp, #28]
 80088d4:	4301      	orrs	r1, r0
 80088d6:	9806      	ldr	r0, [sp, #24]
 80088d8:	4301      	orrs	r1, r0
 80088da:	d120      	bne.n	800891e <_dtoa_r+0xa96>
 80088dc:	2a00      	cmp	r2, #0
 80088de:	ddee      	ble.n	80088be <_dtoa_r+0xa36>
 80088e0:	9902      	ldr	r1, [sp, #8]
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	2201      	movs	r2, #1
 80088e6:	4648      	mov	r0, r9
 80088e8:	f000 fba4 	bl	8009034 <__lshift>
 80088ec:	4621      	mov	r1, r4
 80088ee:	9002      	str	r0, [sp, #8]
 80088f0:	f000 fc0c 	bl	800910c <__mcmp>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	9b00      	ldr	r3, [sp, #0]
 80088f8:	dc02      	bgt.n	8008900 <_dtoa_r+0xa78>
 80088fa:	d1e0      	bne.n	80088be <_dtoa_r+0xa36>
 80088fc:	07da      	lsls	r2, r3, #31
 80088fe:	d5de      	bpl.n	80088be <_dtoa_r+0xa36>
 8008900:	2b39      	cmp	r3, #57	@ 0x39
 8008902:	d1da      	bne.n	80088ba <_dtoa_r+0xa32>
 8008904:	2339      	movs	r3, #57	@ 0x39
 8008906:	f88b 3000 	strb.w	r3, [fp]
 800890a:	4633      	mov	r3, r6
 800890c:	461e      	mov	r6, r3
 800890e:	3b01      	subs	r3, #1
 8008910:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008914:	2a39      	cmp	r2, #57	@ 0x39
 8008916:	d04e      	beq.n	80089b6 <_dtoa_r+0xb2e>
 8008918:	3201      	adds	r2, #1
 800891a:	701a      	strb	r2, [r3, #0]
 800891c:	e501      	b.n	8008322 <_dtoa_r+0x49a>
 800891e:	2a00      	cmp	r2, #0
 8008920:	dd03      	ble.n	800892a <_dtoa_r+0xaa2>
 8008922:	2b39      	cmp	r3, #57	@ 0x39
 8008924:	d0ee      	beq.n	8008904 <_dtoa_r+0xa7c>
 8008926:	3301      	adds	r3, #1
 8008928:	e7c9      	b.n	80088be <_dtoa_r+0xa36>
 800892a:	9a00      	ldr	r2, [sp, #0]
 800892c:	9908      	ldr	r1, [sp, #32]
 800892e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008932:	428a      	cmp	r2, r1
 8008934:	d028      	beq.n	8008988 <_dtoa_r+0xb00>
 8008936:	9902      	ldr	r1, [sp, #8]
 8008938:	2300      	movs	r3, #0
 800893a:	220a      	movs	r2, #10
 800893c:	4648      	mov	r0, r9
 800893e:	f000 f9d5 	bl	8008cec <__multadd>
 8008942:	42af      	cmp	r7, r5
 8008944:	9002      	str	r0, [sp, #8]
 8008946:	f04f 0300 	mov.w	r3, #0
 800894a:	f04f 020a 	mov.w	r2, #10
 800894e:	4639      	mov	r1, r7
 8008950:	4648      	mov	r0, r9
 8008952:	d107      	bne.n	8008964 <_dtoa_r+0xadc>
 8008954:	f000 f9ca 	bl	8008cec <__multadd>
 8008958:	4607      	mov	r7, r0
 800895a:	4605      	mov	r5, r0
 800895c:	9b00      	ldr	r3, [sp, #0]
 800895e:	3301      	adds	r3, #1
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	e777      	b.n	8008854 <_dtoa_r+0x9cc>
 8008964:	f000 f9c2 	bl	8008cec <__multadd>
 8008968:	4629      	mov	r1, r5
 800896a:	4607      	mov	r7, r0
 800896c:	2300      	movs	r3, #0
 800896e:	220a      	movs	r2, #10
 8008970:	4648      	mov	r0, r9
 8008972:	f000 f9bb 	bl	8008cec <__multadd>
 8008976:	4605      	mov	r5, r0
 8008978:	e7f0      	b.n	800895c <_dtoa_r+0xad4>
 800897a:	f1bb 0f00 	cmp.w	fp, #0
 800897e:	bfcc      	ite	gt
 8008980:	465e      	movgt	r6, fp
 8008982:	2601      	movle	r6, #1
 8008984:	4456      	add	r6, sl
 8008986:	2700      	movs	r7, #0
 8008988:	9902      	ldr	r1, [sp, #8]
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	2201      	movs	r2, #1
 800898e:	4648      	mov	r0, r9
 8008990:	f000 fb50 	bl	8009034 <__lshift>
 8008994:	4621      	mov	r1, r4
 8008996:	9002      	str	r0, [sp, #8]
 8008998:	f000 fbb8 	bl	800910c <__mcmp>
 800899c:	2800      	cmp	r0, #0
 800899e:	dcb4      	bgt.n	800890a <_dtoa_r+0xa82>
 80089a0:	d102      	bne.n	80089a8 <_dtoa_r+0xb20>
 80089a2:	9b00      	ldr	r3, [sp, #0]
 80089a4:	07db      	lsls	r3, r3, #31
 80089a6:	d4b0      	bmi.n	800890a <_dtoa_r+0xa82>
 80089a8:	4633      	mov	r3, r6
 80089aa:	461e      	mov	r6, r3
 80089ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089b0:	2a30      	cmp	r2, #48	@ 0x30
 80089b2:	d0fa      	beq.n	80089aa <_dtoa_r+0xb22>
 80089b4:	e4b5      	b.n	8008322 <_dtoa_r+0x49a>
 80089b6:	459a      	cmp	sl, r3
 80089b8:	d1a8      	bne.n	800890c <_dtoa_r+0xa84>
 80089ba:	2331      	movs	r3, #49	@ 0x31
 80089bc:	f108 0801 	add.w	r8, r8, #1
 80089c0:	f88a 3000 	strb.w	r3, [sl]
 80089c4:	e4ad      	b.n	8008322 <_dtoa_r+0x49a>
 80089c6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80089c8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008a24 <_dtoa_r+0xb9c>
 80089cc:	b11b      	cbz	r3, 80089d6 <_dtoa_r+0xb4e>
 80089ce:	f10a 0308 	add.w	r3, sl, #8
 80089d2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80089d4:	6013      	str	r3, [r2, #0]
 80089d6:	4650      	mov	r0, sl
 80089d8:	b017      	add	sp, #92	@ 0x5c
 80089da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089de:	9b07      	ldr	r3, [sp, #28]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	f77f ae2e 	ble.w	8008642 <_dtoa_r+0x7ba>
 80089e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089e8:	9308      	str	r3, [sp, #32]
 80089ea:	2001      	movs	r0, #1
 80089ec:	e64d      	b.n	800868a <_dtoa_r+0x802>
 80089ee:	f1bb 0f00 	cmp.w	fp, #0
 80089f2:	f77f aed9 	ble.w	80087a8 <_dtoa_r+0x920>
 80089f6:	4656      	mov	r6, sl
 80089f8:	9802      	ldr	r0, [sp, #8]
 80089fa:	4621      	mov	r1, r4
 80089fc:	f7ff f9bb 	bl	8007d76 <quorem>
 8008a00:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008a04:	f806 3b01 	strb.w	r3, [r6], #1
 8008a08:	eba6 020a 	sub.w	r2, r6, sl
 8008a0c:	4593      	cmp	fp, r2
 8008a0e:	ddb4      	ble.n	800897a <_dtoa_r+0xaf2>
 8008a10:	9902      	ldr	r1, [sp, #8]
 8008a12:	2300      	movs	r3, #0
 8008a14:	220a      	movs	r2, #10
 8008a16:	4648      	mov	r0, r9
 8008a18:	f000 f968 	bl	8008cec <__multadd>
 8008a1c:	9002      	str	r0, [sp, #8]
 8008a1e:	e7eb      	b.n	80089f8 <_dtoa_r+0xb70>
 8008a20:	0801cf80 	.word	0x0801cf80
 8008a24:	0801cf04 	.word	0x0801cf04

08008a28 <_free_r>:
 8008a28:	b538      	push	{r3, r4, r5, lr}
 8008a2a:	4605      	mov	r5, r0
 8008a2c:	2900      	cmp	r1, #0
 8008a2e:	d041      	beq.n	8008ab4 <_free_r+0x8c>
 8008a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a34:	1f0c      	subs	r4, r1, #4
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	bfb8      	it	lt
 8008a3a:	18e4      	addlt	r4, r4, r3
 8008a3c:	f000 f8e8 	bl	8008c10 <__malloc_lock>
 8008a40:	4a1d      	ldr	r2, [pc, #116]	@ (8008ab8 <_free_r+0x90>)
 8008a42:	6813      	ldr	r3, [r2, #0]
 8008a44:	b933      	cbnz	r3, 8008a54 <_free_r+0x2c>
 8008a46:	6063      	str	r3, [r4, #4]
 8008a48:	6014      	str	r4, [r2, #0]
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a50:	f000 b8e4 	b.w	8008c1c <__malloc_unlock>
 8008a54:	42a3      	cmp	r3, r4
 8008a56:	d908      	bls.n	8008a6a <_free_r+0x42>
 8008a58:	6820      	ldr	r0, [r4, #0]
 8008a5a:	1821      	adds	r1, r4, r0
 8008a5c:	428b      	cmp	r3, r1
 8008a5e:	bf01      	itttt	eq
 8008a60:	6819      	ldreq	r1, [r3, #0]
 8008a62:	685b      	ldreq	r3, [r3, #4]
 8008a64:	1809      	addeq	r1, r1, r0
 8008a66:	6021      	streq	r1, [r4, #0]
 8008a68:	e7ed      	b.n	8008a46 <_free_r+0x1e>
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	b10b      	cbz	r3, 8008a74 <_free_r+0x4c>
 8008a70:	42a3      	cmp	r3, r4
 8008a72:	d9fa      	bls.n	8008a6a <_free_r+0x42>
 8008a74:	6811      	ldr	r1, [r2, #0]
 8008a76:	1850      	adds	r0, r2, r1
 8008a78:	42a0      	cmp	r0, r4
 8008a7a:	d10b      	bne.n	8008a94 <_free_r+0x6c>
 8008a7c:	6820      	ldr	r0, [r4, #0]
 8008a7e:	4401      	add	r1, r0
 8008a80:	1850      	adds	r0, r2, r1
 8008a82:	4283      	cmp	r3, r0
 8008a84:	6011      	str	r1, [r2, #0]
 8008a86:	d1e0      	bne.n	8008a4a <_free_r+0x22>
 8008a88:	6818      	ldr	r0, [r3, #0]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	6053      	str	r3, [r2, #4]
 8008a8e:	4408      	add	r0, r1
 8008a90:	6010      	str	r0, [r2, #0]
 8008a92:	e7da      	b.n	8008a4a <_free_r+0x22>
 8008a94:	d902      	bls.n	8008a9c <_free_r+0x74>
 8008a96:	230c      	movs	r3, #12
 8008a98:	602b      	str	r3, [r5, #0]
 8008a9a:	e7d6      	b.n	8008a4a <_free_r+0x22>
 8008a9c:	6820      	ldr	r0, [r4, #0]
 8008a9e:	1821      	adds	r1, r4, r0
 8008aa0:	428b      	cmp	r3, r1
 8008aa2:	bf04      	itt	eq
 8008aa4:	6819      	ldreq	r1, [r3, #0]
 8008aa6:	685b      	ldreq	r3, [r3, #4]
 8008aa8:	6063      	str	r3, [r4, #4]
 8008aaa:	bf04      	itt	eq
 8008aac:	1809      	addeq	r1, r1, r0
 8008aae:	6021      	streq	r1, [r4, #0]
 8008ab0:	6054      	str	r4, [r2, #4]
 8008ab2:	e7ca      	b.n	8008a4a <_free_r+0x22>
 8008ab4:	bd38      	pop	{r3, r4, r5, pc}
 8008ab6:	bf00      	nop
 8008ab8:	20003d28 	.word	0x20003d28

08008abc <malloc>:
 8008abc:	4b02      	ldr	r3, [pc, #8]	@ (8008ac8 <malloc+0xc>)
 8008abe:	4601      	mov	r1, r0
 8008ac0:	6818      	ldr	r0, [r3, #0]
 8008ac2:	f000 b825 	b.w	8008b10 <_malloc_r>
 8008ac6:	bf00      	nop
 8008ac8:	20000018 	.word	0x20000018

08008acc <sbrk_aligned>:
 8008acc:	b570      	push	{r4, r5, r6, lr}
 8008ace:	4e0f      	ldr	r6, [pc, #60]	@ (8008b0c <sbrk_aligned+0x40>)
 8008ad0:	460c      	mov	r4, r1
 8008ad2:	6831      	ldr	r1, [r6, #0]
 8008ad4:	4605      	mov	r5, r0
 8008ad6:	b911      	cbnz	r1, 8008ade <sbrk_aligned+0x12>
 8008ad8:	f000 fe3e 	bl	8009758 <_sbrk_r>
 8008adc:	6030      	str	r0, [r6, #0]
 8008ade:	4621      	mov	r1, r4
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	f000 fe39 	bl	8009758 <_sbrk_r>
 8008ae6:	1c43      	adds	r3, r0, #1
 8008ae8:	d103      	bne.n	8008af2 <sbrk_aligned+0x26>
 8008aea:	f04f 34ff 	mov.w	r4, #4294967295
 8008aee:	4620      	mov	r0, r4
 8008af0:	bd70      	pop	{r4, r5, r6, pc}
 8008af2:	1cc4      	adds	r4, r0, #3
 8008af4:	f024 0403 	bic.w	r4, r4, #3
 8008af8:	42a0      	cmp	r0, r4
 8008afa:	d0f8      	beq.n	8008aee <sbrk_aligned+0x22>
 8008afc:	1a21      	subs	r1, r4, r0
 8008afe:	4628      	mov	r0, r5
 8008b00:	f000 fe2a 	bl	8009758 <_sbrk_r>
 8008b04:	3001      	adds	r0, #1
 8008b06:	d1f2      	bne.n	8008aee <sbrk_aligned+0x22>
 8008b08:	e7ef      	b.n	8008aea <sbrk_aligned+0x1e>
 8008b0a:	bf00      	nop
 8008b0c:	20003d24 	.word	0x20003d24

08008b10 <_malloc_r>:
 8008b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b14:	1ccd      	adds	r5, r1, #3
 8008b16:	f025 0503 	bic.w	r5, r5, #3
 8008b1a:	3508      	adds	r5, #8
 8008b1c:	2d0c      	cmp	r5, #12
 8008b1e:	bf38      	it	cc
 8008b20:	250c      	movcc	r5, #12
 8008b22:	2d00      	cmp	r5, #0
 8008b24:	4606      	mov	r6, r0
 8008b26:	db01      	blt.n	8008b2c <_malloc_r+0x1c>
 8008b28:	42a9      	cmp	r1, r5
 8008b2a:	d904      	bls.n	8008b36 <_malloc_r+0x26>
 8008b2c:	230c      	movs	r3, #12
 8008b2e:	6033      	str	r3, [r6, #0]
 8008b30:	2000      	movs	r0, #0
 8008b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c0c <_malloc_r+0xfc>
 8008b3a:	f000 f869 	bl	8008c10 <__malloc_lock>
 8008b3e:	f8d8 3000 	ldr.w	r3, [r8]
 8008b42:	461c      	mov	r4, r3
 8008b44:	bb44      	cbnz	r4, 8008b98 <_malloc_r+0x88>
 8008b46:	4629      	mov	r1, r5
 8008b48:	4630      	mov	r0, r6
 8008b4a:	f7ff ffbf 	bl	8008acc <sbrk_aligned>
 8008b4e:	1c43      	adds	r3, r0, #1
 8008b50:	4604      	mov	r4, r0
 8008b52:	d158      	bne.n	8008c06 <_malloc_r+0xf6>
 8008b54:	f8d8 4000 	ldr.w	r4, [r8]
 8008b58:	4627      	mov	r7, r4
 8008b5a:	2f00      	cmp	r7, #0
 8008b5c:	d143      	bne.n	8008be6 <_malloc_r+0xd6>
 8008b5e:	2c00      	cmp	r4, #0
 8008b60:	d04b      	beq.n	8008bfa <_malloc_r+0xea>
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	4639      	mov	r1, r7
 8008b66:	4630      	mov	r0, r6
 8008b68:	eb04 0903 	add.w	r9, r4, r3
 8008b6c:	f000 fdf4 	bl	8009758 <_sbrk_r>
 8008b70:	4581      	cmp	r9, r0
 8008b72:	d142      	bne.n	8008bfa <_malloc_r+0xea>
 8008b74:	6821      	ldr	r1, [r4, #0]
 8008b76:	1a6d      	subs	r5, r5, r1
 8008b78:	4629      	mov	r1, r5
 8008b7a:	4630      	mov	r0, r6
 8008b7c:	f7ff ffa6 	bl	8008acc <sbrk_aligned>
 8008b80:	3001      	adds	r0, #1
 8008b82:	d03a      	beq.n	8008bfa <_malloc_r+0xea>
 8008b84:	6823      	ldr	r3, [r4, #0]
 8008b86:	442b      	add	r3, r5
 8008b88:	6023      	str	r3, [r4, #0]
 8008b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8008b8e:	685a      	ldr	r2, [r3, #4]
 8008b90:	bb62      	cbnz	r2, 8008bec <_malloc_r+0xdc>
 8008b92:	f8c8 7000 	str.w	r7, [r8]
 8008b96:	e00f      	b.n	8008bb8 <_malloc_r+0xa8>
 8008b98:	6822      	ldr	r2, [r4, #0]
 8008b9a:	1b52      	subs	r2, r2, r5
 8008b9c:	d420      	bmi.n	8008be0 <_malloc_r+0xd0>
 8008b9e:	2a0b      	cmp	r2, #11
 8008ba0:	d917      	bls.n	8008bd2 <_malloc_r+0xc2>
 8008ba2:	1961      	adds	r1, r4, r5
 8008ba4:	42a3      	cmp	r3, r4
 8008ba6:	6025      	str	r5, [r4, #0]
 8008ba8:	bf18      	it	ne
 8008baa:	6059      	strne	r1, [r3, #4]
 8008bac:	6863      	ldr	r3, [r4, #4]
 8008bae:	bf08      	it	eq
 8008bb0:	f8c8 1000 	streq.w	r1, [r8]
 8008bb4:	5162      	str	r2, [r4, r5]
 8008bb6:	604b      	str	r3, [r1, #4]
 8008bb8:	4630      	mov	r0, r6
 8008bba:	f000 f82f 	bl	8008c1c <__malloc_unlock>
 8008bbe:	f104 000b 	add.w	r0, r4, #11
 8008bc2:	1d23      	adds	r3, r4, #4
 8008bc4:	f020 0007 	bic.w	r0, r0, #7
 8008bc8:	1ac2      	subs	r2, r0, r3
 8008bca:	bf1c      	itt	ne
 8008bcc:	1a1b      	subne	r3, r3, r0
 8008bce:	50a3      	strne	r3, [r4, r2]
 8008bd0:	e7af      	b.n	8008b32 <_malloc_r+0x22>
 8008bd2:	6862      	ldr	r2, [r4, #4]
 8008bd4:	42a3      	cmp	r3, r4
 8008bd6:	bf0c      	ite	eq
 8008bd8:	f8c8 2000 	streq.w	r2, [r8]
 8008bdc:	605a      	strne	r2, [r3, #4]
 8008bde:	e7eb      	b.n	8008bb8 <_malloc_r+0xa8>
 8008be0:	4623      	mov	r3, r4
 8008be2:	6864      	ldr	r4, [r4, #4]
 8008be4:	e7ae      	b.n	8008b44 <_malloc_r+0x34>
 8008be6:	463c      	mov	r4, r7
 8008be8:	687f      	ldr	r7, [r7, #4]
 8008bea:	e7b6      	b.n	8008b5a <_malloc_r+0x4a>
 8008bec:	461a      	mov	r2, r3
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	42a3      	cmp	r3, r4
 8008bf2:	d1fb      	bne.n	8008bec <_malloc_r+0xdc>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	6053      	str	r3, [r2, #4]
 8008bf8:	e7de      	b.n	8008bb8 <_malloc_r+0xa8>
 8008bfa:	230c      	movs	r3, #12
 8008bfc:	6033      	str	r3, [r6, #0]
 8008bfe:	4630      	mov	r0, r6
 8008c00:	f000 f80c 	bl	8008c1c <__malloc_unlock>
 8008c04:	e794      	b.n	8008b30 <_malloc_r+0x20>
 8008c06:	6005      	str	r5, [r0, #0]
 8008c08:	e7d6      	b.n	8008bb8 <_malloc_r+0xa8>
 8008c0a:	bf00      	nop
 8008c0c:	20003d28 	.word	0x20003d28

08008c10 <__malloc_lock>:
 8008c10:	4801      	ldr	r0, [pc, #4]	@ (8008c18 <__malloc_lock+0x8>)
 8008c12:	f7ff b8ae 	b.w	8007d72 <__retarget_lock_acquire_recursive>
 8008c16:	bf00      	nop
 8008c18:	20003d20 	.word	0x20003d20

08008c1c <__malloc_unlock>:
 8008c1c:	4801      	ldr	r0, [pc, #4]	@ (8008c24 <__malloc_unlock+0x8>)
 8008c1e:	f7ff b8a9 	b.w	8007d74 <__retarget_lock_release_recursive>
 8008c22:	bf00      	nop
 8008c24:	20003d20 	.word	0x20003d20

08008c28 <_Balloc>:
 8008c28:	b570      	push	{r4, r5, r6, lr}
 8008c2a:	69c6      	ldr	r6, [r0, #28]
 8008c2c:	4604      	mov	r4, r0
 8008c2e:	460d      	mov	r5, r1
 8008c30:	b976      	cbnz	r6, 8008c50 <_Balloc+0x28>
 8008c32:	2010      	movs	r0, #16
 8008c34:	f7ff ff42 	bl	8008abc <malloc>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	61e0      	str	r0, [r4, #28]
 8008c3c:	b920      	cbnz	r0, 8008c48 <_Balloc+0x20>
 8008c3e:	4b18      	ldr	r3, [pc, #96]	@ (8008ca0 <_Balloc+0x78>)
 8008c40:	4818      	ldr	r0, [pc, #96]	@ (8008ca4 <_Balloc+0x7c>)
 8008c42:	216b      	movs	r1, #107	@ 0x6b
 8008c44:	f000 fda6 	bl	8009794 <__assert_func>
 8008c48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c4c:	6006      	str	r6, [r0, #0]
 8008c4e:	60c6      	str	r6, [r0, #12]
 8008c50:	69e6      	ldr	r6, [r4, #28]
 8008c52:	68f3      	ldr	r3, [r6, #12]
 8008c54:	b183      	cbz	r3, 8008c78 <_Balloc+0x50>
 8008c56:	69e3      	ldr	r3, [r4, #28]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c5e:	b9b8      	cbnz	r0, 8008c90 <_Balloc+0x68>
 8008c60:	2101      	movs	r1, #1
 8008c62:	fa01 f605 	lsl.w	r6, r1, r5
 8008c66:	1d72      	adds	r2, r6, #5
 8008c68:	0092      	lsls	r2, r2, #2
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f000 fdb0 	bl	80097d0 <_calloc_r>
 8008c70:	b160      	cbz	r0, 8008c8c <_Balloc+0x64>
 8008c72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c76:	e00e      	b.n	8008c96 <_Balloc+0x6e>
 8008c78:	2221      	movs	r2, #33	@ 0x21
 8008c7a:	2104      	movs	r1, #4
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f000 fda7 	bl	80097d0 <_calloc_r>
 8008c82:	69e3      	ldr	r3, [r4, #28]
 8008c84:	60f0      	str	r0, [r6, #12]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1e4      	bne.n	8008c56 <_Balloc+0x2e>
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	bd70      	pop	{r4, r5, r6, pc}
 8008c90:	6802      	ldr	r2, [r0, #0]
 8008c92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c96:	2300      	movs	r3, #0
 8008c98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c9c:	e7f7      	b.n	8008c8e <_Balloc+0x66>
 8008c9e:	bf00      	nop
 8008ca0:	0801cf11 	.word	0x0801cf11
 8008ca4:	0801cf91 	.word	0x0801cf91

08008ca8 <_Bfree>:
 8008ca8:	b570      	push	{r4, r5, r6, lr}
 8008caa:	69c6      	ldr	r6, [r0, #28]
 8008cac:	4605      	mov	r5, r0
 8008cae:	460c      	mov	r4, r1
 8008cb0:	b976      	cbnz	r6, 8008cd0 <_Bfree+0x28>
 8008cb2:	2010      	movs	r0, #16
 8008cb4:	f7ff ff02 	bl	8008abc <malloc>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	61e8      	str	r0, [r5, #28]
 8008cbc:	b920      	cbnz	r0, 8008cc8 <_Bfree+0x20>
 8008cbe:	4b09      	ldr	r3, [pc, #36]	@ (8008ce4 <_Bfree+0x3c>)
 8008cc0:	4809      	ldr	r0, [pc, #36]	@ (8008ce8 <_Bfree+0x40>)
 8008cc2:	218f      	movs	r1, #143	@ 0x8f
 8008cc4:	f000 fd66 	bl	8009794 <__assert_func>
 8008cc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ccc:	6006      	str	r6, [r0, #0]
 8008cce:	60c6      	str	r6, [r0, #12]
 8008cd0:	b13c      	cbz	r4, 8008ce2 <_Bfree+0x3a>
 8008cd2:	69eb      	ldr	r3, [r5, #28]
 8008cd4:	6862      	ldr	r2, [r4, #4]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008cdc:	6021      	str	r1, [r4, #0]
 8008cde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ce2:	bd70      	pop	{r4, r5, r6, pc}
 8008ce4:	0801cf11 	.word	0x0801cf11
 8008ce8:	0801cf91 	.word	0x0801cf91

08008cec <__multadd>:
 8008cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf0:	690d      	ldr	r5, [r1, #16]
 8008cf2:	4607      	mov	r7, r0
 8008cf4:	460c      	mov	r4, r1
 8008cf6:	461e      	mov	r6, r3
 8008cf8:	f101 0c14 	add.w	ip, r1, #20
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	f8dc 3000 	ldr.w	r3, [ip]
 8008d02:	b299      	uxth	r1, r3
 8008d04:	fb02 6101 	mla	r1, r2, r1, r6
 8008d08:	0c1e      	lsrs	r6, r3, #16
 8008d0a:	0c0b      	lsrs	r3, r1, #16
 8008d0c:	fb02 3306 	mla	r3, r2, r6, r3
 8008d10:	b289      	uxth	r1, r1
 8008d12:	3001      	adds	r0, #1
 8008d14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d18:	4285      	cmp	r5, r0
 8008d1a:	f84c 1b04 	str.w	r1, [ip], #4
 8008d1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d22:	dcec      	bgt.n	8008cfe <__multadd+0x12>
 8008d24:	b30e      	cbz	r6, 8008d6a <__multadd+0x7e>
 8008d26:	68a3      	ldr	r3, [r4, #8]
 8008d28:	42ab      	cmp	r3, r5
 8008d2a:	dc19      	bgt.n	8008d60 <__multadd+0x74>
 8008d2c:	6861      	ldr	r1, [r4, #4]
 8008d2e:	4638      	mov	r0, r7
 8008d30:	3101      	adds	r1, #1
 8008d32:	f7ff ff79 	bl	8008c28 <_Balloc>
 8008d36:	4680      	mov	r8, r0
 8008d38:	b928      	cbnz	r0, 8008d46 <__multadd+0x5a>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8008d70 <__multadd+0x84>)
 8008d3e:	480d      	ldr	r0, [pc, #52]	@ (8008d74 <__multadd+0x88>)
 8008d40:	21ba      	movs	r1, #186	@ 0xba
 8008d42:	f000 fd27 	bl	8009794 <__assert_func>
 8008d46:	6922      	ldr	r2, [r4, #16]
 8008d48:	3202      	adds	r2, #2
 8008d4a:	f104 010c 	add.w	r1, r4, #12
 8008d4e:	0092      	lsls	r2, r2, #2
 8008d50:	300c      	adds	r0, #12
 8008d52:	f000 fd11 	bl	8009778 <memcpy>
 8008d56:	4621      	mov	r1, r4
 8008d58:	4638      	mov	r0, r7
 8008d5a:	f7ff ffa5 	bl	8008ca8 <_Bfree>
 8008d5e:	4644      	mov	r4, r8
 8008d60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d64:	3501      	adds	r5, #1
 8008d66:	615e      	str	r6, [r3, #20]
 8008d68:	6125      	str	r5, [r4, #16]
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d70:	0801cf80 	.word	0x0801cf80
 8008d74:	0801cf91 	.word	0x0801cf91

08008d78 <__hi0bits>:
 8008d78:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	bf36      	itet	cc
 8008d80:	0403      	lslcc	r3, r0, #16
 8008d82:	2000      	movcs	r0, #0
 8008d84:	2010      	movcc	r0, #16
 8008d86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d8a:	bf3c      	itt	cc
 8008d8c:	021b      	lslcc	r3, r3, #8
 8008d8e:	3008      	addcc	r0, #8
 8008d90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d94:	bf3c      	itt	cc
 8008d96:	011b      	lslcc	r3, r3, #4
 8008d98:	3004      	addcc	r0, #4
 8008d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d9e:	bf3c      	itt	cc
 8008da0:	009b      	lslcc	r3, r3, #2
 8008da2:	3002      	addcc	r0, #2
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	db05      	blt.n	8008db4 <__hi0bits+0x3c>
 8008da8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008dac:	f100 0001 	add.w	r0, r0, #1
 8008db0:	bf08      	it	eq
 8008db2:	2020      	moveq	r0, #32
 8008db4:	4770      	bx	lr

08008db6 <__lo0bits>:
 8008db6:	6803      	ldr	r3, [r0, #0]
 8008db8:	4602      	mov	r2, r0
 8008dba:	f013 0007 	ands.w	r0, r3, #7
 8008dbe:	d00b      	beq.n	8008dd8 <__lo0bits+0x22>
 8008dc0:	07d9      	lsls	r1, r3, #31
 8008dc2:	d421      	bmi.n	8008e08 <__lo0bits+0x52>
 8008dc4:	0798      	lsls	r0, r3, #30
 8008dc6:	bf49      	itett	mi
 8008dc8:	085b      	lsrmi	r3, r3, #1
 8008dca:	089b      	lsrpl	r3, r3, #2
 8008dcc:	2001      	movmi	r0, #1
 8008dce:	6013      	strmi	r3, [r2, #0]
 8008dd0:	bf5c      	itt	pl
 8008dd2:	6013      	strpl	r3, [r2, #0]
 8008dd4:	2002      	movpl	r0, #2
 8008dd6:	4770      	bx	lr
 8008dd8:	b299      	uxth	r1, r3
 8008dda:	b909      	cbnz	r1, 8008de0 <__lo0bits+0x2a>
 8008ddc:	0c1b      	lsrs	r3, r3, #16
 8008dde:	2010      	movs	r0, #16
 8008de0:	b2d9      	uxtb	r1, r3
 8008de2:	b909      	cbnz	r1, 8008de8 <__lo0bits+0x32>
 8008de4:	3008      	adds	r0, #8
 8008de6:	0a1b      	lsrs	r3, r3, #8
 8008de8:	0719      	lsls	r1, r3, #28
 8008dea:	bf04      	itt	eq
 8008dec:	091b      	lsreq	r3, r3, #4
 8008dee:	3004      	addeq	r0, #4
 8008df0:	0799      	lsls	r1, r3, #30
 8008df2:	bf04      	itt	eq
 8008df4:	089b      	lsreq	r3, r3, #2
 8008df6:	3002      	addeq	r0, #2
 8008df8:	07d9      	lsls	r1, r3, #31
 8008dfa:	d403      	bmi.n	8008e04 <__lo0bits+0x4e>
 8008dfc:	085b      	lsrs	r3, r3, #1
 8008dfe:	f100 0001 	add.w	r0, r0, #1
 8008e02:	d003      	beq.n	8008e0c <__lo0bits+0x56>
 8008e04:	6013      	str	r3, [r2, #0]
 8008e06:	4770      	bx	lr
 8008e08:	2000      	movs	r0, #0
 8008e0a:	4770      	bx	lr
 8008e0c:	2020      	movs	r0, #32
 8008e0e:	4770      	bx	lr

08008e10 <__i2b>:
 8008e10:	b510      	push	{r4, lr}
 8008e12:	460c      	mov	r4, r1
 8008e14:	2101      	movs	r1, #1
 8008e16:	f7ff ff07 	bl	8008c28 <_Balloc>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	b928      	cbnz	r0, 8008e2a <__i2b+0x1a>
 8008e1e:	4b05      	ldr	r3, [pc, #20]	@ (8008e34 <__i2b+0x24>)
 8008e20:	4805      	ldr	r0, [pc, #20]	@ (8008e38 <__i2b+0x28>)
 8008e22:	f240 1145 	movw	r1, #325	@ 0x145
 8008e26:	f000 fcb5 	bl	8009794 <__assert_func>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	6144      	str	r4, [r0, #20]
 8008e2e:	6103      	str	r3, [r0, #16]
 8008e30:	bd10      	pop	{r4, pc}
 8008e32:	bf00      	nop
 8008e34:	0801cf80 	.word	0x0801cf80
 8008e38:	0801cf91 	.word	0x0801cf91

08008e3c <__multiply>:
 8008e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e40:	4617      	mov	r7, r2
 8008e42:	690a      	ldr	r2, [r1, #16]
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	bfa8      	it	ge
 8008e4a:	463b      	movge	r3, r7
 8008e4c:	4689      	mov	r9, r1
 8008e4e:	bfa4      	itt	ge
 8008e50:	460f      	movge	r7, r1
 8008e52:	4699      	movge	r9, r3
 8008e54:	693d      	ldr	r5, [r7, #16]
 8008e56:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	6879      	ldr	r1, [r7, #4]
 8008e5e:	eb05 060a 	add.w	r6, r5, sl
 8008e62:	42b3      	cmp	r3, r6
 8008e64:	b085      	sub	sp, #20
 8008e66:	bfb8      	it	lt
 8008e68:	3101      	addlt	r1, #1
 8008e6a:	f7ff fedd 	bl	8008c28 <_Balloc>
 8008e6e:	b930      	cbnz	r0, 8008e7e <__multiply+0x42>
 8008e70:	4602      	mov	r2, r0
 8008e72:	4b41      	ldr	r3, [pc, #260]	@ (8008f78 <__multiply+0x13c>)
 8008e74:	4841      	ldr	r0, [pc, #260]	@ (8008f7c <__multiply+0x140>)
 8008e76:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008e7a:	f000 fc8b 	bl	8009794 <__assert_func>
 8008e7e:	f100 0414 	add.w	r4, r0, #20
 8008e82:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008e86:	4623      	mov	r3, r4
 8008e88:	2200      	movs	r2, #0
 8008e8a:	4573      	cmp	r3, lr
 8008e8c:	d320      	bcc.n	8008ed0 <__multiply+0x94>
 8008e8e:	f107 0814 	add.w	r8, r7, #20
 8008e92:	f109 0114 	add.w	r1, r9, #20
 8008e96:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008e9a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008e9e:	9302      	str	r3, [sp, #8]
 8008ea0:	1beb      	subs	r3, r5, r7
 8008ea2:	3b15      	subs	r3, #21
 8008ea4:	f023 0303 	bic.w	r3, r3, #3
 8008ea8:	3304      	adds	r3, #4
 8008eaa:	3715      	adds	r7, #21
 8008eac:	42bd      	cmp	r5, r7
 8008eae:	bf38      	it	cc
 8008eb0:	2304      	movcc	r3, #4
 8008eb2:	9301      	str	r3, [sp, #4]
 8008eb4:	9b02      	ldr	r3, [sp, #8]
 8008eb6:	9103      	str	r1, [sp, #12]
 8008eb8:	428b      	cmp	r3, r1
 8008eba:	d80c      	bhi.n	8008ed6 <__multiply+0x9a>
 8008ebc:	2e00      	cmp	r6, #0
 8008ebe:	dd03      	ble.n	8008ec8 <__multiply+0x8c>
 8008ec0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d055      	beq.n	8008f74 <__multiply+0x138>
 8008ec8:	6106      	str	r6, [r0, #16]
 8008eca:	b005      	add	sp, #20
 8008ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed0:	f843 2b04 	str.w	r2, [r3], #4
 8008ed4:	e7d9      	b.n	8008e8a <__multiply+0x4e>
 8008ed6:	f8b1 a000 	ldrh.w	sl, [r1]
 8008eda:	f1ba 0f00 	cmp.w	sl, #0
 8008ede:	d01f      	beq.n	8008f20 <__multiply+0xe4>
 8008ee0:	46c4      	mov	ip, r8
 8008ee2:	46a1      	mov	r9, r4
 8008ee4:	2700      	movs	r7, #0
 8008ee6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008eea:	f8d9 3000 	ldr.w	r3, [r9]
 8008eee:	fa1f fb82 	uxth.w	fp, r2
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ef8:	443b      	add	r3, r7
 8008efa:	f8d9 7000 	ldr.w	r7, [r9]
 8008efe:	0c12      	lsrs	r2, r2, #16
 8008f00:	0c3f      	lsrs	r7, r7, #16
 8008f02:	fb0a 7202 	mla	r2, sl, r2, r7
 8008f06:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f10:	4565      	cmp	r5, ip
 8008f12:	f849 3b04 	str.w	r3, [r9], #4
 8008f16:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008f1a:	d8e4      	bhi.n	8008ee6 <__multiply+0xaa>
 8008f1c:	9b01      	ldr	r3, [sp, #4]
 8008f1e:	50e7      	str	r7, [r4, r3]
 8008f20:	9b03      	ldr	r3, [sp, #12]
 8008f22:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008f26:	3104      	adds	r1, #4
 8008f28:	f1b9 0f00 	cmp.w	r9, #0
 8008f2c:	d020      	beq.n	8008f70 <__multiply+0x134>
 8008f2e:	6823      	ldr	r3, [r4, #0]
 8008f30:	4647      	mov	r7, r8
 8008f32:	46a4      	mov	ip, r4
 8008f34:	f04f 0a00 	mov.w	sl, #0
 8008f38:	f8b7 b000 	ldrh.w	fp, [r7]
 8008f3c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008f40:	fb09 220b 	mla	r2, r9, fp, r2
 8008f44:	4452      	add	r2, sl
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f4c:	f84c 3b04 	str.w	r3, [ip], #4
 8008f50:	f857 3b04 	ldr.w	r3, [r7], #4
 8008f54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f58:	f8bc 3000 	ldrh.w	r3, [ip]
 8008f5c:	fb09 330a 	mla	r3, r9, sl, r3
 8008f60:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008f64:	42bd      	cmp	r5, r7
 8008f66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f6a:	d8e5      	bhi.n	8008f38 <__multiply+0xfc>
 8008f6c:	9a01      	ldr	r2, [sp, #4]
 8008f6e:	50a3      	str	r3, [r4, r2]
 8008f70:	3404      	adds	r4, #4
 8008f72:	e79f      	b.n	8008eb4 <__multiply+0x78>
 8008f74:	3e01      	subs	r6, #1
 8008f76:	e7a1      	b.n	8008ebc <__multiply+0x80>
 8008f78:	0801cf80 	.word	0x0801cf80
 8008f7c:	0801cf91 	.word	0x0801cf91

08008f80 <__pow5mult>:
 8008f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f84:	4615      	mov	r5, r2
 8008f86:	f012 0203 	ands.w	r2, r2, #3
 8008f8a:	4607      	mov	r7, r0
 8008f8c:	460e      	mov	r6, r1
 8008f8e:	d007      	beq.n	8008fa0 <__pow5mult+0x20>
 8008f90:	4c25      	ldr	r4, [pc, #148]	@ (8009028 <__pow5mult+0xa8>)
 8008f92:	3a01      	subs	r2, #1
 8008f94:	2300      	movs	r3, #0
 8008f96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f9a:	f7ff fea7 	bl	8008cec <__multadd>
 8008f9e:	4606      	mov	r6, r0
 8008fa0:	10ad      	asrs	r5, r5, #2
 8008fa2:	d03d      	beq.n	8009020 <__pow5mult+0xa0>
 8008fa4:	69fc      	ldr	r4, [r7, #28]
 8008fa6:	b97c      	cbnz	r4, 8008fc8 <__pow5mult+0x48>
 8008fa8:	2010      	movs	r0, #16
 8008faa:	f7ff fd87 	bl	8008abc <malloc>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	61f8      	str	r0, [r7, #28]
 8008fb2:	b928      	cbnz	r0, 8008fc0 <__pow5mult+0x40>
 8008fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800902c <__pow5mult+0xac>)
 8008fb6:	481e      	ldr	r0, [pc, #120]	@ (8009030 <__pow5mult+0xb0>)
 8008fb8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008fbc:	f000 fbea 	bl	8009794 <__assert_func>
 8008fc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fc4:	6004      	str	r4, [r0, #0]
 8008fc6:	60c4      	str	r4, [r0, #12]
 8008fc8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008fcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fd0:	b94c      	cbnz	r4, 8008fe6 <__pow5mult+0x66>
 8008fd2:	f240 2171 	movw	r1, #625	@ 0x271
 8008fd6:	4638      	mov	r0, r7
 8008fd8:	f7ff ff1a 	bl	8008e10 <__i2b>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fe2:	4604      	mov	r4, r0
 8008fe4:	6003      	str	r3, [r0, #0]
 8008fe6:	f04f 0900 	mov.w	r9, #0
 8008fea:	07eb      	lsls	r3, r5, #31
 8008fec:	d50a      	bpl.n	8009004 <__pow5mult+0x84>
 8008fee:	4631      	mov	r1, r6
 8008ff0:	4622      	mov	r2, r4
 8008ff2:	4638      	mov	r0, r7
 8008ff4:	f7ff ff22 	bl	8008e3c <__multiply>
 8008ff8:	4631      	mov	r1, r6
 8008ffa:	4680      	mov	r8, r0
 8008ffc:	4638      	mov	r0, r7
 8008ffe:	f7ff fe53 	bl	8008ca8 <_Bfree>
 8009002:	4646      	mov	r6, r8
 8009004:	106d      	asrs	r5, r5, #1
 8009006:	d00b      	beq.n	8009020 <__pow5mult+0xa0>
 8009008:	6820      	ldr	r0, [r4, #0]
 800900a:	b938      	cbnz	r0, 800901c <__pow5mult+0x9c>
 800900c:	4622      	mov	r2, r4
 800900e:	4621      	mov	r1, r4
 8009010:	4638      	mov	r0, r7
 8009012:	f7ff ff13 	bl	8008e3c <__multiply>
 8009016:	6020      	str	r0, [r4, #0]
 8009018:	f8c0 9000 	str.w	r9, [r0]
 800901c:	4604      	mov	r4, r0
 800901e:	e7e4      	b.n	8008fea <__pow5mult+0x6a>
 8009020:	4630      	mov	r0, r6
 8009022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009026:	bf00      	nop
 8009028:	0801d044 	.word	0x0801d044
 800902c:	0801cf11 	.word	0x0801cf11
 8009030:	0801cf91 	.word	0x0801cf91

08009034 <__lshift>:
 8009034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009038:	460c      	mov	r4, r1
 800903a:	6849      	ldr	r1, [r1, #4]
 800903c:	6923      	ldr	r3, [r4, #16]
 800903e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009042:	68a3      	ldr	r3, [r4, #8]
 8009044:	4607      	mov	r7, r0
 8009046:	4691      	mov	r9, r2
 8009048:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800904c:	f108 0601 	add.w	r6, r8, #1
 8009050:	42b3      	cmp	r3, r6
 8009052:	db0b      	blt.n	800906c <__lshift+0x38>
 8009054:	4638      	mov	r0, r7
 8009056:	f7ff fde7 	bl	8008c28 <_Balloc>
 800905a:	4605      	mov	r5, r0
 800905c:	b948      	cbnz	r0, 8009072 <__lshift+0x3e>
 800905e:	4602      	mov	r2, r0
 8009060:	4b28      	ldr	r3, [pc, #160]	@ (8009104 <__lshift+0xd0>)
 8009062:	4829      	ldr	r0, [pc, #164]	@ (8009108 <__lshift+0xd4>)
 8009064:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009068:	f000 fb94 	bl	8009794 <__assert_func>
 800906c:	3101      	adds	r1, #1
 800906e:	005b      	lsls	r3, r3, #1
 8009070:	e7ee      	b.n	8009050 <__lshift+0x1c>
 8009072:	2300      	movs	r3, #0
 8009074:	f100 0114 	add.w	r1, r0, #20
 8009078:	f100 0210 	add.w	r2, r0, #16
 800907c:	4618      	mov	r0, r3
 800907e:	4553      	cmp	r3, sl
 8009080:	db33      	blt.n	80090ea <__lshift+0xb6>
 8009082:	6920      	ldr	r0, [r4, #16]
 8009084:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009088:	f104 0314 	add.w	r3, r4, #20
 800908c:	f019 091f 	ands.w	r9, r9, #31
 8009090:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009094:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009098:	d02b      	beq.n	80090f2 <__lshift+0xbe>
 800909a:	f1c9 0e20 	rsb	lr, r9, #32
 800909e:	468a      	mov	sl, r1
 80090a0:	2200      	movs	r2, #0
 80090a2:	6818      	ldr	r0, [r3, #0]
 80090a4:	fa00 f009 	lsl.w	r0, r0, r9
 80090a8:	4310      	orrs	r0, r2
 80090aa:	f84a 0b04 	str.w	r0, [sl], #4
 80090ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80090b2:	459c      	cmp	ip, r3
 80090b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80090b8:	d8f3      	bhi.n	80090a2 <__lshift+0x6e>
 80090ba:	ebac 0304 	sub.w	r3, ip, r4
 80090be:	3b15      	subs	r3, #21
 80090c0:	f023 0303 	bic.w	r3, r3, #3
 80090c4:	3304      	adds	r3, #4
 80090c6:	f104 0015 	add.w	r0, r4, #21
 80090ca:	4560      	cmp	r0, ip
 80090cc:	bf88      	it	hi
 80090ce:	2304      	movhi	r3, #4
 80090d0:	50ca      	str	r2, [r1, r3]
 80090d2:	b10a      	cbz	r2, 80090d8 <__lshift+0xa4>
 80090d4:	f108 0602 	add.w	r6, r8, #2
 80090d8:	3e01      	subs	r6, #1
 80090da:	4638      	mov	r0, r7
 80090dc:	612e      	str	r6, [r5, #16]
 80090de:	4621      	mov	r1, r4
 80090e0:	f7ff fde2 	bl	8008ca8 <_Bfree>
 80090e4:	4628      	mov	r0, r5
 80090e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80090ee:	3301      	adds	r3, #1
 80090f0:	e7c5      	b.n	800907e <__lshift+0x4a>
 80090f2:	3904      	subs	r1, #4
 80090f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80090f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80090fc:	459c      	cmp	ip, r3
 80090fe:	d8f9      	bhi.n	80090f4 <__lshift+0xc0>
 8009100:	e7ea      	b.n	80090d8 <__lshift+0xa4>
 8009102:	bf00      	nop
 8009104:	0801cf80 	.word	0x0801cf80
 8009108:	0801cf91 	.word	0x0801cf91

0800910c <__mcmp>:
 800910c:	690a      	ldr	r2, [r1, #16]
 800910e:	4603      	mov	r3, r0
 8009110:	6900      	ldr	r0, [r0, #16]
 8009112:	1a80      	subs	r0, r0, r2
 8009114:	b530      	push	{r4, r5, lr}
 8009116:	d10e      	bne.n	8009136 <__mcmp+0x2a>
 8009118:	3314      	adds	r3, #20
 800911a:	3114      	adds	r1, #20
 800911c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009120:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009124:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009128:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800912c:	4295      	cmp	r5, r2
 800912e:	d003      	beq.n	8009138 <__mcmp+0x2c>
 8009130:	d205      	bcs.n	800913e <__mcmp+0x32>
 8009132:	f04f 30ff 	mov.w	r0, #4294967295
 8009136:	bd30      	pop	{r4, r5, pc}
 8009138:	42a3      	cmp	r3, r4
 800913a:	d3f3      	bcc.n	8009124 <__mcmp+0x18>
 800913c:	e7fb      	b.n	8009136 <__mcmp+0x2a>
 800913e:	2001      	movs	r0, #1
 8009140:	e7f9      	b.n	8009136 <__mcmp+0x2a>
	...

08009144 <__mdiff>:
 8009144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009148:	4689      	mov	r9, r1
 800914a:	4606      	mov	r6, r0
 800914c:	4611      	mov	r1, r2
 800914e:	4648      	mov	r0, r9
 8009150:	4614      	mov	r4, r2
 8009152:	f7ff ffdb 	bl	800910c <__mcmp>
 8009156:	1e05      	subs	r5, r0, #0
 8009158:	d112      	bne.n	8009180 <__mdiff+0x3c>
 800915a:	4629      	mov	r1, r5
 800915c:	4630      	mov	r0, r6
 800915e:	f7ff fd63 	bl	8008c28 <_Balloc>
 8009162:	4602      	mov	r2, r0
 8009164:	b928      	cbnz	r0, 8009172 <__mdiff+0x2e>
 8009166:	4b3f      	ldr	r3, [pc, #252]	@ (8009264 <__mdiff+0x120>)
 8009168:	f240 2137 	movw	r1, #567	@ 0x237
 800916c:	483e      	ldr	r0, [pc, #248]	@ (8009268 <__mdiff+0x124>)
 800916e:	f000 fb11 	bl	8009794 <__assert_func>
 8009172:	2301      	movs	r3, #1
 8009174:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009178:	4610      	mov	r0, r2
 800917a:	b003      	add	sp, #12
 800917c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009180:	bfbc      	itt	lt
 8009182:	464b      	movlt	r3, r9
 8009184:	46a1      	movlt	r9, r4
 8009186:	4630      	mov	r0, r6
 8009188:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800918c:	bfba      	itte	lt
 800918e:	461c      	movlt	r4, r3
 8009190:	2501      	movlt	r5, #1
 8009192:	2500      	movge	r5, #0
 8009194:	f7ff fd48 	bl	8008c28 <_Balloc>
 8009198:	4602      	mov	r2, r0
 800919a:	b918      	cbnz	r0, 80091a4 <__mdiff+0x60>
 800919c:	4b31      	ldr	r3, [pc, #196]	@ (8009264 <__mdiff+0x120>)
 800919e:	f240 2145 	movw	r1, #581	@ 0x245
 80091a2:	e7e3      	b.n	800916c <__mdiff+0x28>
 80091a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80091a8:	6926      	ldr	r6, [r4, #16]
 80091aa:	60c5      	str	r5, [r0, #12]
 80091ac:	f109 0310 	add.w	r3, r9, #16
 80091b0:	f109 0514 	add.w	r5, r9, #20
 80091b4:	f104 0e14 	add.w	lr, r4, #20
 80091b8:	f100 0b14 	add.w	fp, r0, #20
 80091bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80091c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80091c4:	9301      	str	r3, [sp, #4]
 80091c6:	46d9      	mov	r9, fp
 80091c8:	f04f 0c00 	mov.w	ip, #0
 80091cc:	9b01      	ldr	r3, [sp, #4]
 80091ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 80091d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80091d6:	9301      	str	r3, [sp, #4]
 80091d8:	fa1f f38a 	uxth.w	r3, sl
 80091dc:	4619      	mov	r1, r3
 80091de:	b283      	uxth	r3, r0
 80091e0:	1acb      	subs	r3, r1, r3
 80091e2:	0c00      	lsrs	r0, r0, #16
 80091e4:	4463      	add	r3, ip
 80091e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80091ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80091f4:	4576      	cmp	r6, lr
 80091f6:	f849 3b04 	str.w	r3, [r9], #4
 80091fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80091fe:	d8e5      	bhi.n	80091cc <__mdiff+0x88>
 8009200:	1b33      	subs	r3, r6, r4
 8009202:	3b15      	subs	r3, #21
 8009204:	f023 0303 	bic.w	r3, r3, #3
 8009208:	3415      	adds	r4, #21
 800920a:	3304      	adds	r3, #4
 800920c:	42a6      	cmp	r6, r4
 800920e:	bf38      	it	cc
 8009210:	2304      	movcc	r3, #4
 8009212:	441d      	add	r5, r3
 8009214:	445b      	add	r3, fp
 8009216:	461e      	mov	r6, r3
 8009218:	462c      	mov	r4, r5
 800921a:	4544      	cmp	r4, r8
 800921c:	d30e      	bcc.n	800923c <__mdiff+0xf8>
 800921e:	f108 0103 	add.w	r1, r8, #3
 8009222:	1b49      	subs	r1, r1, r5
 8009224:	f021 0103 	bic.w	r1, r1, #3
 8009228:	3d03      	subs	r5, #3
 800922a:	45a8      	cmp	r8, r5
 800922c:	bf38      	it	cc
 800922e:	2100      	movcc	r1, #0
 8009230:	440b      	add	r3, r1
 8009232:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009236:	b191      	cbz	r1, 800925e <__mdiff+0x11a>
 8009238:	6117      	str	r7, [r2, #16]
 800923a:	e79d      	b.n	8009178 <__mdiff+0x34>
 800923c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009240:	46e6      	mov	lr, ip
 8009242:	0c08      	lsrs	r0, r1, #16
 8009244:	fa1c fc81 	uxtah	ip, ip, r1
 8009248:	4471      	add	r1, lr
 800924a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800924e:	b289      	uxth	r1, r1
 8009250:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009254:	f846 1b04 	str.w	r1, [r6], #4
 8009258:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800925c:	e7dd      	b.n	800921a <__mdiff+0xd6>
 800925e:	3f01      	subs	r7, #1
 8009260:	e7e7      	b.n	8009232 <__mdiff+0xee>
 8009262:	bf00      	nop
 8009264:	0801cf80 	.word	0x0801cf80
 8009268:	0801cf91 	.word	0x0801cf91

0800926c <__d2b>:
 800926c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009270:	460f      	mov	r7, r1
 8009272:	2101      	movs	r1, #1
 8009274:	ec59 8b10 	vmov	r8, r9, d0
 8009278:	4616      	mov	r6, r2
 800927a:	f7ff fcd5 	bl	8008c28 <_Balloc>
 800927e:	4604      	mov	r4, r0
 8009280:	b930      	cbnz	r0, 8009290 <__d2b+0x24>
 8009282:	4602      	mov	r2, r0
 8009284:	4b23      	ldr	r3, [pc, #140]	@ (8009314 <__d2b+0xa8>)
 8009286:	4824      	ldr	r0, [pc, #144]	@ (8009318 <__d2b+0xac>)
 8009288:	f240 310f 	movw	r1, #783	@ 0x30f
 800928c:	f000 fa82 	bl	8009794 <__assert_func>
 8009290:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009294:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009298:	b10d      	cbz	r5, 800929e <__d2b+0x32>
 800929a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800929e:	9301      	str	r3, [sp, #4]
 80092a0:	f1b8 0300 	subs.w	r3, r8, #0
 80092a4:	d023      	beq.n	80092ee <__d2b+0x82>
 80092a6:	4668      	mov	r0, sp
 80092a8:	9300      	str	r3, [sp, #0]
 80092aa:	f7ff fd84 	bl	8008db6 <__lo0bits>
 80092ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80092b2:	b1d0      	cbz	r0, 80092ea <__d2b+0x7e>
 80092b4:	f1c0 0320 	rsb	r3, r0, #32
 80092b8:	fa02 f303 	lsl.w	r3, r2, r3
 80092bc:	430b      	orrs	r3, r1
 80092be:	40c2      	lsrs	r2, r0
 80092c0:	6163      	str	r3, [r4, #20]
 80092c2:	9201      	str	r2, [sp, #4]
 80092c4:	9b01      	ldr	r3, [sp, #4]
 80092c6:	61a3      	str	r3, [r4, #24]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	bf0c      	ite	eq
 80092cc:	2201      	moveq	r2, #1
 80092ce:	2202      	movne	r2, #2
 80092d0:	6122      	str	r2, [r4, #16]
 80092d2:	b1a5      	cbz	r5, 80092fe <__d2b+0x92>
 80092d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80092d8:	4405      	add	r5, r0
 80092da:	603d      	str	r5, [r7, #0]
 80092dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80092e0:	6030      	str	r0, [r6, #0]
 80092e2:	4620      	mov	r0, r4
 80092e4:	b003      	add	sp, #12
 80092e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092ea:	6161      	str	r1, [r4, #20]
 80092ec:	e7ea      	b.n	80092c4 <__d2b+0x58>
 80092ee:	a801      	add	r0, sp, #4
 80092f0:	f7ff fd61 	bl	8008db6 <__lo0bits>
 80092f4:	9b01      	ldr	r3, [sp, #4]
 80092f6:	6163      	str	r3, [r4, #20]
 80092f8:	3020      	adds	r0, #32
 80092fa:	2201      	movs	r2, #1
 80092fc:	e7e8      	b.n	80092d0 <__d2b+0x64>
 80092fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009302:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009306:	6038      	str	r0, [r7, #0]
 8009308:	6918      	ldr	r0, [r3, #16]
 800930a:	f7ff fd35 	bl	8008d78 <__hi0bits>
 800930e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009312:	e7e5      	b.n	80092e0 <__d2b+0x74>
 8009314:	0801cf80 	.word	0x0801cf80
 8009318:	0801cf91 	.word	0x0801cf91

0800931c <__ssputs_r>:
 800931c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009320:	688e      	ldr	r6, [r1, #8]
 8009322:	461f      	mov	r7, r3
 8009324:	42be      	cmp	r6, r7
 8009326:	680b      	ldr	r3, [r1, #0]
 8009328:	4682      	mov	sl, r0
 800932a:	460c      	mov	r4, r1
 800932c:	4690      	mov	r8, r2
 800932e:	d82d      	bhi.n	800938c <__ssputs_r+0x70>
 8009330:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009334:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009338:	d026      	beq.n	8009388 <__ssputs_r+0x6c>
 800933a:	6965      	ldr	r5, [r4, #20]
 800933c:	6909      	ldr	r1, [r1, #16]
 800933e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009342:	eba3 0901 	sub.w	r9, r3, r1
 8009346:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800934a:	1c7b      	adds	r3, r7, #1
 800934c:	444b      	add	r3, r9
 800934e:	106d      	asrs	r5, r5, #1
 8009350:	429d      	cmp	r5, r3
 8009352:	bf38      	it	cc
 8009354:	461d      	movcc	r5, r3
 8009356:	0553      	lsls	r3, r2, #21
 8009358:	d527      	bpl.n	80093aa <__ssputs_r+0x8e>
 800935a:	4629      	mov	r1, r5
 800935c:	f7ff fbd8 	bl	8008b10 <_malloc_r>
 8009360:	4606      	mov	r6, r0
 8009362:	b360      	cbz	r0, 80093be <__ssputs_r+0xa2>
 8009364:	6921      	ldr	r1, [r4, #16]
 8009366:	464a      	mov	r2, r9
 8009368:	f000 fa06 	bl	8009778 <memcpy>
 800936c:	89a3      	ldrh	r3, [r4, #12]
 800936e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009376:	81a3      	strh	r3, [r4, #12]
 8009378:	6126      	str	r6, [r4, #16]
 800937a:	6165      	str	r5, [r4, #20]
 800937c:	444e      	add	r6, r9
 800937e:	eba5 0509 	sub.w	r5, r5, r9
 8009382:	6026      	str	r6, [r4, #0]
 8009384:	60a5      	str	r5, [r4, #8]
 8009386:	463e      	mov	r6, r7
 8009388:	42be      	cmp	r6, r7
 800938a:	d900      	bls.n	800938e <__ssputs_r+0x72>
 800938c:	463e      	mov	r6, r7
 800938e:	6820      	ldr	r0, [r4, #0]
 8009390:	4632      	mov	r2, r6
 8009392:	4641      	mov	r1, r8
 8009394:	f000 f9c6 	bl	8009724 <memmove>
 8009398:	68a3      	ldr	r3, [r4, #8]
 800939a:	1b9b      	subs	r3, r3, r6
 800939c:	60a3      	str	r3, [r4, #8]
 800939e:	6823      	ldr	r3, [r4, #0]
 80093a0:	4433      	add	r3, r6
 80093a2:	6023      	str	r3, [r4, #0]
 80093a4:	2000      	movs	r0, #0
 80093a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093aa:	462a      	mov	r2, r5
 80093ac:	f000 fa36 	bl	800981c <_realloc_r>
 80093b0:	4606      	mov	r6, r0
 80093b2:	2800      	cmp	r0, #0
 80093b4:	d1e0      	bne.n	8009378 <__ssputs_r+0x5c>
 80093b6:	6921      	ldr	r1, [r4, #16]
 80093b8:	4650      	mov	r0, sl
 80093ba:	f7ff fb35 	bl	8008a28 <_free_r>
 80093be:	230c      	movs	r3, #12
 80093c0:	f8ca 3000 	str.w	r3, [sl]
 80093c4:	89a3      	ldrh	r3, [r4, #12]
 80093c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093ca:	81a3      	strh	r3, [r4, #12]
 80093cc:	f04f 30ff 	mov.w	r0, #4294967295
 80093d0:	e7e9      	b.n	80093a6 <__ssputs_r+0x8a>
	...

080093d4 <_svfiprintf_r>:
 80093d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d8:	4698      	mov	r8, r3
 80093da:	898b      	ldrh	r3, [r1, #12]
 80093dc:	061b      	lsls	r3, r3, #24
 80093de:	b09d      	sub	sp, #116	@ 0x74
 80093e0:	4607      	mov	r7, r0
 80093e2:	460d      	mov	r5, r1
 80093e4:	4614      	mov	r4, r2
 80093e6:	d510      	bpl.n	800940a <_svfiprintf_r+0x36>
 80093e8:	690b      	ldr	r3, [r1, #16]
 80093ea:	b973      	cbnz	r3, 800940a <_svfiprintf_r+0x36>
 80093ec:	2140      	movs	r1, #64	@ 0x40
 80093ee:	f7ff fb8f 	bl	8008b10 <_malloc_r>
 80093f2:	6028      	str	r0, [r5, #0]
 80093f4:	6128      	str	r0, [r5, #16]
 80093f6:	b930      	cbnz	r0, 8009406 <_svfiprintf_r+0x32>
 80093f8:	230c      	movs	r3, #12
 80093fa:	603b      	str	r3, [r7, #0]
 80093fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009400:	b01d      	add	sp, #116	@ 0x74
 8009402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009406:	2340      	movs	r3, #64	@ 0x40
 8009408:	616b      	str	r3, [r5, #20]
 800940a:	2300      	movs	r3, #0
 800940c:	9309      	str	r3, [sp, #36]	@ 0x24
 800940e:	2320      	movs	r3, #32
 8009410:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009414:	f8cd 800c 	str.w	r8, [sp, #12]
 8009418:	2330      	movs	r3, #48	@ 0x30
 800941a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80095b8 <_svfiprintf_r+0x1e4>
 800941e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009422:	f04f 0901 	mov.w	r9, #1
 8009426:	4623      	mov	r3, r4
 8009428:	469a      	mov	sl, r3
 800942a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800942e:	b10a      	cbz	r2, 8009434 <_svfiprintf_r+0x60>
 8009430:	2a25      	cmp	r2, #37	@ 0x25
 8009432:	d1f9      	bne.n	8009428 <_svfiprintf_r+0x54>
 8009434:	ebba 0b04 	subs.w	fp, sl, r4
 8009438:	d00b      	beq.n	8009452 <_svfiprintf_r+0x7e>
 800943a:	465b      	mov	r3, fp
 800943c:	4622      	mov	r2, r4
 800943e:	4629      	mov	r1, r5
 8009440:	4638      	mov	r0, r7
 8009442:	f7ff ff6b 	bl	800931c <__ssputs_r>
 8009446:	3001      	adds	r0, #1
 8009448:	f000 80a7 	beq.w	800959a <_svfiprintf_r+0x1c6>
 800944c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800944e:	445a      	add	r2, fp
 8009450:	9209      	str	r2, [sp, #36]	@ 0x24
 8009452:	f89a 3000 	ldrb.w	r3, [sl]
 8009456:	2b00      	cmp	r3, #0
 8009458:	f000 809f 	beq.w	800959a <_svfiprintf_r+0x1c6>
 800945c:	2300      	movs	r3, #0
 800945e:	f04f 32ff 	mov.w	r2, #4294967295
 8009462:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009466:	f10a 0a01 	add.w	sl, sl, #1
 800946a:	9304      	str	r3, [sp, #16]
 800946c:	9307      	str	r3, [sp, #28]
 800946e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009472:	931a      	str	r3, [sp, #104]	@ 0x68
 8009474:	4654      	mov	r4, sl
 8009476:	2205      	movs	r2, #5
 8009478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800947c:	484e      	ldr	r0, [pc, #312]	@ (80095b8 <_svfiprintf_r+0x1e4>)
 800947e:	f7f6 fea7 	bl	80001d0 <memchr>
 8009482:	9a04      	ldr	r2, [sp, #16]
 8009484:	b9d8      	cbnz	r0, 80094be <_svfiprintf_r+0xea>
 8009486:	06d0      	lsls	r0, r2, #27
 8009488:	bf44      	itt	mi
 800948a:	2320      	movmi	r3, #32
 800948c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009490:	0711      	lsls	r1, r2, #28
 8009492:	bf44      	itt	mi
 8009494:	232b      	movmi	r3, #43	@ 0x2b
 8009496:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800949a:	f89a 3000 	ldrb.w	r3, [sl]
 800949e:	2b2a      	cmp	r3, #42	@ 0x2a
 80094a0:	d015      	beq.n	80094ce <_svfiprintf_r+0xfa>
 80094a2:	9a07      	ldr	r2, [sp, #28]
 80094a4:	4654      	mov	r4, sl
 80094a6:	2000      	movs	r0, #0
 80094a8:	f04f 0c0a 	mov.w	ip, #10
 80094ac:	4621      	mov	r1, r4
 80094ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094b2:	3b30      	subs	r3, #48	@ 0x30
 80094b4:	2b09      	cmp	r3, #9
 80094b6:	d94b      	bls.n	8009550 <_svfiprintf_r+0x17c>
 80094b8:	b1b0      	cbz	r0, 80094e8 <_svfiprintf_r+0x114>
 80094ba:	9207      	str	r2, [sp, #28]
 80094bc:	e014      	b.n	80094e8 <_svfiprintf_r+0x114>
 80094be:	eba0 0308 	sub.w	r3, r0, r8
 80094c2:	fa09 f303 	lsl.w	r3, r9, r3
 80094c6:	4313      	orrs	r3, r2
 80094c8:	9304      	str	r3, [sp, #16]
 80094ca:	46a2      	mov	sl, r4
 80094cc:	e7d2      	b.n	8009474 <_svfiprintf_r+0xa0>
 80094ce:	9b03      	ldr	r3, [sp, #12]
 80094d0:	1d19      	adds	r1, r3, #4
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	9103      	str	r1, [sp, #12]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	bfbb      	ittet	lt
 80094da:	425b      	neglt	r3, r3
 80094dc:	f042 0202 	orrlt.w	r2, r2, #2
 80094e0:	9307      	strge	r3, [sp, #28]
 80094e2:	9307      	strlt	r3, [sp, #28]
 80094e4:	bfb8      	it	lt
 80094e6:	9204      	strlt	r2, [sp, #16]
 80094e8:	7823      	ldrb	r3, [r4, #0]
 80094ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80094ec:	d10a      	bne.n	8009504 <_svfiprintf_r+0x130>
 80094ee:	7863      	ldrb	r3, [r4, #1]
 80094f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80094f2:	d132      	bne.n	800955a <_svfiprintf_r+0x186>
 80094f4:	9b03      	ldr	r3, [sp, #12]
 80094f6:	1d1a      	adds	r2, r3, #4
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	9203      	str	r2, [sp, #12]
 80094fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009500:	3402      	adds	r4, #2
 8009502:	9305      	str	r3, [sp, #20]
 8009504:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80095c8 <_svfiprintf_r+0x1f4>
 8009508:	7821      	ldrb	r1, [r4, #0]
 800950a:	2203      	movs	r2, #3
 800950c:	4650      	mov	r0, sl
 800950e:	f7f6 fe5f 	bl	80001d0 <memchr>
 8009512:	b138      	cbz	r0, 8009524 <_svfiprintf_r+0x150>
 8009514:	9b04      	ldr	r3, [sp, #16]
 8009516:	eba0 000a 	sub.w	r0, r0, sl
 800951a:	2240      	movs	r2, #64	@ 0x40
 800951c:	4082      	lsls	r2, r0
 800951e:	4313      	orrs	r3, r2
 8009520:	3401      	adds	r4, #1
 8009522:	9304      	str	r3, [sp, #16]
 8009524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009528:	4824      	ldr	r0, [pc, #144]	@ (80095bc <_svfiprintf_r+0x1e8>)
 800952a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800952e:	2206      	movs	r2, #6
 8009530:	f7f6 fe4e 	bl	80001d0 <memchr>
 8009534:	2800      	cmp	r0, #0
 8009536:	d036      	beq.n	80095a6 <_svfiprintf_r+0x1d2>
 8009538:	4b21      	ldr	r3, [pc, #132]	@ (80095c0 <_svfiprintf_r+0x1ec>)
 800953a:	bb1b      	cbnz	r3, 8009584 <_svfiprintf_r+0x1b0>
 800953c:	9b03      	ldr	r3, [sp, #12]
 800953e:	3307      	adds	r3, #7
 8009540:	f023 0307 	bic.w	r3, r3, #7
 8009544:	3308      	adds	r3, #8
 8009546:	9303      	str	r3, [sp, #12]
 8009548:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800954a:	4433      	add	r3, r6
 800954c:	9309      	str	r3, [sp, #36]	@ 0x24
 800954e:	e76a      	b.n	8009426 <_svfiprintf_r+0x52>
 8009550:	fb0c 3202 	mla	r2, ip, r2, r3
 8009554:	460c      	mov	r4, r1
 8009556:	2001      	movs	r0, #1
 8009558:	e7a8      	b.n	80094ac <_svfiprintf_r+0xd8>
 800955a:	2300      	movs	r3, #0
 800955c:	3401      	adds	r4, #1
 800955e:	9305      	str	r3, [sp, #20]
 8009560:	4619      	mov	r1, r3
 8009562:	f04f 0c0a 	mov.w	ip, #10
 8009566:	4620      	mov	r0, r4
 8009568:	f810 2b01 	ldrb.w	r2, [r0], #1
 800956c:	3a30      	subs	r2, #48	@ 0x30
 800956e:	2a09      	cmp	r2, #9
 8009570:	d903      	bls.n	800957a <_svfiprintf_r+0x1a6>
 8009572:	2b00      	cmp	r3, #0
 8009574:	d0c6      	beq.n	8009504 <_svfiprintf_r+0x130>
 8009576:	9105      	str	r1, [sp, #20]
 8009578:	e7c4      	b.n	8009504 <_svfiprintf_r+0x130>
 800957a:	fb0c 2101 	mla	r1, ip, r1, r2
 800957e:	4604      	mov	r4, r0
 8009580:	2301      	movs	r3, #1
 8009582:	e7f0      	b.n	8009566 <_svfiprintf_r+0x192>
 8009584:	ab03      	add	r3, sp, #12
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	462a      	mov	r2, r5
 800958a:	4b0e      	ldr	r3, [pc, #56]	@ (80095c4 <_svfiprintf_r+0x1f0>)
 800958c:	a904      	add	r1, sp, #16
 800958e:	4638      	mov	r0, r7
 8009590:	f7fd fe94 	bl	80072bc <_printf_float>
 8009594:	1c42      	adds	r2, r0, #1
 8009596:	4606      	mov	r6, r0
 8009598:	d1d6      	bne.n	8009548 <_svfiprintf_r+0x174>
 800959a:	89ab      	ldrh	r3, [r5, #12]
 800959c:	065b      	lsls	r3, r3, #25
 800959e:	f53f af2d 	bmi.w	80093fc <_svfiprintf_r+0x28>
 80095a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80095a4:	e72c      	b.n	8009400 <_svfiprintf_r+0x2c>
 80095a6:	ab03      	add	r3, sp, #12
 80095a8:	9300      	str	r3, [sp, #0]
 80095aa:	462a      	mov	r2, r5
 80095ac:	4b05      	ldr	r3, [pc, #20]	@ (80095c4 <_svfiprintf_r+0x1f0>)
 80095ae:	a904      	add	r1, sp, #16
 80095b0:	4638      	mov	r0, r7
 80095b2:	f7fe f91b 	bl	80077ec <_printf_i>
 80095b6:	e7ed      	b.n	8009594 <_svfiprintf_r+0x1c0>
 80095b8:	0801cfea 	.word	0x0801cfea
 80095bc:	0801cff4 	.word	0x0801cff4
 80095c0:	080072bd 	.word	0x080072bd
 80095c4:	0800931d 	.word	0x0800931d
 80095c8:	0801cff0 	.word	0x0801cff0

080095cc <__sflush_r>:
 80095cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80095d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095d4:	0716      	lsls	r6, r2, #28
 80095d6:	4605      	mov	r5, r0
 80095d8:	460c      	mov	r4, r1
 80095da:	d454      	bmi.n	8009686 <__sflush_r+0xba>
 80095dc:	684b      	ldr	r3, [r1, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	dc02      	bgt.n	80095e8 <__sflush_r+0x1c>
 80095e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	dd48      	ble.n	800967a <__sflush_r+0xae>
 80095e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80095ea:	2e00      	cmp	r6, #0
 80095ec:	d045      	beq.n	800967a <__sflush_r+0xae>
 80095ee:	2300      	movs	r3, #0
 80095f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80095f4:	682f      	ldr	r7, [r5, #0]
 80095f6:	6a21      	ldr	r1, [r4, #32]
 80095f8:	602b      	str	r3, [r5, #0]
 80095fa:	d030      	beq.n	800965e <__sflush_r+0x92>
 80095fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80095fe:	89a3      	ldrh	r3, [r4, #12]
 8009600:	0759      	lsls	r1, r3, #29
 8009602:	d505      	bpl.n	8009610 <__sflush_r+0x44>
 8009604:	6863      	ldr	r3, [r4, #4]
 8009606:	1ad2      	subs	r2, r2, r3
 8009608:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800960a:	b10b      	cbz	r3, 8009610 <__sflush_r+0x44>
 800960c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800960e:	1ad2      	subs	r2, r2, r3
 8009610:	2300      	movs	r3, #0
 8009612:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009614:	6a21      	ldr	r1, [r4, #32]
 8009616:	4628      	mov	r0, r5
 8009618:	47b0      	blx	r6
 800961a:	1c43      	adds	r3, r0, #1
 800961c:	89a3      	ldrh	r3, [r4, #12]
 800961e:	d106      	bne.n	800962e <__sflush_r+0x62>
 8009620:	6829      	ldr	r1, [r5, #0]
 8009622:	291d      	cmp	r1, #29
 8009624:	d82b      	bhi.n	800967e <__sflush_r+0xb2>
 8009626:	4a2a      	ldr	r2, [pc, #168]	@ (80096d0 <__sflush_r+0x104>)
 8009628:	40ca      	lsrs	r2, r1
 800962a:	07d6      	lsls	r6, r2, #31
 800962c:	d527      	bpl.n	800967e <__sflush_r+0xb2>
 800962e:	2200      	movs	r2, #0
 8009630:	6062      	str	r2, [r4, #4]
 8009632:	04d9      	lsls	r1, r3, #19
 8009634:	6922      	ldr	r2, [r4, #16]
 8009636:	6022      	str	r2, [r4, #0]
 8009638:	d504      	bpl.n	8009644 <__sflush_r+0x78>
 800963a:	1c42      	adds	r2, r0, #1
 800963c:	d101      	bne.n	8009642 <__sflush_r+0x76>
 800963e:	682b      	ldr	r3, [r5, #0]
 8009640:	b903      	cbnz	r3, 8009644 <__sflush_r+0x78>
 8009642:	6560      	str	r0, [r4, #84]	@ 0x54
 8009644:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009646:	602f      	str	r7, [r5, #0]
 8009648:	b1b9      	cbz	r1, 800967a <__sflush_r+0xae>
 800964a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800964e:	4299      	cmp	r1, r3
 8009650:	d002      	beq.n	8009658 <__sflush_r+0x8c>
 8009652:	4628      	mov	r0, r5
 8009654:	f7ff f9e8 	bl	8008a28 <_free_r>
 8009658:	2300      	movs	r3, #0
 800965a:	6363      	str	r3, [r4, #52]	@ 0x34
 800965c:	e00d      	b.n	800967a <__sflush_r+0xae>
 800965e:	2301      	movs	r3, #1
 8009660:	4628      	mov	r0, r5
 8009662:	47b0      	blx	r6
 8009664:	4602      	mov	r2, r0
 8009666:	1c50      	adds	r0, r2, #1
 8009668:	d1c9      	bne.n	80095fe <__sflush_r+0x32>
 800966a:	682b      	ldr	r3, [r5, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d0c6      	beq.n	80095fe <__sflush_r+0x32>
 8009670:	2b1d      	cmp	r3, #29
 8009672:	d001      	beq.n	8009678 <__sflush_r+0xac>
 8009674:	2b16      	cmp	r3, #22
 8009676:	d11e      	bne.n	80096b6 <__sflush_r+0xea>
 8009678:	602f      	str	r7, [r5, #0]
 800967a:	2000      	movs	r0, #0
 800967c:	e022      	b.n	80096c4 <__sflush_r+0xf8>
 800967e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009682:	b21b      	sxth	r3, r3
 8009684:	e01b      	b.n	80096be <__sflush_r+0xf2>
 8009686:	690f      	ldr	r7, [r1, #16]
 8009688:	2f00      	cmp	r7, #0
 800968a:	d0f6      	beq.n	800967a <__sflush_r+0xae>
 800968c:	0793      	lsls	r3, r2, #30
 800968e:	680e      	ldr	r6, [r1, #0]
 8009690:	bf08      	it	eq
 8009692:	694b      	ldreq	r3, [r1, #20]
 8009694:	600f      	str	r7, [r1, #0]
 8009696:	bf18      	it	ne
 8009698:	2300      	movne	r3, #0
 800969a:	eba6 0807 	sub.w	r8, r6, r7
 800969e:	608b      	str	r3, [r1, #8]
 80096a0:	f1b8 0f00 	cmp.w	r8, #0
 80096a4:	dde9      	ble.n	800967a <__sflush_r+0xae>
 80096a6:	6a21      	ldr	r1, [r4, #32]
 80096a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80096aa:	4643      	mov	r3, r8
 80096ac:	463a      	mov	r2, r7
 80096ae:	4628      	mov	r0, r5
 80096b0:	47b0      	blx	r6
 80096b2:	2800      	cmp	r0, #0
 80096b4:	dc08      	bgt.n	80096c8 <__sflush_r+0xfc>
 80096b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096be:	81a3      	strh	r3, [r4, #12]
 80096c0:	f04f 30ff 	mov.w	r0, #4294967295
 80096c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096c8:	4407      	add	r7, r0
 80096ca:	eba8 0800 	sub.w	r8, r8, r0
 80096ce:	e7e7      	b.n	80096a0 <__sflush_r+0xd4>
 80096d0:	20400001 	.word	0x20400001

080096d4 <_fflush_r>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	690b      	ldr	r3, [r1, #16]
 80096d8:	4605      	mov	r5, r0
 80096da:	460c      	mov	r4, r1
 80096dc:	b913      	cbnz	r3, 80096e4 <_fflush_r+0x10>
 80096de:	2500      	movs	r5, #0
 80096e0:	4628      	mov	r0, r5
 80096e2:	bd38      	pop	{r3, r4, r5, pc}
 80096e4:	b118      	cbz	r0, 80096ee <_fflush_r+0x1a>
 80096e6:	6a03      	ldr	r3, [r0, #32]
 80096e8:	b90b      	cbnz	r3, 80096ee <_fflush_r+0x1a>
 80096ea:	f7fe fa29 	bl	8007b40 <__sinit>
 80096ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d0f3      	beq.n	80096de <_fflush_r+0xa>
 80096f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80096f8:	07d0      	lsls	r0, r2, #31
 80096fa:	d404      	bmi.n	8009706 <_fflush_r+0x32>
 80096fc:	0599      	lsls	r1, r3, #22
 80096fe:	d402      	bmi.n	8009706 <_fflush_r+0x32>
 8009700:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009702:	f7fe fb36 	bl	8007d72 <__retarget_lock_acquire_recursive>
 8009706:	4628      	mov	r0, r5
 8009708:	4621      	mov	r1, r4
 800970a:	f7ff ff5f 	bl	80095cc <__sflush_r>
 800970e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009710:	07da      	lsls	r2, r3, #31
 8009712:	4605      	mov	r5, r0
 8009714:	d4e4      	bmi.n	80096e0 <_fflush_r+0xc>
 8009716:	89a3      	ldrh	r3, [r4, #12]
 8009718:	059b      	lsls	r3, r3, #22
 800971a:	d4e1      	bmi.n	80096e0 <_fflush_r+0xc>
 800971c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800971e:	f7fe fb29 	bl	8007d74 <__retarget_lock_release_recursive>
 8009722:	e7dd      	b.n	80096e0 <_fflush_r+0xc>

08009724 <memmove>:
 8009724:	4288      	cmp	r0, r1
 8009726:	b510      	push	{r4, lr}
 8009728:	eb01 0402 	add.w	r4, r1, r2
 800972c:	d902      	bls.n	8009734 <memmove+0x10>
 800972e:	4284      	cmp	r4, r0
 8009730:	4623      	mov	r3, r4
 8009732:	d807      	bhi.n	8009744 <memmove+0x20>
 8009734:	1e43      	subs	r3, r0, #1
 8009736:	42a1      	cmp	r1, r4
 8009738:	d008      	beq.n	800974c <memmove+0x28>
 800973a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800973e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009742:	e7f8      	b.n	8009736 <memmove+0x12>
 8009744:	4402      	add	r2, r0
 8009746:	4601      	mov	r1, r0
 8009748:	428a      	cmp	r2, r1
 800974a:	d100      	bne.n	800974e <memmove+0x2a>
 800974c:	bd10      	pop	{r4, pc}
 800974e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009752:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009756:	e7f7      	b.n	8009748 <memmove+0x24>

08009758 <_sbrk_r>:
 8009758:	b538      	push	{r3, r4, r5, lr}
 800975a:	4d06      	ldr	r5, [pc, #24]	@ (8009774 <_sbrk_r+0x1c>)
 800975c:	2300      	movs	r3, #0
 800975e:	4604      	mov	r4, r0
 8009760:	4608      	mov	r0, r1
 8009762:	602b      	str	r3, [r5, #0]
 8009764:	f7f8 f932 	bl	80019cc <_sbrk>
 8009768:	1c43      	adds	r3, r0, #1
 800976a:	d102      	bne.n	8009772 <_sbrk_r+0x1a>
 800976c:	682b      	ldr	r3, [r5, #0]
 800976e:	b103      	cbz	r3, 8009772 <_sbrk_r+0x1a>
 8009770:	6023      	str	r3, [r4, #0]
 8009772:	bd38      	pop	{r3, r4, r5, pc}
 8009774:	20003d1c 	.word	0x20003d1c

08009778 <memcpy>:
 8009778:	440a      	add	r2, r1
 800977a:	4291      	cmp	r1, r2
 800977c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009780:	d100      	bne.n	8009784 <memcpy+0xc>
 8009782:	4770      	bx	lr
 8009784:	b510      	push	{r4, lr}
 8009786:	f811 4b01 	ldrb.w	r4, [r1], #1
 800978a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800978e:	4291      	cmp	r1, r2
 8009790:	d1f9      	bne.n	8009786 <memcpy+0xe>
 8009792:	bd10      	pop	{r4, pc}

08009794 <__assert_func>:
 8009794:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009796:	4614      	mov	r4, r2
 8009798:	461a      	mov	r2, r3
 800979a:	4b09      	ldr	r3, [pc, #36]	@ (80097c0 <__assert_func+0x2c>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4605      	mov	r5, r0
 80097a0:	68d8      	ldr	r0, [r3, #12]
 80097a2:	b14c      	cbz	r4, 80097b8 <__assert_func+0x24>
 80097a4:	4b07      	ldr	r3, [pc, #28]	@ (80097c4 <__assert_func+0x30>)
 80097a6:	9100      	str	r1, [sp, #0]
 80097a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80097ac:	4906      	ldr	r1, [pc, #24]	@ (80097c8 <__assert_func+0x34>)
 80097ae:	462b      	mov	r3, r5
 80097b0:	f000 f870 	bl	8009894 <fiprintf>
 80097b4:	f000 f880 	bl	80098b8 <abort>
 80097b8:	4b04      	ldr	r3, [pc, #16]	@ (80097cc <__assert_func+0x38>)
 80097ba:	461c      	mov	r4, r3
 80097bc:	e7f3      	b.n	80097a6 <__assert_func+0x12>
 80097be:	bf00      	nop
 80097c0:	20000018 	.word	0x20000018
 80097c4:	0801d005 	.word	0x0801d005
 80097c8:	0801d012 	.word	0x0801d012
 80097cc:	0801d040 	.word	0x0801d040

080097d0 <_calloc_r>:
 80097d0:	b570      	push	{r4, r5, r6, lr}
 80097d2:	fba1 5402 	umull	r5, r4, r1, r2
 80097d6:	b934      	cbnz	r4, 80097e6 <_calloc_r+0x16>
 80097d8:	4629      	mov	r1, r5
 80097da:	f7ff f999 	bl	8008b10 <_malloc_r>
 80097de:	4606      	mov	r6, r0
 80097e0:	b928      	cbnz	r0, 80097ee <_calloc_r+0x1e>
 80097e2:	4630      	mov	r0, r6
 80097e4:	bd70      	pop	{r4, r5, r6, pc}
 80097e6:	220c      	movs	r2, #12
 80097e8:	6002      	str	r2, [r0, #0]
 80097ea:	2600      	movs	r6, #0
 80097ec:	e7f9      	b.n	80097e2 <_calloc_r+0x12>
 80097ee:	462a      	mov	r2, r5
 80097f0:	4621      	mov	r1, r4
 80097f2:	f7fe fa40 	bl	8007c76 <memset>
 80097f6:	e7f4      	b.n	80097e2 <_calloc_r+0x12>

080097f8 <__ascii_mbtowc>:
 80097f8:	b082      	sub	sp, #8
 80097fa:	b901      	cbnz	r1, 80097fe <__ascii_mbtowc+0x6>
 80097fc:	a901      	add	r1, sp, #4
 80097fe:	b142      	cbz	r2, 8009812 <__ascii_mbtowc+0x1a>
 8009800:	b14b      	cbz	r3, 8009816 <__ascii_mbtowc+0x1e>
 8009802:	7813      	ldrb	r3, [r2, #0]
 8009804:	600b      	str	r3, [r1, #0]
 8009806:	7812      	ldrb	r2, [r2, #0]
 8009808:	1e10      	subs	r0, r2, #0
 800980a:	bf18      	it	ne
 800980c:	2001      	movne	r0, #1
 800980e:	b002      	add	sp, #8
 8009810:	4770      	bx	lr
 8009812:	4610      	mov	r0, r2
 8009814:	e7fb      	b.n	800980e <__ascii_mbtowc+0x16>
 8009816:	f06f 0001 	mvn.w	r0, #1
 800981a:	e7f8      	b.n	800980e <__ascii_mbtowc+0x16>

0800981c <_realloc_r>:
 800981c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009820:	4607      	mov	r7, r0
 8009822:	4614      	mov	r4, r2
 8009824:	460d      	mov	r5, r1
 8009826:	b921      	cbnz	r1, 8009832 <_realloc_r+0x16>
 8009828:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800982c:	4611      	mov	r1, r2
 800982e:	f7ff b96f 	b.w	8008b10 <_malloc_r>
 8009832:	b92a      	cbnz	r2, 8009840 <_realloc_r+0x24>
 8009834:	f7ff f8f8 	bl	8008a28 <_free_r>
 8009838:	4625      	mov	r5, r4
 800983a:	4628      	mov	r0, r5
 800983c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009840:	f000 f841 	bl	80098c6 <_malloc_usable_size_r>
 8009844:	4284      	cmp	r4, r0
 8009846:	4606      	mov	r6, r0
 8009848:	d802      	bhi.n	8009850 <_realloc_r+0x34>
 800984a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800984e:	d8f4      	bhi.n	800983a <_realloc_r+0x1e>
 8009850:	4621      	mov	r1, r4
 8009852:	4638      	mov	r0, r7
 8009854:	f7ff f95c 	bl	8008b10 <_malloc_r>
 8009858:	4680      	mov	r8, r0
 800985a:	b908      	cbnz	r0, 8009860 <_realloc_r+0x44>
 800985c:	4645      	mov	r5, r8
 800985e:	e7ec      	b.n	800983a <_realloc_r+0x1e>
 8009860:	42b4      	cmp	r4, r6
 8009862:	4622      	mov	r2, r4
 8009864:	4629      	mov	r1, r5
 8009866:	bf28      	it	cs
 8009868:	4632      	movcs	r2, r6
 800986a:	f7ff ff85 	bl	8009778 <memcpy>
 800986e:	4629      	mov	r1, r5
 8009870:	4638      	mov	r0, r7
 8009872:	f7ff f8d9 	bl	8008a28 <_free_r>
 8009876:	e7f1      	b.n	800985c <_realloc_r+0x40>

08009878 <__ascii_wctomb>:
 8009878:	4603      	mov	r3, r0
 800987a:	4608      	mov	r0, r1
 800987c:	b141      	cbz	r1, 8009890 <__ascii_wctomb+0x18>
 800987e:	2aff      	cmp	r2, #255	@ 0xff
 8009880:	d904      	bls.n	800988c <__ascii_wctomb+0x14>
 8009882:	228a      	movs	r2, #138	@ 0x8a
 8009884:	601a      	str	r2, [r3, #0]
 8009886:	f04f 30ff 	mov.w	r0, #4294967295
 800988a:	4770      	bx	lr
 800988c:	700a      	strb	r2, [r1, #0]
 800988e:	2001      	movs	r0, #1
 8009890:	4770      	bx	lr
	...

08009894 <fiprintf>:
 8009894:	b40e      	push	{r1, r2, r3}
 8009896:	b503      	push	{r0, r1, lr}
 8009898:	4601      	mov	r1, r0
 800989a:	ab03      	add	r3, sp, #12
 800989c:	4805      	ldr	r0, [pc, #20]	@ (80098b4 <fiprintf+0x20>)
 800989e:	f853 2b04 	ldr.w	r2, [r3], #4
 80098a2:	6800      	ldr	r0, [r0, #0]
 80098a4:	9301      	str	r3, [sp, #4]
 80098a6:	f000 f83f 	bl	8009928 <_vfiprintf_r>
 80098aa:	b002      	add	sp, #8
 80098ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80098b0:	b003      	add	sp, #12
 80098b2:	4770      	bx	lr
 80098b4:	20000018 	.word	0x20000018

080098b8 <abort>:
 80098b8:	b508      	push	{r3, lr}
 80098ba:	2006      	movs	r0, #6
 80098bc:	f000 fa08 	bl	8009cd0 <raise>
 80098c0:	2001      	movs	r0, #1
 80098c2:	f7f8 f80b 	bl	80018dc <_exit>

080098c6 <_malloc_usable_size_r>:
 80098c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098ca:	1f18      	subs	r0, r3, #4
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	bfbc      	itt	lt
 80098d0:	580b      	ldrlt	r3, [r1, r0]
 80098d2:	18c0      	addlt	r0, r0, r3
 80098d4:	4770      	bx	lr

080098d6 <__sfputc_r>:
 80098d6:	6893      	ldr	r3, [r2, #8]
 80098d8:	3b01      	subs	r3, #1
 80098da:	2b00      	cmp	r3, #0
 80098dc:	b410      	push	{r4}
 80098de:	6093      	str	r3, [r2, #8]
 80098e0:	da08      	bge.n	80098f4 <__sfputc_r+0x1e>
 80098e2:	6994      	ldr	r4, [r2, #24]
 80098e4:	42a3      	cmp	r3, r4
 80098e6:	db01      	blt.n	80098ec <__sfputc_r+0x16>
 80098e8:	290a      	cmp	r1, #10
 80098ea:	d103      	bne.n	80098f4 <__sfputc_r+0x1e>
 80098ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098f0:	f000 b932 	b.w	8009b58 <__swbuf_r>
 80098f4:	6813      	ldr	r3, [r2, #0]
 80098f6:	1c58      	adds	r0, r3, #1
 80098f8:	6010      	str	r0, [r2, #0]
 80098fa:	7019      	strb	r1, [r3, #0]
 80098fc:	4608      	mov	r0, r1
 80098fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009902:	4770      	bx	lr

08009904 <__sfputs_r>:
 8009904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009906:	4606      	mov	r6, r0
 8009908:	460f      	mov	r7, r1
 800990a:	4614      	mov	r4, r2
 800990c:	18d5      	adds	r5, r2, r3
 800990e:	42ac      	cmp	r4, r5
 8009910:	d101      	bne.n	8009916 <__sfputs_r+0x12>
 8009912:	2000      	movs	r0, #0
 8009914:	e007      	b.n	8009926 <__sfputs_r+0x22>
 8009916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800991a:	463a      	mov	r2, r7
 800991c:	4630      	mov	r0, r6
 800991e:	f7ff ffda 	bl	80098d6 <__sfputc_r>
 8009922:	1c43      	adds	r3, r0, #1
 8009924:	d1f3      	bne.n	800990e <__sfputs_r+0xa>
 8009926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009928 <_vfiprintf_r>:
 8009928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992c:	460d      	mov	r5, r1
 800992e:	b09d      	sub	sp, #116	@ 0x74
 8009930:	4614      	mov	r4, r2
 8009932:	4698      	mov	r8, r3
 8009934:	4606      	mov	r6, r0
 8009936:	b118      	cbz	r0, 8009940 <_vfiprintf_r+0x18>
 8009938:	6a03      	ldr	r3, [r0, #32]
 800993a:	b90b      	cbnz	r3, 8009940 <_vfiprintf_r+0x18>
 800993c:	f7fe f900 	bl	8007b40 <__sinit>
 8009940:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009942:	07d9      	lsls	r1, r3, #31
 8009944:	d405      	bmi.n	8009952 <_vfiprintf_r+0x2a>
 8009946:	89ab      	ldrh	r3, [r5, #12]
 8009948:	059a      	lsls	r2, r3, #22
 800994a:	d402      	bmi.n	8009952 <_vfiprintf_r+0x2a>
 800994c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800994e:	f7fe fa10 	bl	8007d72 <__retarget_lock_acquire_recursive>
 8009952:	89ab      	ldrh	r3, [r5, #12]
 8009954:	071b      	lsls	r3, r3, #28
 8009956:	d501      	bpl.n	800995c <_vfiprintf_r+0x34>
 8009958:	692b      	ldr	r3, [r5, #16]
 800995a:	b99b      	cbnz	r3, 8009984 <_vfiprintf_r+0x5c>
 800995c:	4629      	mov	r1, r5
 800995e:	4630      	mov	r0, r6
 8009960:	f000 f938 	bl	8009bd4 <__swsetup_r>
 8009964:	b170      	cbz	r0, 8009984 <_vfiprintf_r+0x5c>
 8009966:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009968:	07dc      	lsls	r4, r3, #31
 800996a:	d504      	bpl.n	8009976 <_vfiprintf_r+0x4e>
 800996c:	f04f 30ff 	mov.w	r0, #4294967295
 8009970:	b01d      	add	sp, #116	@ 0x74
 8009972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009976:	89ab      	ldrh	r3, [r5, #12]
 8009978:	0598      	lsls	r0, r3, #22
 800997a:	d4f7      	bmi.n	800996c <_vfiprintf_r+0x44>
 800997c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800997e:	f7fe f9f9 	bl	8007d74 <__retarget_lock_release_recursive>
 8009982:	e7f3      	b.n	800996c <_vfiprintf_r+0x44>
 8009984:	2300      	movs	r3, #0
 8009986:	9309      	str	r3, [sp, #36]	@ 0x24
 8009988:	2320      	movs	r3, #32
 800998a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800998e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009992:	2330      	movs	r3, #48	@ 0x30
 8009994:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009b44 <_vfiprintf_r+0x21c>
 8009998:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800999c:	f04f 0901 	mov.w	r9, #1
 80099a0:	4623      	mov	r3, r4
 80099a2:	469a      	mov	sl, r3
 80099a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099a8:	b10a      	cbz	r2, 80099ae <_vfiprintf_r+0x86>
 80099aa:	2a25      	cmp	r2, #37	@ 0x25
 80099ac:	d1f9      	bne.n	80099a2 <_vfiprintf_r+0x7a>
 80099ae:	ebba 0b04 	subs.w	fp, sl, r4
 80099b2:	d00b      	beq.n	80099cc <_vfiprintf_r+0xa4>
 80099b4:	465b      	mov	r3, fp
 80099b6:	4622      	mov	r2, r4
 80099b8:	4629      	mov	r1, r5
 80099ba:	4630      	mov	r0, r6
 80099bc:	f7ff ffa2 	bl	8009904 <__sfputs_r>
 80099c0:	3001      	adds	r0, #1
 80099c2:	f000 80a7 	beq.w	8009b14 <_vfiprintf_r+0x1ec>
 80099c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099c8:	445a      	add	r2, fp
 80099ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80099cc:	f89a 3000 	ldrb.w	r3, [sl]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f000 809f 	beq.w	8009b14 <_vfiprintf_r+0x1ec>
 80099d6:	2300      	movs	r3, #0
 80099d8:	f04f 32ff 	mov.w	r2, #4294967295
 80099dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099e0:	f10a 0a01 	add.w	sl, sl, #1
 80099e4:	9304      	str	r3, [sp, #16]
 80099e6:	9307      	str	r3, [sp, #28]
 80099e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80099ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80099ee:	4654      	mov	r4, sl
 80099f0:	2205      	movs	r2, #5
 80099f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099f6:	4853      	ldr	r0, [pc, #332]	@ (8009b44 <_vfiprintf_r+0x21c>)
 80099f8:	f7f6 fbea 	bl	80001d0 <memchr>
 80099fc:	9a04      	ldr	r2, [sp, #16]
 80099fe:	b9d8      	cbnz	r0, 8009a38 <_vfiprintf_r+0x110>
 8009a00:	06d1      	lsls	r1, r2, #27
 8009a02:	bf44      	itt	mi
 8009a04:	2320      	movmi	r3, #32
 8009a06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a0a:	0713      	lsls	r3, r2, #28
 8009a0c:	bf44      	itt	mi
 8009a0e:	232b      	movmi	r3, #43	@ 0x2b
 8009a10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a14:	f89a 3000 	ldrb.w	r3, [sl]
 8009a18:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a1a:	d015      	beq.n	8009a48 <_vfiprintf_r+0x120>
 8009a1c:	9a07      	ldr	r2, [sp, #28]
 8009a1e:	4654      	mov	r4, sl
 8009a20:	2000      	movs	r0, #0
 8009a22:	f04f 0c0a 	mov.w	ip, #10
 8009a26:	4621      	mov	r1, r4
 8009a28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a2c:	3b30      	subs	r3, #48	@ 0x30
 8009a2e:	2b09      	cmp	r3, #9
 8009a30:	d94b      	bls.n	8009aca <_vfiprintf_r+0x1a2>
 8009a32:	b1b0      	cbz	r0, 8009a62 <_vfiprintf_r+0x13a>
 8009a34:	9207      	str	r2, [sp, #28]
 8009a36:	e014      	b.n	8009a62 <_vfiprintf_r+0x13a>
 8009a38:	eba0 0308 	sub.w	r3, r0, r8
 8009a3c:	fa09 f303 	lsl.w	r3, r9, r3
 8009a40:	4313      	orrs	r3, r2
 8009a42:	9304      	str	r3, [sp, #16]
 8009a44:	46a2      	mov	sl, r4
 8009a46:	e7d2      	b.n	80099ee <_vfiprintf_r+0xc6>
 8009a48:	9b03      	ldr	r3, [sp, #12]
 8009a4a:	1d19      	adds	r1, r3, #4
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	9103      	str	r1, [sp, #12]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	bfbb      	ittet	lt
 8009a54:	425b      	neglt	r3, r3
 8009a56:	f042 0202 	orrlt.w	r2, r2, #2
 8009a5a:	9307      	strge	r3, [sp, #28]
 8009a5c:	9307      	strlt	r3, [sp, #28]
 8009a5e:	bfb8      	it	lt
 8009a60:	9204      	strlt	r2, [sp, #16]
 8009a62:	7823      	ldrb	r3, [r4, #0]
 8009a64:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a66:	d10a      	bne.n	8009a7e <_vfiprintf_r+0x156>
 8009a68:	7863      	ldrb	r3, [r4, #1]
 8009a6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a6c:	d132      	bne.n	8009ad4 <_vfiprintf_r+0x1ac>
 8009a6e:	9b03      	ldr	r3, [sp, #12]
 8009a70:	1d1a      	adds	r2, r3, #4
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	9203      	str	r2, [sp, #12]
 8009a76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a7a:	3402      	adds	r4, #2
 8009a7c:	9305      	str	r3, [sp, #20]
 8009a7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009b54 <_vfiprintf_r+0x22c>
 8009a82:	7821      	ldrb	r1, [r4, #0]
 8009a84:	2203      	movs	r2, #3
 8009a86:	4650      	mov	r0, sl
 8009a88:	f7f6 fba2 	bl	80001d0 <memchr>
 8009a8c:	b138      	cbz	r0, 8009a9e <_vfiprintf_r+0x176>
 8009a8e:	9b04      	ldr	r3, [sp, #16]
 8009a90:	eba0 000a 	sub.w	r0, r0, sl
 8009a94:	2240      	movs	r2, #64	@ 0x40
 8009a96:	4082      	lsls	r2, r0
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	3401      	adds	r4, #1
 8009a9c:	9304      	str	r3, [sp, #16]
 8009a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aa2:	4829      	ldr	r0, [pc, #164]	@ (8009b48 <_vfiprintf_r+0x220>)
 8009aa4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009aa8:	2206      	movs	r2, #6
 8009aaa:	f7f6 fb91 	bl	80001d0 <memchr>
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	d03f      	beq.n	8009b32 <_vfiprintf_r+0x20a>
 8009ab2:	4b26      	ldr	r3, [pc, #152]	@ (8009b4c <_vfiprintf_r+0x224>)
 8009ab4:	bb1b      	cbnz	r3, 8009afe <_vfiprintf_r+0x1d6>
 8009ab6:	9b03      	ldr	r3, [sp, #12]
 8009ab8:	3307      	adds	r3, #7
 8009aba:	f023 0307 	bic.w	r3, r3, #7
 8009abe:	3308      	adds	r3, #8
 8009ac0:	9303      	str	r3, [sp, #12]
 8009ac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ac4:	443b      	add	r3, r7
 8009ac6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ac8:	e76a      	b.n	80099a0 <_vfiprintf_r+0x78>
 8009aca:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ace:	460c      	mov	r4, r1
 8009ad0:	2001      	movs	r0, #1
 8009ad2:	e7a8      	b.n	8009a26 <_vfiprintf_r+0xfe>
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	3401      	adds	r4, #1
 8009ad8:	9305      	str	r3, [sp, #20]
 8009ada:	4619      	mov	r1, r3
 8009adc:	f04f 0c0a 	mov.w	ip, #10
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ae6:	3a30      	subs	r2, #48	@ 0x30
 8009ae8:	2a09      	cmp	r2, #9
 8009aea:	d903      	bls.n	8009af4 <_vfiprintf_r+0x1cc>
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d0c6      	beq.n	8009a7e <_vfiprintf_r+0x156>
 8009af0:	9105      	str	r1, [sp, #20]
 8009af2:	e7c4      	b.n	8009a7e <_vfiprintf_r+0x156>
 8009af4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009af8:	4604      	mov	r4, r0
 8009afa:	2301      	movs	r3, #1
 8009afc:	e7f0      	b.n	8009ae0 <_vfiprintf_r+0x1b8>
 8009afe:	ab03      	add	r3, sp, #12
 8009b00:	9300      	str	r3, [sp, #0]
 8009b02:	462a      	mov	r2, r5
 8009b04:	4b12      	ldr	r3, [pc, #72]	@ (8009b50 <_vfiprintf_r+0x228>)
 8009b06:	a904      	add	r1, sp, #16
 8009b08:	4630      	mov	r0, r6
 8009b0a:	f7fd fbd7 	bl	80072bc <_printf_float>
 8009b0e:	4607      	mov	r7, r0
 8009b10:	1c78      	adds	r0, r7, #1
 8009b12:	d1d6      	bne.n	8009ac2 <_vfiprintf_r+0x19a>
 8009b14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b16:	07d9      	lsls	r1, r3, #31
 8009b18:	d405      	bmi.n	8009b26 <_vfiprintf_r+0x1fe>
 8009b1a:	89ab      	ldrh	r3, [r5, #12]
 8009b1c:	059a      	lsls	r2, r3, #22
 8009b1e:	d402      	bmi.n	8009b26 <_vfiprintf_r+0x1fe>
 8009b20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b22:	f7fe f927 	bl	8007d74 <__retarget_lock_release_recursive>
 8009b26:	89ab      	ldrh	r3, [r5, #12]
 8009b28:	065b      	lsls	r3, r3, #25
 8009b2a:	f53f af1f 	bmi.w	800996c <_vfiprintf_r+0x44>
 8009b2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b30:	e71e      	b.n	8009970 <_vfiprintf_r+0x48>
 8009b32:	ab03      	add	r3, sp, #12
 8009b34:	9300      	str	r3, [sp, #0]
 8009b36:	462a      	mov	r2, r5
 8009b38:	4b05      	ldr	r3, [pc, #20]	@ (8009b50 <_vfiprintf_r+0x228>)
 8009b3a:	a904      	add	r1, sp, #16
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	f7fd fe55 	bl	80077ec <_printf_i>
 8009b42:	e7e4      	b.n	8009b0e <_vfiprintf_r+0x1e6>
 8009b44:	0801cfea 	.word	0x0801cfea
 8009b48:	0801cff4 	.word	0x0801cff4
 8009b4c:	080072bd 	.word	0x080072bd
 8009b50:	08009905 	.word	0x08009905
 8009b54:	0801cff0 	.word	0x0801cff0

08009b58 <__swbuf_r>:
 8009b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5a:	460e      	mov	r6, r1
 8009b5c:	4614      	mov	r4, r2
 8009b5e:	4605      	mov	r5, r0
 8009b60:	b118      	cbz	r0, 8009b6a <__swbuf_r+0x12>
 8009b62:	6a03      	ldr	r3, [r0, #32]
 8009b64:	b90b      	cbnz	r3, 8009b6a <__swbuf_r+0x12>
 8009b66:	f7fd ffeb 	bl	8007b40 <__sinit>
 8009b6a:	69a3      	ldr	r3, [r4, #24]
 8009b6c:	60a3      	str	r3, [r4, #8]
 8009b6e:	89a3      	ldrh	r3, [r4, #12]
 8009b70:	071a      	lsls	r2, r3, #28
 8009b72:	d501      	bpl.n	8009b78 <__swbuf_r+0x20>
 8009b74:	6923      	ldr	r3, [r4, #16]
 8009b76:	b943      	cbnz	r3, 8009b8a <__swbuf_r+0x32>
 8009b78:	4621      	mov	r1, r4
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	f000 f82a 	bl	8009bd4 <__swsetup_r>
 8009b80:	b118      	cbz	r0, 8009b8a <__swbuf_r+0x32>
 8009b82:	f04f 37ff 	mov.w	r7, #4294967295
 8009b86:	4638      	mov	r0, r7
 8009b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b8a:	6823      	ldr	r3, [r4, #0]
 8009b8c:	6922      	ldr	r2, [r4, #16]
 8009b8e:	1a98      	subs	r0, r3, r2
 8009b90:	6963      	ldr	r3, [r4, #20]
 8009b92:	b2f6      	uxtb	r6, r6
 8009b94:	4283      	cmp	r3, r0
 8009b96:	4637      	mov	r7, r6
 8009b98:	dc05      	bgt.n	8009ba6 <__swbuf_r+0x4e>
 8009b9a:	4621      	mov	r1, r4
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	f7ff fd99 	bl	80096d4 <_fflush_r>
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	d1ed      	bne.n	8009b82 <__swbuf_r+0x2a>
 8009ba6:	68a3      	ldr	r3, [r4, #8]
 8009ba8:	3b01      	subs	r3, #1
 8009baa:	60a3      	str	r3, [r4, #8]
 8009bac:	6823      	ldr	r3, [r4, #0]
 8009bae:	1c5a      	adds	r2, r3, #1
 8009bb0:	6022      	str	r2, [r4, #0]
 8009bb2:	701e      	strb	r6, [r3, #0]
 8009bb4:	6962      	ldr	r2, [r4, #20]
 8009bb6:	1c43      	adds	r3, r0, #1
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d004      	beq.n	8009bc6 <__swbuf_r+0x6e>
 8009bbc:	89a3      	ldrh	r3, [r4, #12]
 8009bbe:	07db      	lsls	r3, r3, #31
 8009bc0:	d5e1      	bpl.n	8009b86 <__swbuf_r+0x2e>
 8009bc2:	2e0a      	cmp	r6, #10
 8009bc4:	d1df      	bne.n	8009b86 <__swbuf_r+0x2e>
 8009bc6:	4621      	mov	r1, r4
 8009bc8:	4628      	mov	r0, r5
 8009bca:	f7ff fd83 	bl	80096d4 <_fflush_r>
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	d0d9      	beq.n	8009b86 <__swbuf_r+0x2e>
 8009bd2:	e7d6      	b.n	8009b82 <__swbuf_r+0x2a>

08009bd4 <__swsetup_r>:
 8009bd4:	b538      	push	{r3, r4, r5, lr}
 8009bd6:	4b29      	ldr	r3, [pc, #164]	@ (8009c7c <__swsetup_r+0xa8>)
 8009bd8:	4605      	mov	r5, r0
 8009bda:	6818      	ldr	r0, [r3, #0]
 8009bdc:	460c      	mov	r4, r1
 8009bde:	b118      	cbz	r0, 8009be8 <__swsetup_r+0x14>
 8009be0:	6a03      	ldr	r3, [r0, #32]
 8009be2:	b90b      	cbnz	r3, 8009be8 <__swsetup_r+0x14>
 8009be4:	f7fd ffac 	bl	8007b40 <__sinit>
 8009be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bec:	0719      	lsls	r1, r3, #28
 8009bee:	d422      	bmi.n	8009c36 <__swsetup_r+0x62>
 8009bf0:	06da      	lsls	r2, r3, #27
 8009bf2:	d407      	bmi.n	8009c04 <__swsetup_r+0x30>
 8009bf4:	2209      	movs	r2, #9
 8009bf6:	602a      	str	r2, [r5, #0]
 8009bf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bfc:	81a3      	strh	r3, [r4, #12]
 8009bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8009c02:	e033      	b.n	8009c6c <__swsetup_r+0x98>
 8009c04:	0758      	lsls	r0, r3, #29
 8009c06:	d512      	bpl.n	8009c2e <__swsetup_r+0x5a>
 8009c08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c0a:	b141      	cbz	r1, 8009c1e <__swsetup_r+0x4a>
 8009c0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c10:	4299      	cmp	r1, r3
 8009c12:	d002      	beq.n	8009c1a <__swsetup_r+0x46>
 8009c14:	4628      	mov	r0, r5
 8009c16:	f7fe ff07 	bl	8008a28 <_free_r>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c1e:	89a3      	ldrh	r3, [r4, #12]
 8009c20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009c24:	81a3      	strh	r3, [r4, #12]
 8009c26:	2300      	movs	r3, #0
 8009c28:	6063      	str	r3, [r4, #4]
 8009c2a:	6923      	ldr	r3, [r4, #16]
 8009c2c:	6023      	str	r3, [r4, #0]
 8009c2e:	89a3      	ldrh	r3, [r4, #12]
 8009c30:	f043 0308 	orr.w	r3, r3, #8
 8009c34:	81a3      	strh	r3, [r4, #12]
 8009c36:	6923      	ldr	r3, [r4, #16]
 8009c38:	b94b      	cbnz	r3, 8009c4e <__swsetup_r+0x7a>
 8009c3a:	89a3      	ldrh	r3, [r4, #12]
 8009c3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009c40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c44:	d003      	beq.n	8009c4e <__swsetup_r+0x7a>
 8009c46:	4621      	mov	r1, r4
 8009c48:	4628      	mov	r0, r5
 8009c4a:	f000 f883 	bl	8009d54 <__smakebuf_r>
 8009c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c52:	f013 0201 	ands.w	r2, r3, #1
 8009c56:	d00a      	beq.n	8009c6e <__swsetup_r+0x9a>
 8009c58:	2200      	movs	r2, #0
 8009c5a:	60a2      	str	r2, [r4, #8]
 8009c5c:	6962      	ldr	r2, [r4, #20]
 8009c5e:	4252      	negs	r2, r2
 8009c60:	61a2      	str	r2, [r4, #24]
 8009c62:	6922      	ldr	r2, [r4, #16]
 8009c64:	b942      	cbnz	r2, 8009c78 <__swsetup_r+0xa4>
 8009c66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009c6a:	d1c5      	bne.n	8009bf8 <__swsetup_r+0x24>
 8009c6c:	bd38      	pop	{r3, r4, r5, pc}
 8009c6e:	0799      	lsls	r1, r3, #30
 8009c70:	bf58      	it	pl
 8009c72:	6962      	ldrpl	r2, [r4, #20]
 8009c74:	60a2      	str	r2, [r4, #8]
 8009c76:	e7f4      	b.n	8009c62 <__swsetup_r+0x8e>
 8009c78:	2000      	movs	r0, #0
 8009c7a:	e7f7      	b.n	8009c6c <__swsetup_r+0x98>
 8009c7c:	20000018 	.word	0x20000018

08009c80 <_raise_r>:
 8009c80:	291f      	cmp	r1, #31
 8009c82:	b538      	push	{r3, r4, r5, lr}
 8009c84:	4605      	mov	r5, r0
 8009c86:	460c      	mov	r4, r1
 8009c88:	d904      	bls.n	8009c94 <_raise_r+0x14>
 8009c8a:	2316      	movs	r3, #22
 8009c8c:	6003      	str	r3, [r0, #0]
 8009c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c92:	bd38      	pop	{r3, r4, r5, pc}
 8009c94:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009c96:	b112      	cbz	r2, 8009c9e <_raise_r+0x1e>
 8009c98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c9c:	b94b      	cbnz	r3, 8009cb2 <_raise_r+0x32>
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	f000 f830 	bl	8009d04 <_getpid_r>
 8009ca4:	4622      	mov	r2, r4
 8009ca6:	4601      	mov	r1, r0
 8009ca8:	4628      	mov	r0, r5
 8009caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cae:	f000 b817 	b.w	8009ce0 <_kill_r>
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d00a      	beq.n	8009ccc <_raise_r+0x4c>
 8009cb6:	1c59      	adds	r1, r3, #1
 8009cb8:	d103      	bne.n	8009cc2 <_raise_r+0x42>
 8009cba:	2316      	movs	r3, #22
 8009cbc:	6003      	str	r3, [r0, #0]
 8009cbe:	2001      	movs	r0, #1
 8009cc0:	e7e7      	b.n	8009c92 <_raise_r+0x12>
 8009cc2:	2100      	movs	r1, #0
 8009cc4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009cc8:	4620      	mov	r0, r4
 8009cca:	4798      	blx	r3
 8009ccc:	2000      	movs	r0, #0
 8009cce:	e7e0      	b.n	8009c92 <_raise_r+0x12>

08009cd0 <raise>:
 8009cd0:	4b02      	ldr	r3, [pc, #8]	@ (8009cdc <raise+0xc>)
 8009cd2:	4601      	mov	r1, r0
 8009cd4:	6818      	ldr	r0, [r3, #0]
 8009cd6:	f7ff bfd3 	b.w	8009c80 <_raise_r>
 8009cda:	bf00      	nop
 8009cdc:	20000018 	.word	0x20000018

08009ce0 <_kill_r>:
 8009ce0:	b538      	push	{r3, r4, r5, lr}
 8009ce2:	4d07      	ldr	r5, [pc, #28]	@ (8009d00 <_kill_r+0x20>)
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	4608      	mov	r0, r1
 8009cea:	4611      	mov	r1, r2
 8009cec:	602b      	str	r3, [r5, #0]
 8009cee:	f7f7 fde5 	bl	80018bc <_kill>
 8009cf2:	1c43      	adds	r3, r0, #1
 8009cf4:	d102      	bne.n	8009cfc <_kill_r+0x1c>
 8009cf6:	682b      	ldr	r3, [r5, #0]
 8009cf8:	b103      	cbz	r3, 8009cfc <_kill_r+0x1c>
 8009cfa:	6023      	str	r3, [r4, #0]
 8009cfc:	bd38      	pop	{r3, r4, r5, pc}
 8009cfe:	bf00      	nop
 8009d00:	20003d1c 	.word	0x20003d1c

08009d04 <_getpid_r>:
 8009d04:	f7f7 bdd2 	b.w	80018ac <_getpid>

08009d08 <__swhatbuf_r>:
 8009d08:	b570      	push	{r4, r5, r6, lr}
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d10:	2900      	cmp	r1, #0
 8009d12:	b096      	sub	sp, #88	@ 0x58
 8009d14:	4615      	mov	r5, r2
 8009d16:	461e      	mov	r6, r3
 8009d18:	da0d      	bge.n	8009d36 <__swhatbuf_r+0x2e>
 8009d1a:	89a3      	ldrh	r3, [r4, #12]
 8009d1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d20:	f04f 0100 	mov.w	r1, #0
 8009d24:	bf14      	ite	ne
 8009d26:	2340      	movne	r3, #64	@ 0x40
 8009d28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009d2c:	2000      	movs	r0, #0
 8009d2e:	6031      	str	r1, [r6, #0]
 8009d30:	602b      	str	r3, [r5, #0]
 8009d32:	b016      	add	sp, #88	@ 0x58
 8009d34:	bd70      	pop	{r4, r5, r6, pc}
 8009d36:	466a      	mov	r2, sp
 8009d38:	f000 f848 	bl	8009dcc <_fstat_r>
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	dbec      	blt.n	8009d1a <__swhatbuf_r+0x12>
 8009d40:	9901      	ldr	r1, [sp, #4]
 8009d42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d4a:	4259      	negs	r1, r3
 8009d4c:	4159      	adcs	r1, r3
 8009d4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d52:	e7eb      	b.n	8009d2c <__swhatbuf_r+0x24>

08009d54 <__smakebuf_r>:
 8009d54:	898b      	ldrh	r3, [r1, #12]
 8009d56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d58:	079d      	lsls	r5, r3, #30
 8009d5a:	4606      	mov	r6, r0
 8009d5c:	460c      	mov	r4, r1
 8009d5e:	d507      	bpl.n	8009d70 <__smakebuf_r+0x1c>
 8009d60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d64:	6023      	str	r3, [r4, #0]
 8009d66:	6123      	str	r3, [r4, #16]
 8009d68:	2301      	movs	r3, #1
 8009d6a:	6163      	str	r3, [r4, #20]
 8009d6c:	b003      	add	sp, #12
 8009d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d70:	ab01      	add	r3, sp, #4
 8009d72:	466a      	mov	r2, sp
 8009d74:	f7ff ffc8 	bl	8009d08 <__swhatbuf_r>
 8009d78:	9f00      	ldr	r7, [sp, #0]
 8009d7a:	4605      	mov	r5, r0
 8009d7c:	4639      	mov	r1, r7
 8009d7e:	4630      	mov	r0, r6
 8009d80:	f7fe fec6 	bl	8008b10 <_malloc_r>
 8009d84:	b948      	cbnz	r0, 8009d9a <__smakebuf_r+0x46>
 8009d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d8a:	059a      	lsls	r2, r3, #22
 8009d8c:	d4ee      	bmi.n	8009d6c <__smakebuf_r+0x18>
 8009d8e:	f023 0303 	bic.w	r3, r3, #3
 8009d92:	f043 0302 	orr.w	r3, r3, #2
 8009d96:	81a3      	strh	r3, [r4, #12]
 8009d98:	e7e2      	b.n	8009d60 <__smakebuf_r+0xc>
 8009d9a:	89a3      	ldrh	r3, [r4, #12]
 8009d9c:	6020      	str	r0, [r4, #0]
 8009d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009da2:	81a3      	strh	r3, [r4, #12]
 8009da4:	9b01      	ldr	r3, [sp, #4]
 8009da6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009daa:	b15b      	cbz	r3, 8009dc4 <__smakebuf_r+0x70>
 8009dac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009db0:	4630      	mov	r0, r6
 8009db2:	f000 f81d 	bl	8009df0 <_isatty_r>
 8009db6:	b128      	cbz	r0, 8009dc4 <__smakebuf_r+0x70>
 8009db8:	89a3      	ldrh	r3, [r4, #12]
 8009dba:	f023 0303 	bic.w	r3, r3, #3
 8009dbe:	f043 0301 	orr.w	r3, r3, #1
 8009dc2:	81a3      	strh	r3, [r4, #12]
 8009dc4:	89a3      	ldrh	r3, [r4, #12]
 8009dc6:	431d      	orrs	r5, r3
 8009dc8:	81a5      	strh	r5, [r4, #12]
 8009dca:	e7cf      	b.n	8009d6c <__smakebuf_r+0x18>

08009dcc <_fstat_r>:
 8009dcc:	b538      	push	{r3, r4, r5, lr}
 8009dce:	4d07      	ldr	r5, [pc, #28]	@ (8009dec <_fstat_r+0x20>)
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	4604      	mov	r4, r0
 8009dd4:	4608      	mov	r0, r1
 8009dd6:	4611      	mov	r1, r2
 8009dd8:	602b      	str	r3, [r5, #0]
 8009dda:	f7f7 fdcf 	bl	800197c <_fstat>
 8009dde:	1c43      	adds	r3, r0, #1
 8009de0:	d102      	bne.n	8009de8 <_fstat_r+0x1c>
 8009de2:	682b      	ldr	r3, [r5, #0]
 8009de4:	b103      	cbz	r3, 8009de8 <_fstat_r+0x1c>
 8009de6:	6023      	str	r3, [r4, #0]
 8009de8:	bd38      	pop	{r3, r4, r5, pc}
 8009dea:	bf00      	nop
 8009dec:	20003d1c 	.word	0x20003d1c

08009df0 <_isatty_r>:
 8009df0:	b538      	push	{r3, r4, r5, lr}
 8009df2:	4d06      	ldr	r5, [pc, #24]	@ (8009e0c <_isatty_r+0x1c>)
 8009df4:	2300      	movs	r3, #0
 8009df6:	4604      	mov	r4, r0
 8009df8:	4608      	mov	r0, r1
 8009dfa:	602b      	str	r3, [r5, #0]
 8009dfc:	f7f7 fdce 	bl	800199c <_isatty>
 8009e00:	1c43      	adds	r3, r0, #1
 8009e02:	d102      	bne.n	8009e0a <_isatty_r+0x1a>
 8009e04:	682b      	ldr	r3, [r5, #0]
 8009e06:	b103      	cbz	r3, 8009e0a <_isatty_r+0x1a>
 8009e08:	6023      	str	r3, [r4, #0]
 8009e0a:	bd38      	pop	{r3, r4, r5, pc}
 8009e0c:	20003d1c 	.word	0x20003d1c

08009e10 <sqrtf>:
 8009e10:	b508      	push	{r3, lr}
 8009e12:	ed2d 8b02 	vpush	{d8}
 8009e16:	eeb0 8a40 	vmov.f32	s16, s0
 8009e1a:	f000 f817 	bl	8009e4c <__ieee754_sqrtf>
 8009e1e:	eeb4 8a48 	vcmp.f32	s16, s16
 8009e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e26:	d60c      	bvs.n	8009e42 <sqrtf+0x32>
 8009e28:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8009e48 <sqrtf+0x38>
 8009e2c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e34:	d505      	bpl.n	8009e42 <sqrtf+0x32>
 8009e36:	f7fd ff71 	bl	8007d1c <__errno>
 8009e3a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009e3e:	2321      	movs	r3, #33	@ 0x21
 8009e40:	6003      	str	r3, [r0, #0]
 8009e42:	ecbd 8b02 	vpop	{d8}
 8009e46:	bd08      	pop	{r3, pc}
 8009e48:	00000000 	.word	0x00000000

08009e4c <__ieee754_sqrtf>:
 8009e4c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009e50:	4770      	bx	lr
	...

08009e54 <_init>:
 8009e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e56:	bf00      	nop
 8009e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e5a:	bc08      	pop	{r3}
 8009e5c:	469e      	mov	lr, r3
 8009e5e:	4770      	bx	lr

08009e60 <_fini>:
 8009e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e62:	bf00      	nop
 8009e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e66:	bc08      	pop	{r3}
 8009e68:	469e      	mov	lr, r3
 8009e6a:	4770      	bx	lr
