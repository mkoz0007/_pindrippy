
pindrop_fft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000133a4  08009b68  08009b68  0000ab68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cf0c  0801cf0c  0001e1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801cf0c  0801cf0c  0001df0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cf14  0801cf14  0001e1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cf14  0801cf14  0001df14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801cf18  0801cf18  0001df18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0801cf1c  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ba4  200001dc  0801d0f8  0001e1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003d80  0801d0f8  0001ed80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001e1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc00  00000000  00000000  0001e20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003996  00000000  00000000  0003ae0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  0003e7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e34  00000000  00000000  0003fb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000239f5  00000000  00000000  0004097c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017571  00000000  00000000  00064371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de762  00000000  00000000  0007b8e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0015a044  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006180  00000000  00000000  0015a0fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0016027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000032a6  00000000  00000000  001602e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000000d8  00000000  00000000  0016358f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009b4c 	.word	0x08009b4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009b4c 	.word	0x08009b4c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed8:	f000 fe95 	bl	8001c06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000edc:	f000 f83a 	bl	8000f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee0:	f000 fa20 	bl	8001324 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ee4:	f000 f9f8 	bl	80012d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ee8:	f000 f9c6 	bl	8001278 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000eec:	f000 f894 	bl	8001018 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000ef0:	f000 f94c 	bl	800118c <MX_TIM2_Init>
  MX_TIM1_Init();
 8000ef4:	f000 f8f6 	bl	80010e4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  // Initialize FFT
  arm_rfft_fast_init_f32(&fft_instance, FFT_SIZE);
 8000ef8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000efc:	480e      	ldr	r0, [pc, #56]	@ (8000f38 <main+0x64>)
 8000efe:	f005 f9bd 	bl	800627c <arm_rfft_fast_init_f32>

  // Start ADC with DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, AUDIO_BUFFER_SIZE);
 8000f02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f06:	490d      	ldr	r1, [pc, #52]	@ (8000f3c <main+0x68>)
 8000f08:	480d      	ldr	r0, [pc, #52]	@ (8000f40 <main+0x6c>)
 8000f0a:	f001 fa1f 	bl	800234c <HAL_ADC_Start_DMA>

  // Start timer for sampling rate and fft timer
  HAL_TIM_Base_Start(&htim1);
 8000f0e:	480d      	ldr	r0, [pc, #52]	@ (8000f44 <main+0x70>)
 8000f10:	f003 fe38 	bl	8004b84 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 8000f14:	480c      	ldr	r0, [pc, #48]	@ (8000f48 <main+0x74>)
 8000f16:	f003 fe35 	bl	8004b84 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (buffer_ready) {
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f4c <main+0x78>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d0fa      	beq.n	8000f1a <main+0x46>
	        process_fft();
 8000f24:	f000 fa88 	bl	8001438 <process_fft>
	        //transmit_fft_results();
	        buffer_ready = 0;
 8000f28:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <main+0x78>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
	        adc_index = 0;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	@ (8000f50 <main+0x7c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
	  if (buffer_ready) {
 8000f34:	e7f1      	b.n	8000f1a <main+0x46>
 8000f36:	bf00      	nop
 8000f38:	20003c14 	.word	0x20003c14
 8000f3c:	2000040c 	.word	0x2000040c
 8000f40:	200001f8 	.word	0x200001f8
 8000f44:	200002a4 	.word	0x200002a4
 8000f48:	200002f0 	.word	0x200002f0
 8000f4c:	20000c0c 	.word	0x20000c0c
 8000f50:	20000c10 	.word	0x20000c10

08000f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b096      	sub	sp, #88	@ 0x58
 8000f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	2244      	movs	r2, #68	@ 0x44
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f006 feab 	bl	8007cbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f68:	463b      	mov	r3, r7
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f76:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f7a:	f002 fc25 	bl	80037c8 <HAL_PWREx_ControlVoltageScaling>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f84:	f000 fb40 	bl	8001608 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f88:	f002 fc00 	bl	800378c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f8c:	4b21      	ldr	r3, [pc, #132]	@ (8001014 <SystemClock_Config+0xc0>)
 8000f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f92:	4a20      	ldr	r2, [pc, #128]	@ (8001014 <SystemClock_Config+0xc0>)
 8000f94:	f023 0318 	bic.w	r3, r3, #24
 8000f98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000f9c:	2314      	movs	r3, #20
 8000f9e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fac:	2360      	movs	r3, #96	@ 0x60
 8000fae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000fbc:	2310      	movs	r3, #16
 8000fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fc0:	2307      	movs	r3, #7
 8000fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f002 fc4f 	bl	8003874 <HAL_RCC_OscConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000fdc:	f000 fb14 	bl	8001608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f003 f84f 	bl	800409c <HAL_RCC_ClockConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001004:	f000 fb00 	bl	8001608 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001008:	f003 fc62 	bl	80048d0 <HAL_RCCEx_EnableMSIPLLMode>
}
 800100c:	bf00      	nop
 800100e:	3758      	adds	r7, #88	@ 0x58
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40021000 	.word	0x40021000

08001018 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800101e:	463b      	mov	r3, r7
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
 800102c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800102e:	4b2a      	ldr	r3, [pc, #168]	@ (80010d8 <MX_ADC1_Init+0xc0>)
 8001030:	4a2a      	ldr	r2, [pc, #168]	@ (80010dc <MX_ADC1_Init+0xc4>)
 8001032:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001034:	4b28      	ldr	r3, [pc, #160]	@ (80010d8 <MX_ADC1_Init+0xc0>)
 8001036:	2200      	movs	r2, #0
 8001038:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800103a:	4b27      	ldr	r3, [pc, #156]	@ (80010d8 <MX_ADC1_Init+0xc0>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001040:	4b25      	ldr	r3, [pc, #148]	@ (80010d8 <MX_ADC1_Init+0xc0>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001046:	4b24      	ldr	r3, [pc, #144]	@ (80010d8 <MX_ADC1_Init+0xc0>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800104c:	4b22      	ldr	r3, [pc, #136]	@ (80010d8 <MX_ADC1_Init+0xc0>)
 800104e:	2204      	movs	r2, #4
 8001050:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001052:	4b21      	ldr	r3, [pc, #132]	@ (80010d8 <MX_ADC1_Init+0xc0>)
 8001054:	2200      	movs	r2, #0
 8001056:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001058:	4b1f      	ldr	r3, [pc, #124]	@ (80010d8 <MX_ADC1_Init+0xc0>)
 800105a:	2200      	movs	r2, #0
 800105c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800105e:	4b1e      	ldr	r3, [pc, #120]	@ (80010d8 <MX_ADC1_Init+0xc0>)
 8001060:	2201      	movs	r2, #1
 8001062:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001064:	4b1c      	ldr	r3, [pc, #112]	@ (80010d8 <MX_ADC1_Init+0xc0>)
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800106c:	4b1a      	ldr	r3, [pc, #104]	@ (80010d8 <MX_ADC1_Init+0xc0>)
 800106e:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 8001072:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001074:	4b18      	ldr	r3, [pc, #96]	@ (80010d8 <MX_ADC1_Init+0xc0>)
 8001076:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800107a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800107c:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <MX_ADC1_Init+0xc0>)
 800107e:	2201      	movs	r2, #1
 8001080:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001084:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <MX_ADC1_Init+0xc0>)
 8001086:	2200      	movs	r2, #0
 8001088:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800108a:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <MX_ADC1_Init+0xc0>)
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001092:	4811      	ldr	r0, [pc, #68]	@ (80010d8 <MX_ADC1_Init+0xc0>)
 8001094:	f001 f818 	bl	80020c8 <HAL_ADC_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800109e:	f000 fab3 	bl	8001608 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80010a2:	4b0f      	ldr	r3, [pc, #60]	@ (80010e0 <MX_ADC1_Init+0xc8>)
 80010a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a6:	2306      	movs	r3, #6
 80010a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010ae:	237f      	movs	r3, #127	@ 0x7f
 80010b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010b2:	2304      	movs	r3, #4
 80010b4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ba:	463b      	mov	r3, r7
 80010bc:	4619      	mov	r1, r3
 80010be:	4806      	ldr	r0, [pc, #24]	@ (80010d8 <MX_ADC1_Init+0xc0>)
 80010c0:	f001 f9dc 	bl	800247c <HAL_ADC_ConfigChannel>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80010ca:	f000 fa9d 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	200001f8 	.word	0x200001f8
 80010dc:	50040000 	.word	0x50040000
 80010e0:	21800100 	.word	0x21800100

080010e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ea:	f107 0310 	add.w	r3, r7, #16
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001102:	4b20      	ldr	r3, [pc, #128]	@ (8001184 <MX_TIM1_Init+0xa0>)
 8001104:	4a20      	ldr	r2, [pc, #128]	@ (8001188 <MX_TIM1_Init+0xa4>)
 8001106:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8001108:	4b1e      	ldr	r3, [pc, #120]	@ (8001184 <MX_TIM1_Init+0xa0>)
 800110a:	221f      	movs	r2, #31
 800110c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110e:	4b1d      	ldr	r3, [pc, #116]	@ (8001184 <MX_TIM1_Init+0xa0>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001114:	4b1b      	ldr	r3, [pc, #108]	@ (8001184 <MX_TIM1_Init+0xa0>)
 8001116:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800111a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111c:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <MX_TIM1_Init+0xa0>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001122:	4b18      	ldr	r3, [pc, #96]	@ (8001184 <MX_TIM1_Init+0xa0>)
 8001124:	2200      	movs	r2, #0
 8001126:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001128:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <MX_TIM1_Init+0xa0>)
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800112e:	4815      	ldr	r0, [pc, #84]	@ (8001184 <MX_TIM1_Init+0xa0>)
 8001130:	f003 fcd0 	bl	8004ad4 <HAL_TIM_Base_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800113a:	f000 fa65 	bl	8001608 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800113e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001142:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	4619      	mov	r1, r3
 800114a:	480e      	ldr	r0, [pc, #56]	@ (8001184 <MX_TIM1_Init+0xa0>)
 800114c:	f003 fe42 	bl	8004dd4 <HAL_TIM_ConfigClockSource>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001156:	f000 fa57 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	4619      	mov	r1, r3
 800116a:	4806      	ldr	r0, [pc, #24]	@ (8001184 <MX_TIM1_Init+0xa0>)
 800116c:	f004 fa84 	bl	8005678 <HAL_TIMEx_MasterConfigSynchronization>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001176:	f000 fa47 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	3720      	adds	r7, #32
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200002a4 	.word	0x200002a4
 8001188:	40012c00 	.word	0x40012c00

0800118c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08e      	sub	sp, #56	@ 0x38
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001192:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ac:	463b      	mov	r3, r7
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]
 80011ba:	615a      	str	r2, [r3, #20]
 80011bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011be:	4b2d      	ldr	r3, [pc, #180]	@ (8001274 <MX_TIM2_Init+0xe8>)
 80011c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001274 <MX_TIM2_Init+0xe8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011cc:	4b29      	ldr	r3, [pc, #164]	@ (8001274 <MX_TIM2_Init+0xe8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 80011d2:	4b28      	ldr	r3, [pc, #160]	@ (8001274 <MX_TIM2_Init+0xe8>)
 80011d4:	f240 128f 	movw	r2, #399	@ 0x18f
 80011d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011da:	4b26      	ldr	r3, [pc, #152]	@ (8001274 <MX_TIM2_Init+0xe8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011e0:	4b24      	ldr	r3, [pc, #144]	@ (8001274 <MX_TIM2_Init+0xe8>)
 80011e2:	2280      	movs	r2, #128	@ 0x80
 80011e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011e6:	4823      	ldr	r0, [pc, #140]	@ (8001274 <MX_TIM2_Init+0xe8>)
 80011e8:	f003 fc74 	bl	8004ad4 <HAL_TIM_Base_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80011f2:	f000 fa09 	bl	8001608 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001200:	4619      	mov	r1, r3
 8001202:	481c      	ldr	r0, [pc, #112]	@ (8001274 <MX_TIM2_Init+0xe8>)
 8001204:	f003 fde6 	bl	8004dd4 <HAL_TIM_ConfigClockSource>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800120e:	f000 f9fb 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001212:	4818      	ldr	r0, [pc, #96]	@ (8001274 <MX_TIM2_Init+0xe8>)
 8001214:	f003 fd02 	bl	8004c1c <HAL_TIM_OC_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800121e:	f000 f9f3 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001222:	2320      	movs	r3, #32
 8001224:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001226:	2380      	movs	r3, #128	@ 0x80
 8001228:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	4619      	mov	r1, r3
 8001230:	4810      	ldr	r0, [pc, #64]	@ (8001274 <MX_TIM2_Init+0xe8>)
 8001232:	f004 fa21 	bl	8005678 <HAL_TIMEx_MasterConfigSynchronization>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800123c:	f000 f9e4 	bl	8001608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001240:	2330      	movs	r3, #48	@ 0x30
 8001242:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	2200      	movs	r2, #0
 8001254:	4619      	mov	r1, r3
 8001256:	4807      	ldr	r0, [pc, #28]	@ (8001274 <MX_TIM2_Init+0xe8>)
 8001258:	f003 fd42 	bl	8004ce0 <HAL_TIM_OC_ConfigChannel>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001262:	f000 f9d1 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001266:	4803      	ldr	r0, [pc, #12]	@ (8001274 <MX_TIM2_Init+0xe8>)
 8001268:	f000 fabe 	bl	80017e8 <HAL_TIM_MspPostInit>

}
 800126c:	bf00      	nop
 800126e:	3738      	adds	r7, #56	@ 0x38
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200002f0 	.word	0x200002f0

08001278 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800127c:	4b14      	ldr	r3, [pc, #80]	@ (80012d0 <MX_USART2_UART_Init+0x58>)
 800127e:	4a15      	ldr	r2, [pc, #84]	@ (80012d4 <MX_USART2_UART_Init+0x5c>)
 8001280:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001282:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <MX_USART2_UART_Init+0x58>)
 8001284:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001288:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800128a:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <MX_USART2_UART_Init+0x58>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001290:	4b0f      	ldr	r3, [pc, #60]	@ (80012d0 <MX_USART2_UART_Init+0x58>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001296:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <MX_USART2_UART_Init+0x58>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <MX_USART2_UART_Init+0x58>)
 800129e:	220c      	movs	r2, #12
 80012a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <MX_USART2_UART_Init+0x58>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a8:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <MX_USART2_UART_Init+0x58>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ae:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <MX_USART2_UART_Init+0x58>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012b4:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <MX_USART2_UART_Init+0x58>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ba:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <MX_USART2_UART_Init+0x58>)
 80012bc:	f004 fa42 	bl	8005744 <HAL_UART_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012c6:	f000 f99f 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000033c 	.word	0x2000033c
 80012d4:	40004400 	.word	0x40004400

080012d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012de:	4b10      	ldr	r3, [pc, #64]	@ (8001320 <MX_DMA_Init+0x48>)
 80012e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001320 <MX_DMA_Init+0x48>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6493      	str	r3, [r2, #72]	@ 0x48
 80012ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001320 <MX_DMA_Init+0x48>)
 80012ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	200b      	movs	r0, #11
 80012fc:	f001 fe95 	bl	800302a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001300:	200b      	movs	r0, #11
 8001302:	f001 feae 	bl	8003062 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	2011      	movs	r0, #17
 800130c:	f001 fe8d 	bl	800302a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001310:	2011      	movs	r0, #17
 8001312:	f001 fea6 	bl	8003062 <HAL_NVIC_EnableIRQ>

}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40021000 	.word	0x40021000

08001324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132a:	f107 030c 	add.w	r3, r7, #12
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133a:	4b29      	ldr	r3, [pc, #164]	@ (80013e0 <MX_GPIO_Init+0xbc>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	4a28      	ldr	r2, [pc, #160]	@ (80013e0 <MX_GPIO_Init+0xbc>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001346:	4b26      	ldr	r3, [pc, #152]	@ (80013e0 <MX_GPIO_Init+0xbc>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	4b23      	ldr	r3, [pc, #140]	@ (80013e0 <MX_GPIO_Init+0xbc>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	4a22      	ldr	r2, [pc, #136]	@ (80013e0 <MX_GPIO_Init+0xbc>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135e:	4b20      	ldr	r3, [pc, #128]	@ (80013e0 <MX_GPIO_Init+0xbc>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	4b1d      	ldr	r3, [pc, #116]	@ (80013e0 <MX_GPIO_Init+0xbc>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	4a1c      	ldr	r2, [pc, #112]	@ (80013e0 <MX_GPIO_Init+0xbc>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001376:	4b1a      	ldr	r3, [pc, #104]	@ (80013e0 <MX_GPIO_Init+0xbc>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001388:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800138c:	f002 f9e6 	bl	800375c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	2108      	movs	r1, #8
 8001394:	4813      	ldr	r0, [pc, #76]	@ (80013e4 <MX_GPIO_Init+0xc0>)
 8001396:	f002 f9e1 	bl	800375c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800139a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800139e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a0:	2301      	movs	r3, #1
 80013a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ac:	f107 030c 	add.w	r3, r7, #12
 80013b0:	4619      	mov	r1, r3
 80013b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b6:	f002 f867 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80013ba:	2308      	movs	r3, #8
 80013bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	2301      	movs	r3, #1
 80013c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	4619      	mov	r1, r3
 80013d0:	4804      	ldr	r0, [pc, #16]	@ (80013e4 <MX_GPIO_Init+0xc0>)
 80013d2:	f002 f859 	bl	8003488 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013d6:	bf00      	nop
 80013d8:	3720      	adds	r7, #32
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40021000 	.word	0x40021000
 80013e4:	48000400 	.word	0x48000400

080013e8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
/* ADC conversion complete callback */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  buffer_ready = 1;
 80013f0:	4b04      	ldr	r3, [pc, #16]	@ (8001404 <HAL_ADC_ConvCpltCallback+0x1c>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000c0c 	.word	0x20000c0c

08001408 <swap_buffers>:

// Code to swap output buffers
void swap_buffers() {
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
    float32_t* temp = fft_mag_prev;
 800140e:	4b08      	ldr	r3, [pc, #32]	@ (8001430 <swap_buffers+0x28>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	607b      	str	r3, [r7, #4]
    fft_mag_prev = fft_mag;
 8001414:	4b07      	ldr	r3, [pc, #28]	@ (8001434 <swap_buffers+0x2c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a05      	ldr	r2, [pc, #20]	@ (8001430 <swap_buffers+0x28>)
 800141a:	6013      	str	r3, [r2, #0]
    fft_mag = temp;
 800141c:	4a05      	ldr	r2, [pc, #20]	@ (8001434 <swap_buffers+0x2c>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6013      	str	r3, [r2, #0]
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000004 	.word	0x20000004
 8001434:	20000000 	.word	0x20000000

08001438 <process_fft>:

/* Process FFT */
void process_fft(void) {
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b087      	sub	sp, #28
 800143c:	af00      	add	r7, sp, #0
  // Convert ADC samples to float32 (-1 to 1)
  for (int i = 0; i < FFT_SIZE; i++) {
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
 8001442:	e017      	b.n	8001474 <process_fft+0x3c>
    fft_input[i] = (float32_t)(adc_buffer[i] - 2048) / 2048.0f;
 8001444:	4a68      	ldr	r2, [pc, #416]	@ (80015e8 <process_fft+0x1b0>)
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800144c:	b29b      	uxth	r3, r3
 800144e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001452:	ee07 3a90 	vmov	s15, r3
 8001456:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800145a:	eddf 6a64 	vldr	s13, [pc, #400]	@ 80015ec <process_fft+0x1b4>
 800145e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001462:	4a63      	ldr	r2, [pc, #396]	@ (80015f0 <process_fft+0x1b8>)
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < FFT_SIZE; i++) {
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	3301      	adds	r3, #1
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800147a:	dbe3      	blt.n	8001444 <process_fft+0xc>
  }
  // Calculate and remove mean
  float32_t mean;
  arm_mean_f32(fft_input, FFT_SIZE, &mean);
 800147c:	463b      	mov	r3, r7
 800147e:	461a      	mov	r2, r3
 8001480:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001484:	485a      	ldr	r0, [pc, #360]	@ (80015f0 <process_fft+0x1b8>)
 8001486:	f004 fdf3 	bl	8006070 <arm_mean_f32>
  arm_offset_f32(fft_input, -mean, fft_input, FFT_SIZE);
 800148a:	edd7 7a00 	vldr	s15, [r7]
 800148e:	eef1 7a67 	vneg.f32	s15, s15
 8001492:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001496:	4956      	ldr	r1, [pc, #344]	@ (80015f0 <process_fft+0x1b8>)
 8001498:	eeb0 0a67 	vmov.f32	s0, s15
 800149c:	4854      	ldr	r0, [pc, #336]	@ (80015f0 <process_fft+0x1b8>)
 800149e:	f005 fbaf 	bl	8006c00 <arm_offset_f32>

  // Get time since last fft
  uint32_t time = __HAL_TIM_GET_COUNTER(&htim1);
 80014a2:	4b54      	ldr	r3, [pc, #336]	@ (80015f4 <process_fft+0x1bc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a8:	60bb      	str	r3, [r7, #8]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 80014aa:	4b52      	ldr	r3, [pc, #328]	@ (80015f4 <process_fft+0x1bc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2200      	movs	r2, #0
 80014b0:	625a      	str	r2, [r3, #36]	@ 0x24
  // Perform FFT
  arm_rfft_fast_f32(&fft_instance, fft_input, fft_output, 0);
 80014b2:	2300      	movs	r3, #0
 80014b4:	4a50      	ldr	r2, [pc, #320]	@ (80015f8 <process_fft+0x1c0>)
 80014b6:	494e      	ldr	r1, [pc, #312]	@ (80015f0 <process_fft+0x1b8>)
 80014b8:	4850      	ldr	r0, [pc, #320]	@ (80015fc <process_fft+0x1c4>)
 80014ba:	f004 ffc3 	bl	8006444 <arm_rfft_fast_f32>

  // Swap pointers to magnitudes to find difference between current and previous fft
  swap_buffers();
 80014be:	f7ff ffa3 	bl	8001408 <swap_buffers>
  float32_t fft_mag_diffsqr_sum = 0;
 80014c2:	f04f 0300 	mov.w	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
  // Calculate magnitude and find difference from previous
  for (int i = 0; i < FFT_SIZE/2; i++) {
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	e05b      	b.n	8001586 <process_fft+0x14e>
    fft_mag[i] = sqrtf(fft_output[2*i]*fft_output[2*i] +
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4a49      	ldr	r2, [pc, #292]	@ (80015f8 <process_fft+0x1c0>)
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	ed93 7a00 	vldr	s14, [r3]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4a45      	ldr	r2, [pc, #276]	@ (80015f8 <process_fft+0x1c0>)
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	edd3 7a00 	vldr	s15, [r3]
 80014ea:	ee27 7a27 	vmul.f32	s14, s14, s15
                       fft_output[2*i+1]*fft_output[2*i+1]);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	3301      	adds	r3, #1
 80014f4:	4a40      	ldr	r2, [pc, #256]	@ (80015f8 <process_fft+0x1c0>)
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	edd3 6a00 	vldr	s13, [r3]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	3301      	adds	r3, #1
 8001504:	4a3c      	ldr	r2, [pc, #240]	@ (80015f8 <process_fft+0x1c0>)
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	edd3 7a00 	vldr	s15, [r3]
 800150e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    fft_mag[i] = sqrtf(fft_output[2*i]*fft_output[2*i] +
 8001512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001516:	4b3a      	ldr	r3, [pc, #232]	@ (8001600 <process_fft+0x1c8>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	18d4      	adds	r4, r2, r3
 8001520:	eeb0 0a67 	vmov.f32	s0, s15
 8001524:	f008 faf0 	bl	8009b08 <sqrtf>
 8001528:	eef0 7a40 	vmov.f32	s15, s0
 800152c:	edc4 7a00 	vstr	s15, [r4]
    fft_mag_diffsqr_sum += (fft_mag[i] - fft_mag_prev[i])*(fft_mag[i] - fft_mag_prev[i]);
 8001530:	4b33      	ldr	r3, [pc, #204]	@ (8001600 <process_fft+0x1c8>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	ed93 7a00 	vldr	s14, [r3]
 800153e:	4b31      	ldr	r3, [pc, #196]	@ (8001604 <process_fft+0x1cc>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	edd3 7a00 	vldr	s15, [r3]
 800154c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001550:	4b2b      	ldr	r3, [pc, #172]	@ (8001600 <process_fft+0x1c8>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	edd3 6a00 	vldr	s13, [r3]
 800155e:	4b29      	ldr	r3, [pc, #164]	@ (8001604 <process_fft+0x1cc>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001574:	ed97 7a04 	vldr	s14, [r7, #16]
 8001578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157c:	edc7 7a04 	vstr	s15, [r7, #16]
  for (int i = 0; i < FFT_SIZE/2; i++) {
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3301      	adds	r3, #1
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800158c:	db9f      	blt.n	80014ce <process_fft+0x96>
  }

  float32_t fft_change = sqrtf(fft_mag_diffsqr_sum);
 800158e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001592:	f008 fab9 	bl	8009b08 <sqrtf>
 8001596:	ed87 0a01 	vstr	s0, [r7, #4]

  if (fft_change > CHANGE_THRESHOLD) {
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7fe ffd4 	bl	8000548 <__aeabi_f2d>
 80015a0:	a30f      	add	r3, pc, #60	@ (adr r3, 80015e0 <process_fft+0x1a8>)
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	f7ff fab7 	bl	8000b18 <__aeabi_dcmpgt>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00b      	beq.n	80015c8 <process_fft+0x190>
	  // Turn ON the LED
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80015b0:	2201      	movs	r2, #1
 80015b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ba:	f002 f8cf 	bl	800375c <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80015be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015c2:	f000 fb95 	bl	8001cf0 <HAL_Delay>
//	  __HAL_TIM_SET_COUNTER(&htim1, 0);
//  }
  else {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
  }
}
 80015c6:	e006      	b.n	80015d6 <process_fft+0x19e>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015d2:	f002 f8c3 	bl	800375c <HAL_GPIO_WritePin>
}
 80015d6:	bf00      	nop
 80015d8:	371c      	adds	r7, #28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd90      	pop	{r4, r7, pc}
 80015de:	bf00      	nop
 80015e0:	cccccccd 	.word	0xcccccccd
 80015e4:	3feccccc 	.word	0x3feccccc
 80015e8:	2000040c 	.word	0x2000040c
 80015ec:	45000000 	.word	0x45000000
 80015f0:	20000c14 	.word	0x20000c14
 80015f4:	200002a4 	.word	0x200002a4
 80015f8:	20001c14 	.word	0x20001c14
 80015fc:	20003c14 	.word	0x20003c14
 8001600:	20000000 	.word	0x20000000
 8001604:	20000004 	.word	0x20000004

08001608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800160c:	b672      	cpsid	i
}
 800160e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <Error_Handler+0x8>

08001614 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161a:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <HAL_MspInit+0x44>)
 800161c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800161e:	4a0e      	ldr	r2, [pc, #56]	@ (8001658 <HAL_MspInit+0x44>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6613      	str	r3, [r2, #96]	@ 0x60
 8001626:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <HAL_MspInit+0x44>)
 8001628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <HAL_MspInit+0x44>)
 8001634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001636:	4a08      	ldr	r2, [pc, #32]	@ (8001658 <HAL_MspInit+0x44>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800163c:	6593      	str	r3, [r2, #88]	@ 0x58
 800163e:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <HAL_MspInit+0x44>)
 8001640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000

0800165c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b09e      	sub	sp, #120	@ 0x78
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	2254      	movs	r2, #84	@ 0x54
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f006 fb1e 	bl	8007cbe <memset>
  if(hadc->Instance==ADC1)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a3b      	ldr	r2, [pc, #236]	@ (8001774 <HAL_ADC_MspInit+0x118>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d16e      	bne.n	800176a <HAL_ADC_MspInit+0x10e>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800168c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001690:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001692:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001696:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001698:	2301      	movs	r3, #1
 800169a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800169c:	2301      	movs	r3, #1
 800169e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80016a0:	2310      	movs	r3, #16
 80016a2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80016a4:	2307      	movs	r3, #7
 80016a6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80016a8:	2302      	movs	r3, #2
 80016aa:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016ac:	2302      	movs	r3, #2
 80016ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80016b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b6:	f107 0310 	add.w	r3, r7, #16
 80016ba:	4618      	mov	r0, r3
 80016bc:	f002 ff12 	bl	80044e4 <HAL_RCCEx_PeriphCLKConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80016c6:	f7ff ff9f 	bl	8001608 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80016ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001778 <HAL_ADC_MspInit+0x11c>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ce:	4a2a      	ldr	r2, [pc, #168]	@ (8001778 <HAL_ADC_MspInit+0x11c>)
 80016d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016d6:	4b28      	ldr	r3, [pc, #160]	@ (8001778 <HAL_ADC_MspInit+0x11c>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	4b25      	ldr	r3, [pc, #148]	@ (8001778 <HAL_ADC_MspInit+0x11c>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e6:	4a24      	ldr	r2, [pc, #144]	@ (8001778 <HAL_ADC_MspInit+0x11c>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ee:	4b22      	ldr	r3, [pc, #136]	@ (8001778 <HAL_ADC_MspInit+0x11c>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016fa:	2308      	movs	r3, #8
 80016fc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016fe:	230b      	movs	r3, #11
 8001700:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001706:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800170a:	4619      	mov	r1, r3
 800170c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001710:	f001 feba 	bl	8003488 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001714:	4b19      	ldr	r3, [pc, #100]	@ (800177c <HAL_ADC_MspInit+0x120>)
 8001716:	4a1a      	ldr	r2, [pc, #104]	@ (8001780 <HAL_ADC_MspInit+0x124>)
 8001718:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800171a:	4b18      	ldr	r3, [pc, #96]	@ (800177c <HAL_ADC_MspInit+0x120>)
 800171c:	2200      	movs	r2, #0
 800171e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001720:	4b16      	ldr	r3, [pc, #88]	@ (800177c <HAL_ADC_MspInit+0x120>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001726:	4b15      	ldr	r3, [pc, #84]	@ (800177c <HAL_ADC_MspInit+0x120>)
 8001728:	2200      	movs	r2, #0
 800172a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800172c:	4b13      	ldr	r3, [pc, #76]	@ (800177c <HAL_ADC_MspInit+0x120>)
 800172e:	2280      	movs	r2, #128	@ 0x80
 8001730:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001732:	4b12      	ldr	r3, [pc, #72]	@ (800177c <HAL_ADC_MspInit+0x120>)
 8001734:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001738:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800173a:	4b10      	ldr	r3, [pc, #64]	@ (800177c <HAL_ADC_MspInit+0x120>)
 800173c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001740:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001742:	4b0e      	ldr	r3, [pc, #56]	@ (800177c <HAL_ADC_MspInit+0x120>)
 8001744:	2220      	movs	r2, #32
 8001746:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001748:	4b0c      	ldr	r3, [pc, #48]	@ (800177c <HAL_ADC_MspInit+0x120>)
 800174a:	2200      	movs	r2, #0
 800174c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800174e:	480b      	ldr	r0, [pc, #44]	@ (800177c <HAL_ADC_MspInit+0x120>)
 8001750:	f001 fca2 	bl	8003098 <HAL_DMA_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 800175a:	f7ff ff55 	bl	8001608 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a06      	ldr	r2, [pc, #24]	@ (800177c <HAL_ADC_MspInit+0x120>)
 8001762:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001764:	4a05      	ldr	r2, [pc, #20]	@ (800177c <HAL_ADC_MspInit+0x120>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800176a:	bf00      	nop
 800176c:	3778      	adds	r7, #120	@ 0x78
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	50040000 	.word	0x50040000
 8001778:	40021000 	.word	0x40021000
 800177c:	2000025c 	.word	0x2000025c
 8001780:	40020008 	.word	0x40020008

08001784 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a13      	ldr	r2, [pc, #76]	@ (80017e0 <HAL_TIM_Base_MspInit+0x5c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d10c      	bne.n	80017b0 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001796:	4b13      	ldr	r3, [pc, #76]	@ (80017e4 <HAL_TIM_Base_MspInit+0x60>)
 8001798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800179a:	4a12      	ldr	r2, [pc, #72]	@ (80017e4 <HAL_TIM_Base_MspInit+0x60>)
 800179c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80017a2:	4b10      	ldr	r3, [pc, #64]	@ (80017e4 <HAL_TIM_Base_MspInit+0x60>)
 80017a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017ae:	e010      	b.n	80017d2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017b8:	d10b      	bne.n	80017d2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ba:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <HAL_TIM_Base_MspInit+0x60>)
 80017bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017be:	4a09      	ldr	r2, [pc, #36]	@ (80017e4 <HAL_TIM_Base_MspInit+0x60>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80017c6:	4b07      	ldr	r3, [pc, #28]	@ (80017e4 <HAL_TIM_Base_MspInit+0x60>)
 80017c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
}
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40012c00 	.word	0x40012c00
 80017e4:	40021000 	.word	0x40021000

080017e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001808:	d11c      	bne.n	8001844 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	4b10      	ldr	r3, [pc, #64]	@ (800184c <HAL_TIM_MspPostInit+0x64>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180e:	4a0f      	ldr	r2, [pc, #60]	@ (800184c <HAL_TIM_MspPostInit+0x64>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001816:	4b0d      	ldr	r3, [pc, #52]	@ (800184c <HAL_TIM_MspPostInit+0x64>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001822:	2320      	movs	r3, #32
 8001824:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001832:	2301      	movs	r3, #1
 8001834:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001836:	f107 030c 	add.w	r3, r7, #12
 800183a:	4619      	mov	r1, r3
 800183c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001840:	f001 fe22 	bl	8003488 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001844:	bf00      	nop
 8001846:	3720      	adds	r7, #32
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40021000 	.word	0x40021000

08001850 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b09e      	sub	sp, #120	@ 0x78
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001868:	f107 0310 	add.w	r3, r7, #16
 800186c:	2254      	movs	r2, #84	@ 0x54
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f006 fa24 	bl	8007cbe <memset>
  if(huart->Instance==USART2)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a3c      	ldr	r2, [pc, #240]	@ (800196c <HAL_UART_MspInit+0x11c>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d171      	bne.n	8001964 <HAL_UART_MspInit+0x114>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001880:	2302      	movs	r3, #2
 8001882:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001884:	2300      	movs	r3, #0
 8001886:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001888:	f107 0310 	add.w	r3, r7, #16
 800188c:	4618      	mov	r0, r3
 800188e:	f002 fe29 	bl	80044e4 <HAL_RCCEx_PeriphCLKConfig>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001898:	f7ff feb6 	bl	8001608 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800189c:	4b34      	ldr	r3, [pc, #208]	@ (8001970 <HAL_UART_MspInit+0x120>)
 800189e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a0:	4a33      	ldr	r2, [pc, #204]	@ (8001970 <HAL_UART_MspInit+0x120>)
 80018a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80018a8:	4b31      	ldr	r3, [pc, #196]	@ (8001970 <HAL_UART_MspInit+0x120>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001970 <HAL_UART_MspInit+0x120>)
 80018b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b8:	4a2d      	ldr	r2, [pc, #180]	@ (8001970 <HAL_UART_MspInit+0x120>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001970 <HAL_UART_MspInit+0x120>)
 80018c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80018cc:	2304      	movs	r3, #4
 80018ce:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d8:	2303      	movs	r3, #3
 80018da:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018dc:	2307      	movs	r3, #7
 80018de:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80018e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018e4:	4619      	mov	r1, r3
 80018e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ea:	f001 fdcd 	bl	8003488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80018ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018f2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fc:	2303      	movs	r3, #3
 80018fe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001900:	2303      	movs	r3, #3
 8001902:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001904:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001908:	4619      	mov	r1, r3
 800190a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800190e:	f001 fdbb 	bl	8003488 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001912:	4b18      	ldr	r3, [pc, #96]	@ (8001974 <HAL_UART_MspInit+0x124>)
 8001914:	4a18      	ldr	r2, [pc, #96]	@ (8001978 <HAL_UART_MspInit+0x128>)
 8001916:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001918:	4b16      	ldr	r3, [pc, #88]	@ (8001974 <HAL_UART_MspInit+0x124>)
 800191a:	2202      	movs	r2, #2
 800191c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800191e:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <HAL_UART_MspInit+0x124>)
 8001920:	2210      	movs	r2, #16
 8001922:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001924:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <HAL_UART_MspInit+0x124>)
 8001926:	2200      	movs	r2, #0
 8001928:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800192a:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <HAL_UART_MspInit+0x124>)
 800192c:	2280      	movs	r2, #128	@ 0x80
 800192e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001930:	4b10      	ldr	r3, [pc, #64]	@ (8001974 <HAL_UART_MspInit+0x124>)
 8001932:	2200      	movs	r2, #0
 8001934:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001936:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <HAL_UART_MspInit+0x124>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800193c:	4b0d      	ldr	r3, [pc, #52]	@ (8001974 <HAL_UART_MspInit+0x124>)
 800193e:	2200      	movs	r2, #0
 8001940:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001942:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <HAL_UART_MspInit+0x124>)
 8001944:	2200      	movs	r2, #0
 8001946:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001948:	480a      	ldr	r0, [pc, #40]	@ (8001974 <HAL_UART_MspInit+0x124>)
 800194a:	f001 fba5 	bl	8003098 <HAL_DMA_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8001954:	f7ff fe58 	bl	8001608 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a06      	ldr	r2, [pc, #24]	@ (8001974 <HAL_UART_MspInit+0x124>)
 800195c:	671a      	str	r2, [r3, #112]	@ 0x70
 800195e:	4a05      	ldr	r2, [pc, #20]	@ (8001974 <HAL_UART_MspInit+0x124>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001964:	bf00      	nop
 8001966:	3778      	adds	r7, #120	@ 0x78
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40004400 	.word	0x40004400
 8001970:	40021000 	.word	0x40021000
 8001974:	200003c4 	.word	0x200003c4
 8001978:	40020080 	.word	0x40020080

0800197c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <NMI_Handler+0x4>

08001984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <HardFault_Handler+0x4>

0800198c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <MemManage_Handler+0x4>

08001994 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <BusFault_Handler+0x4>

0800199c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <UsageFault_Handler+0x4>

080019a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d2:	f000 f96d 	bl	8001cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019e0:	4802      	ldr	r0, [pc, #8]	@ (80019ec <DMA1_Channel1_IRQHandler+0x10>)
 80019e2:	f001 fc71 	bl	80032c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	2000025c 	.word	0x2000025c

080019f0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80019f4:	4802      	ldr	r0, [pc, #8]	@ (8001a00 <DMA1_Channel7_IRQHandler+0x10>)
 80019f6:	f001 fc67 	bl	80032c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200003c4 	.word	0x200003c4

08001a04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return 1;
 8001a08:	2301      	movs	r3, #1
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <_kill>:

int _kill(int pid, int sig)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a1e:	f006 f9a1 	bl	8007d64 <__errno>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2216      	movs	r2, #22
 8001a26:	601a      	str	r2, [r3, #0]
  return -1;
 8001a28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <_exit>:

void _exit (int status)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ffe7 	bl	8001a14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a46:	bf00      	nop
 8001a48:	e7fd      	b.n	8001a46 <_exit+0x12>

08001a4a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	e00a      	b.n	8001a72 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a5c:	f3af 8000 	nop.w
 8001a60:	4601      	mov	r1, r0
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	60ba      	str	r2, [r7, #8]
 8001a68:	b2ca      	uxtb	r2, r1
 8001a6a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	dbf0      	blt.n	8001a5c <_read+0x12>
  }

  return len;
 8001a7a:	687b      	ldr	r3, [r7, #4]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	e009      	b.n	8001aaa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	60ba      	str	r2, [r7, #8]
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	dbf1      	blt.n	8001a96 <_write+0x12>
  }
  return len;
 8001ab2:	687b      	ldr	r3, [r7, #4]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <_close>:

int _close(int file)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ac4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ae4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <_isatty>:

int _isatty(int file)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001afc:	2301      	movs	r3, #1
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b085      	sub	sp, #20
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	60f8      	str	r0, [r7, #12]
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b2c:	4a14      	ldr	r2, [pc, #80]	@ (8001b80 <_sbrk+0x5c>)
 8001b2e:	4b15      	ldr	r3, [pc, #84]	@ (8001b84 <_sbrk+0x60>)
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b38:	4b13      	ldr	r3, [pc, #76]	@ (8001b88 <_sbrk+0x64>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d102      	bne.n	8001b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b40:	4b11      	ldr	r3, [pc, #68]	@ (8001b88 <_sbrk+0x64>)
 8001b42:	4a12      	ldr	r2, [pc, #72]	@ (8001b8c <_sbrk+0x68>)
 8001b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b46:	4b10      	ldr	r3, [pc, #64]	@ (8001b88 <_sbrk+0x64>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d207      	bcs.n	8001b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b54:	f006 f906 	bl	8007d64 <__errno>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	e009      	b.n	8001b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b64:	4b08      	ldr	r3, [pc, #32]	@ (8001b88 <_sbrk+0x64>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b6a:	4b07      	ldr	r3, [pc, #28]	@ (8001b88 <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	4a05      	ldr	r2, [pc, #20]	@ (8001b88 <_sbrk+0x64>)
 8001b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b76:	68fb      	ldr	r3, [r7, #12]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	2000c000 	.word	0x2000c000
 8001b84:	00000400 	.word	0x00000400
 8001b88:	20003c2c 	.word	0x20003c2c
 8001b8c:	20003d80 	.word	0x20003d80

08001b90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b94:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <SystemInit+0x20>)
 8001b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b9a:	4a05      	ldr	r2, [pc, #20]	@ (8001bb0 <SystemInit+0x20>)
 8001b9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ba0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bb8:	f7ff ffea 	bl	8001b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bbc:	480c      	ldr	r0, [pc, #48]	@ (8001bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bbe:	490d      	ldr	r1, [pc, #52]	@ (8001bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf8 <LoopForever+0xe>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc4:	e002      	b.n	8001bcc <LoopCopyDataInit>

08001bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bca:	3304      	adds	r3, #4

08001bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd0:	d3f9      	bcc.n	8001bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bd4:	4c0a      	ldr	r4, [pc, #40]	@ (8001c00 <LoopForever+0x16>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd8:	e001      	b.n	8001bde <LoopFillZerobss>

08001bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bdc:	3204      	adds	r2, #4

08001bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be0:	d3fb      	bcc.n	8001bda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001be2:	f006 f8c5 	bl	8007d70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001be6:	f7ff f975 	bl	8000ed4 <main>

08001bea <LoopForever>:

LoopForever:
    b LoopForever
 8001bea:	e7fe      	b.n	8001bea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bec:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001bf8:	0801cf1c 	.word	0x0801cf1c
  ldr r2, =_sbss
 8001bfc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001c00:	20003d80 	.word	0x20003d80

08001c04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c04:	e7fe      	b.n	8001c04 <ADC1_IRQHandler>

08001c06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c10:	2003      	movs	r0, #3
 8001c12:	f001 f9ff 	bl	8003014 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c16:	2000      	movs	r0, #0
 8001c18:	f000 f80e 	bl	8001c38 <HAL_InitTick>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	71fb      	strb	r3, [r7, #7]
 8001c26:	e001      	b.n	8001c2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c28:	f7ff fcf4 	bl	8001614 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c44:	4b17      	ldr	r3, [pc, #92]	@ (8001ca4 <HAL_InitTick+0x6c>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d023      	beq.n	8001c94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c4c:	4b16      	ldr	r3, [pc, #88]	@ (8001ca8 <HAL_InitTick+0x70>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b14      	ldr	r3, [pc, #80]	@ (8001ca4 <HAL_InitTick+0x6c>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f001 fa0b 	bl	800307e <HAL_SYSTICK_Config>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10f      	bne.n	8001c8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b0f      	cmp	r3, #15
 8001c72:	d809      	bhi.n	8001c88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c74:	2200      	movs	r2, #0
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7c:	f001 f9d5 	bl	800302a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c80:	4a0a      	ldr	r2, [pc, #40]	@ (8001cac <HAL_InitTick+0x74>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	e007      	b.n	8001c98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	e004      	b.n	8001c98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	73fb      	strb	r3, [r7, #15]
 8001c92:	e001      	b.n	8001c98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000010 	.word	0x20000010
 8001ca8:	20000008 	.word	0x20000008
 8001cac:	2000000c 	.word	0x2000000c

08001cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <HAL_IncTick+0x20>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <HAL_IncTick+0x24>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4a04      	ldr	r2, [pc, #16]	@ (8001cd4 <HAL_IncTick+0x24>)
 8001cc2:	6013      	str	r3, [r2, #0]
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000010 	.word	0x20000010
 8001cd4:	20003c30 	.word	0x20003c30

08001cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return uwTick;
 8001cdc:	4b03      	ldr	r3, [pc, #12]	@ (8001cec <HAL_GetTick+0x14>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20003c30 	.word	0x20003c30

08001cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf8:	f7ff ffee 	bl	8001cd8 <HAL_GetTick>
 8001cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d08:	d005      	beq.n	8001d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d34 <HAL_Delay+0x44>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4413      	add	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d16:	bf00      	nop
 8001d18:	f7ff ffde 	bl	8001cd8 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d8f7      	bhi.n	8001d18 <HAL_Delay+0x28>
  {
  }
}
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000010 	.word	0x20000010

08001d38 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	609a      	str	r2, [r3, #8]
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	609a      	str	r2, [r3, #8]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	3360      	adds	r3, #96	@ 0x60
 8001db2:	461a      	mov	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4b08      	ldr	r3, [pc, #32]	@ (8001de4 <LL_ADC_SetOffset+0x44>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001dd8:	bf00      	nop
 8001dda:	371c      	adds	r7, #28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	03fff000 	.word	0x03fff000

08001de8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3360      	adds	r3, #96	@ 0x60
 8001df6:	461a      	mov	r2, r3
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	3360      	adds	r3, #96	@ 0x60
 8001e24:	461a      	mov	r2, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e3e:	bf00      	nop
 8001e40:	371c      	adds	r7, #28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	3330      	adds	r3, #48	@ 0x30
 8001e80:	461a      	mov	r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	4413      	add	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	211f      	movs	r1, #31
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	0e9b      	lsrs	r3, r3, #26
 8001ea8:	f003 011f 	and.w	r1, r3, #31
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f003 031f 	and.w	r3, r3, #31
 8001eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ebc:	bf00      	nop
 8001ebe:	371c      	adds	r7, #28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b087      	sub	sp, #28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	3314      	adds	r3, #20
 8001ed8:	461a      	mov	r2, r3
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	0e5b      	lsrs	r3, r3, #25
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	4413      	add	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	0d1b      	lsrs	r3, r3, #20
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	2107      	movs	r1, #7
 8001ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	401a      	ands	r2, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	0d1b      	lsrs	r3, r3, #20
 8001f02:	f003 031f 	and.w	r3, r3, #31
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f12:	bf00      	nop
 8001f14:	371c      	adds	r7, #28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
	...

08001f20 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f003 0318 	and.w	r3, r3, #24
 8001f42:	4908      	ldr	r1, [pc, #32]	@ (8001f64 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f44:	40d9      	lsrs	r1, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	400b      	ands	r3, r1
 8001f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	0007ffff 	.word	0x0007ffff

08001f68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001f78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6093      	str	r3, [r2, #8]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001fa0:	d101      	bne.n	8001fa6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001fc4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fc8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ff0:	d101      	bne.n	8001ff6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002014:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002018:	f043 0201 	orr.w	r2, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <LL_ADC_IsEnabled+0x18>
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <LL_ADC_IsEnabled+0x1a>
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002062:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002066:	f043 0204 	orr.w	r2, r3, #4
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b04      	cmp	r3, #4
 800208c:	d101      	bne.n	8002092 <LL_ADC_REG_IsConversionOngoing+0x18>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d101      	bne.n	80020b8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
	...

080020c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e126      	b.n	8002330 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d109      	bne.n	8002104 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff fab3 	bl	800165c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff3f 	bl	8001f8c <LL_ADC_IsDeepPowerDownEnabled>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d004      	beq.n	800211e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff25 	bl	8001f68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff ff5a 	bl	8001fdc <LL_ADC_IsInternalRegulatorEnabled>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d115      	bne.n	800215a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ff3e 	bl	8001fb4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002138:	4b7f      	ldr	r3, [pc, #508]	@ (8002338 <HAL_ADC_Init+0x270>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	099b      	lsrs	r3, r3, #6
 800213e:	4a7f      	ldr	r2, [pc, #508]	@ (800233c <HAL_ADC_Init+0x274>)
 8002140:	fba2 2303 	umull	r2, r3, r2, r3
 8002144:	099b      	lsrs	r3, r3, #6
 8002146:	3301      	adds	r3, #1
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800214c:	e002      	b.n	8002154 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	3b01      	subs	r3, #1
 8002152:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f9      	bne.n	800214e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff ff3c 	bl	8001fdc <LL_ADC_IsInternalRegulatorEnabled>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10d      	bne.n	8002186 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800216e:	f043 0210 	orr.w	r2, r3, #16
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800217a:	f043 0201 	orr.w	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff ff75 	bl	800207a <LL_ADC_REG_IsConversionOngoing>
 8002190:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	2b00      	cmp	r3, #0
 800219c:	f040 80bf 	bne.w	800231e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f040 80bb 	bne.w	800231e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ac:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80021b0:	f043 0202 	orr.w	r2, r3, #2
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ff35 	bl	800202c <LL_ADC_IsEnabled>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10b      	bne.n	80021e0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021c8:	485d      	ldr	r0, [pc, #372]	@ (8002340 <HAL_ADC_Init+0x278>)
 80021ca:	f7ff ff2f 	bl	800202c <LL_ADC_IsEnabled>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d105      	bne.n	80021e0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	4619      	mov	r1, r3
 80021da:	485a      	ldr	r0, [pc, #360]	@ (8002344 <HAL_ADC_Init+0x27c>)
 80021dc:	f7ff fdac 	bl	8001d38 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	7e5b      	ldrb	r3, [r3, #25]
 80021e4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021ea:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80021f0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80021f6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021fe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3020 	ldrb.w	r3, [r3, #32]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d106      	bne.n	800221c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002212:	3b01      	subs	r3, #1
 8002214:	045b      	lsls	r3, r3, #17
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002220:	2b00      	cmp	r3, #0
 8002222:	d009      	beq.n	8002238 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002228:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002230:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	4b42      	ldr	r3, [pc, #264]	@ (8002348 <HAL_ADC_Init+0x280>)
 8002240:	4013      	ands	r3, r2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6812      	ldr	r2, [r2, #0]
 8002246:	69b9      	ldr	r1, [r7, #24]
 8002248:	430b      	orrs	r3, r1
 800224a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff ff25 	bl	80020a0 <LL_ADC_INJ_IsConversionOngoing>
 8002256:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d13d      	bne.n	80022da <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d13a      	bne.n	80022da <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002268:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002270:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002280:	f023 0302 	bic.w	r3, r3, #2
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	69b9      	ldr	r1, [r7, #24]
 800228a:	430b      	orrs	r3, r1
 800228c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002294:	2b01      	cmp	r3, #1
 8002296:	d118      	bne.n	80022ca <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80022a2:	f023 0304 	bic.w	r3, r3, #4
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80022ae:	4311      	orrs	r1, r2
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80022b4:	4311      	orrs	r1, r2
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022ba:	430a      	orrs	r2, r1
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0201 	orr.w	r2, r2, #1
 80022c6:	611a      	str	r2, [r3, #16]
 80022c8:	e007      	b.n	80022da <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0201 	bic.w	r2, r2, #1
 80022d8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d10c      	bne.n	80022fc <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e8:	f023 010f 	bic.w	r1, r3, #15
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	1e5a      	subs	r2, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80022fa:	e007      	b.n	800230c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 020f 	bic.w	r2, r2, #15
 800230a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002310:	f023 0303 	bic.w	r3, r3, #3
 8002314:	f043 0201 	orr.w	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	655a      	str	r2, [r3, #84]	@ 0x54
 800231c:	e007      	b.n	800232e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002322:	f043 0210 	orr.w	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800232e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3720      	adds	r7, #32
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000008 	.word	0x20000008
 800233c:	053e2d63 	.word	0x053e2d63
 8002340:	50040000 	.word	0x50040000
 8002344:	50040300 	.word	0x50040300
 8002348:	fff0c007 	.word	0xfff0c007

0800234c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fe8c 	bl	800207a <LL_ADC_REG_IsConversionOngoing>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d167      	bne.n	8002438 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_ADC_Start_DMA+0x2a>
 8002372:	2302      	movs	r3, #2
 8002374:	e063      	b.n	800243e <HAL_ADC_Start_DMA+0xf2>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 fc5e 	bl	8002c40 <ADC_Enable>
 8002384:	4603      	mov	r3, r0
 8002386:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002388:	7dfb      	ldrb	r3, [r7, #23]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d14f      	bne.n	800242e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002392:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002396:	f023 0301 	bic.w	r3, r3, #1
 800239a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d006      	beq.n	80023bc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b2:	f023 0206 	bic.w	r2, r3, #6
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80023ba:	e002      	b.n	80023c2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c6:	4a20      	ldr	r2, [pc, #128]	@ (8002448 <HAL_ADC_Start_DMA+0xfc>)
 80023c8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ce:	4a1f      	ldr	r2, [pc, #124]	@ (800244c <HAL_ADC_Start_DMA+0x100>)
 80023d0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002450 <HAL_ADC_Start_DMA+0x104>)
 80023d8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	221c      	movs	r2, #28
 80023e0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0210 	orr.w	r2, r2, #16
 80023f8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0201 	orr.w	r2, r2, #1
 8002408:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	3340      	adds	r3, #64	@ 0x40
 8002414:	4619      	mov	r1, r3
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f000 fef5 	bl	8003208 <HAL_DMA_Start_IT>
 800241e:	4603      	mov	r3, r0
 8002420:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fe13 	bl	8002052 <LL_ADC_REG_StartConversion>
 800242c:	e006      	b.n	800243c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002436:	e001      	b.n	800243c <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002438:	2302      	movs	r3, #2
 800243a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800243c:	7dfb      	ldrb	r3, [r7, #23]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	08002d4d 	.word	0x08002d4d
 800244c:	08002e25 	.word	0x08002e25
 8002450:	08002e41 	.word	0x08002e41

08002454 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b0b6      	sub	sp, #216	@ 0xd8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800248c:	2300      	movs	r3, #0
 800248e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_ADC_ConfigChannel+0x22>
 800249a:	2302      	movs	r3, #2
 800249c:	e3bb      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x79a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fde5 	bl	800207a <LL_ADC_REG_IsConversionOngoing>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f040 83a0 	bne.w	8002bf8 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b05      	cmp	r3, #5
 80024c6:	d824      	bhi.n	8002512 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	3b02      	subs	r3, #2
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d81b      	bhi.n	800250a <HAL_ADC_ConfigChannel+0x8e>
 80024d2:	a201      	add	r2, pc, #4	@ (adr r2, 80024d8 <HAL_ADC_ConfigChannel+0x5c>)
 80024d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d8:	080024e9 	.word	0x080024e9
 80024dc:	080024f1 	.word	0x080024f1
 80024e0:	080024f9 	.word	0x080024f9
 80024e4:	08002501 	.word	0x08002501
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80024e8:	230c      	movs	r3, #12
 80024ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80024ee:	e010      	b.n	8002512 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80024f0:	2312      	movs	r3, #18
 80024f2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80024f6:	e00c      	b.n	8002512 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80024f8:	2318      	movs	r3, #24
 80024fa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80024fe:	e008      	b.n	8002512 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002500:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002504:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002508:	e003      	b.n	8002512 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800250a:	2306      	movs	r3, #6
 800250c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002510:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6818      	ldr	r0, [r3, #0]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002520:	f7ff fca6 	bl	8001e70 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fda6 	bl	800207a <LL_ADC_REG_IsConversionOngoing>
 800252e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fdb2 	bl	80020a0 <LL_ADC_INJ_IsConversionOngoing>
 800253c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002540:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002544:	2b00      	cmp	r3, #0
 8002546:	f040 81a4 	bne.w	8002892 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800254a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800254e:	2b00      	cmp	r3, #0
 8002550:	f040 819f 	bne.w	8002892 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6818      	ldr	r0, [r3, #0]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	6819      	ldr	r1, [r3, #0]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	461a      	mov	r2, r3
 8002562:	f7ff fcb1 	bl	8001ec8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	695a      	ldr	r2, [r3, #20]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	08db      	lsrs	r3, r3, #3
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	2b04      	cmp	r3, #4
 8002586:	d00a      	beq.n	800259e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6818      	ldr	r0, [r3, #0]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	6919      	ldr	r1, [r3, #16]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002598:	f7ff fc02 	bl	8001da0 <LL_ADC_SetOffset>
 800259c:	e179      	b.n	8002892 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2100      	movs	r1, #0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff fc1f 	bl	8001de8 <LL_ADC_GetOffsetChannel>
 80025aa:	4603      	mov	r3, r0
 80025ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10a      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x14e>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2100      	movs	r1, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fc14 	bl	8001de8 <LL_ADC_GetOffsetChannel>
 80025c0:	4603      	mov	r3, r0
 80025c2:	0e9b      	lsrs	r3, r3, #26
 80025c4:	f003 021f 	and.w	r2, r3, #31
 80025c8:	e01e      	b.n	8002608 <HAL_ADC_ConfigChannel+0x18c>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2100      	movs	r1, #0
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff fc09 	bl	8001de8 <LL_ADC_GetOffsetChannel>
 80025d6:	4603      	mov	r3, r0
 80025d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80025ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80025f8:	2320      	movs	r3, #32
 80025fa:	e004      	b.n	8002606 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80025fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002600:	fab3 f383 	clz	r3, r3
 8002604:	b2db      	uxtb	r3, r3
 8002606:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002610:	2b00      	cmp	r3, #0
 8002612:	d105      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x1a4>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	0e9b      	lsrs	r3, r3, #26
 800261a:	f003 031f 	and.w	r3, r3, #31
 800261e:	e018      	b.n	8002652 <HAL_ADC_ConfigChannel+0x1d6>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800262c:	fa93 f3a3 	rbit	r3, r3
 8002630:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002634:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002638:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800263c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002644:	2320      	movs	r3, #32
 8002646:	e004      	b.n	8002652 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002648:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800264c:	fab3 f383 	clz	r3, r3
 8002650:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002652:	429a      	cmp	r2, r3
 8002654:	d106      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2200      	movs	r2, #0
 800265c:	2100      	movs	r1, #0
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fbd8 	bl	8001e14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2101      	movs	r1, #1
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fbbc 	bl	8001de8 <LL_ADC_GetOffsetChannel>
 8002670:	4603      	mov	r3, r0
 8002672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10a      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x214>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2101      	movs	r1, #1
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fbb1 	bl	8001de8 <LL_ADC_GetOffsetChannel>
 8002686:	4603      	mov	r3, r0
 8002688:	0e9b      	lsrs	r3, r3, #26
 800268a:	f003 021f 	and.w	r2, r3, #31
 800268e:	e01e      	b.n	80026ce <HAL_ADC_ConfigChannel+0x252>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2101      	movs	r1, #1
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fba6 	bl	8001de8 <LL_ADC_GetOffsetChannel>
 800269c:	4603      	mov	r3, r0
 800269e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026a6:	fa93 f3a3 	rbit	r3, r3
 80026aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80026ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80026b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80026be:	2320      	movs	r3, #32
 80026c0:	e004      	b.n	80026cc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80026c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026c6:	fab3 f383 	clz	r3, r3
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d105      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x26a>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	0e9b      	lsrs	r3, r3, #26
 80026e0:	f003 031f 	and.w	r3, r3, #31
 80026e4:	e018      	b.n	8002718 <HAL_ADC_ConfigChannel+0x29c>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80026fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80026fe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002702:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800270a:	2320      	movs	r3, #32
 800270c:	e004      	b.n	8002718 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800270e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002712:	fab3 f383 	clz	r3, r3
 8002716:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002718:	429a      	cmp	r2, r3
 800271a:	d106      	bne.n	800272a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2200      	movs	r2, #0
 8002722:	2101      	movs	r1, #1
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fb75 	bl	8001e14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2102      	movs	r1, #2
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fb59 	bl	8001de8 <LL_ADC_GetOffsetChannel>
 8002736:	4603      	mov	r3, r0
 8002738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10a      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x2da>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2102      	movs	r1, #2
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fb4e 	bl	8001de8 <LL_ADC_GetOffsetChannel>
 800274c:	4603      	mov	r3, r0
 800274e:	0e9b      	lsrs	r3, r3, #26
 8002750:	f003 021f 	and.w	r2, r3, #31
 8002754:	e01e      	b.n	8002794 <HAL_ADC_ConfigChannel+0x318>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2102      	movs	r1, #2
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fb43 	bl	8001de8 <LL_ADC_GetOffsetChannel>
 8002762:	4603      	mov	r3, r0
 8002764:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002768:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800276c:	fa93 f3a3 	rbit	r3, r3
 8002770:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002774:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002778:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800277c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002784:	2320      	movs	r3, #32
 8002786:	e004      	b.n	8002792 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002788:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800278c:	fab3 f383 	clz	r3, r3
 8002790:	b2db      	uxtb	r3, r3
 8002792:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800279c:	2b00      	cmp	r3, #0
 800279e:	d105      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x330>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	0e9b      	lsrs	r3, r3, #26
 80027a6:	f003 031f 	and.w	r3, r3, #31
 80027aa:	e014      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x35a>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027b4:	fa93 f3a3 	rbit	r3, r3
 80027b8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80027ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80027c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80027c8:	2320      	movs	r3, #32
 80027ca:	e004      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80027cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027d0:	fab3 f383 	clz	r3, r3
 80027d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d106      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2200      	movs	r2, #0
 80027e0:	2102      	movs	r1, #2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff fb16 	bl	8001e14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2103      	movs	r1, #3
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff fafa 	bl	8001de8 <LL_ADC_GetOffsetChannel>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10a      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x398>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2103      	movs	r1, #3
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff faef 	bl	8001de8 <LL_ADC_GetOffsetChannel>
 800280a:	4603      	mov	r3, r0
 800280c:	0e9b      	lsrs	r3, r3, #26
 800280e:	f003 021f 	and.w	r2, r3, #31
 8002812:	e017      	b.n	8002844 <HAL_ADC_ConfigChannel+0x3c8>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2103      	movs	r1, #3
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff fae4 	bl	8001de8 <LL_ADC_GetOffsetChannel>
 8002820:	4603      	mov	r3, r0
 8002822:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002824:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002826:	fa93 f3a3 	rbit	r3, r3
 800282a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800282c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800282e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002830:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002836:	2320      	movs	r3, #32
 8002838:	e003      	b.n	8002842 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800283a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800283c:	fab3 f383 	clz	r3, r3
 8002840:	b2db      	uxtb	r3, r3
 8002842:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284c:	2b00      	cmp	r3, #0
 800284e:	d105      	bne.n	800285c <HAL_ADC_ConfigChannel+0x3e0>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0e9b      	lsrs	r3, r3, #26
 8002856:	f003 031f 	and.w	r3, r3, #31
 800285a:	e011      	b.n	8002880 <HAL_ADC_ConfigChannel+0x404>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002864:	fa93 f3a3 	rbit	r3, r3
 8002868:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800286a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800286c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800286e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002874:	2320      	movs	r3, #32
 8002876:	e003      	b.n	8002880 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002878:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800287a:	fab3 f383 	clz	r3, r3
 800287e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002880:	429a      	cmp	r2, r3
 8002882:	d106      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2200      	movs	r2, #0
 800288a:	2103      	movs	r1, #3
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff fac1 	bl	8001e14 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fbc8 	bl	800202c <LL_ADC_IsEnabled>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f040 8140 	bne.w	8002b24 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6818      	ldr	r0, [r3, #0]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	6819      	ldr	r1, [r3, #0]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	461a      	mov	r2, r3
 80028b2:	f7ff fb35 	bl	8001f20 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	4a8f      	ldr	r2, [pc, #572]	@ (8002af8 <HAL_ADC_ConfigChannel+0x67c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	f040 8131 	bne.w	8002b24 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10b      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x46e>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	0e9b      	lsrs	r3, r3, #26
 80028d8:	3301      	adds	r3, #1
 80028da:	f003 031f 	and.w	r3, r3, #31
 80028de:	2b09      	cmp	r3, #9
 80028e0:	bf94      	ite	ls
 80028e2:	2301      	movls	r3, #1
 80028e4:	2300      	movhi	r3, #0
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	e019      	b.n	800291e <HAL_ADC_ConfigChannel+0x4a2>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028f2:	fa93 f3a3 	rbit	r3, r3
 80028f6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80028f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80028fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002902:	2320      	movs	r3, #32
 8002904:	e003      	b.n	800290e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002906:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002908:	fab3 f383 	clz	r3, r3
 800290c:	b2db      	uxtb	r3, r3
 800290e:	3301      	adds	r3, #1
 8002910:	f003 031f 	and.w	r3, r3, #31
 8002914:	2b09      	cmp	r3, #9
 8002916:	bf94      	ite	ls
 8002918:	2301      	movls	r3, #1
 800291a:	2300      	movhi	r3, #0
 800291c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800291e:	2b00      	cmp	r3, #0
 8002920:	d079      	beq.n	8002a16 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292a:	2b00      	cmp	r3, #0
 800292c:	d107      	bne.n	800293e <HAL_ADC_ConfigChannel+0x4c2>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	0e9b      	lsrs	r3, r3, #26
 8002934:	3301      	adds	r3, #1
 8002936:	069b      	lsls	r3, r3, #26
 8002938:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800293c:	e015      	b.n	800296a <HAL_ADC_ConfigChannel+0x4ee>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800294c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800294e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002950:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002956:	2320      	movs	r3, #32
 8002958:	e003      	b.n	8002962 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800295a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800295c:	fab3 f383 	clz	r3, r3
 8002960:	b2db      	uxtb	r3, r3
 8002962:	3301      	adds	r3, #1
 8002964:	069b      	lsls	r3, r3, #26
 8002966:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002972:	2b00      	cmp	r3, #0
 8002974:	d109      	bne.n	800298a <HAL_ADC_ConfigChannel+0x50e>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	0e9b      	lsrs	r3, r3, #26
 800297c:	3301      	adds	r3, #1
 800297e:	f003 031f 	and.w	r3, r3, #31
 8002982:	2101      	movs	r1, #1
 8002984:	fa01 f303 	lsl.w	r3, r1, r3
 8002988:	e017      	b.n	80029ba <HAL_ADC_ConfigChannel+0x53e>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800299a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800299c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80029a2:	2320      	movs	r3, #32
 80029a4:	e003      	b.n	80029ae <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80029a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029a8:	fab3 f383 	clz	r3, r3
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	3301      	adds	r3, #1
 80029b0:	f003 031f 	and.w	r3, r3, #31
 80029b4:	2101      	movs	r1, #1
 80029b6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ba:	ea42 0103 	orr.w	r1, r2, r3
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10a      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x564>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	0e9b      	lsrs	r3, r3, #26
 80029d0:	3301      	adds	r3, #1
 80029d2:	f003 021f 	and.w	r2, r3, #31
 80029d6:	4613      	mov	r3, r2
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	4413      	add	r3, r2
 80029dc:	051b      	lsls	r3, r3, #20
 80029de:	e018      	b.n	8002a12 <HAL_ADC_ConfigChannel+0x596>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029e8:	fa93 f3a3 	rbit	r3, r3
 80029ec:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80029ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80029f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80029f8:	2320      	movs	r3, #32
 80029fa:	e003      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80029fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029fe:	fab3 f383 	clz	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	3301      	adds	r3, #1
 8002a06:	f003 021f 	and.w	r2, r3, #31
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	4413      	add	r3, r2
 8002a10:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a12:	430b      	orrs	r3, r1
 8002a14:	e081      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d107      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x5b6>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	0e9b      	lsrs	r3, r3, #26
 8002a28:	3301      	adds	r3, #1
 8002a2a:	069b      	lsls	r3, r3, #26
 8002a2c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a30:	e015      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x5e2>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002a4a:	2320      	movs	r3, #32
 8002a4c:	e003      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a50:	fab3 f383 	clz	r3, r3
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	3301      	adds	r3, #1
 8002a58:	069b      	lsls	r3, r3, #26
 8002a5a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x602>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	0e9b      	lsrs	r3, r3, #26
 8002a70:	3301      	adds	r3, #1
 8002a72:	f003 031f 	and.w	r3, r3, #31
 8002a76:	2101      	movs	r1, #1
 8002a78:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7c:	e017      	b.n	8002aae <HAL_ADC_ConfigChannel+0x632>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	fa93 f3a3 	rbit	r3, r3
 8002a8a:	61bb      	str	r3, [r7, #24]
  return result;
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002a96:	2320      	movs	r3, #32
 8002a98:	e003      	b.n	8002aa2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
 8002a9c:	fab3 f383 	clz	r3, r3
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002aae:	ea42 0103 	orr.w	r1, r2, r3
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10d      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x65e>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	0e9b      	lsrs	r3, r3, #26
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	f003 021f 	and.w	r2, r3, #31
 8002aca:	4613      	mov	r3, r2
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	4413      	add	r3, r2
 8002ad0:	3b1e      	subs	r3, #30
 8002ad2:	051b      	lsls	r3, r3, #20
 8002ad4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ad8:	e01e      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x69c>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	60fb      	str	r3, [r7, #12]
  return result;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d104      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002af2:	2320      	movs	r3, #32
 8002af4:	e006      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x688>
 8002af6:	bf00      	nop
 8002af8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	fab3 f383 	clz	r3, r3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	3301      	adds	r3, #1
 8002b06:	f003 021f 	and.w	r2, r3, #31
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	4413      	add	r3, r2
 8002b10:	3b1e      	subs	r3, #30
 8002b12:	051b      	lsls	r3, r3, #20
 8002b14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b18:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b1e:	4619      	mov	r1, r3
 8002b20:	f7ff f9d2 	bl	8001ec8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4b3d      	ldr	r3, [pc, #244]	@ (8002c20 <HAL_ADC_ConfigChannel+0x7a4>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d06c      	beq.n	8002c0a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b30:	483c      	ldr	r0, [pc, #240]	@ (8002c24 <HAL_ADC_ConfigChannel+0x7a8>)
 8002b32:	f7ff f927 	bl	8001d84 <LL_ADC_GetCommonPathInternalCh>
 8002b36:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a3a      	ldr	r2, [pc, #232]	@ (8002c28 <HAL_ADC_ConfigChannel+0x7ac>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d127      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d121      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a35      	ldr	r2, [pc, #212]	@ (8002c2c <HAL_ADC_ConfigChannel+0x7b0>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d157      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b5e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b62:	4619      	mov	r1, r3
 8002b64:	482f      	ldr	r0, [pc, #188]	@ (8002c24 <HAL_ADC_ConfigChannel+0x7a8>)
 8002b66:	f7ff f8fa 	bl	8001d5e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b6a:	4b31      	ldr	r3, [pc, #196]	@ (8002c30 <HAL_ADC_ConfigChannel+0x7b4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	099b      	lsrs	r3, r3, #6
 8002b70:	4a30      	ldr	r2, [pc, #192]	@ (8002c34 <HAL_ADC_ConfigChannel+0x7b8>)
 8002b72:	fba2 2303 	umull	r2, r3, r2, r3
 8002b76:	099b      	lsrs	r3, r3, #6
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	4413      	add	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b84:	e002      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f9      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b92:	e03a      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a27      	ldr	r2, [pc, #156]	@ (8002c38 <HAL_ADC_ConfigChannel+0x7bc>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d113      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ba2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10d      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1f      	ldr	r2, [pc, #124]	@ (8002c2c <HAL_ADC_ConfigChannel+0x7b0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d12a      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bb8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4819      	ldr	r0, [pc, #100]	@ (8002c24 <HAL_ADC_ConfigChannel+0x7a8>)
 8002bc0:	f7ff f8cd 	bl	8001d5e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bc4:	e021      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a1c      	ldr	r2, [pc, #112]	@ (8002c3c <HAL_ADC_ConfigChannel+0x7c0>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d11c      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d116      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a12      	ldr	r2, [pc, #72]	@ (8002c2c <HAL_ADC_ConfigChannel+0x7b0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d111      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002be6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bee:	4619      	mov	r1, r3
 8002bf0:	480c      	ldr	r0, [pc, #48]	@ (8002c24 <HAL_ADC_ConfigChannel+0x7a8>)
 8002bf2:	f7ff f8b4 	bl	8001d5e <LL_ADC_SetCommonPathInternalCh>
 8002bf6:	e008      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfc:	f043 0220 	orr.w	r2, r3, #32
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c12:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	37d8      	adds	r7, #216	@ 0xd8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	80080000 	.word	0x80080000
 8002c24:	50040300 	.word	0x50040300
 8002c28:	c7520000 	.word	0xc7520000
 8002c2c:	50040000 	.word	0x50040000
 8002c30:	20000008 	.word	0x20000008
 8002c34:	053e2d63 	.word	0x053e2d63
 8002c38:	cb840000 	.word	0xcb840000
 8002c3c:	80000001 	.word	0x80000001

08002c40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff f9eb 	bl	800202c <LL_ADC_IsEnabled>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d169      	bne.n	8002d30 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	4b36      	ldr	r3, [pc, #216]	@ (8002d3c <ADC_Enable+0xfc>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00d      	beq.n	8002c86 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c6e:	f043 0210 	orr.w	r2, r3, #16
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7a:	f043 0201 	orr.w	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e055      	b.n	8002d32 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff f9ba 	bl	8002004 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c90:	482b      	ldr	r0, [pc, #172]	@ (8002d40 <ADC_Enable+0x100>)
 8002c92:	f7ff f877 	bl	8001d84 <LL_ADC_GetCommonPathInternalCh>
 8002c96:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002c98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d013      	beq.n	8002cc8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ca0:	4b28      	ldr	r3, [pc, #160]	@ (8002d44 <ADC_Enable+0x104>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	099b      	lsrs	r3, r3, #6
 8002ca6:	4a28      	ldr	r2, [pc, #160]	@ (8002d48 <ADC_Enable+0x108>)
 8002ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cac:	099b      	lsrs	r3, r3, #6
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cba:	e002      	b.n	8002cc2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f9      	bne.n	8002cbc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002cc8:	f7ff f806 	bl	8001cd8 <HAL_GetTick>
 8002ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cce:	e028      	b.n	8002d22 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff f9a9 	bl	800202c <LL_ADC_IsEnabled>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d104      	bne.n	8002cea <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff f98d 	bl	8002004 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cea:	f7fe fff5 	bl	8001cd8 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d914      	bls.n	8002d22 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d00d      	beq.n	8002d22 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d0a:	f043 0210 	orr.w	r2, r3, #16
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d16:	f043 0201 	orr.w	r2, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e007      	b.n	8002d32 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d1cf      	bne.n	8002cd0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	8000003f 	.word	0x8000003f
 8002d40:	50040300 	.word	0x50040300
 8002d44:	20000008 	.word	0x20000008
 8002d48:	053e2d63 	.word	0x053e2d63

08002d4c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d58:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d14b      	bne.n	8002dfe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d6a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d021      	beq.n	8002dc4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff f860 	bl	8001e4a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d032      	beq.n	8002df6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d12b      	bne.n	8002df6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d11f      	bne.n	8002df6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dba:	f043 0201 	orr.w	r2, r3, #1
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	655a      	str	r2, [r3, #84]	@ 0x54
 8002dc2:	e018      	b.n	8002df6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d111      	bne.n	8002df6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d105      	bne.n	8002df6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dee:	f043 0201 	orr.w	r2, r3, #1
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f7fe faf6 	bl	80013e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002dfc:	e00e      	b.n	8002e1c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e02:	f003 0310 	and.w	r3, r3, #16
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f7ff fb2c 	bl	8002468 <HAL_ADC_ErrorCallback>
}
 8002e10:	e004      	b.n	8002e1c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	4798      	blx	r3
}
 8002e1c:	bf00      	nop
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e30:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f7ff fb0e 	bl	8002454 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e38:	bf00      	nop
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5e:	f043 0204 	orr.w	r2, r3, #4
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f7ff fafe 	bl	8002468 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e6c:	bf00      	nop
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e84:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e90:	4013      	ands	r3, r2
 8002e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ea0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ea6:	4a04      	ldr	r2, [pc, #16]	@ (8002eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	60d3      	str	r3, [r2, #12]
}
 8002eac:	bf00      	nop
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ec0:	4b04      	ldr	r3, [pc, #16]	@ (8002ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	0a1b      	lsrs	r3, r3, #8
 8002ec6:	f003 0307 	and.w	r3, r3, #7
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	e000ed00 	.word	0xe000ed00

08002ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	db0b      	blt.n	8002f02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	f003 021f 	and.w	r2, r3, #31
 8002ef0:	4907      	ldr	r1, [pc, #28]	@ (8002f10 <__NVIC_EnableIRQ+0x38>)
 8002ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef6:	095b      	lsrs	r3, r3, #5
 8002ef8:	2001      	movs	r0, #1
 8002efa:	fa00 f202 	lsl.w	r2, r0, r2
 8002efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	e000e100 	.word	0xe000e100

08002f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	6039      	str	r1, [r7, #0]
 8002f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	db0a      	blt.n	8002f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	490c      	ldr	r1, [pc, #48]	@ (8002f60 <__NVIC_SetPriority+0x4c>)
 8002f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f32:	0112      	lsls	r2, r2, #4
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	440b      	add	r3, r1
 8002f38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f3c:	e00a      	b.n	8002f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	4908      	ldr	r1, [pc, #32]	@ (8002f64 <__NVIC_SetPriority+0x50>)
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	3b04      	subs	r3, #4
 8002f4c:	0112      	lsls	r2, r2, #4
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	440b      	add	r3, r1
 8002f52:	761a      	strb	r2, [r3, #24]
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	e000e100 	.word	0xe000e100
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b089      	sub	sp, #36	@ 0x24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f1c3 0307 	rsb	r3, r3, #7
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	bf28      	it	cs
 8002f86:	2304      	movcs	r3, #4
 8002f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	2b06      	cmp	r3, #6
 8002f90:	d902      	bls.n	8002f98 <NVIC_EncodePriority+0x30>
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	3b03      	subs	r3, #3
 8002f96:	e000      	b.n	8002f9a <NVIC_EncodePriority+0x32>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43da      	mvns	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	401a      	ands	r2, r3
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fba:	43d9      	mvns	r1, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc0:	4313      	orrs	r3, r2
         );
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3724      	adds	r7, #36	@ 0x24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
	...

08002fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fe0:	d301      	bcc.n	8002fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e00f      	b.n	8003006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8003010 <SysTick_Config+0x40>)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fee:	210f      	movs	r1, #15
 8002ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff4:	f7ff ff8e 	bl	8002f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ff8:	4b05      	ldr	r3, [pc, #20]	@ (8003010 <SysTick_Config+0x40>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ffe:	4b04      	ldr	r3, [pc, #16]	@ (8003010 <SysTick_Config+0x40>)
 8003000:	2207      	movs	r2, #7
 8003002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	e000e010 	.word	0xe000e010

08003014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff ff29 	bl	8002e74 <__NVIC_SetPriorityGrouping>
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b086      	sub	sp, #24
 800302e:	af00      	add	r7, sp, #0
 8003030:	4603      	mov	r3, r0
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800303c:	f7ff ff3e 	bl	8002ebc <__NVIC_GetPriorityGrouping>
 8003040:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	68b9      	ldr	r1, [r7, #8]
 8003046:	6978      	ldr	r0, [r7, #20]
 8003048:	f7ff ff8e 	bl	8002f68 <NVIC_EncodePriority>
 800304c:	4602      	mov	r2, r0
 800304e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003052:	4611      	mov	r1, r2
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff ff5d 	bl	8002f14 <__NVIC_SetPriority>
}
 800305a:	bf00      	nop
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
 8003068:	4603      	mov	r3, r0
 800306a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800306c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff ff31 	bl	8002ed8 <__NVIC_EnableIRQ>
}
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7ff ffa2 	bl	8002fd0 <SysTick_Config>
 800308c:	4603      	mov	r3, r0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e098      	b.n	80031dc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	4b4d      	ldr	r3, [pc, #308]	@ (80031e8 <HAL_DMA_Init+0x150>)
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d80f      	bhi.n	80030d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	4b4b      	ldr	r3, [pc, #300]	@ (80031ec <HAL_DMA_Init+0x154>)
 80030be:	4413      	add	r3, r2
 80030c0:	4a4b      	ldr	r2, [pc, #300]	@ (80031f0 <HAL_DMA_Init+0x158>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	091b      	lsrs	r3, r3, #4
 80030c8:	009a      	lsls	r2, r3, #2
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a48      	ldr	r2, [pc, #288]	@ (80031f4 <HAL_DMA_Init+0x15c>)
 80030d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80030d4:	e00e      	b.n	80030f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	4b46      	ldr	r3, [pc, #280]	@ (80031f8 <HAL_DMA_Init+0x160>)
 80030de:	4413      	add	r3, r2
 80030e0:	4a43      	ldr	r2, [pc, #268]	@ (80031f0 <HAL_DMA_Init+0x158>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	091b      	lsrs	r3, r3, #4
 80030e8:	009a      	lsls	r2, r3, #2
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a42      	ldr	r2, [pc, #264]	@ (80031fc <HAL_DMA_Init+0x164>)
 80030f2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800310a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800310e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003118:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003124:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003130:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800314e:	d039      	beq.n	80031c4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003154:	4a27      	ldr	r2, [pc, #156]	@ (80031f4 <HAL_DMA_Init+0x15c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d11a      	bne.n	8003190 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800315a:	4b29      	ldr	r3, [pc, #164]	@ (8003200 <HAL_DMA_Init+0x168>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003162:	f003 031c 	and.w	r3, r3, #28
 8003166:	210f      	movs	r1, #15
 8003168:	fa01 f303 	lsl.w	r3, r1, r3
 800316c:	43db      	mvns	r3, r3
 800316e:	4924      	ldr	r1, [pc, #144]	@ (8003200 <HAL_DMA_Init+0x168>)
 8003170:	4013      	ands	r3, r2
 8003172:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003174:	4b22      	ldr	r3, [pc, #136]	@ (8003200 <HAL_DMA_Init+0x168>)
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6859      	ldr	r1, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003180:	f003 031c 	and.w	r3, r3, #28
 8003184:	fa01 f303 	lsl.w	r3, r1, r3
 8003188:	491d      	ldr	r1, [pc, #116]	@ (8003200 <HAL_DMA_Init+0x168>)
 800318a:	4313      	orrs	r3, r2
 800318c:	600b      	str	r3, [r1, #0]
 800318e:	e019      	b.n	80031c4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003190:	4b1c      	ldr	r3, [pc, #112]	@ (8003204 <HAL_DMA_Init+0x16c>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003198:	f003 031c 	and.w	r3, r3, #28
 800319c:	210f      	movs	r1, #15
 800319e:	fa01 f303 	lsl.w	r3, r1, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	4917      	ldr	r1, [pc, #92]	@ (8003204 <HAL_DMA_Init+0x16c>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80031aa:	4b16      	ldr	r3, [pc, #88]	@ (8003204 <HAL_DMA_Init+0x16c>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6859      	ldr	r1, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b6:	f003 031c 	and.w	r3, r3, #28
 80031ba:	fa01 f303 	lsl.w	r3, r1, r3
 80031be:	4911      	ldr	r1, [pc, #68]	@ (8003204 <HAL_DMA_Init+0x16c>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	40020407 	.word	0x40020407
 80031ec:	bffdfff8 	.word	0xbffdfff8
 80031f0:	cccccccd 	.word	0xcccccccd
 80031f4:	40020000 	.word	0x40020000
 80031f8:	bffdfbf8 	.word	0xbffdfbf8
 80031fc:	40020400 	.word	0x40020400
 8003200:	400200a8 	.word	0x400200a8
 8003204:	400204a8 	.word	0x400204a8

08003208 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
 8003214:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_DMA_Start_IT+0x20>
 8003224:	2302      	movs	r3, #2
 8003226:	e04b      	b.n	80032c0 <HAL_DMA_Start_IT+0xb8>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	d13a      	bne.n	80032b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0201 	bic.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	68b9      	ldr	r1, [r7, #8]
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 f8e0 	bl	8003426 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326a:	2b00      	cmp	r3, #0
 800326c:	d008      	beq.n	8003280 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 020e 	orr.w	r2, r2, #14
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	e00f      	b.n	80032a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0204 	bic.w	r2, r2, #4
 800328e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 020a 	orr.w	r2, r2, #10
 800329e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	e005      	b.n	80032be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80032ba:	2302      	movs	r3, #2
 80032bc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80032be:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e4:	f003 031c 	and.w	r3, r3, #28
 80032e8:	2204      	movs	r2, #4
 80032ea:	409a      	lsls	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d026      	beq.n	8003342 <HAL_DMA_IRQHandler+0x7a>
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d021      	beq.n	8003342 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b00      	cmp	r3, #0
 800330a:	d107      	bne.n	800331c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0204 	bic.w	r2, r2, #4
 800331a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003320:	f003 021c 	and.w	r2, r3, #28
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003328:	2104      	movs	r1, #4
 800332a:	fa01 f202 	lsl.w	r2, r1, r2
 800332e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003334:	2b00      	cmp	r3, #0
 8003336:	d071      	beq.n	800341c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003340:	e06c      	b.n	800341c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003346:	f003 031c 	and.w	r3, r3, #28
 800334a:	2202      	movs	r2, #2
 800334c:	409a      	lsls	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d02e      	beq.n	80033b4 <HAL_DMA_IRQHandler+0xec>
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d029      	beq.n	80033b4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0320 	and.w	r3, r3, #32
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10b      	bne.n	8003386 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 020a 	bic.w	r2, r2, #10
 800337c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338a:	f003 021c 	and.w	r2, r3, #28
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003392:	2102      	movs	r1, #2
 8003394:	fa01 f202 	lsl.w	r2, r1, r2
 8003398:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d038      	beq.n	800341c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80033b2:	e033      	b.n	800341c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b8:	f003 031c 	and.w	r3, r3, #28
 80033bc:	2208      	movs	r2, #8
 80033be:	409a      	lsls	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d02a      	beq.n	800341e <HAL_DMA_IRQHandler+0x156>
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d025      	beq.n	800341e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 020e 	bic.w	r2, r2, #14
 80033e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e6:	f003 021c 	and.w	r2, r3, #28
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ee:	2101      	movs	r1, #1
 80033f0:	fa01 f202 	lsl.w	r2, r1, r2
 80033f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003410:	2b00      	cmp	r3, #0
 8003412:	d004      	beq.n	800341e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800341c:	bf00      	nop
 800341e:	bf00      	nop
}
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003426:	b480      	push	{r7}
 8003428:	b085      	sub	sp, #20
 800342a:	af00      	add	r7, sp, #0
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	607a      	str	r2, [r7, #4]
 8003432:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003438:	f003 021c 	and.w	r2, r3, #28
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003440:	2101      	movs	r1, #1
 8003442:	fa01 f202 	lsl.w	r2, r1, r2
 8003446:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b10      	cmp	r3, #16
 8003456:	d108      	bne.n	800346a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003468:	e007      	b.n	800347a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	60da      	str	r2, [r3, #12]
}
 800347a:	bf00      	nop
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003496:	e148      	b.n	800372a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	2101      	movs	r1, #1
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	fa01 f303 	lsl.w	r3, r1, r3
 80034a4:	4013      	ands	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 813a 	beq.w	8003724 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d005      	beq.n	80034c8 <HAL_GPIO_Init+0x40>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d130      	bne.n	800352a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	2203      	movs	r2, #3
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4013      	ands	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034fe:	2201      	movs	r2, #1
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43db      	mvns	r3, r3
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4013      	ands	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	091b      	lsrs	r3, r3, #4
 8003514:	f003 0201 	and.w	r2, r3, #1
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	2b03      	cmp	r3, #3
 8003534:	d017      	beq.n	8003566 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	2203      	movs	r2, #3
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43db      	mvns	r3, r3
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4013      	ands	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d123      	bne.n	80035ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	08da      	lsrs	r2, r3, #3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3208      	adds	r2, #8
 800357a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800357e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	220f      	movs	r2, #15
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	43db      	mvns	r3, r3
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4013      	ands	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	691a      	ldr	r2, [r3, #16]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	08da      	lsrs	r2, r3, #3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3208      	adds	r2, #8
 80035b4:	6939      	ldr	r1, [r7, #16]
 80035b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	2203      	movs	r2, #3
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43db      	mvns	r3, r3
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4013      	ands	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f003 0203 	and.w	r2, r3, #3
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 8094 	beq.w	8003724 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035fc:	4b52      	ldr	r3, [pc, #328]	@ (8003748 <HAL_GPIO_Init+0x2c0>)
 80035fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003600:	4a51      	ldr	r2, [pc, #324]	@ (8003748 <HAL_GPIO_Init+0x2c0>)
 8003602:	f043 0301 	orr.w	r3, r3, #1
 8003606:	6613      	str	r3, [r2, #96]	@ 0x60
 8003608:	4b4f      	ldr	r3, [pc, #316]	@ (8003748 <HAL_GPIO_Init+0x2c0>)
 800360a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	60bb      	str	r3, [r7, #8]
 8003612:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003614:	4a4d      	ldr	r2, [pc, #308]	@ (800374c <HAL_GPIO_Init+0x2c4>)
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	089b      	lsrs	r3, r3, #2
 800361a:	3302      	adds	r3, #2
 800361c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003620:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f003 0303 	and.w	r3, r3, #3
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	220f      	movs	r2, #15
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4013      	ands	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800363e:	d00d      	beq.n	800365c <HAL_GPIO_Init+0x1d4>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a43      	ldr	r2, [pc, #268]	@ (8003750 <HAL_GPIO_Init+0x2c8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d007      	beq.n	8003658 <HAL_GPIO_Init+0x1d0>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a42      	ldr	r2, [pc, #264]	@ (8003754 <HAL_GPIO_Init+0x2cc>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d101      	bne.n	8003654 <HAL_GPIO_Init+0x1cc>
 8003650:	2302      	movs	r3, #2
 8003652:	e004      	b.n	800365e <HAL_GPIO_Init+0x1d6>
 8003654:	2307      	movs	r3, #7
 8003656:	e002      	b.n	800365e <HAL_GPIO_Init+0x1d6>
 8003658:	2301      	movs	r3, #1
 800365a:	e000      	b.n	800365e <HAL_GPIO_Init+0x1d6>
 800365c:	2300      	movs	r3, #0
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	f002 0203 	and.w	r2, r2, #3
 8003664:	0092      	lsls	r2, r2, #2
 8003666:	4093      	lsls	r3, r2
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800366e:	4937      	ldr	r1, [pc, #220]	@ (800374c <HAL_GPIO_Init+0x2c4>)
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	089b      	lsrs	r3, r3, #2
 8003674:	3302      	adds	r3, #2
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800367c:	4b36      	ldr	r3, [pc, #216]	@ (8003758 <HAL_GPIO_Init+0x2d0>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	43db      	mvns	r3, r3
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4013      	ands	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4313      	orrs	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036a0:	4a2d      	ldr	r2, [pc, #180]	@ (8003758 <HAL_GPIO_Init+0x2d0>)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003758 <HAL_GPIO_Init+0x2d0>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	43db      	mvns	r3, r3
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	4013      	ands	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036ca:	4a23      	ldr	r2, [pc, #140]	@ (8003758 <HAL_GPIO_Init+0x2d0>)
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80036d0:	4b21      	ldr	r3, [pc, #132]	@ (8003758 <HAL_GPIO_Init+0x2d0>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	43db      	mvns	r3, r3
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4013      	ands	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036f4:	4a18      	ldr	r2, [pc, #96]	@ (8003758 <HAL_GPIO_Init+0x2d0>)
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80036fa:	4b17      	ldr	r3, [pc, #92]	@ (8003758 <HAL_GPIO_Init+0x2d0>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	43db      	mvns	r3, r3
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	4013      	ands	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800371e:	4a0e      	ldr	r2, [pc, #56]	@ (8003758 <HAL_GPIO_Init+0x2d0>)
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	3301      	adds	r3, #1
 8003728:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	fa22 f303 	lsr.w	r3, r2, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	f47f aeaf 	bne.w	8003498 <HAL_GPIO_Init+0x10>
  }
}
 800373a:	bf00      	nop
 800373c:	bf00      	nop
 800373e:	371c      	adds	r7, #28
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	40021000 	.word	0x40021000
 800374c:	40010000 	.word	0x40010000
 8003750:	48000400 	.word	0x48000400
 8003754:	48000800 	.word	0x48000800
 8003758:	40010400 	.word	0x40010400

0800375c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	807b      	strh	r3, [r7, #2]
 8003768:	4613      	mov	r3, r2
 800376a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800376c:	787b      	ldrb	r3, [r7, #1]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003772:	887a      	ldrh	r2, [r7, #2]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003778:	e002      	b.n	8003780 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800377a:	887a      	ldrh	r2, [r7, #2]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003790:	4b05      	ldr	r3, [pc, #20]	@ (80037a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a04      	ldr	r2, [pc, #16]	@ (80037a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003796:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800379a:	6013      	str	r3, [r2, #0]
}
 800379c:	bf00      	nop
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40007000 	.word	0x40007000

080037ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037b0:	4b04      	ldr	r3, [pc, #16]	@ (80037c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40007000 	.word	0x40007000

080037c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037d6:	d130      	bne.n	800383a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037d8:	4b23      	ldr	r3, [pc, #140]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80037e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037e4:	d038      	beq.n	8003858 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037e6:	4b20      	ldr	r3, [pc, #128]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80037ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037f6:	4b1d      	ldr	r3, [pc, #116]	@ (800386c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2232      	movs	r2, #50	@ 0x32
 80037fc:	fb02 f303 	mul.w	r3, r2, r3
 8003800:	4a1b      	ldr	r2, [pc, #108]	@ (8003870 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003802:	fba2 2303 	umull	r2, r3, r2, r3
 8003806:	0c9b      	lsrs	r3, r3, #18
 8003808:	3301      	adds	r3, #1
 800380a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800380c:	e002      	b.n	8003814 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	3b01      	subs	r3, #1
 8003812:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003814:	4b14      	ldr	r3, [pc, #80]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800381c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003820:	d102      	bne.n	8003828 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1f2      	bne.n	800380e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003828:	4b0f      	ldr	r3, [pc, #60]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003830:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003834:	d110      	bne.n	8003858 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e00f      	b.n	800385a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800383a:	4b0b      	ldr	r3, [pc, #44]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003842:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003846:	d007      	beq.n	8003858 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003848:	4b07      	ldr	r3, [pc, #28]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003850:	4a05      	ldr	r2, [pc, #20]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003852:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003856:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40007000 	.word	0x40007000
 800386c:	20000008 	.word	0x20000008
 8003870:	431bde83 	.word	0x431bde83

08003874 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d102      	bne.n	8003888 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	f000 bc02 	b.w	800408c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003888:	4b96      	ldr	r3, [pc, #600]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 030c 	and.w	r3, r3, #12
 8003890:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003892:	4b94      	ldr	r3, [pc, #592]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0310 	and.w	r3, r3, #16
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 80e4 	beq.w	8003a72 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d007      	beq.n	80038c0 <HAL_RCC_OscConfig+0x4c>
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	2b0c      	cmp	r3, #12
 80038b4:	f040 808b 	bne.w	80039ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	f040 8087 	bne.w	80039ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038c0:	4b88      	ldr	r3, [pc, #544]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_RCC_OscConfig+0x64>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e3d9      	b.n	800408c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1a      	ldr	r2, [r3, #32]
 80038dc:	4b81      	ldr	r3, [pc, #516]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d004      	beq.n	80038f2 <HAL_RCC_OscConfig+0x7e>
 80038e8:	4b7e      	ldr	r3, [pc, #504]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038f0:	e005      	b.n	80038fe <HAL_RCC_OscConfig+0x8a>
 80038f2:	4b7c      	ldr	r3, [pc, #496]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 80038f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038fe:	4293      	cmp	r3, r2
 8003900:	d223      	bcs.n	800394a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fd8c 	bl	8004424 <RCC_SetFlashLatencyFromMSIRange>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e3ba      	b.n	800408c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003916:	4b73      	ldr	r3, [pc, #460]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a72      	ldr	r2, [pc, #456]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 800391c:	f043 0308 	orr.w	r3, r3, #8
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	4b70      	ldr	r3, [pc, #448]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	496d      	ldr	r1, [pc, #436]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003930:	4313      	orrs	r3, r2
 8003932:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003934:	4b6b      	ldr	r3, [pc, #428]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	021b      	lsls	r3, r3, #8
 8003942:	4968      	ldr	r1, [pc, #416]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003944:	4313      	orrs	r3, r2
 8003946:	604b      	str	r3, [r1, #4]
 8003948:	e025      	b.n	8003996 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800394a:	4b66      	ldr	r3, [pc, #408]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a65      	ldr	r2, [pc, #404]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003950:	f043 0308 	orr.w	r3, r3, #8
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	4b63      	ldr	r3, [pc, #396]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	4960      	ldr	r1, [pc, #384]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003964:	4313      	orrs	r3, r2
 8003966:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003968:	4b5e      	ldr	r3, [pc, #376]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	021b      	lsls	r3, r3, #8
 8003976:	495b      	ldr	r1, [pc, #364]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003978:	4313      	orrs	r3, r2
 800397a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d109      	bne.n	8003996 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	4618      	mov	r0, r3
 8003988:	f000 fd4c 	bl	8004424 <RCC_SetFlashLatencyFromMSIRange>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e37a      	b.n	800408c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003996:	f000 fc81 	bl	800429c <HAL_RCC_GetSysClockFreq>
 800399a:	4602      	mov	r2, r0
 800399c:	4b51      	ldr	r3, [pc, #324]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	4950      	ldr	r1, [pc, #320]	@ (8003ae8 <HAL_RCC_OscConfig+0x274>)
 80039a8:	5ccb      	ldrb	r3, [r1, r3]
 80039aa:	f003 031f 	and.w	r3, r3, #31
 80039ae:	fa22 f303 	lsr.w	r3, r2, r3
 80039b2:	4a4e      	ldr	r2, [pc, #312]	@ (8003aec <HAL_RCC_OscConfig+0x278>)
 80039b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039b6:	4b4e      	ldr	r3, [pc, #312]	@ (8003af0 <HAL_RCC_OscConfig+0x27c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fe f93c 	bl	8001c38 <HAL_InitTick>
 80039c0:	4603      	mov	r3, r0
 80039c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d052      	beq.n	8003a70 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	e35e      	b.n	800408c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d032      	beq.n	8003a3c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039d6:	4b43      	ldr	r3, [pc, #268]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a42      	ldr	r2, [pc, #264]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 80039dc:	f043 0301 	orr.w	r3, r3, #1
 80039e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039e2:	f7fe f979 	bl	8001cd8 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039ea:	f7fe f975 	bl	8001cd8 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e347      	b.n	800408c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039fc:	4b39      	ldr	r3, [pc, #228]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0f0      	beq.n	80039ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a08:	4b36      	ldr	r3, [pc, #216]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a35      	ldr	r2, [pc, #212]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003a0e:	f043 0308 	orr.w	r3, r3, #8
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	4b33      	ldr	r3, [pc, #204]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	4930      	ldr	r1, [pc, #192]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a26:	4b2f      	ldr	r3, [pc, #188]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	021b      	lsls	r3, r3, #8
 8003a34:	492b      	ldr	r1, [pc, #172]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	604b      	str	r3, [r1, #4]
 8003a3a:	e01a      	b.n	8003a72 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a3c:	4b29      	ldr	r3, [pc, #164]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a28      	ldr	r2, [pc, #160]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003a42:	f023 0301 	bic.w	r3, r3, #1
 8003a46:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a48:	f7fe f946 	bl	8001cd8 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a50:	f7fe f942 	bl	8001cd8 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e314      	b.n	800408c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a62:	4b20      	ldr	r3, [pc, #128]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f0      	bne.n	8003a50 <HAL_RCC_OscConfig+0x1dc>
 8003a6e:	e000      	b.n	8003a72 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d073      	beq.n	8003b66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d005      	beq.n	8003a90 <HAL_RCC_OscConfig+0x21c>
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	2b0c      	cmp	r3, #12
 8003a88:	d10e      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	d10b      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a90:	4b14      	ldr	r3, [pc, #80]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d063      	beq.n	8003b64 <HAL_RCC_OscConfig+0x2f0>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d15f      	bne.n	8003b64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e2f1      	b.n	800408c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ab0:	d106      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x24c>
 8003ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a0b      	ldr	r2, [pc, #44]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	e025      	b.n	8003b0c <HAL_RCC_OscConfig+0x298>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ac8:	d114      	bne.n	8003af4 <HAL_RCC_OscConfig+0x280>
 8003aca:	4b06      	ldr	r3, [pc, #24]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a05      	ldr	r2, [pc, #20]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003ad0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	4b03      	ldr	r3, [pc, #12]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a02      	ldr	r2, [pc, #8]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	e013      	b.n	8003b0c <HAL_RCC_OscConfig+0x298>
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	08009b68 	.word	0x08009b68
 8003aec:	20000008 	.word	0x20000008
 8003af0:	2000000c 	.word	0x2000000c
 8003af4:	4ba0      	ldr	r3, [pc, #640]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a9f      	ldr	r2, [pc, #636]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003afa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	4b9d      	ldr	r3, [pc, #628]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a9c      	ldr	r2, [pc, #624]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003b06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d013      	beq.n	8003b3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b14:	f7fe f8e0 	bl	8001cd8 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b1c:	f7fe f8dc 	bl	8001cd8 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b64      	cmp	r3, #100	@ 0x64
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e2ae      	b.n	800408c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b2e:	4b92      	ldr	r3, [pc, #584]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0f0      	beq.n	8003b1c <HAL_RCC_OscConfig+0x2a8>
 8003b3a:	e014      	b.n	8003b66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3c:	f7fe f8cc 	bl	8001cd8 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b44:	f7fe f8c8 	bl	8001cd8 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b64      	cmp	r3, #100	@ 0x64
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e29a      	b.n	800408c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b56:	4b88      	ldr	r3, [pc, #544]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f0      	bne.n	8003b44 <HAL_RCC_OscConfig+0x2d0>
 8003b62:	e000      	b.n	8003b66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d060      	beq.n	8003c34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	2b04      	cmp	r3, #4
 8003b76:	d005      	beq.n	8003b84 <HAL_RCC_OscConfig+0x310>
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	2b0c      	cmp	r3, #12
 8003b7c:	d119      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d116      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b84:	4b7c      	ldr	r3, [pc, #496]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d005      	beq.n	8003b9c <HAL_RCC_OscConfig+0x328>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e277      	b.n	800408c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b9c:	4b76      	ldr	r3, [pc, #472]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	061b      	lsls	r3, r3, #24
 8003baa:	4973      	ldr	r1, [pc, #460]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bb0:	e040      	b.n	8003c34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d023      	beq.n	8003c02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bba:	4b6f      	ldr	r3, [pc, #444]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a6e      	ldr	r2, [pc, #440]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc6:	f7fe f887 	bl	8001cd8 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bce:	f7fe f883 	bl	8001cd8 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e255      	b.n	800408c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003be0:	4b65      	ldr	r3, [pc, #404]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0f0      	beq.n	8003bce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bec:	4b62      	ldr	r3, [pc, #392]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	061b      	lsls	r3, r3, #24
 8003bfa:	495f      	ldr	r1, [pc, #380]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	604b      	str	r3, [r1, #4]
 8003c00:	e018      	b.n	8003c34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c02:	4b5d      	ldr	r3, [pc, #372]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a5c      	ldr	r2, [pc, #368]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003c08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0e:	f7fe f863 	bl	8001cd8 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c16:	f7fe f85f 	bl	8001cd8 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e231      	b.n	800408c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c28:	4b53      	ldr	r3, [pc, #332]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1f0      	bne.n	8003c16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d03c      	beq.n	8003cba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d01c      	beq.n	8003c82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c48:	4b4b      	ldr	r3, [pc, #300]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c4e:	4a4a      	ldr	r2, [pc, #296]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c58:	f7fe f83e 	bl	8001cd8 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c60:	f7fe f83a 	bl	8001cd8 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e20c      	b.n	800408c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c72:	4b41      	ldr	r3, [pc, #260]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0ef      	beq.n	8003c60 <HAL_RCC_OscConfig+0x3ec>
 8003c80:	e01b      	b.n	8003cba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c82:	4b3d      	ldr	r3, [pc, #244]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c88:	4a3b      	ldr	r2, [pc, #236]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003c8a:	f023 0301 	bic.w	r3, r3, #1
 8003c8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c92:	f7fe f821 	bl	8001cd8 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c9a:	f7fe f81d 	bl	8001cd8 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e1ef      	b.n	800408c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cac:	4b32      	ldr	r3, [pc, #200]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1ef      	bne.n	8003c9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 80a6 	beq.w	8003e14 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ccc:	4b2a      	ldr	r3, [pc, #168]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10d      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cd8:	4b27      	ldr	r3, [pc, #156]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cdc:	4a26      	ldr	r2, [pc, #152]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003cde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ce2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ce4:	4b24      	ldr	r3, [pc, #144]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cf4:	4b21      	ldr	r3, [pc, #132]	@ (8003d7c <HAL_RCC_OscConfig+0x508>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d118      	bne.n	8003d32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d00:	4b1e      	ldr	r3, [pc, #120]	@ (8003d7c <HAL_RCC_OscConfig+0x508>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a1d      	ldr	r2, [pc, #116]	@ (8003d7c <HAL_RCC_OscConfig+0x508>)
 8003d06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d0c:	f7fd ffe4 	bl	8001cd8 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d14:	f7fd ffe0 	bl	8001cd8 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e1b2      	b.n	800408c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d26:	4b15      	ldr	r3, [pc, #84]	@ (8003d7c <HAL_RCC_OscConfig+0x508>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d108      	bne.n	8003d4c <HAL_RCC_OscConfig+0x4d8>
 8003d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d40:	4a0d      	ldr	r2, [pc, #52]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003d42:	f043 0301 	orr.w	r3, r3, #1
 8003d46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d4a:	e029      	b.n	8003da0 <HAL_RCC_OscConfig+0x52c>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b05      	cmp	r3, #5
 8003d52:	d115      	bne.n	8003d80 <HAL_RCC_OscConfig+0x50c>
 8003d54:	4b08      	ldr	r3, [pc, #32]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d5a:	4a07      	ldr	r2, [pc, #28]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003d5c:	f043 0304 	orr.w	r3, r3, #4
 8003d60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d64:	4b04      	ldr	r3, [pc, #16]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d6a:	4a03      	ldr	r2, [pc, #12]	@ (8003d78 <HAL_RCC_OscConfig+0x504>)
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d74:	e014      	b.n	8003da0 <HAL_RCC_OscConfig+0x52c>
 8003d76:	bf00      	nop
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	40007000 	.word	0x40007000
 8003d80:	4b9a      	ldr	r3, [pc, #616]	@ (8003fec <HAL_RCC_OscConfig+0x778>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d86:	4a99      	ldr	r2, [pc, #612]	@ (8003fec <HAL_RCC_OscConfig+0x778>)
 8003d88:	f023 0301 	bic.w	r3, r3, #1
 8003d8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d90:	4b96      	ldr	r3, [pc, #600]	@ (8003fec <HAL_RCC_OscConfig+0x778>)
 8003d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d96:	4a95      	ldr	r2, [pc, #596]	@ (8003fec <HAL_RCC_OscConfig+0x778>)
 8003d98:	f023 0304 	bic.w	r3, r3, #4
 8003d9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d016      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da8:	f7fd ff96 	bl	8001cd8 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dae:	e00a      	b.n	8003dc6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db0:	f7fd ff92 	bl	8001cd8 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e162      	b.n	800408c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dc6:	4b89      	ldr	r3, [pc, #548]	@ (8003fec <HAL_RCC_OscConfig+0x778>)
 8003dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0ed      	beq.n	8003db0 <HAL_RCC_OscConfig+0x53c>
 8003dd4:	e015      	b.n	8003e02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd6:	f7fd ff7f 	bl	8001cd8 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ddc:	e00a      	b.n	8003df4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dde:	f7fd ff7b 	bl	8001cd8 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e14b      	b.n	800408c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003df4:	4b7d      	ldr	r3, [pc, #500]	@ (8003fec <HAL_RCC_OscConfig+0x778>)
 8003df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1ed      	bne.n	8003dde <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e02:	7ffb      	ldrb	r3, [r7, #31]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d105      	bne.n	8003e14 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e08:	4b78      	ldr	r3, [pc, #480]	@ (8003fec <HAL_RCC_OscConfig+0x778>)
 8003e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e0c:	4a77      	ldr	r2, [pc, #476]	@ (8003fec <HAL_RCC_OscConfig+0x778>)
 8003e0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e12:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d03c      	beq.n	8003e9a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d01c      	beq.n	8003e62 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e28:	4b70      	ldr	r3, [pc, #448]	@ (8003fec <HAL_RCC_OscConfig+0x778>)
 8003e2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e2e:	4a6f      	ldr	r2, [pc, #444]	@ (8003fec <HAL_RCC_OscConfig+0x778>)
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e38:	f7fd ff4e 	bl	8001cd8 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e40:	f7fd ff4a 	bl	8001cd8 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e11c      	b.n	800408c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e52:	4b66      	ldr	r3, [pc, #408]	@ (8003fec <HAL_RCC_OscConfig+0x778>)
 8003e54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0ef      	beq.n	8003e40 <HAL_RCC_OscConfig+0x5cc>
 8003e60:	e01b      	b.n	8003e9a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e62:	4b62      	ldr	r3, [pc, #392]	@ (8003fec <HAL_RCC_OscConfig+0x778>)
 8003e64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e68:	4a60      	ldr	r2, [pc, #384]	@ (8003fec <HAL_RCC_OscConfig+0x778>)
 8003e6a:	f023 0301 	bic.w	r3, r3, #1
 8003e6e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e72:	f7fd ff31 	bl	8001cd8 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e7a:	f7fd ff2d 	bl	8001cd8 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e0ff      	b.n	800408c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e8c:	4b57      	ldr	r3, [pc, #348]	@ (8003fec <HAL_RCC_OscConfig+0x778>)
 8003e8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1ef      	bne.n	8003e7a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 80f3 	beq.w	800408a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	f040 80c9 	bne.w	8004040 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003eae:	4b4f      	ldr	r3, [pc, #316]	@ (8003fec <HAL_RCC_OscConfig+0x778>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f003 0203 	and.w	r2, r3, #3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d12c      	bne.n	8003f1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d123      	bne.n	8003f1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ede:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d11b      	bne.n	8003f1c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d113      	bne.n	8003f1c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003efe:	085b      	lsrs	r3, r3, #1
 8003f00:	3b01      	subs	r3, #1
 8003f02:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d109      	bne.n	8003f1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f12:	085b      	lsrs	r3, r3, #1
 8003f14:	3b01      	subs	r3, #1
 8003f16:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d06b      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	2b0c      	cmp	r3, #12
 8003f20:	d062      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f22:	4b32      	ldr	r3, [pc, #200]	@ (8003fec <HAL_RCC_OscConfig+0x778>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e0ac      	b.n	800408c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f32:	4b2e      	ldr	r3, [pc, #184]	@ (8003fec <HAL_RCC_OscConfig+0x778>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a2d      	ldr	r2, [pc, #180]	@ (8003fec <HAL_RCC_OscConfig+0x778>)
 8003f38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f3c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f3e:	f7fd fecb 	bl	8001cd8 <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f46:	f7fd fec7 	bl	8001cd8 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e099      	b.n	800408c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f58:	4b24      	ldr	r3, [pc, #144]	@ (8003fec <HAL_RCC_OscConfig+0x778>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1f0      	bne.n	8003f46 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f64:	4b21      	ldr	r3, [pc, #132]	@ (8003fec <HAL_RCC_OscConfig+0x778>)
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	4b21      	ldr	r3, [pc, #132]	@ (8003ff0 <HAL_RCC_OscConfig+0x77c>)
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003f74:	3a01      	subs	r2, #1
 8003f76:	0112      	lsls	r2, r2, #4
 8003f78:	4311      	orrs	r1, r2
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f7e:	0212      	lsls	r2, r2, #8
 8003f80:	4311      	orrs	r1, r2
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f86:	0852      	lsrs	r2, r2, #1
 8003f88:	3a01      	subs	r2, #1
 8003f8a:	0552      	lsls	r2, r2, #21
 8003f8c:	4311      	orrs	r1, r2
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003f92:	0852      	lsrs	r2, r2, #1
 8003f94:	3a01      	subs	r2, #1
 8003f96:	0652      	lsls	r2, r2, #25
 8003f98:	4311      	orrs	r1, r2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f9e:	06d2      	lsls	r2, r2, #27
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	4912      	ldr	r1, [pc, #72]	@ (8003fec <HAL_RCC_OscConfig+0x778>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fa8:	4b10      	ldr	r3, [pc, #64]	@ (8003fec <HAL_RCC_OscConfig+0x778>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a0f      	ldr	r2, [pc, #60]	@ (8003fec <HAL_RCC_OscConfig+0x778>)
 8003fae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fb2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8003fec <HAL_RCC_OscConfig+0x778>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	4a0c      	ldr	r2, [pc, #48]	@ (8003fec <HAL_RCC_OscConfig+0x778>)
 8003fba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fbe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fc0:	f7fd fe8a 	bl	8001cd8 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc8:	f7fd fe86 	bl	8001cd8 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e058      	b.n	800408c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fda:	4b04      	ldr	r3, [pc, #16]	@ (8003fec <HAL_RCC_OscConfig+0x778>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fe6:	e050      	b.n	800408a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e04f      	b.n	800408c <HAL_RCC_OscConfig+0x818>
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ff4:	4b27      	ldr	r3, [pc, #156]	@ (8004094 <HAL_RCC_OscConfig+0x820>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d144      	bne.n	800408a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004000:	4b24      	ldr	r3, [pc, #144]	@ (8004094 <HAL_RCC_OscConfig+0x820>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a23      	ldr	r2, [pc, #140]	@ (8004094 <HAL_RCC_OscConfig+0x820>)
 8004006:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800400a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800400c:	4b21      	ldr	r3, [pc, #132]	@ (8004094 <HAL_RCC_OscConfig+0x820>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4a20      	ldr	r2, [pc, #128]	@ (8004094 <HAL_RCC_OscConfig+0x820>)
 8004012:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004016:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004018:	f7fd fe5e 	bl	8001cd8 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004020:	f7fd fe5a 	bl	8001cd8 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e02c      	b.n	800408c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004032:	4b18      	ldr	r3, [pc, #96]	@ (8004094 <HAL_RCC_OscConfig+0x820>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0f0      	beq.n	8004020 <HAL_RCC_OscConfig+0x7ac>
 800403e:	e024      	b.n	800408a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	2b0c      	cmp	r3, #12
 8004044:	d01f      	beq.n	8004086 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004046:	4b13      	ldr	r3, [pc, #76]	@ (8004094 <HAL_RCC_OscConfig+0x820>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a12      	ldr	r2, [pc, #72]	@ (8004094 <HAL_RCC_OscConfig+0x820>)
 800404c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004052:	f7fd fe41 	bl	8001cd8 <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004058:	e008      	b.n	800406c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800405a:	f7fd fe3d 	bl	8001cd8 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e00f      	b.n	800408c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800406c:	4b09      	ldr	r3, [pc, #36]	@ (8004094 <HAL_RCC_OscConfig+0x820>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1f0      	bne.n	800405a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004078:	4b06      	ldr	r3, [pc, #24]	@ (8004094 <HAL_RCC_OscConfig+0x820>)
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	4905      	ldr	r1, [pc, #20]	@ (8004094 <HAL_RCC_OscConfig+0x820>)
 800407e:	4b06      	ldr	r3, [pc, #24]	@ (8004098 <HAL_RCC_OscConfig+0x824>)
 8004080:	4013      	ands	r3, r2
 8004082:	60cb      	str	r3, [r1, #12]
 8004084:	e001      	b.n	800408a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3720      	adds	r7, #32
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40021000 	.word	0x40021000
 8004098:	feeefffc 	.word	0xfeeefffc

0800409c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e0e7      	b.n	8004280 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040b0:	4b75      	ldr	r3, [pc, #468]	@ (8004288 <HAL_RCC_ClockConfig+0x1ec>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d910      	bls.n	80040e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040be:	4b72      	ldr	r3, [pc, #456]	@ (8004288 <HAL_RCC_ClockConfig+0x1ec>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f023 0207 	bic.w	r2, r3, #7
 80040c6:	4970      	ldr	r1, [pc, #448]	@ (8004288 <HAL_RCC_ClockConfig+0x1ec>)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ce:	4b6e      	ldr	r3, [pc, #440]	@ (8004288 <HAL_RCC_ClockConfig+0x1ec>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d001      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e0cf      	b.n	8004280 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d010      	beq.n	800410e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	4b66      	ldr	r3, [pc, #408]	@ (800428c <HAL_RCC_ClockConfig+0x1f0>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d908      	bls.n	800410e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040fc:	4b63      	ldr	r3, [pc, #396]	@ (800428c <HAL_RCC_ClockConfig+0x1f0>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	4960      	ldr	r1, [pc, #384]	@ (800428c <HAL_RCC_ClockConfig+0x1f0>)
 800410a:	4313      	orrs	r3, r2
 800410c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d04c      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b03      	cmp	r3, #3
 8004120:	d107      	bne.n	8004132 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004122:	4b5a      	ldr	r3, [pc, #360]	@ (800428c <HAL_RCC_ClockConfig+0x1f0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d121      	bne.n	8004172 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e0a6      	b.n	8004280 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b02      	cmp	r3, #2
 8004138:	d107      	bne.n	800414a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800413a:	4b54      	ldr	r3, [pc, #336]	@ (800428c <HAL_RCC_ClockConfig+0x1f0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d115      	bne.n	8004172 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e09a      	b.n	8004280 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d107      	bne.n	8004162 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004152:	4b4e      	ldr	r3, [pc, #312]	@ (800428c <HAL_RCC_ClockConfig+0x1f0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d109      	bne.n	8004172 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e08e      	b.n	8004280 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004162:	4b4a      	ldr	r3, [pc, #296]	@ (800428c <HAL_RCC_ClockConfig+0x1f0>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e086      	b.n	8004280 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004172:	4b46      	ldr	r3, [pc, #280]	@ (800428c <HAL_RCC_ClockConfig+0x1f0>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f023 0203 	bic.w	r2, r3, #3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	4943      	ldr	r1, [pc, #268]	@ (800428c <HAL_RCC_ClockConfig+0x1f0>)
 8004180:	4313      	orrs	r3, r2
 8004182:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004184:	f7fd fda8 	bl	8001cd8 <HAL_GetTick>
 8004188:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800418a:	e00a      	b.n	80041a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800418c:	f7fd fda4 	bl	8001cd8 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800419a:	4293      	cmp	r3, r2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e06e      	b.n	8004280 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a2:	4b3a      	ldr	r3, [pc, #232]	@ (800428c <HAL_RCC_ClockConfig+0x1f0>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 020c 	and.w	r2, r3, #12
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d1eb      	bne.n	800418c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d010      	beq.n	80041e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	4b31      	ldr	r3, [pc, #196]	@ (800428c <HAL_RCC_ClockConfig+0x1f0>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d208      	bcs.n	80041e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041d0:	4b2e      	ldr	r3, [pc, #184]	@ (800428c <HAL_RCC_ClockConfig+0x1f0>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	492b      	ldr	r1, [pc, #172]	@ (800428c <HAL_RCC_ClockConfig+0x1f0>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041e2:	4b29      	ldr	r3, [pc, #164]	@ (8004288 <HAL_RCC_ClockConfig+0x1ec>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d210      	bcs.n	8004212 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f0:	4b25      	ldr	r3, [pc, #148]	@ (8004288 <HAL_RCC_ClockConfig+0x1ec>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f023 0207 	bic.w	r2, r3, #7
 80041f8:	4923      	ldr	r1, [pc, #140]	@ (8004288 <HAL_RCC_ClockConfig+0x1ec>)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004200:	4b21      	ldr	r3, [pc, #132]	@ (8004288 <HAL_RCC_ClockConfig+0x1ec>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d001      	beq.n	8004212 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e036      	b.n	8004280 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0304 	and.w	r3, r3, #4
 800421a:	2b00      	cmp	r3, #0
 800421c:	d008      	beq.n	8004230 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800421e:	4b1b      	ldr	r3, [pc, #108]	@ (800428c <HAL_RCC_ClockConfig+0x1f0>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	4918      	ldr	r1, [pc, #96]	@ (800428c <HAL_RCC_ClockConfig+0x1f0>)
 800422c:	4313      	orrs	r3, r2
 800422e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0308 	and.w	r3, r3, #8
 8004238:	2b00      	cmp	r3, #0
 800423a:	d009      	beq.n	8004250 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800423c:	4b13      	ldr	r3, [pc, #76]	@ (800428c <HAL_RCC_ClockConfig+0x1f0>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	4910      	ldr	r1, [pc, #64]	@ (800428c <HAL_RCC_ClockConfig+0x1f0>)
 800424c:	4313      	orrs	r3, r2
 800424e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004250:	f000 f824 	bl	800429c <HAL_RCC_GetSysClockFreq>
 8004254:	4602      	mov	r2, r0
 8004256:	4b0d      	ldr	r3, [pc, #52]	@ (800428c <HAL_RCC_ClockConfig+0x1f0>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	091b      	lsrs	r3, r3, #4
 800425c:	f003 030f 	and.w	r3, r3, #15
 8004260:	490b      	ldr	r1, [pc, #44]	@ (8004290 <HAL_RCC_ClockConfig+0x1f4>)
 8004262:	5ccb      	ldrb	r3, [r1, r3]
 8004264:	f003 031f 	and.w	r3, r3, #31
 8004268:	fa22 f303 	lsr.w	r3, r2, r3
 800426c:	4a09      	ldr	r2, [pc, #36]	@ (8004294 <HAL_RCC_ClockConfig+0x1f8>)
 800426e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004270:	4b09      	ldr	r3, [pc, #36]	@ (8004298 <HAL_RCC_ClockConfig+0x1fc>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f7fd fcdf 	bl	8001c38 <HAL_InitTick>
 800427a:	4603      	mov	r3, r0
 800427c:	72fb      	strb	r3, [r7, #11]

  return status;
 800427e:	7afb      	ldrb	r3, [r7, #11]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40022000 	.word	0x40022000
 800428c:	40021000 	.word	0x40021000
 8004290:	08009b68 	.word	0x08009b68
 8004294:	20000008 	.word	0x20000008
 8004298:	2000000c 	.word	0x2000000c

0800429c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800429c:	b480      	push	{r7}
 800429e:	b089      	sub	sp, #36	@ 0x24
 80042a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	61fb      	str	r3, [r7, #28]
 80042a6:	2300      	movs	r3, #0
 80042a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042aa:	4b3e      	ldr	r3, [pc, #248]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 030c 	and.w	r3, r3, #12
 80042b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042b4:	4b3b      	ldr	r3, [pc, #236]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f003 0303 	and.w	r3, r3, #3
 80042bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d005      	beq.n	80042d0 <HAL_RCC_GetSysClockFreq+0x34>
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	2b0c      	cmp	r3, #12
 80042c8:	d121      	bne.n	800430e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d11e      	bne.n	800430e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042d0:	4b34      	ldr	r3, [pc, #208]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0308 	and.w	r3, r3, #8
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d107      	bne.n	80042ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042dc:	4b31      	ldr	r3, [pc, #196]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80042de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042e2:	0a1b      	lsrs	r3, r3, #8
 80042e4:	f003 030f 	and.w	r3, r3, #15
 80042e8:	61fb      	str	r3, [r7, #28]
 80042ea:	e005      	b.n	80042f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042ec:	4b2d      	ldr	r3, [pc, #180]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	091b      	lsrs	r3, r3, #4
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042f8:	4a2b      	ldr	r2, [pc, #172]	@ (80043a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004300:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10d      	bne.n	8004324 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800430c:	e00a      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	2b04      	cmp	r3, #4
 8004312:	d102      	bne.n	800431a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004314:	4b25      	ldr	r3, [pc, #148]	@ (80043ac <HAL_RCC_GetSysClockFreq+0x110>)
 8004316:	61bb      	str	r3, [r7, #24]
 8004318:	e004      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	2b08      	cmp	r3, #8
 800431e:	d101      	bne.n	8004324 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004320:	4b23      	ldr	r3, [pc, #140]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004322:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	2b0c      	cmp	r3, #12
 8004328:	d134      	bne.n	8004394 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800432a:	4b1e      	ldr	r3, [pc, #120]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d003      	beq.n	8004342 <HAL_RCC_GetSysClockFreq+0xa6>
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2b03      	cmp	r3, #3
 800433e:	d003      	beq.n	8004348 <HAL_RCC_GetSysClockFreq+0xac>
 8004340:	e005      	b.n	800434e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004342:	4b1a      	ldr	r3, [pc, #104]	@ (80043ac <HAL_RCC_GetSysClockFreq+0x110>)
 8004344:	617b      	str	r3, [r7, #20]
      break;
 8004346:	e005      	b.n	8004354 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004348:	4b19      	ldr	r3, [pc, #100]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800434a:	617b      	str	r3, [r7, #20]
      break;
 800434c:	e002      	b.n	8004354 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	617b      	str	r3, [r7, #20]
      break;
 8004352:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004354:	4b13      	ldr	r3, [pc, #76]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	091b      	lsrs	r3, r3, #4
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	3301      	adds	r3, #1
 8004360:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004362:	4b10      	ldr	r3, [pc, #64]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	0a1b      	lsrs	r3, r3, #8
 8004368:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	fb03 f202 	mul.w	r2, r3, r2
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	fbb2 f3f3 	udiv	r3, r2, r3
 8004378:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800437a:	4b0a      	ldr	r3, [pc, #40]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	0e5b      	lsrs	r3, r3, #25
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	3301      	adds	r3, #1
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004392:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004394:	69bb      	ldr	r3, [r7, #24]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3724      	adds	r7, #36	@ 0x24
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40021000 	.word	0x40021000
 80043a8:	08009b80 	.word	0x08009b80
 80043ac:	00f42400 	.word	0x00f42400
 80043b0:	007a1200 	.word	0x007a1200

080043b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043b8:	4b03      	ldr	r3, [pc, #12]	@ (80043c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ba:	681b      	ldr	r3, [r3, #0]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20000008 	.word	0x20000008

080043cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043d0:	f7ff fff0 	bl	80043b4 <HAL_RCC_GetHCLKFreq>
 80043d4:	4602      	mov	r2, r0
 80043d6:	4b06      	ldr	r3, [pc, #24]	@ (80043f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	0a1b      	lsrs	r3, r3, #8
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	4904      	ldr	r1, [pc, #16]	@ (80043f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043e2:	5ccb      	ldrb	r3, [r1, r3]
 80043e4:	f003 031f 	and.w	r3, r3, #31
 80043e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40021000 	.word	0x40021000
 80043f4:	08009b78 	.word	0x08009b78

080043f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043fc:	f7ff ffda 	bl	80043b4 <HAL_RCC_GetHCLKFreq>
 8004400:	4602      	mov	r2, r0
 8004402:	4b06      	ldr	r3, [pc, #24]	@ (800441c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	0adb      	lsrs	r3, r3, #11
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	4904      	ldr	r1, [pc, #16]	@ (8004420 <HAL_RCC_GetPCLK2Freq+0x28>)
 800440e:	5ccb      	ldrb	r3, [r1, r3]
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004418:	4618      	mov	r0, r3
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40021000 	.word	0x40021000
 8004420:	08009b78 	.word	0x08009b78

08004424 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800442c:	2300      	movs	r3, #0
 800442e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004430:	4b2a      	ldr	r3, [pc, #168]	@ (80044dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004434:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800443c:	f7ff f9b6 	bl	80037ac <HAL_PWREx_GetVoltageRange>
 8004440:	6178      	str	r0, [r7, #20]
 8004442:	e014      	b.n	800446e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004444:	4b25      	ldr	r3, [pc, #148]	@ (80044dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004448:	4a24      	ldr	r2, [pc, #144]	@ (80044dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800444a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800444e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004450:	4b22      	ldr	r3, [pc, #136]	@ (80044dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800445c:	f7ff f9a6 	bl	80037ac <HAL_PWREx_GetVoltageRange>
 8004460:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004462:	4b1e      	ldr	r3, [pc, #120]	@ (80044dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004466:	4a1d      	ldr	r2, [pc, #116]	@ (80044dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004468:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800446c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004474:	d10b      	bne.n	800448e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b80      	cmp	r3, #128	@ 0x80
 800447a:	d919      	bls.n	80044b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004480:	d902      	bls.n	8004488 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004482:	2302      	movs	r3, #2
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	e013      	b.n	80044b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004488:	2301      	movs	r3, #1
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	e010      	b.n	80044b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b80      	cmp	r3, #128	@ 0x80
 8004492:	d902      	bls.n	800449a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004494:	2303      	movs	r3, #3
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	e00a      	b.n	80044b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b80      	cmp	r3, #128	@ 0x80
 800449e:	d102      	bne.n	80044a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044a0:	2302      	movs	r3, #2
 80044a2:	613b      	str	r3, [r7, #16]
 80044a4:	e004      	b.n	80044b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b70      	cmp	r3, #112	@ 0x70
 80044aa:	d101      	bne.n	80044b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044ac:	2301      	movs	r3, #1
 80044ae:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044b0:	4b0b      	ldr	r3, [pc, #44]	@ (80044e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f023 0207 	bic.w	r2, r3, #7
 80044b8:	4909      	ldr	r1, [pc, #36]	@ (80044e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	4313      	orrs	r3, r2
 80044be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044c0:	4b07      	ldr	r3, [pc, #28]	@ (80044e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d001      	beq.n	80044d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e000      	b.n	80044d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40021000 	.word	0x40021000
 80044e0:	40022000 	.word	0x40022000

080044e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044ec:	2300      	movs	r3, #0
 80044ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044f0:	2300      	movs	r3, #0
 80044f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d031      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004504:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004508:	d01a      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800450a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800450e:	d814      	bhi.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004510:	2b00      	cmp	r3, #0
 8004512:	d009      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004514:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004518:	d10f      	bne.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800451a:	4b5d      	ldr	r3, [pc, #372]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	4a5c      	ldr	r2, [pc, #368]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004524:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004526:	e00c      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3304      	adds	r3, #4
 800452c:	2100      	movs	r1, #0
 800452e:	4618      	mov	r0, r3
 8004530:	f000 f9de 	bl	80048f0 <RCCEx_PLLSAI1_Config>
 8004534:	4603      	mov	r3, r0
 8004536:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004538:	e003      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	74fb      	strb	r3, [r7, #19]
      break;
 800453e:	e000      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004540:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004542:	7cfb      	ldrb	r3, [r7, #19]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10b      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004548:	4b51      	ldr	r3, [pc, #324]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800454a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800454e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004556:	494e      	ldr	r1, [pc, #312]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004558:	4313      	orrs	r3, r2
 800455a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800455e:	e001      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004560:	7cfb      	ldrb	r3, [r7, #19]
 8004562:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 809e 	beq.w	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004572:	2300      	movs	r3, #0
 8004574:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004576:	4b46      	ldr	r3, [pc, #280]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800457a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004586:	2300      	movs	r3, #0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00d      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800458c:	4b40      	ldr	r3, [pc, #256]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800458e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004590:	4a3f      	ldr	r2, [pc, #252]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004592:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004596:	6593      	str	r3, [r2, #88]	@ 0x58
 8004598:	4b3d      	ldr	r3, [pc, #244]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800459a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800459c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045a4:	2301      	movs	r3, #1
 80045a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045a8:	4b3a      	ldr	r3, [pc, #232]	@ (8004694 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a39      	ldr	r2, [pc, #228]	@ (8004694 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045b4:	f7fd fb90 	bl	8001cd8 <HAL_GetTick>
 80045b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045ba:	e009      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045bc:	f7fd fb8c 	bl	8001cd8 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d902      	bls.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	74fb      	strb	r3, [r7, #19]
        break;
 80045ce:	e005      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045d0:	4b30      	ldr	r3, [pc, #192]	@ (8004694 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0ef      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80045dc:	7cfb      	ldrb	r3, [r7, #19]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d15a      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045e2:	4b2b      	ldr	r3, [pc, #172]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d01e      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d019      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045fe:	4b24      	ldr	r3, [pc, #144]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004604:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004608:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800460a:	4b21      	ldr	r3, [pc, #132]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800460c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004610:	4a1f      	ldr	r2, [pc, #124]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004612:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004616:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800461a:	4b1d      	ldr	r3, [pc, #116]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800461c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004620:	4a1b      	ldr	r2, [pc, #108]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004626:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800462a:	4a19      	ldr	r2, [pc, #100]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d016      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463c:	f7fd fb4c 	bl	8001cd8 <HAL_GetTick>
 8004640:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004642:	e00b      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004644:	f7fd fb48 	bl	8001cd8 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004652:	4293      	cmp	r3, r2
 8004654:	d902      	bls.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	74fb      	strb	r3, [r7, #19]
            break;
 800465a:	e006      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800465c:	4b0c      	ldr	r3, [pc, #48]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800465e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0ec      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800466a:	7cfb      	ldrb	r3, [r7, #19]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10b      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004670:	4b07      	ldr	r3, [pc, #28]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004676:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800467e:	4904      	ldr	r1, [pc, #16]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004680:	4313      	orrs	r3, r2
 8004682:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004686:	e009      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004688:	7cfb      	ldrb	r3, [r7, #19]
 800468a:	74bb      	strb	r3, [r7, #18]
 800468c:	e006      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800468e:	bf00      	nop
 8004690:	40021000 	.word	0x40021000
 8004694:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004698:	7cfb      	ldrb	r3, [r7, #19]
 800469a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800469c:	7c7b      	ldrb	r3, [r7, #17]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d105      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046a2:	4b8a      	ldr	r3, [pc, #552]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046a6:	4a89      	ldr	r2, [pc, #548]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046ba:	4b84      	ldr	r3, [pc, #528]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c0:	f023 0203 	bic.w	r2, r3, #3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	4980      	ldr	r1, [pc, #512]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046dc:	4b7b      	ldr	r3, [pc, #492]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e2:	f023 020c 	bic.w	r2, r3, #12
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ea:	4978      	ldr	r1, [pc, #480]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046fe:	4b73      	ldr	r3, [pc, #460]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004704:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800470c:	496f      	ldr	r1, [pc, #444]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800470e:	4313      	orrs	r3, r2
 8004710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004720:	4b6a      	ldr	r3, [pc, #424]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004726:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800472e:	4967      	ldr	r1, [pc, #412]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004742:	4b62      	ldr	r3, [pc, #392]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004748:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004750:	495e      	ldr	r1, [pc, #376]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004752:	4313      	orrs	r3, r2
 8004754:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004764:	4b59      	ldr	r3, [pc, #356]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800476a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004772:	4956      	ldr	r1, [pc, #344]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004774:	4313      	orrs	r3, r2
 8004776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004786:	4b51      	ldr	r3, [pc, #324]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800478c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004794:	494d      	ldr	r1, [pc, #308]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d028      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047a8:	4b48      	ldr	r3, [pc, #288]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b6:	4945      	ldr	r1, [pc, #276]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047c6:	d106      	bne.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047c8:	4b40      	ldr	r3, [pc, #256]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	4a3f      	ldr	r2, [pc, #252]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047d2:	60d3      	str	r3, [r2, #12]
 80047d4:	e011      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047de:	d10c      	bne.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3304      	adds	r3, #4
 80047e4:	2101      	movs	r1, #1
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 f882 	bl	80048f0 <RCCEx_PLLSAI1_Config>
 80047ec:	4603      	mov	r3, r0
 80047ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80047f0:	7cfb      	ldrb	r3, [r7, #19]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80047f6:	7cfb      	ldrb	r3, [r7, #19]
 80047f8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d028      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004806:	4b31      	ldr	r3, [pc, #196]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800480c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004814:	492d      	ldr	r1, [pc, #180]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004820:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004824:	d106      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004826:	4b29      	ldr	r3, [pc, #164]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	4a28      	ldr	r2, [pc, #160]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800482c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004830:	60d3      	str	r3, [r2, #12]
 8004832:	e011      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004838:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800483c:	d10c      	bne.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3304      	adds	r3, #4
 8004842:	2101      	movs	r1, #1
 8004844:	4618      	mov	r0, r3
 8004846:	f000 f853 	bl	80048f0 <RCCEx_PLLSAI1_Config>
 800484a:	4603      	mov	r3, r0
 800484c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800484e:	7cfb      	ldrb	r3, [r7, #19]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004854:	7cfb      	ldrb	r3, [r7, #19]
 8004856:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d01c      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004864:	4b19      	ldr	r3, [pc, #100]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800486a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004872:	4916      	ldr	r1, [pc, #88]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004874:	4313      	orrs	r3, r2
 8004876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800487e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004882:	d10c      	bne.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3304      	adds	r3, #4
 8004888:	2102      	movs	r1, #2
 800488a:	4618      	mov	r0, r3
 800488c:	f000 f830 	bl	80048f0 <RCCEx_PLLSAI1_Config>
 8004890:	4603      	mov	r3, r0
 8004892:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004894:	7cfb      	ldrb	r3, [r7, #19]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800489a:	7cfb      	ldrb	r3, [r7, #19]
 800489c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048aa:	4b08      	ldr	r3, [pc, #32]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048b8:	4904      	ldr	r1, [pc, #16]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40021000 	.word	0x40021000

080048d0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80048d4:	4b05      	ldr	r3, [pc, #20]	@ (80048ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a04      	ldr	r2, [pc, #16]	@ (80048ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80048da:	f043 0304 	orr.w	r3, r3, #4
 80048de:	6013      	str	r3, [r2, #0]
}
 80048e0:	bf00      	nop
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40021000 	.word	0x40021000

080048f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048fe:	4b74      	ldr	r3, [pc, #464]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f003 0303 	and.w	r3, r3, #3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d018      	beq.n	800493c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800490a:	4b71      	ldr	r3, [pc, #452]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f003 0203 	and.w	r2, r3, #3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	d10d      	bne.n	8004936 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
       ||
 800491e:	2b00      	cmp	r3, #0
 8004920:	d009      	beq.n	8004936 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004922:	4b6b      	ldr	r3, [pc, #428]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	091b      	lsrs	r3, r3, #4
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
       ||
 8004932:	429a      	cmp	r2, r3
 8004934:	d047      	beq.n	80049c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	73fb      	strb	r3, [r7, #15]
 800493a:	e044      	b.n	80049c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b03      	cmp	r3, #3
 8004942:	d018      	beq.n	8004976 <RCCEx_PLLSAI1_Config+0x86>
 8004944:	2b03      	cmp	r3, #3
 8004946:	d825      	bhi.n	8004994 <RCCEx_PLLSAI1_Config+0xa4>
 8004948:	2b01      	cmp	r3, #1
 800494a:	d002      	beq.n	8004952 <RCCEx_PLLSAI1_Config+0x62>
 800494c:	2b02      	cmp	r3, #2
 800494e:	d009      	beq.n	8004964 <RCCEx_PLLSAI1_Config+0x74>
 8004950:	e020      	b.n	8004994 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004952:	4b5f      	ldr	r3, [pc, #380]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d11d      	bne.n	800499a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004962:	e01a      	b.n	800499a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004964:	4b5a      	ldr	r3, [pc, #360]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800496c:	2b00      	cmp	r3, #0
 800496e:	d116      	bne.n	800499e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004974:	e013      	b.n	800499e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004976:	4b56      	ldr	r3, [pc, #344]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10f      	bne.n	80049a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004982:	4b53      	ldr	r3, [pc, #332]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d109      	bne.n	80049a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004992:	e006      	b.n	80049a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	73fb      	strb	r3, [r7, #15]
      break;
 8004998:	e004      	b.n	80049a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800499a:	bf00      	nop
 800499c:	e002      	b.n	80049a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800499e:	bf00      	nop
 80049a0:	e000      	b.n	80049a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10d      	bne.n	80049c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049aa:	4b49      	ldr	r3, [pc, #292]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6819      	ldr	r1, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	430b      	orrs	r3, r1
 80049c0:	4943      	ldr	r1, [pc, #268]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d17c      	bne.n	8004ac6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049cc:	4b40      	ldr	r3, [pc, #256]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a3f      	ldr	r2, [pc, #252]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80049d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d8:	f7fd f97e 	bl	8001cd8 <HAL_GetTick>
 80049dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049de:	e009      	b.n	80049f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049e0:	f7fd f97a 	bl	8001cd8 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d902      	bls.n	80049f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	73fb      	strb	r3, [r7, #15]
        break;
 80049f2:	e005      	b.n	8004a00 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049f4:	4b36      	ldr	r3, [pc, #216]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1ef      	bne.n	80049e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d15f      	bne.n	8004ac6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d110      	bne.n	8004a2e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a0c:	4b30      	ldr	r3, [pc, #192]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004a14:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6892      	ldr	r2, [r2, #8]
 8004a1c:	0211      	lsls	r1, r2, #8
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	68d2      	ldr	r2, [r2, #12]
 8004a22:	06d2      	lsls	r2, r2, #27
 8004a24:	430a      	orrs	r2, r1
 8004a26:	492a      	ldr	r1, [pc, #168]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	610b      	str	r3, [r1, #16]
 8004a2c:	e027      	b.n	8004a7e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d112      	bne.n	8004a5a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a34:	4b26      	ldr	r3, [pc, #152]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004a3c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6892      	ldr	r2, [r2, #8]
 8004a44:	0211      	lsls	r1, r2, #8
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6912      	ldr	r2, [r2, #16]
 8004a4a:	0852      	lsrs	r2, r2, #1
 8004a4c:	3a01      	subs	r2, #1
 8004a4e:	0552      	lsls	r2, r2, #21
 8004a50:	430a      	orrs	r2, r1
 8004a52:	491f      	ldr	r1, [pc, #124]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	610b      	str	r3, [r1, #16]
 8004a58:	e011      	b.n	8004a7e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004a62:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6892      	ldr	r2, [r2, #8]
 8004a6a:	0211      	lsls	r1, r2, #8
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6952      	ldr	r2, [r2, #20]
 8004a70:	0852      	lsrs	r2, r2, #1
 8004a72:	3a01      	subs	r2, #1
 8004a74:	0652      	lsls	r2, r2, #25
 8004a76:	430a      	orrs	r2, r1
 8004a78:	4915      	ldr	r1, [pc, #84]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a7e:	4b14      	ldr	r3, [pc, #80]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a13      	ldr	r2, [pc, #76]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a88:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a8a:	f7fd f925 	bl	8001cd8 <HAL_GetTick>
 8004a8e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a90:	e009      	b.n	8004aa6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a92:	f7fd f921 	bl	8001cd8 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d902      	bls.n	8004aa6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	73fb      	strb	r3, [r7, #15]
          break;
 8004aa4:	e005      	b.n	8004ab2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0ef      	beq.n	8004a92 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004ab2:	7bfb      	ldrb	r3, [r7, #15]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d106      	bne.n	8004ac6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ab8:	4b05      	ldr	r3, [pc, #20]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aba:	691a      	ldr	r2, [r3, #16]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	4903      	ldr	r1, [pc, #12]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40021000 	.word	0x40021000

08004ad4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e049      	b.n	8004b7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d106      	bne.n	8004b00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fc fe42 	bl	8001784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3304      	adds	r3, #4
 8004b10:	4619      	mov	r1, r3
 8004b12:	4610      	mov	r0, r2
 8004b14:	f000 fa28 	bl	8004f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
	...

08004b84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d001      	beq.n	8004b9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e033      	b.n	8004c04 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a19      	ldr	r2, [pc, #100]	@ (8004c10 <HAL_TIM_Base_Start+0x8c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d009      	beq.n	8004bc2 <HAL_TIM_Base_Start+0x3e>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bb6:	d004      	beq.n	8004bc2 <HAL_TIM_Base_Start+0x3e>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a15      	ldr	r2, [pc, #84]	@ (8004c14 <HAL_TIM_Base_Start+0x90>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d115      	bne.n	8004bee <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	4b13      	ldr	r3, [pc, #76]	@ (8004c18 <HAL_TIM_Base_Start+0x94>)
 8004bca:	4013      	ands	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2b06      	cmp	r3, #6
 8004bd2:	d015      	beq.n	8004c00 <HAL_TIM_Base_Start+0x7c>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bda:	d011      	beq.n	8004c00 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0201 	orr.w	r2, r2, #1
 8004bea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bec:	e008      	b.n	8004c00 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f042 0201 	orr.w	r2, r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	e000      	b.n	8004c02 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	40012c00 	.word	0x40012c00
 8004c14:	40014000 	.word	0x40014000
 8004c18:	00010007 	.word	0x00010007

08004c1c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e049      	b.n	8004cc2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d106      	bne.n	8004c48 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f841 	bl	8004cca <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3304      	adds	r3, #4
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4610      	mov	r0, r2
 8004c5c:	f000 f984 	bl	8004f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
	...

08004ce0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cec:	2300      	movs	r3, #0
 8004cee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d101      	bne.n	8004cfe <HAL_TIM_OC_ConfigChannel+0x1e>
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	e066      	b.n	8004dcc <HAL_TIM_OC_ConfigChannel+0xec>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b14      	cmp	r3, #20
 8004d0a:	d857      	bhi.n	8004dbc <HAL_TIM_OC_ConfigChannel+0xdc>
 8004d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d14 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d12:	bf00      	nop
 8004d14:	08004d69 	.word	0x08004d69
 8004d18:	08004dbd 	.word	0x08004dbd
 8004d1c:	08004dbd 	.word	0x08004dbd
 8004d20:	08004dbd 	.word	0x08004dbd
 8004d24:	08004d77 	.word	0x08004d77
 8004d28:	08004dbd 	.word	0x08004dbd
 8004d2c:	08004dbd 	.word	0x08004dbd
 8004d30:	08004dbd 	.word	0x08004dbd
 8004d34:	08004d85 	.word	0x08004d85
 8004d38:	08004dbd 	.word	0x08004dbd
 8004d3c:	08004dbd 	.word	0x08004dbd
 8004d40:	08004dbd 	.word	0x08004dbd
 8004d44:	08004d93 	.word	0x08004d93
 8004d48:	08004dbd 	.word	0x08004dbd
 8004d4c:	08004dbd 	.word	0x08004dbd
 8004d50:	08004dbd 	.word	0x08004dbd
 8004d54:	08004da1 	.word	0x08004da1
 8004d58:	08004dbd 	.word	0x08004dbd
 8004d5c:	08004dbd 	.word	0x08004dbd
 8004d60:	08004dbd 	.word	0x08004dbd
 8004d64:	08004daf 	.word	0x08004daf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68b9      	ldr	r1, [r7, #8]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 f96a 	bl	8005048 <TIM_OC1_SetConfig>
      break;
 8004d74:	e025      	b.n	8004dc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 f9df 	bl	8005140 <TIM_OC2_SetConfig>
      break;
 8004d82:	e01e      	b.n	8004dc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68b9      	ldr	r1, [r7, #8]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 fa52 	bl	8005234 <TIM_OC3_SetConfig>
      break;
 8004d90:	e017      	b.n	8004dc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68b9      	ldr	r1, [r7, #8]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 fac3 	bl	8005324 <TIM_OC4_SetConfig>
      break;
 8004d9e:	e010      	b.n	8004dc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fb1a 	bl	80053e0 <TIM_OC5_SetConfig>
      break;
 8004dac:	e009      	b.n	8004dc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68b9      	ldr	r1, [r7, #8]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fb6b 	bl	8005490 <TIM_OC6_SetConfig>
      break;
 8004dba:	e002      	b.n	8004dc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8004dc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dde:	2300      	movs	r3, #0
 8004de0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d101      	bne.n	8004df0 <HAL_TIM_ConfigClockSource+0x1c>
 8004dec:	2302      	movs	r3, #2
 8004dee:	e0b6      	b.n	8004f5e <HAL_TIM_ConfigClockSource+0x18a>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e0e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004e12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e2c:	d03e      	beq.n	8004eac <HAL_TIM_ConfigClockSource+0xd8>
 8004e2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e32:	f200 8087 	bhi.w	8004f44 <HAL_TIM_ConfigClockSource+0x170>
 8004e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e3a:	f000 8086 	beq.w	8004f4a <HAL_TIM_ConfigClockSource+0x176>
 8004e3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e42:	d87f      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x170>
 8004e44:	2b70      	cmp	r3, #112	@ 0x70
 8004e46:	d01a      	beq.n	8004e7e <HAL_TIM_ConfigClockSource+0xaa>
 8004e48:	2b70      	cmp	r3, #112	@ 0x70
 8004e4a:	d87b      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x170>
 8004e4c:	2b60      	cmp	r3, #96	@ 0x60
 8004e4e:	d050      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x11e>
 8004e50:	2b60      	cmp	r3, #96	@ 0x60
 8004e52:	d877      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x170>
 8004e54:	2b50      	cmp	r3, #80	@ 0x50
 8004e56:	d03c      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0xfe>
 8004e58:	2b50      	cmp	r3, #80	@ 0x50
 8004e5a:	d873      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x170>
 8004e5c:	2b40      	cmp	r3, #64	@ 0x40
 8004e5e:	d058      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0x13e>
 8004e60:	2b40      	cmp	r3, #64	@ 0x40
 8004e62:	d86f      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x170>
 8004e64:	2b30      	cmp	r3, #48	@ 0x30
 8004e66:	d064      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0x15e>
 8004e68:	2b30      	cmp	r3, #48	@ 0x30
 8004e6a:	d86b      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x170>
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	d060      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0x15e>
 8004e70:	2b20      	cmp	r3, #32
 8004e72:	d867      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x170>
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d05c      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0x15e>
 8004e78:	2b10      	cmp	r3, #16
 8004e7a:	d05a      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0x15e>
 8004e7c:	e062      	b.n	8004f44 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e8e:	f000 fbd3 	bl	8005638 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ea0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	609a      	str	r2, [r3, #8]
      break;
 8004eaa:	e04f      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ebc:	f000 fbbc 	bl	8005638 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689a      	ldr	r2, [r3, #8]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ece:	609a      	str	r2, [r3, #8]
      break;
 8004ed0:	e03c      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ede:	461a      	mov	r2, r3
 8004ee0:	f000 fb30 	bl	8005544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2150      	movs	r1, #80	@ 0x50
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fb89 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 8004ef0:	e02c      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004efe:	461a      	mov	r2, r3
 8004f00:	f000 fb4f 	bl	80055a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2160      	movs	r1, #96	@ 0x60
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fb79 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 8004f10:	e01c      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f000 fb10 	bl	8005544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2140      	movs	r1, #64	@ 0x40
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fb69 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 8004f30:	e00c      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	f000 fb60 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 8004f42:	e003      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	73fb      	strb	r3, [r7, #15]
      break;
 8004f48:	e000      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004f4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a30      	ldr	r2, [pc, #192]	@ (800503c <TIM_Base_SetConfig+0xd4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d003      	beq.n	8004f88 <TIM_Base_SetConfig+0x20>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f86:	d108      	bne.n	8004f9a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a27      	ldr	r2, [pc, #156]	@ (800503c <TIM_Base_SetConfig+0xd4>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00b      	beq.n	8004fba <TIM_Base_SetConfig+0x52>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fa8:	d007      	beq.n	8004fba <TIM_Base_SetConfig+0x52>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a24      	ldr	r2, [pc, #144]	@ (8005040 <TIM_Base_SetConfig+0xd8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d003      	beq.n	8004fba <TIM_Base_SetConfig+0x52>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a23      	ldr	r2, [pc, #140]	@ (8005044 <TIM_Base_SetConfig+0xdc>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d108      	bne.n	8004fcc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a12      	ldr	r2, [pc, #72]	@ (800503c <TIM_Base_SetConfig+0xd4>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d007      	beq.n	8005008 <TIM_Base_SetConfig+0xa0>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a11      	ldr	r2, [pc, #68]	@ (8005040 <TIM_Base_SetConfig+0xd8>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d003      	beq.n	8005008 <TIM_Base_SetConfig+0xa0>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a10      	ldr	r2, [pc, #64]	@ (8005044 <TIM_Base_SetConfig+0xdc>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d103      	bne.n	8005010 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b01      	cmp	r3, #1
 8005020:	d105      	bne.n	800502e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	f023 0201 	bic.w	r2, r3, #1
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	611a      	str	r2, [r3, #16]
  }
}
 800502e:	bf00      	nop
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	40012c00 	.word	0x40012c00
 8005040:	40014000 	.word	0x40014000
 8005044:	40014400 	.word	0x40014400

08005048 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	f023 0201 	bic.w	r2, r3, #1
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800507a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f023 0303 	bic.w	r3, r3, #3
 8005082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f023 0302 	bic.w	r3, r3, #2
 8005094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	4313      	orrs	r3, r2
 800509e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a24      	ldr	r2, [pc, #144]	@ (8005134 <TIM_OC1_SetConfig+0xec>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d007      	beq.n	80050b8 <TIM_OC1_SetConfig+0x70>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a23      	ldr	r2, [pc, #140]	@ (8005138 <TIM_OC1_SetConfig+0xf0>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d003      	beq.n	80050b8 <TIM_OC1_SetConfig+0x70>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a22      	ldr	r2, [pc, #136]	@ (800513c <TIM_OC1_SetConfig+0xf4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d10c      	bne.n	80050d2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f023 0308 	bic.w	r3, r3, #8
 80050be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f023 0304 	bic.w	r3, r3, #4
 80050d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a17      	ldr	r2, [pc, #92]	@ (8005134 <TIM_OC1_SetConfig+0xec>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d007      	beq.n	80050ea <TIM_OC1_SetConfig+0xa2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a16      	ldr	r2, [pc, #88]	@ (8005138 <TIM_OC1_SetConfig+0xf0>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d003      	beq.n	80050ea <TIM_OC1_SetConfig+0xa2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a15      	ldr	r2, [pc, #84]	@ (800513c <TIM_OC1_SetConfig+0xf4>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d111      	bne.n	800510e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	4313      	orrs	r3, r2
 800510c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	621a      	str	r2, [r3, #32]
}
 8005128:	bf00      	nop
 800512a:	371c      	adds	r7, #28
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	40012c00 	.word	0x40012c00
 8005138:	40014000 	.word	0x40014000
 800513c:	40014400 	.word	0x40014400

08005140 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005140:	b480      	push	{r7}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	f023 0210 	bic.w	r2, r3, #16
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800516e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800517a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	021b      	lsls	r3, r3, #8
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4313      	orrs	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f023 0320 	bic.w	r3, r3, #32
 800518e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	4313      	orrs	r3, r2
 800519a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a22      	ldr	r2, [pc, #136]	@ (8005228 <TIM_OC2_SetConfig+0xe8>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d10d      	bne.n	80051c0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a19      	ldr	r2, [pc, #100]	@ (8005228 <TIM_OC2_SetConfig+0xe8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d007      	beq.n	80051d8 <TIM_OC2_SetConfig+0x98>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a18      	ldr	r2, [pc, #96]	@ (800522c <TIM_OC2_SetConfig+0xec>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d003      	beq.n	80051d8 <TIM_OC2_SetConfig+0x98>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a17      	ldr	r2, [pc, #92]	@ (8005230 <TIM_OC2_SetConfig+0xf0>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d113      	bne.n	8005200 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	621a      	str	r2, [r3, #32]
}
 800521a:	bf00      	nop
 800521c:	371c      	adds	r7, #28
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	40012c00 	.word	0x40012c00
 800522c:	40014000 	.word	0x40014000
 8005230:	40014400 	.word	0x40014400

08005234 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0303 	bic.w	r3, r3, #3
 800526e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	021b      	lsls	r3, r3, #8
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	4313      	orrs	r3, r2
 800528c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a21      	ldr	r2, [pc, #132]	@ (8005318 <TIM_OC3_SetConfig+0xe4>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d10d      	bne.n	80052b2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800529c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	021b      	lsls	r3, r3, #8
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a18      	ldr	r2, [pc, #96]	@ (8005318 <TIM_OC3_SetConfig+0xe4>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d007      	beq.n	80052ca <TIM_OC3_SetConfig+0x96>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a17      	ldr	r2, [pc, #92]	@ (800531c <TIM_OC3_SetConfig+0xe8>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d003      	beq.n	80052ca <TIM_OC3_SetConfig+0x96>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a16      	ldr	r2, [pc, #88]	@ (8005320 <TIM_OC3_SetConfig+0xec>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d113      	bne.n	80052f2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	621a      	str	r2, [r3, #32]
}
 800530c:	bf00      	nop
 800530e:	371c      	adds	r7, #28
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	40012c00 	.word	0x40012c00
 800531c:	40014000 	.word	0x40014000
 8005320:	40014400 	.word	0x40014400

08005324 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005352:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800535e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	021b      	lsls	r3, r3, #8
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4313      	orrs	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005372:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	031b      	lsls	r3, r3, #12
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a14      	ldr	r2, [pc, #80]	@ (80053d4 <TIM_OC4_SetConfig+0xb0>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d007      	beq.n	8005398 <TIM_OC4_SetConfig+0x74>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a13      	ldr	r2, [pc, #76]	@ (80053d8 <TIM_OC4_SetConfig+0xb4>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d003      	beq.n	8005398 <TIM_OC4_SetConfig+0x74>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a12      	ldr	r2, [pc, #72]	@ (80053dc <TIM_OC4_SetConfig+0xb8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d109      	bne.n	80053ac <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800539e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	019b      	lsls	r3, r3, #6
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	621a      	str	r2, [r3, #32]
}
 80053c6:	bf00      	nop
 80053c8:	371c      	adds	r7, #28
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	40012c00 	.word	0x40012c00
 80053d8:	40014000 	.word	0x40014000
 80053dc:	40014400 	.word	0x40014400

080053e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b087      	sub	sp, #28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800540e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005424:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	041b      	lsls	r3, r3, #16
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a13      	ldr	r2, [pc, #76]	@ (8005484 <TIM_OC5_SetConfig+0xa4>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d007      	beq.n	800544a <TIM_OC5_SetConfig+0x6a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a12      	ldr	r2, [pc, #72]	@ (8005488 <TIM_OC5_SetConfig+0xa8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d003      	beq.n	800544a <TIM_OC5_SetConfig+0x6a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a11      	ldr	r2, [pc, #68]	@ (800548c <TIM_OC5_SetConfig+0xac>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d109      	bne.n	800545e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005450:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	021b      	lsls	r3, r3, #8
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	621a      	str	r2, [r3, #32]
}
 8005478:	bf00      	nop
 800547a:	371c      	adds	r7, #28
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	40012c00 	.word	0x40012c00
 8005488:	40014000 	.word	0x40014000
 800548c:	40014400 	.word	0x40014400

08005490 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a1b      	ldr	r3, [r3, #32]
 80054a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	021b      	lsls	r3, r3, #8
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80054d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	051b      	lsls	r3, r3, #20
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a14      	ldr	r2, [pc, #80]	@ (8005538 <TIM_OC6_SetConfig+0xa8>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d007      	beq.n	80054fc <TIM_OC6_SetConfig+0x6c>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a13      	ldr	r2, [pc, #76]	@ (800553c <TIM_OC6_SetConfig+0xac>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d003      	beq.n	80054fc <TIM_OC6_SetConfig+0x6c>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a12      	ldr	r2, [pc, #72]	@ (8005540 <TIM_OC6_SetConfig+0xb0>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d109      	bne.n	8005510 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005502:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	029b      	lsls	r3, r3, #10
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	4313      	orrs	r3, r2
 800550e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	621a      	str	r2, [r3, #32]
}
 800552a:	bf00      	nop
 800552c:	371c      	adds	r7, #28
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	40012c00 	.word	0x40012c00
 800553c:	40014000 	.word	0x40014000
 8005540:	40014400 	.word	0x40014400

08005544 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	f023 0201 	bic.w	r2, r3, #1
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800556e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f023 030a 	bic.w	r3, r3, #10
 8005580:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	4313      	orrs	r3, r2
 8005588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	621a      	str	r2, [r3, #32]
}
 8005596:	bf00      	nop
 8005598:	371c      	adds	r7, #28
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b087      	sub	sp, #28
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	f023 0210 	bic.w	r2, r3, #16
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	031b      	lsls	r3, r3, #12
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	621a      	str	r2, [r3, #32]
}
 80055f6:	bf00      	nop
 80055f8:	371c      	adds	r7, #28
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005602:	b480      	push	{r7}
 8005604:	b085      	sub	sp, #20
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005618:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	f043 0307 	orr.w	r3, r3, #7
 8005624:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	609a      	str	r2, [r3, #8]
}
 800562c:	bf00      	nop
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005652:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	021a      	lsls	r2, r3, #8
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	431a      	orrs	r2, r3
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	4313      	orrs	r3, r2
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	4313      	orrs	r3, r2
 8005664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	609a      	str	r2, [r3, #8]
}
 800566c:	bf00      	nop
 800566e:	371c      	adds	r7, #28
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005688:	2b01      	cmp	r3, #1
 800568a:	d101      	bne.n	8005690 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800568c:	2302      	movs	r3, #2
 800568e:	e04f      	b.n	8005730 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a21      	ldr	r2, [pc, #132]	@ (800573c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d108      	bne.n	80056cc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80056c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a14      	ldr	r2, [pc, #80]	@ (800573c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d009      	beq.n	8005704 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056f8:	d004      	beq.n	8005704 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a10      	ldr	r2, [pc, #64]	@ (8005740 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d10c      	bne.n	800571e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800570a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	4313      	orrs	r3, r2
 8005714:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	40012c00 	.word	0x40012c00
 8005740:	40014000 	.word	0x40014000

08005744 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e040      	b.n	80057d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800575a:	2b00      	cmp	r3, #0
 800575c:	d106      	bne.n	800576c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7fc f872 	bl	8001850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2224      	movs	r2, #36	@ 0x24
 8005770:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 0201 	bic.w	r2, r2, #1
 8005780:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fa54 	bl	8005c38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f825 	bl	80057e0 <UART_SetConfig>
 8005796:	4603      	mov	r3, r0
 8005798:	2b01      	cmp	r3, #1
 800579a:	d101      	bne.n	80057a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e01b      	b.n	80057d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689a      	ldr	r2, [r3, #8]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0201 	orr.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 fad3 	bl	8005d7c <UART_CheckIdleState>
 80057d6:	4603      	mov	r3, r0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057e4:	b08a      	sub	sp, #40	@ 0x28
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	431a      	orrs	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	431a      	orrs	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	4313      	orrs	r3, r2
 8005806:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	4bb4      	ldr	r3, [pc, #720]	@ (8005ae0 <UART_SetConfig+0x300>)
 8005810:	4013      	ands	r3, r2
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	6812      	ldr	r2, [r2, #0]
 8005816:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005818:	430b      	orrs	r3, r1
 800581a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4aa9      	ldr	r2, [pc, #676]	@ (8005ae4 <UART_SetConfig+0x304>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d004      	beq.n	800584c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005848:	4313      	orrs	r3, r2
 800584a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800585c:	430a      	orrs	r2, r1
 800585e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4aa0      	ldr	r2, [pc, #640]	@ (8005ae8 <UART_SetConfig+0x308>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d126      	bne.n	80058b8 <UART_SetConfig+0xd8>
 800586a:	4ba0      	ldr	r3, [pc, #640]	@ (8005aec <UART_SetConfig+0x30c>)
 800586c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005870:	f003 0303 	and.w	r3, r3, #3
 8005874:	2b03      	cmp	r3, #3
 8005876:	d81b      	bhi.n	80058b0 <UART_SetConfig+0xd0>
 8005878:	a201      	add	r2, pc, #4	@ (adr r2, 8005880 <UART_SetConfig+0xa0>)
 800587a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587e:	bf00      	nop
 8005880:	08005891 	.word	0x08005891
 8005884:	080058a1 	.word	0x080058a1
 8005888:	08005899 	.word	0x08005899
 800588c:	080058a9 	.word	0x080058a9
 8005890:	2301      	movs	r3, #1
 8005892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005896:	e080      	b.n	800599a <UART_SetConfig+0x1ba>
 8005898:	2302      	movs	r3, #2
 800589a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800589e:	e07c      	b.n	800599a <UART_SetConfig+0x1ba>
 80058a0:	2304      	movs	r3, #4
 80058a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058a6:	e078      	b.n	800599a <UART_SetConfig+0x1ba>
 80058a8:	2308      	movs	r3, #8
 80058aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058ae:	e074      	b.n	800599a <UART_SetConfig+0x1ba>
 80058b0:	2310      	movs	r3, #16
 80058b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058b6:	e070      	b.n	800599a <UART_SetConfig+0x1ba>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a8c      	ldr	r2, [pc, #560]	@ (8005af0 <UART_SetConfig+0x310>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d138      	bne.n	8005934 <UART_SetConfig+0x154>
 80058c2:	4b8a      	ldr	r3, [pc, #552]	@ (8005aec <UART_SetConfig+0x30c>)
 80058c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058c8:	f003 030c 	and.w	r3, r3, #12
 80058cc:	2b0c      	cmp	r3, #12
 80058ce:	d82d      	bhi.n	800592c <UART_SetConfig+0x14c>
 80058d0:	a201      	add	r2, pc, #4	@ (adr r2, 80058d8 <UART_SetConfig+0xf8>)
 80058d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d6:	bf00      	nop
 80058d8:	0800590d 	.word	0x0800590d
 80058dc:	0800592d 	.word	0x0800592d
 80058e0:	0800592d 	.word	0x0800592d
 80058e4:	0800592d 	.word	0x0800592d
 80058e8:	0800591d 	.word	0x0800591d
 80058ec:	0800592d 	.word	0x0800592d
 80058f0:	0800592d 	.word	0x0800592d
 80058f4:	0800592d 	.word	0x0800592d
 80058f8:	08005915 	.word	0x08005915
 80058fc:	0800592d 	.word	0x0800592d
 8005900:	0800592d 	.word	0x0800592d
 8005904:	0800592d 	.word	0x0800592d
 8005908:	08005925 	.word	0x08005925
 800590c:	2300      	movs	r3, #0
 800590e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005912:	e042      	b.n	800599a <UART_SetConfig+0x1ba>
 8005914:	2302      	movs	r3, #2
 8005916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800591a:	e03e      	b.n	800599a <UART_SetConfig+0x1ba>
 800591c:	2304      	movs	r3, #4
 800591e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005922:	e03a      	b.n	800599a <UART_SetConfig+0x1ba>
 8005924:	2308      	movs	r3, #8
 8005926:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800592a:	e036      	b.n	800599a <UART_SetConfig+0x1ba>
 800592c:	2310      	movs	r3, #16
 800592e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005932:	e032      	b.n	800599a <UART_SetConfig+0x1ba>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a6a      	ldr	r2, [pc, #424]	@ (8005ae4 <UART_SetConfig+0x304>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d12a      	bne.n	8005994 <UART_SetConfig+0x1b4>
 800593e:	4b6b      	ldr	r3, [pc, #428]	@ (8005aec <UART_SetConfig+0x30c>)
 8005940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005944:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005948:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800594c:	d01a      	beq.n	8005984 <UART_SetConfig+0x1a4>
 800594e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005952:	d81b      	bhi.n	800598c <UART_SetConfig+0x1ac>
 8005954:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005958:	d00c      	beq.n	8005974 <UART_SetConfig+0x194>
 800595a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800595e:	d815      	bhi.n	800598c <UART_SetConfig+0x1ac>
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <UART_SetConfig+0x18c>
 8005964:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005968:	d008      	beq.n	800597c <UART_SetConfig+0x19c>
 800596a:	e00f      	b.n	800598c <UART_SetConfig+0x1ac>
 800596c:	2300      	movs	r3, #0
 800596e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005972:	e012      	b.n	800599a <UART_SetConfig+0x1ba>
 8005974:	2302      	movs	r3, #2
 8005976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800597a:	e00e      	b.n	800599a <UART_SetConfig+0x1ba>
 800597c:	2304      	movs	r3, #4
 800597e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005982:	e00a      	b.n	800599a <UART_SetConfig+0x1ba>
 8005984:	2308      	movs	r3, #8
 8005986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800598a:	e006      	b.n	800599a <UART_SetConfig+0x1ba>
 800598c:	2310      	movs	r3, #16
 800598e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005992:	e002      	b.n	800599a <UART_SetConfig+0x1ba>
 8005994:	2310      	movs	r3, #16
 8005996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a51      	ldr	r2, [pc, #324]	@ (8005ae4 <UART_SetConfig+0x304>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d17a      	bne.n	8005a9a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d824      	bhi.n	80059f6 <UART_SetConfig+0x216>
 80059ac:	a201      	add	r2, pc, #4	@ (adr r2, 80059b4 <UART_SetConfig+0x1d4>)
 80059ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b2:	bf00      	nop
 80059b4:	080059d9 	.word	0x080059d9
 80059b8:	080059f7 	.word	0x080059f7
 80059bc:	080059e1 	.word	0x080059e1
 80059c0:	080059f7 	.word	0x080059f7
 80059c4:	080059e7 	.word	0x080059e7
 80059c8:	080059f7 	.word	0x080059f7
 80059cc:	080059f7 	.word	0x080059f7
 80059d0:	080059f7 	.word	0x080059f7
 80059d4:	080059ef 	.word	0x080059ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059d8:	f7fe fcf8 	bl	80043cc <HAL_RCC_GetPCLK1Freq>
 80059dc:	61f8      	str	r0, [r7, #28]
        break;
 80059de:	e010      	b.n	8005a02 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059e0:	4b44      	ldr	r3, [pc, #272]	@ (8005af4 <UART_SetConfig+0x314>)
 80059e2:	61fb      	str	r3, [r7, #28]
        break;
 80059e4:	e00d      	b.n	8005a02 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059e6:	f7fe fc59 	bl	800429c <HAL_RCC_GetSysClockFreq>
 80059ea:	61f8      	str	r0, [r7, #28]
        break;
 80059ec:	e009      	b.n	8005a02 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059f2:	61fb      	str	r3, [r7, #28]
        break;
 80059f4:	e005      	b.n	8005a02 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 8107 	beq.w	8005c18 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	4413      	add	r3, r2
 8005a14:	69fa      	ldr	r2, [r7, #28]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d305      	bcc.n	8005a26 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a20:	69fa      	ldr	r2, [r7, #28]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d903      	bls.n	8005a2e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005a2c:	e0f4      	b.n	8005c18 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	2200      	movs	r2, #0
 8005a32:	461c      	mov	r4, r3
 8005a34:	4615      	mov	r5, r2
 8005a36:	f04f 0200 	mov.w	r2, #0
 8005a3a:	f04f 0300 	mov.w	r3, #0
 8005a3e:	022b      	lsls	r3, r5, #8
 8005a40:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005a44:	0222      	lsls	r2, r4, #8
 8005a46:	68f9      	ldr	r1, [r7, #12]
 8005a48:	6849      	ldr	r1, [r1, #4]
 8005a4a:	0849      	lsrs	r1, r1, #1
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	4688      	mov	r8, r1
 8005a50:	4681      	mov	r9, r0
 8005a52:	eb12 0a08 	adds.w	sl, r2, r8
 8005a56:	eb43 0b09 	adc.w	fp, r3, r9
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	603b      	str	r3, [r7, #0]
 8005a62:	607a      	str	r2, [r7, #4]
 8005a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a68:	4650      	mov	r0, sl
 8005a6a:	4659      	mov	r1, fp
 8005a6c:	f7fb f89c 	bl	8000ba8 <__aeabi_uldivmod>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4613      	mov	r3, r2
 8005a76:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a7e:	d308      	bcc.n	8005a92 <UART_SetConfig+0x2b2>
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a86:	d204      	bcs.n	8005a92 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	60da      	str	r2, [r3, #12]
 8005a90:	e0c2      	b.n	8005c18 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005a98:	e0be      	b.n	8005c18 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005aa2:	d16a      	bne.n	8005b7a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005aa4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d834      	bhi.n	8005b16 <UART_SetConfig+0x336>
 8005aac:	a201      	add	r2, pc, #4	@ (adr r2, 8005ab4 <UART_SetConfig+0x2d4>)
 8005aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab2:	bf00      	nop
 8005ab4:	08005ad9 	.word	0x08005ad9
 8005ab8:	08005af9 	.word	0x08005af9
 8005abc:	08005b01 	.word	0x08005b01
 8005ac0:	08005b17 	.word	0x08005b17
 8005ac4:	08005b07 	.word	0x08005b07
 8005ac8:	08005b17 	.word	0x08005b17
 8005acc:	08005b17 	.word	0x08005b17
 8005ad0:	08005b17 	.word	0x08005b17
 8005ad4:	08005b0f 	.word	0x08005b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ad8:	f7fe fc78 	bl	80043cc <HAL_RCC_GetPCLK1Freq>
 8005adc:	61f8      	str	r0, [r7, #28]
        break;
 8005ade:	e020      	b.n	8005b22 <UART_SetConfig+0x342>
 8005ae0:	efff69f3 	.word	0xefff69f3
 8005ae4:	40008000 	.word	0x40008000
 8005ae8:	40013800 	.word	0x40013800
 8005aec:	40021000 	.word	0x40021000
 8005af0:	40004400 	.word	0x40004400
 8005af4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005af8:	f7fe fc7e 	bl	80043f8 <HAL_RCC_GetPCLK2Freq>
 8005afc:	61f8      	str	r0, [r7, #28]
        break;
 8005afe:	e010      	b.n	8005b22 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b00:	4b4c      	ldr	r3, [pc, #304]	@ (8005c34 <UART_SetConfig+0x454>)
 8005b02:	61fb      	str	r3, [r7, #28]
        break;
 8005b04:	e00d      	b.n	8005b22 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b06:	f7fe fbc9 	bl	800429c <HAL_RCC_GetSysClockFreq>
 8005b0a:	61f8      	str	r0, [r7, #28]
        break;
 8005b0c:	e009      	b.n	8005b22 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b12:	61fb      	str	r3, [r7, #28]
        break;
 8005b14:	e005      	b.n	8005b22 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005b16:	2300      	movs	r3, #0
 8005b18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005b20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d077      	beq.n	8005c18 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	005a      	lsls	r2, r3, #1
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	085b      	lsrs	r3, r3, #1
 8005b32:	441a      	add	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	2b0f      	cmp	r3, #15
 8005b42:	d916      	bls.n	8005b72 <UART_SetConfig+0x392>
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b4a:	d212      	bcs.n	8005b72 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	f023 030f 	bic.w	r3, r3, #15
 8005b54:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	085b      	lsrs	r3, r3, #1
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	8afb      	ldrh	r3, [r7, #22]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	8afa      	ldrh	r2, [r7, #22]
 8005b6e:	60da      	str	r2, [r3, #12]
 8005b70:	e052      	b.n	8005c18 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005b78:	e04e      	b.n	8005c18 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b7a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b7e:	2b08      	cmp	r3, #8
 8005b80:	d827      	bhi.n	8005bd2 <UART_SetConfig+0x3f2>
 8005b82:	a201      	add	r2, pc, #4	@ (adr r2, 8005b88 <UART_SetConfig+0x3a8>)
 8005b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b88:	08005bad 	.word	0x08005bad
 8005b8c:	08005bb5 	.word	0x08005bb5
 8005b90:	08005bbd 	.word	0x08005bbd
 8005b94:	08005bd3 	.word	0x08005bd3
 8005b98:	08005bc3 	.word	0x08005bc3
 8005b9c:	08005bd3 	.word	0x08005bd3
 8005ba0:	08005bd3 	.word	0x08005bd3
 8005ba4:	08005bd3 	.word	0x08005bd3
 8005ba8:	08005bcb 	.word	0x08005bcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bac:	f7fe fc0e 	bl	80043cc <HAL_RCC_GetPCLK1Freq>
 8005bb0:	61f8      	str	r0, [r7, #28]
        break;
 8005bb2:	e014      	b.n	8005bde <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bb4:	f7fe fc20 	bl	80043f8 <HAL_RCC_GetPCLK2Freq>
 8005bb8:	61f8      	str	r0, [r7, #28]
        break;
 8005bba:	e010      	b.n	8005bde <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8005c34 <UART_SetConfig+0x454>)
 8005bbe:	61fb      	str	r3, [r7, #28]
        break;
 8005bc0:	e00d      	b.n	8005bde <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bc2:	f7fe fb6b 	bl	800429c <HAL_RCC_GetSysClockFreq>
 8005bc6:	61f8      	str	r0, [r7, #28]
        break;
 8005bc8:	e009      	b.n	8005bde <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bce:	61fb      	str	r3, [r7, #28]
        break;
 8005bd0:	e005      	b.n	8005bde <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005bdc:	bf00      	nop
    }

    if (pclk != 0U)
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d019      	beq.n	8005c18 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	085a      	lsrs	r2, r3, #1
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	441a      	add	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	2b0f      	cmp	r3, #15
 8005bfc:	d909      	bls.n	8005c12 <UART_SetConfig+0x432>
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c04:	d205      	bcs.n	8005c12 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	60da      	str	r2, [r3, #12]
 8005c10:	e002      	b.n	8005c18 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005c24:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3728      	adds	r7, #40	@ 0x28
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c32:	bf00      	nop
 8005c34:	00f42400 	.word	0x00f42400

08005c38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c44:	f003 0308 	and.w	r3, r3, #8
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00a      	beq.n	8005c62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00a      	beq.n	8005c84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00a      	beq.n	8005ca6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005caa:	f003 0304 	and.w	r3, r3, #4
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00a      	beq.n	8005cc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ccc:	f003 0310 	and.w	r3, r3, #16
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00a      	beq.n	8005cea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cee:	f003 0320 	and.w	r3, r3, #32
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00a      	beq.n	8005d0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d01a      	beq.n	8005d4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d36:	d10a      	bne.n	8005d4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00a      	beq.n	8005d70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	605a      	str	r2, [r3, #4]
  }
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b098      	sub	sp, #96	@ 0x60
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d8c:	f7fb ffa4 	bl	8001cd8 <HAL_GetTick>
 8005d90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0308 	and.w	r3, r3, #8
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	d12e      	bne.n	8005dfe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005da0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005da8:	2200      	movs	r2, #0
 8005daa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f88c 	bl	8005ecc <UART_WaitOnFlagUntilTimeout>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d021      	beq.n	8005dfe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc2:	e853 3f00 	ldrex	r3, [r3]
 8005dc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dce:	653b      	str	r3, [r7, #80]	@ 0x50
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dda:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ddc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005de0:	e841 2300 	strex	r3, r2, [r1]
 8005de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1e6      	bne.n	8005dba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2220      	movs	r2, #32
 8005df0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e062      	b.n	8005ec4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d149      	bne.n	8005ea0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e14:	2200      	movs	r2, #0
 8005e16:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f856 	bl	8005ecc <UART_WaitOnFlagUntilTimeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d03c      	beq.n	8005ea0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2e:	e853 3f00 	ldrex	r3, [r3]
 8005e32:	623b      	str	r3, [r7, #32]
   return(result);
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	461a      	mov	r2, r3
 8005e42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e44:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e46:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e4c:	e841 2300 	strex	r3, r2, [r1]
 8005e50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1e6      	bne.n	8005e26 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	3308      	adds	r3, #8
 8005e5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	e853 3f00 	ldrex	r3, [r3]
 8005e66:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 0301 	bic.w	r3, r3, #1
 8005e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3308      	adds	r3, #8
 8005e76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e78:	61fa      	str	r2, [r7, #28]
 8005e7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7c:	69b9      	ldr	r1, [r7, #24]
 8005e7e:	69fa      	ldr	r2, [r7, #28]
 8005e80:	e841 2300 	strex	r3, r2, [r1]
 8005e84:	617b      	str	r3, [r7, #20]
   return(result);
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1e5      	bne.n	8005e58 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e011      	b.n	8005ec4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3758      	adds	r7, #88	@ 0x58
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	603b      	str	r3, [r7, #0]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005edc:	e04f      	b.n	8005f7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee4:	d04b      	beq.n	8005f7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ee6:	f7fb fef7 	bl	8001cd8 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d302      	bcc.n	8005efc <UART_WaitOnFlagUntilTimeout+0x30>
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e04e      	b.n	8005f9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0304 	and.w	r3, r3, #4
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d037      	beq.n	8005f7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b80      	cmp	r3, #128	@ 0x80
 8005f12:	d034      	beq.n	8005f7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2b40      	cmp	r3, #64	@ 0x40
 8005f18:	d031      	beq.n	8005f7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	69db      	ldr	r3, [r3, #28]
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d110      	bne.n	8005f4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2208      	movs	r2, #8
 8005f2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 f838 	bl	8005fa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2208      	movs	r2, #8
 8005f3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e029      	b.n	8005f9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f58:	d111      	bne.n	8005f7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 f81e 	bl	8005fa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e00f      	b.n	8005f9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69da      	ldr	r2, [r3, #28]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	4013      	ands	r3, r2
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	bf0c      	ite	eq
 8005f8e:	2301      	moveq	r3, #1
 8005f90:	2300      	movne	r3, #0
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	461a      	mov	r2, r3
 8005f96:	79fb      	ldrb	r3, [r7, #7]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d0a0      	beq.n	8005ede <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b095      	sub	sp, #84	@ 0x54
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb6:	e853 3f00 	ldrex	r3, [r3]
 8005fba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fd4:	e841 2300 	strex	r3, r2, [r1]
 8005fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1e6      	bne.n	8005fae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3308      	adds	r3, #8
 8005fe6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	e853 3f00 	ldrex	r3, [r3]
 8005fee:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	f023 0301 	bic.w	r3, r3, #1
 8005ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3308      	adds	r3, #8
 8005ffe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006000:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006002:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006004:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006008:	e841 2300 	strex	r3, r2, [r1]
 800600c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800600e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e5      	bne.n	8005fe0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006018:	2b01      	cmp	r3, #1
 800601a:	d118      	bne.n	800604e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	e853 3f00 	ldrex	r3, [r3]
 8006028:	60bb      	str	r3, [r7, #8]
   return(result);
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f023 0310 	bic.w	r3, r3, #16
 8006030:	647b      	str	r3, [r7, #68]	@ 0x44
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800603a:	61bb      	str	r3, [r7, #24]
 800603c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603e:	6979      	ldr	r1, [r7, #20]
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	e841 2300 	strex	r3, r2, [r1]
 8006046:	613b      	str	r3, [r7, #16]
   return(result);
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1e6      	bne.n	800601c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2220      	movs	r2, #32
 8006052:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006062:	bf00      	nop
 8006064:	3754      	adds	r7, #84	@ 0x54
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
	...

08006070 <arm_mean_f32>:
 8006070:	b430      	push	{r4, r5}
 8006072:	088d      	lsrs	r5, r1, #2
 8006074:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 80060e8 <arm_mean_f32+0x78>
 8006078:	d018      	beq.n	80060ac <arm_mean_f32+0x3c>
 800607a:	f100 0310 	add.w	r3, r0, #16
 800607e:	462c      	mov	r4, r5
 8006080:	ed53 5a04 	vldr	s11, [r3, #-16]
 8006084:	ed13 6a03 	vldr	s12, [r3, #-12]
 8006088:	ed53 6a02 	vldr	s13, [r3, #-8]
 800608c:	ed13 7a01 	vldr	s14, [r3, #-4]
 8006090:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006094:	3c01      	subs	r4, #1
 8006096:	ee77 7a86 	vadd.f32	s15, s15, s12
 800609a:	f103 0310 	add.w	r3, r3, #16
 800609e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060a6:	d1eb      	bne.n	8006080 <arm_mean_f32+0x10>
 80060a8:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80060ac:	f011 0303 	ands.w	r3, r1, #3
 80060b0:	d00f      	beq.n	80060d2 <arm_mean_f32+0x62>
 80060b2:	ed90 7a00 	vldr	s14, [r0]
 80060b6:	3b01      	subs	r3, #1
 80060b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060bc:	d009      	beq.n	80060d2 <arm_mean_f32+0x62>
 80060be:	ed90 7a01 	vldr	s14, [r0, #4]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060c8:	bf1c      	itt	ne
 80060ca:	ed90 7a02 	vldrne	s14, [r0, #8]
 80060ce:	ee77 7a87 	vaddne.f32	s15, s15, s14
 80060d2:	ee07 1a10 	vmov	s14, r1
 80060d6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80060da:	bc30      	pop	{r4, r5}
 80060dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80060e0:	edc2 6a00 	vstr	s13, [r2]
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	00000000 	.word	0x00000000

080060ec <arm_rfft_32_fast_init_f32>:
 80060ec:	b178      	cbz	r0, 800610e <arm_rfft_32_fast_init_f32+0x22>
 80060ee:	b430      	push	{r4, r5}
 80060f0:	4908      	ldr	r1, [pc, #32]	@ (8006114 <arm_rfft_32_fast_init_f32+0x28>)
 80060f2:	4a09      	ldr	r2, [pc, #36]	@ (8006118 <arm_rfft_32_fast_init_f32+0x2c>)
 80060f4:	2310      	movs	r3, #16
 80060f6:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80060fa:	8003      	strh	r3, [r0, #0]
 80060fc:	2520      	movs	r5, #32
 80060fe:	2414      	movs	r4, #20
 8006100:	4b06      	ldr	r3, [pc, #24]	@ (800611c <arm_rfft_32_fast_init_f32+0x30>)
 8006102:	8205      	strh	r5, [r0, #16]
 8006104:	8184      	strh	r4, [r0, #12]
 8006106:	6143      	str	r3, [r0, #20]
 8006108:	bc30      	pop	{r4, r5}
 800610a:	2000      	movs	r0, #0
 800610c:	4770      	bx	lr
 800610e:	f04f 30ff 	mov.w	r0, #4294967295
 8006112:	4770      	bx	lr
 8006114:	0800ab60 	.word	0x0800ab60
 8006118:	0800f498 	.word	0x0800f498
 800611c:	08018218 	.word	0x08018218

08006120 <arm_rfft_64_fast_init_f32>:
 8006120:	b178      	cbz	r0, 8006142 <arm_rfft_64_fast_init_f32+0x22>
 8006122:	b430      	push	{r4, r5}
 8006124:	4908      	ldr	r1, [pc, #32]	@ (8006148 <arm_rfft_64_fast_init_f32+0x28>)
 8006126:	4a09      	ldr	r2, [pc, #36]	@ (800614c <arm_rfft_64_fast_init_f32+0x2c>)
 8006128:	2320      	movs	r3, #32
 800612a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800612e:	8003      	strh	r3, [r0, #0]
 8006130:	2540      	movs	r5, #64	@ 0x40
 8006132:	2430      	movs	r4, #48	@ 0x30
 8006134:	4b06      	ldr	r3, [pc, #24]	@ (8006150 <arm_rfft_64_fast_init_f32+0x30>)
 8006136:	8205      	strh	r5, [r0, #16]
 8006138:	8184      	strh	r4, [r0, #12]
 800613a:	6143      	str	r3, [r0, #20]
 800613c:	bc30      	pop	{r4, r5}
 800613e:	2000      	movs	r0, #0
 8006140:	4770      	bx	lr
 8006142:	f04f 30ff 	mov.w	r0, #4294967295
 8006146:	4770      	bx	lr
 8006148:	0800ccb8 	.word	0x0800ccb8
 800614c:	08013d18 	.word	0x08013d18
 8006150:	0801ca98 	.word	0x0801ca98

08006154 <arm_rfft_256_fast_init_f32>:
 8006154:	b180      	cbz	r0, 8006178 <arm_rfft_256_fast_init_f32+0x24>
 8006156:	b430      	push	{r4, r5}
 8006158:	4909      	ldr	r1, [pc, #36]	@ (8006180 <arm_rfft_256_fast_init_f32+0x2c>)
 800615a:	4a0a      	ldr	r2, [pc, #40]	@ (8006184 <arm_rfft_256_fast_init_f32+0x30>)
 800615c:	2380      	movs	r3, #128	@ 0x80
 800615e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006162:	8003      	strh	r3, [r0, #0]
 8006164:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8006168:	24d0      	movs	r4, #208	@ 0xd0
 800616a:	4b07      	ldr	r3, [pc, #28]	@ (8006188 <arm_rfft_256_fast_init_f32+0x34>)
 800616c:	8205      	strh	r5, [r0, #16]
 800616e:	8184      	strh	r4, [r0, #12]
 8006170:	6143      	str	r3, [r0, #20]
 8006172:	bc30      	pop	{r4, r5}
 8006174:	2000      	movs	r0, #0
 8006176:	4770      	bx	lr
 8006178:	f04f 30ff 	mov.w	r0, #4294967295
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	0800a9c0 	.word	0x0800a9c0
 8006184:	0800f098 	.word	0x0800f098
 8006188:	08017e18 	.word	0x08017e18

0800618c <arm_rfft_512_fast_init_f32>:
 800618c:	b190      	cbz	r0, 80061b4 <arm_rfft_512_fast_init_f32+0x28>
 800618e:	b430      	push	{r4, r5}
 8006190:	490a      	ldr	r1, [pc, #40]	@ (80061bc <arm_rfft_512_fast_init_f32+0x30>)
 8006192:	4a0b      	ldr	r2, [pc, #44]	@ (80061c0 <arm_rfft_512_fast_init_f32+0x34>)
 8006194:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006198:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800619c:	8003      	strh	r3, [r0, #0]
 800619e:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80061a2:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 80061a6:	4b07      	ldr	r3, [pc, #28]	@ (80061c4 <arm_rfft_512_fast_init_f32+0x38>)
 80061a8:	8205      	strh	r5, [r0, #16]
 80061aa:	8184      	strh	r4, [r0, #12]
 80061ac:	6143      	str	r3, [r0, #20]
 80061ae:	bc30      	pop	{r4, r5}
 80061b0:	2000      	movs	r0, #0
 80061b2:	4770      	bx	lr
 80061b4:	f04f 30ff 	mov.w	r0, #4294967295
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	0800c948 	.word	0x0800c948
 80061c0:	08013518 	.word	0x08013518
 80061c4:	0801c298 	.word	0x0801c298

080061c8 <arm_rfft_1024_fast_init_f32>:
 80061c8:	b190      	cbz	r0, 80061f0 <arm_rfft_1024_fast_init_f32+0x28>
 80061ca:	b430      	push	{r4, r5}
 80061cc:	490a      	ldr	r1, [pc, #40]	@ (80061f8 <arm_rfft_1024_fast_init_f32+0x30>)
 80061ce:	4a0b      	ldr	r2, [pc, #44]	@ (80061fc <arm_rfft_1024_fast_init_f32+0x34>)
 80061d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061d4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80061d8:	8003      	strh	r3, [r0, #0]
 80061da:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 80061de:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 80061e2:	4b07      	ldr	r3, [pc, #28]	@ (8006200 <arm_rfft_1024_fast_init_f32+0x38>)
 80061e4:	8205      	strh	r5, [r0, #16]
 80061e6:	8184      	strh	r4, [r0, #12]
 80061e8:	6143      	str	r3, [r0, #20]
 80061ea:	bc30      	pop	{r4, r5}
 80061ec:	2000      	movs	r0, #0
 80061ee:	4770      	bx	lr
 80061f0:	f04f 30ff 	mov.w	r0, #4294967295
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	0800cd18 	.word	0x0800cd18
 80061fc:	08013e18 	.word	0x08013e18
 8006200:	08014e18 	.word	0x08014e18

08006204 <arm_rfft_2048_fast_init_f32>:
 8006204:	b190      	cbz	r0, 800622c <arm_rfft_2048_fast_init_f32+0x28>
 8006206:	b430      	push	{r4, r5}
 8006208:	490a      	ldr	r1, [pc, #40]	@ (8006234 <arm_rfft_2048_fast_init_f32+0x30>)
 800620a:	4a0b      	ldr	r2, [pc, #44]	@ (8006238 <arm_rfft_2048_fast_init_f32+0x34>)
 800620c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006210:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006214:	8003      	strh	r3, [r0, #0]
 8006216:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800621a:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 800621e:	4b07      	ldr	r3, [pc, #28]	@ (800623c <arm_rfft_2048_fast_init_f32+0x38>)
 8006220:	8205      	strh	r5, [r0, #16]
 8006222:	8184      	strh	r4, [r0, #12]
 8006224:	6143      	str	r3, [r0, #20]
 8006226:	bc30      	pop	{r4, r5}
 8006228:	2000      	movs	r0, #0
 800622a:	4770      	bx	lr
 800622c:	f04f 30ff 	mov.w	r0, #4294967295
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	08009bb0 	.word	0x08009bb0
 8006238:	0800d098 	.word	0x0800d098
 800623c:	08015e18 	.word	0x08015e18

08006240 <arm_rfft_4096_fast_init_f32>:
 8006240:	b190      	cbz	r0, 8006268 <arm_rfft_4096_fast_init_f32+0x28>
 8006242:	b430      	push	{r4, r5}
 8006244:	490a      	ldr	r1, [pc, #40]	@ (8006270 <arm_rfft_4096_fast_init_f32+0x30>)
 8006246:	4a0b      	ldr	r2, [pc, #44]	@ (8006274 <arm_rfft_4096_fast_init_f32+0x34>)
 8006248:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800624c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006250:	8003      	strh	r3, [r0, #0]
 8006252:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8006256:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 800625a:	4b07      	ldr	r3, [pc, #28]	@ (8006278 <arm_rfft_4096_fast_init_f32+0x38>)
 800625c:	8205      	strh	r5, [r0, #16]
 800625e:	8184      	strh	r4, [r0, #12]
 8006260:	6143      	str	r3, [r0, #20]
 8006262:	bc30      	pop	{r4, r5}
 8006264:	2000      	movs	r0, #0
 8006266:	4770      	bx	lr
 8006268:	f04f 30ff 	mov.w	r0, #4294967295
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	0800ab88 	.word	0x0800ab88
 8006274:	0800f518 	.word	0x0800f518
 8006278:	08018298 	.word	0x08018298

0800627c <arm_rfft_fast_init_f32>:
 800627c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006280:	d01f      	beq.n	80062c2 <arm_rfft_fast_init_f32+0x46>
 8006282:	d90b      	bls.n	800629c <arm_rfft_fast_init_f32+0x20>
 8006284:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8006288:	d019      	beq.n	80062be <arm_rfft_fast_init_f32+0x42>
 800628a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800628e:	d012      	beq.n	80062b6 <arm_rfft_fast_init_f32+0x3a>
 8006290:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006294:	d00d      	beq.n	80062b2 <arm_rfft_fast_init_f32+0x36>
 8006296:	f04f 30ff 	mov.w	r0, #4294967295
 800629a:	4770      	bx	lr
 800629c:	2940      	cmp	r1, #64	@ 0x40
 800629e:	d00c      	beq.n	80062ba <arm_rfft_fast_init_f32+0x3e>
 80062a0:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80062a4:	d003      	beq.n	80062ae <arm_rfft_fast_init_f32+0x32>
 80062a6:	2920      	cmp	r1, #32
 80062a8:	d1f5      	bne.n	8006296 <arm_rfft_fast_init_f32+0x1a>
 80062aa:	4b07      	ldr	r3, [pc, #28]	@ (80062c8 <arm_rfft_fast_init_f32+0x4c>)
 80062ac:	4718      	bx	r3
 80062ae:	4b07      	ldr	r3, [pc, #28]	@ (80062cc <arm_rfft_fast_init_f32+0x50>)
 80062b0:	4718      	bx	r3
 80062b2:	4b07      	ldr	r3, [pc, #28]	@ (80062d0 <arm_rfft_fast_init_f32+0x54>)
 80062b4:	4718      	bx	r3
 80062b6:	4b07      	ldr	r3, [pc, #28]	@ (80062d4 <arm_rfft_fast_init_f32+0x58>)
 80062b8:	4718      	bx	r3
 80062ba:	4b07      	ldr	r3, [pc, #28]	@ (80062d8 <arm_rfft_fast_init_f32+0x5c>)
 80062bc:	e7f6      	b.n	80062ac <arm_rfft_fast_init_f32+0x30>
 80062be:	4b07      	ldr	r3, [pc, #28]	@ (80062dc <arm_rfft_fast_init_f32+0x60>)
 80062c0:	e7f4      	b.n	80062ac <arm_rfft_fast_init_f32+0x30>
 80062c2:	4b07      	ldr	r3, [pc, #28]	@ (80062e0 <arm_rfft_fast_init_f32+0x64>)
 80062c4:	e7f2      	b.n	80062ac <arm_rfft_fast_init_f32+0x30>
 80062c6:	bf00      	nop
 80062c8:	080060ed 	.word	0x080060ed
 80062cc:	08006155 	.word	0x08006155
 80062d0:	080061c9 	.word	0x080061c9
 80062d4:	08006241 	.word	0x08006241
 80062d8:	08006121 	.word	0x08006121
 80062dc:	08006205 	.word	0x08006205
 80062e0:	0800618d 	.word	0x0800618d

080062e4 <stage_rfft_f32>:
 80062e4:	b410      	push	{r4}
 80062e6:	edd1 7a00 	vldr	s15, [r1]
 80062ea:	ed91 7a01 	vldr	s14, [r1, #4]
 80062ee:	8804      	ldrh	r4, [r0, #0]
 80062f0:	6940      	ldr	r0, [r0, #20]
 80062f2:	ee37 7a07 	vadd.f32	s14, s14, s14
 80062f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80062fa:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 80062fe:	ee77 6a87 	vadd.f32	s13, s15, s14
 8006302:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006306:	3c01      	subs	r4, #1
 8006308:	ee26 7a84 	vmul.f32	s14, s13, s8
 800630c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006310:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8006314:	ed82 7a00 	vstr	s14, [r2]
 8006318:	edc2 7a01 	vstr	s15, [r2, #4]
 800631c:	3010      	adds	r0, #16
 800631e:	3210      	adds	r2, #16
 8006320:	3b08      	subs	r3, #8
 8006322:	3110      	adds	r1, #16
 8006324:	ed11 5a02 	vldr	s10, [r1, #-8]
 8006328:	ed93 7a02 	vldr	s14, [r3, #8]
 800632c:	ed50 6a02 	vldr	s13, [r0, #-8]
 8006330:	edd3 4a03 	vldr	s9, [r3, #12]
 8006334:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006338:	ed10 6a01 	vldr	s12, [r0, #-4]
 800633c:	ee77 5a45 	vsub.f32	s11, s14, s10
 8006340:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006344:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8006348:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800634c:	ee66 5a25 	vmul.f32	s11, s12, s11
 8006350:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8006354:	ee37 7a23 	vadd.f32	s14, s14, s7
 8006358:	ee66 6a85 	vmul.f32	s13, s13, s10
 800635c:	ee26 6a05 	vmul.f32	s12, s12, s10
 8006360:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006364:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006368:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800636c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006370:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006374:	3c01      	subs	r4, #1
 8006376:	ed02 7a02 	vstr	s14, [r2, #-8]
 800637a:	ed42 7a01 	vstr	s15, [r2, #-4]
 800637e:	f1a3 0308 	sub.w	r3, r3, #8
 8006382:	f101 0108 	add.w	r1, r1, #8
 8006386:	f100 0008 	add.w	r0, r0, #8
 800638a:	f102 0208 	add.w	r2, r2, #8
 800638e:	d1c9      	bne.n	8006324 <stage_rfft_f32+0x40>
 8006390:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop

08006398 <merge_rfft_f32>:
 8006398:	b410      	push	{r4}
 800639a:	edd1 7a00 	vldr	s15, [r1]
 800639e:	edd1 6a01 	vldr	s13, [r1, #4]
 80063a2:	8804      	ldrh	r4, [r0, #0]
 80063a4:	6940      	ldr	r0, [r0, #20]
 80063a6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80063aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80063ae:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 80063b2:	ee27 7a04 	vmul.f32	s14, s14, s8
 80063b6:	ee67 7a84 	vmul.f32	s15, s15, s8
 80063ba:	3c01      	subs	r4, #1
 80063bc:	ed82 7a00 	vstr	s14, [r2]
 80063c0:	edc2 7a01 	vstr	s15, [r2, #4]
 80063c4:	b3dc      	cbz	r4, 800643e <merge_rfft_f32+0xa6>
 80063c6:	00e3      	lsls	r3, r4, #3
 80063c8:	3b08      	subs	r3, #8
 80063ca:	440b      	add	r3, r1
 80063cc:	3010      	adds	r0, #16
 80063ce:	3210      	adds	r2, #16
 80063d0:	3110      	adds	r1, #16
 80063d2:	ed11 5a02 	vldr	s10, [r1, #-8]
 80063d6:	ed93 7a02 	vldr	s14, [r3, #8]
 80063da:	ed50 6a02 	vldr	s13, [r0, #-8]
 80063de:	edd3 4a03 	vldr	s9, [r3, #12]
 80063e2:	ed51 7a01 	vldr	s15, [r1, #-4]
 80063e6:	ed10 6a01 	vldr	s12, [r0, #-4]
 80063ea:	ee75 5a47 	vsub.f32	s11, s10, s14
 80063ee:	ee37 7a05 	vadd.f32	s14, s14, s10
 80063f2:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80063f6:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80063fa:	ee66 5a25 	vmul.f32	s11, s12, s11
 80063fe:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8006402:	ee37 7a63 	vsub.f32	s14, s14, s7
 8006406:	ee66 6a85 	vmul.f32	s13, s13, s10
 800640a:	ee26 6a05 	vmul.f32	s12, s12, s10
 800640e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006412:	ee37 7a46 	vsub.f32	s14, s14, s12
 8006416:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800641a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800641e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006422:	3c01      	subs	r4, #1
 8006424:	ed02 7a02 	vstr	s14, [r2, #-8]
 8006428:	ed42 7a01 	vstr	s15, [r2, #-4]
 800642c:	f1a3 0308 	sub.w	r3, r3, #8
 8006430:	f101 0108 	add.w	r1, r1, #8
 8006434:	f100 0008 	add.w	r0, r0, #8
 8006438:	f102 0208 	add.w	r2, r2, #8
 800643c:	d1c9      	bne.n	80063d2 <merge_rfft_f32+0x3a>
 800643e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006442:	4770      	bx	lr

08006444 <arm_rfft_fast_f32>:
 8006444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006448:	8a05      	ldrh	r5, [r0, #16]
 800644a:	086d      	lsrs	r5, r5, #1
 800644c:	8005      	strh	r5, [r0, #0]
 800644e:	4604      	mov	r4, r0
 8006450:	4616      	mov	r6, r2
 8006452:	461d      	mov	r5, r3
 8006454:	b14b      	cbz	r3, 800646a <arm_rfft_fast_f32+0x26>
 8006456:	f7ff ff9f 	bl	8006398 <merge_rfft_f32>
 800645a:	462a      	mov	r2, r5
 800645c:	4631      	mov	r1, r6
 800645e:	4620      	mov	r0, r4
 8006460:	2301      	movs	r3, #1
 8006462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006466:	f000 bb33 	b.w	8006ad0 <arm_cfft_f32>
 800646a:	460f      	mov	r7, r1
 800646c:	461a      	mov	r2, r3
 800646e:	2301      	movs	r3, #1
 8006470:	f000 fb2e 	bl	8006ad0 <arm_cfft_f32>
 8006474:	4632      	mov	r2, r6
 8006476:	4639      	mov	r1, r7
 8006478:	4620      	mov	r0, r4
 800647a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800647e:	f7ff bf31 	b.w	80062e4 <stage_rfft_f32>
 8006482:	bf00      	nop

08006484 <arm_cfft_radix8by2_f32>:
 8006484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006488:	ed2d 8b08 	vpush	{d8-d11}
 800648c:	4607      	mov	r7, r0
 800648e:	4608      	mov	r0, r1
 8006490:	f8b7 c000 	ldrh.w	ip, [r7]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800649a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800649e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80064a2:	f000 80b0 	beq.w	8006606 <arm_cfft_radix8by2_f32+0x182>
 80064a6:	008c      	lsls	r4, r1, #2
 80064a8:	3410      	adds	r4, #16
 80064aa:	f100 0310 	add.w	r3, r0, #16
 80064ae:	1906      	adds	r6, r0, r4
 80064b0:	3210      	adds	r2, #16
 80064b2:	4444      	add	r4, r8
 80064b4:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 80064b8:	f108 0510 	add.w	r5, r8, #16
 80064bc:	ed15 2a04 	vldr	s4, [r5, #-16]
 80064c0:	ed55 2a03 	vldr	s5, [r5, #-12]
 80064c4:	ed54 4a04 	vldr	s9, [r4, #-16]
 80064c8:	ed14 4a03 	vldr	s8, [r4, #-12]
 80064cc:	ed14 6a02 	vldr	s12, [r4, #-8]
 80064d0:	ed54 5a01 	vldr	s11, [r4, #-4]
 80064d4:	ed53 3a04 	vldr	s7, [r3, #-16]
 80064d8:	ed15 0a02 	vldr	s0, [r5, #-8]
 80064dc:	ed55 0a01 	vldr	s1, [r5, #-4]
 80064e0:	ed56 6a04 	vldr	s13, [r6, #-16]
 80064e4:	ed16 3a03 	vldr	s6, [r6, #-12]
 80064e8:	ed13 7a03 	vldr	s14, [r3, #-12]
 80064ec:	ed13 5a02 	vldr	s10, [r3, #-8]
 80064f0:	ed53 7a01 	vldr	s15, [r3, #-4]
 80064f4:	ed16 1a02 	vldr	s2, [r6, #-8]
 80064f8:	ed56 1a01 	vldr	s3, [r6, #-4]
 80064fc:	ee73 ba82 	vadd.f32	s23, s7, s4
 8006500:	ee37 ba22 	vadd.f32	s22, s14, s5
 8006504:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8006508:	ee33 9a04 	vadd.f32	s18, s6, s8
 800650c:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8006510:	ee75 aa00 	vadd.f32	s21, s10, s0
 8006514:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8006518:	ee71 8a06 	vadd.f32	s17, s2, s12
 800651c:	ed43 ba04 	vstr	s23, [r3, #-16]
 8006520:	ed03 ba03 	vstr	s22, [r3, #-12]
 8006524:	ed43 aa02 	vstr	s21, [r3, #-8]
 8006528:	ed03 aa01 	vstr	s20, [r3, #-4]
 800652c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8006530:	ed46 9a04 	vstr	s19, [r6, #-16]
 8006534:	ed06 9a03 	vstr	s18, [r6, #-12]
 8006538:	ed46 8a02 	vstr	s17, [r6, #-8]
 800653c:	ee37 7a62 	vsub.f32	s14, s14, s5
 8006540:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8006544:	ee34 4a43 	vsub.f32	s8, s8, s6
 8006548:	ed52 6a03 	vldr	s13, [r2, #-12]
 800654c:	ed12 3a04 	vldr	s6, [r2, #-16]
 8006550:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8006554:	ee27 8a26 	vmul.f32	s16, s14, s13
 8006558:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800655c:	ee23 2a83 	vmul.f32	s4, s7, s6
 8006560:	ee64 4a83 	vmul.f32	s9, s9, s6
 8006564:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8006568:	ee27 7a03 	vmul.f32	s14, s14, s6
 800656c:	ee64 6a26 	vmul.f32	s13, s8, s13
 8006570:	ee24 4a03 	vmul.f32	s8, s8, s6
 8006574:	ee37 7a63 	vsub.f32	s14, s14, s7
 8006578:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800657c:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8006580:	ee32 3a08 	vadd.f32	s6, s4, s16
 8006584:	ed05 7a03 	vstr	s14, [r5, #-12]
 8006588:	ed05 3a04 	vstr	s6, [r5, #-16]
 800658c:	ed04 4a04 	vstr	s8, [r4, #-16]
 8006590:	ed44 6a03 	vstr	s13, [r4, #-12]
 8006594:	ed12 7a01 	vldr	s14, [r2, #-4]
 8006598:	ee76 6a41 	vsub.f32	s13, s12, s2
 800659c:	ee35 5a40 	vsub.f32	s10, s10, s0
 80065a0:	ee35 6ae1 	vsub.f32	s12, s11, s3
 80065a4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80065a8:	ed52 5a02 	vldr	s11, [r2, #-8]
 80065ac:	ee67 3a87 	vmul.f32	s7, s15, s14
 80065b0:	ee66 4a87 	vmul.f32	s9, s13, s14
 80065b4:	ee25 4a25 	vmul.f32	s8, s10, s11
 80065b8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80065bc:	ee25 5a07 	vmul.f32	s10, s10, s14
 80065c0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80065c4:	ee26 7a07 	vmul.f32	s14, s12, s14
 80065c8:	ee26 6a25 	vmul.f32	s12, s12, s11
 80065cc:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80065d0:	ee74 5a23 	vadd.f32	s11, s8, s7
 80065d4:	ee34 6ac6 	vsub.f32	s12, s9, s12
 80065d8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80065dc:	3310      	adds	r3, #16
 80065de:	4563      	cmp	r3, ip
 80065e0:	ed45 5a02 	vstr	s11, [r5, #-8]
 80065e4:	f106 0610 	add.w	r6, r6, #16
 80065e8:	ed45 7a01 	vstr	s15, [r5, #-4]
 80065ec:	f102 0210 	add.w	r2, r2, #16
 80065f0:	ed04 6a02 	vstr	s12, [r4, #-8]
 80065f4:	ed04 7a01 	vstr	s14, [r4, #-4]
 80065f8:	f105 0510 	add.w	r5, r5, #16
 80065fc:	f104 0410 	add.w	r4, r4, #16
 8006600:	f47f af5c 	bne.w	80064bc <arm_cfft_radix8by2_f32+0x38>
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	b28c      	uxth	r4, r1
 8006608:	4621      	mov	r1, r4
 800660a:	2302      	movs	r3, #2
 800660c:	f000 fb3c 	bl	8006c88 <arm_radix8_butterfly_f32>
 8006610:	ecbd 8b08 	vpop	{d8-d11}
 8006614:	4621      	mov	r1, r4
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	4640      	mov	r0, r8
 800661a:	2302      	movs	r3, #2
 800661c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006620:	f000 bb32 	b.w	8006c88 <arm_radix8_butterfly_f32>

08006624 <arm_cfft_radix8by4_f32>:
 8006624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006628:	ed2d 8b0a 	vpush	{d8-d12}
 800662c:	b08d      	sub	sp, #52	@ 0x34
 800662e:	460d      	mov	r5, r1
 8006630:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006632:	8801      	ldrh	r1, [r0, #0]
 8006634:	6842      	ldr	r2, [r0, #4]
 8006636:	900a      	str	r0, [sp, #40]	@ 0x28
 8006638:	0849      	lsrs	r1, r1, #1
 800663a:	008b      	lsls	r3, r1, #2
 800663c:	18ee      	adds	r6, r5, r3
 800663e:	18f0      	adds	r0, r6, r3
 8006640:	edd0 5a00 	vldr	s11, [r0]
 8006644:	edd5 7a00 	vldr	s15, [r5]
 8006648:	ed96 7a00 	vldr	s14, [r6]
 800664c:	edd0 3a01 	vldr	s7, [r0, #4]
 8006650:	ed96 4a01 	vldr	s8, [r6, #4]
 8006654:	ed95 5a01 	vldr	s10, [r5, #4]
 8006658:	9008      	str	r0, [sp, #32]
 800665a:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800665e:	18c7      	adds	r7, r0, r3
 8006660:	edd7 4a00 	vldr	s9, [r7]
 8006664:	ed97 3a01 	vldr	s6, [r7, #4]
 8006668:	9701      	str	r7, [sp, #4]
 800666a:	ee77 6a06 	vadd.f32	s13, s14, s12
 800666e:	462c      	mov	r4, r5
 8006670:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006674:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006678:	ee16 ca90 	vmov	ip, s13
 800667c:	f844 cb08 	str.w	ip, [r4], #8
 8006680:	ee75 6a23 	vadd.f32	s13, s10, s7
 8006684:	edd6 5a01 	vldr	s11, [r6, #4]
 8006688:	edd7 2a01 	vldr	s5, [r7, #4]
 800668c:	9404      	str	r4, [sp, #16]
 800668e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8006692:	ee74 3a27 	vadd.f32	s7, s8, s15
 8006696:	ee36 6a47 	vsub.f32	s12, s12, s14
 800669a:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800669e:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80066a2:	0849      	lsrs	r1, r1, #1
 80066a4:	f102 0e08 	add.w	lr, r2, #8
 80066a8:	ee76 6ac4 	vsub.f32	s13, s13, s8
 80066ac:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80066b0:	9109      	str	r1, [sp, #36]	@ 0x24
 80066b2:	ee35 4a47 	vsub.f32	s8, s10, s14
 80066b6:	f1a1 0902 	sub.w	r9, r1, #2
 80066ba:	f8cd e00c 	str.w	lr, [sp, #12]
 80066be:	4631      	mov	r1, r6
 80066c0:	ee13 ea90 	vmov	lr, s7
 80066c4:	ee36 6a64 	vsub.f32	s12, s12, s9
 80066c8:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80066cc:	4604      	mov	r4, r0
 80066ce:	edc5 5a01 	vstr	s11, [r5, #4]
 80066d2:	ee37 7a05 	vadd.f32	s14, s14, s10
 80066d6:	f841 eb08 	str.w	lr, [r1], #8
 80066da:	ee34 5a24 	vadd.f32	s10, s8, s9
 80066de:	ee16 ea10 	vmov	lr, s12
 80066e2:	ed86 5a01 	vstr	s10, [r6, #4]
 80066e6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80066ea:	f844 eb08 	str.w	lr, [r4], #8
 80066ee:	ee77 7a83 	vadd.f32	s15, s15, s6
 80066f2:	edc0 6a01 	vstr	s13, [r0, #4]
 80066f6:	9405      	str	r4, [sp, #20]
 80066f8:	4604      	mov	r4, r0
 80066fa:	ee17 0a90 	vmov	r0, s15
 80066fe:	9106      	str	r1, [sp, #24]
 8006700:	ee37 7a64 	vsub.f32	s14, s14, s9
 8006704:	f102 0110 	add.w	r1, r2, #16
 8006708:	46bc      	mov	ip, r7
 800670a:	9100      	str	r1, [sp, #0]
 800670c:	f847 0b08 	str.w	r0, [r7], #8
 8006710:	f102 0118 	add.w	r1, r2, #24
 8006714:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8006718:	9102      	str	r1, [sp, #8]
 800671a:	ed8c 7a01 	vstr	s14, [ip, #4]
 800671e:	9007      	str	r0, [sp, #28]
 8006720:	f000 8134 	beq.w	800698c <arm_cfft_radix8by4_f32+0x368>
 8006724:	f102 0920 	add.w	r9, r2, #32
 8006728:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 800672c:	9a01      	ldr	r2, [sp, #4]
 800672e:	f8dd a000 	ldr.w	sl, [sp]
 8006732:	3b0c      	subs	r3, #12
 8006734:	4683      	mov	fp, r0
 8006736:	4463      	add	r3, ip
 8006738:	f105 0e10 	add.w	lr, r5, #16
 800673c:	f1a4 010c 	sub.w	r1, r4, #12
 8006740:	f104 0510 	add.w	r5, r4, #16
 8006744:	f1a6 0c0c 	sub.w	ip, r6, #12
 8006748:	f1a2 040c 	sub.w	r4, r2, #12
 800674c:	f106 0010 	add.w	r0, r6, #16
 8006750:	3210      	adds	r2, #16
 8006752:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8006756:	ed55 5a02 	vldr	s11, [r5, #-8]
 800675a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800675e:	ed52 1a02 	vldr	s3, [r2, #-8]
 8006762:	ed55 6a01 	vldr	s13, [r5, #-4]
 8006766:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800676a:	ed12 1a01 	vldr	s2, [r2, #-4]
 800676e:	ed10 8a01 	vldr	s16, [r0, #-4]
 8006772:	ee35 4a25 	vadd.f32	s8, s10, s11
 8006776:	ee30 6a26 	vadd.f32	s12, s0, s13
 800677a:	ee37 7a84 	vadd.f32	s14, s15, s8
 800677e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8006782:	ee37 7a21 	vadd.f32	s14, s14, s3
 8006786:	ee75 5a65 	vsub.f32	s11, s10, s11
 800678a:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800678e:	ed10 7a01 	vldr	s14, [r0, #-4]
 8006792:	ed52 6a01 	vldr	s13, [r2, #-4]
 8006796:	ee36 7a07 	vadd.f32	s14, s12, s14
 800679a:	ee78 aa25 	vadd.f32	s21, s16, s11
 800679e:	ee37 7a26 	vadd.f32	s14, s14, s13
 80067a2:	ee70 3a67 	vsub.f32	s7, s0, s15
 80067a6:	ed0e 7a01 	vstr	s14, [lr, #-4]
 80067aa:	ed94 7a02 	vldr	s14, [r4, #8]
 80067ae:	ed9c 2a02 	vldr	s4, [ip, #8]
 80067b2:	ed91 ba02 	vldr	s22, [r1, #8]
 80067b6:	edd3 9a02 	vldr	s19, [r3, #8]
 80067ba:	edd4 2a01 	vldr	s5, [r4, #4]
 80067be:	ed9c 9a01 	vldr	s18, [ip, #4]
 80067c2:	ed93 5a01 	vldr	s10, [r3, #4]
 80067c6:	edd1 0a01 	vldr	s1, [r1, #4]
 80067ca:	ee72 6a07 	vadd.f32	s13, s4, s14
 80067ce:	ee32 2a47 	vsub.f32	s4, s4, s14
 80067d2:	ee7b 8a26 	vadd.f32	s17, s22, s13
 80067d6:	ee79 4a22 	vadd.f32	s9, s18, s5
 80067da:	ee38 7aa9 	vadd.f32	s14, s17, s19
 80067de:	ee79 2a62 	vsub.f32	s5, s18, s5
 80067e2:	ed8c 7a02 	vstr	s14, [ip, #8]
 80067e6:	ed91 7a01 	vldr	s14, [r1, #4]
 80067ea:	edd3 8a01 	vldr	s17, [r3, #4]
 80067ee:	ee34 7a87 	vadd.f32	s14, s9, s14
 80067f2:	ee3b 3a69 	vsub.f32	s6, s22, s19
 80067f6:	ee37 7a28 	vadd.f32	s14, s14, s17
 80067fa:	ee32 9a60 	vsub.f32	s18, s4, s1
 80067fe:	ed8c 7a01 	vstr	s14, [ip, #4]
 8006802:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8006806:	ed1a aa02 	vldr	s20, [sl, #-8]
 800680a:	ee73 8a22 	vadd.f32	s17, s6, s5
 800680e:	ee39 9a05 	vadd.f32	s18, s18, s10
 8006812:	ee7a aac1 	vsub.f32	s21, s21, s2
 8006816:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800681a:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800681e:	ee69 ba07 	vmul.f32	s23, s18, s14
 8006822:	ee6a aa87 	vmul.f32	s21, s21, s14
 8006826:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800682a:	ee63 ca87 	vmul.f32	s25, s7, s14
 800682e:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8006832:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8006836:	ee68 8a87 	vmul.f32	s17, s17, s14
 800683a:	ee73 3aea 	vsub.f32	s7, s7, s21
 800683e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8006842:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8006846:	ee3b aaca 	vsub.f32	s20, s23, s20
 800684a:	ee34 4a67 	vsub.f32	s8, s8, s15
 800684e:	ee76 6acb 	vsub.f32	s13, s13, s22
 8006852:	ee36 6a48 	vsub.f32	s12, s12, s16
 8006856:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800685a:	ed00 7a02 	vstr	s14, [r0, #-8]
 800685e:	ed40 3a01 	vstr	s7, [r0, #-4]
 8006862:	edc1 8a01 	vstr	s17, [r1, #4]
 8006866:	ed81 aa02 	vstr	s20, [r1, #8]
 800686a:	ed59 3a04 	vldr	s7, [r9, #-16]
 800686e:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8006872:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8006876:	ed59 6a03 	vldr	s13, [r9, #-12]
 800687a:	ee34 4a61 	vsub.f32	s8, s8, s3
 800687e:	ee36 6a41 	vsub.f32	s12, s12, s2
 8006882:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8006886:	ee66 9a26 	vmul.f32	s19, s12, s13
 800688a:	ee24 9a23 	vmul.f32	s18, s8, s7
 800688e:	ee26 6a23 	vmul.f32	s12, s12, s7
 8006892:	ee24 4a26 	vmul.f32	s8, s8, s13
 8006896:	ee27 7a26 	vmul.f32	s14, s14, s13
 800689a:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800689e:	ee64 4aa3 	vmul.f32	s9, s9, s7
 80068a2:	ee36 6a44 	vsub.f32	s12, s12, s8
 80068a6:	ee37 7a64 	vsub.f32	s14, s14, s9
 80068aa:	ee38 4ae6 	vsub.f32	s8, s17, s13
 80068ae:	ee79 3a29 	vadd.f32	s7, s18, s19
 80068b2:	ee75 6a60 	vsub.f32	s13, s10, s1
 80068b6:	ee75 5ac8 	vsub.f32	s11, s11, s16
 80068ba:	ee77 7a80 	vadd.f32	s15, s15, s0
 80068be:	ed45 3a02 	vstr	s7, [r5, #-8]
 80068c2:	ed05 6a01 	vstr	s12, [r5, #-4]
 80068c6:	ed84 7a01 	vstr	s14, [r4, #4]
 80068ca:	ed84 4a02 	vstr	s8, [r4, #8]
 80068ce:	ee35 6a81 	vadd.f32	s12, s11, s2
 80068d2:	ee36 7ac2 	vsub.f32	s14, s13, s4
 80068d6:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 80068da:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 80068de:	ee33 3a62 	vsub.f32	s6, s6, s5
 80068e2:	ee77 7ae1 	vsub.f32	s15, s15, s3
 80068e6:	ee67 2a26 	vmul.f32	s5, s14, s13
 80068ea:	ee67 4aa6 	vmul.f32	s9, s15, s13
 80068ee:	ee26 5a25 	vmul.f32	s10, s12, s11
 80068f2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80068f6:	ee26 6a26 	vmul.f32	s12, s12, s13
 80068fa:	ee27 7a25 	vmul.f32	s14, s14, s11
 80068fe:	ee63 6a26 	vmul.f32	s13, s6, s13
 8006902:	ee23 3a25 	vmul.f32	s6, s6, s11
 8006906:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800690a:	ee75 5a24 	vadd.f32	s11, s10, s9
 800690e:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8006912:	ee36 7a87 	vadd.f32	s14, s13, s14
 8006916:	f1bb 0b01 	subs.w	fp, fp, #1
 800691a:	ed42 5a02 	vstr	s11, [r2, #-8]
 800691e:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006922:	f10e 0e08 	add.w	lr, lr, #8
 8006926:	ed83 3a02 	vstr	s6, [r3, #8]
 800692a:	ed83 7a01 	vstr	s14, [r3, #4]
 800692e:	f1ac 0c08 	sub.w	ip, ip, #8
 8006932:	f10a 0a08 	add.w	sl, sl, #8
 8006936:	f100 0008 	add.w	r0, r0, #8
 800693a:	f1a1 0108 	sub.w	r1, r1, #8
 800693e:	f109 0910 	add.w	r9, r9, #16
 8006942:	f105 0508 	add.w	r5, r5, #8
 8006946:	f1a4 0408 	sub.w	r4, r4, #8
 800694a:	f108 0818 	add.w	r8, r8, #24
 800694e:	f102 0208 	add.w	r2, r2, #8
 8006952:	f1a3 0308 	sub.w	r3, r3, #8
 8006956:	f47f aefc 	bne.w	8006752 <arm_cfft_radix8by4_f32+0x12e>
 800695a:	9907      	ldr	r1, [sp, #28]
 800695c:	9800      	ldr	r0, [sp, #0]
 800695e:	00cb      	lsls	r3, r1, #3
 8006960:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8006964:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8006968:	9100      	str	r1, [sp, #0]
 800696a:	9904      	ldr	r1, [sp, #16]
 800696c:	4419      	add	r1, r3
 800696e:	9104      	str	r1, [sp, #16]
 8006970:	9903      	ldr	r1, [sp, #12]
 8006972:	4419      	add	r1, r3
 8006974:	9103      	str	r1, [sp, #12]
 8006976:	9906      	ldr	r1, [sp, #24]
 8006978:	4419      	add	r1, r3
 800697a:	9106      	str	r1, [sp, #24]
 800697c:	9905      	ldr	r1, [sp, #20]
 800697e:	441f      	add	r7, r3
 8006980:	4419      	add	r1, r3
 8006982:	9b02      	ldr	r3, [sp, #8]
 8006984:	9105      	str	r1, [sp, #20]
 8006986:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800698a:	9302      	str	r3, [sp, #8]
 800698c:	9904      	ldr	r1, [sp, #16]
 800698e:	9805      	ldr	r0, [sp, #20]
 8006990:	ed91 4a00 	vldr	s8, [r1]
 8006994:	edd0 6a00 	vldr	s13, [r0]
 8006998:	9b06      	ldr	r3, [sp, #24]
 800699a:	ed97 3a00 	vldr	s6, [r7]
 800699e:	edd3 7a00 	vldr	s15, [r3]
 80069a2:	edd0 4a01 	vldr	s9, [r0, #4]
 80069a6:	edd1 3a01 	vldr	s7, [r1, #4]
 80069aa:	ed97 2a01 	vldr	s4, [r7, #4]
 80069ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80069b2:	9a03      	ldr	r2, [sp, #12]
 80069b4:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 80069b8:	ee34 6a26 	vadd.f32	s12, s8, s13
 80069bc:	ee73 5aa4 	vadd.f32	s11, s7, s9
 80069c0:	ee37 5a86 	vadd.f32	s10, s15, s12
 80069c4:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80069c8:	ee35 5a03 	vadd.f32	s10, s10, s6
 80069cc:	ee74 6a66 	vsub.f32	s13, s8, s13
 80069d0:	ed81 5a00 	vstr	s10, [r1]
 80069d4:	ed93 5a01 	vldr	s10, [r3, #4]
 80069d8:	edd7 4a01 	vldr	s9, [r7, #4]
 80069dc:	ee35 5a85 	vadd.f32	s10, s11, s10
 80069e0:	ee37 4a26 	vadd.f32	s8, s14, s13
 80069e4:	ee35 5a24 	vadd.f32	s10, s10, s9
 80069e8:	ee73 4ae7 	vsub.f32	s9, s7, s15
 80069ec:	ed81 5a01 	vstr	s10, [r1, #4]
 80069f0:	edd2 1a00 	vldr	s3, [r2]
 80069f4:	edd2 2a01 	vldr	s5, [r2, #4]
 80069f8:	ee34 5a83 	vadd.f32	s10, s9, s6
 80069fc:	ee34 4a42 	vsub.f32	s8, s8, s4
 8006a00:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006a04:	ee64 4a21 	vmul.f32	s9, s8, s3
 8006a08:	ee24 4a22 	vmul.f32	s8, s8, s5
 8006a0c:	ee65 2a22 	vmul.f32	s5, s10, s5
 8006a10:	ee25 5a21 	vmul.f32	s10, s10, s3
 8006a14:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8006a18:	ee35 5a44 	vsub.f32	s10, s10, s8
 8006a1c:	edc3 2a00 	vstr	s5, [r3]
 8006a20:	ed83 5a01 	vstr	s10, [r3, #4]
 8006a24:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8006a28:	9b00      	ldr	r3, [sp, #0]
 8006a2a:	ee36 6a43 	vsub.f32	s12, s12, s6
 8006a2e:	ed93 4a01 	vldr	s8, [r3, #4]
 8006a32:	ed93 5a00 	vldr	s10, [r3]
 8006a36:	9b02      	ldr	r3, [sp, #8]
 8006a38:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8006a3c:	ee66 4a05 	vmul.f32	s9, s12, s10
 8006a40:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006a44:	ee26 6a04 	vmul.f32	s12, s12, s8
 8006a48:	ee65 5a84 	vmul.f32	s11, s11, s8
 8006a4c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8006a50:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8006a54:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8006a58:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006a5c:	ed80 6a01 	vstr	s12, [r0, #4]
 8006a60:	edc0 5a00 	vstr	s11, [r0]
 8006a64:	edd3 5a01 	vldr	s11, [r3, #4]
 8006a68:	edd3 6a00 	vldr	s13, [r3]
 8006a6c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8006a70:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8006a74:	ee27 6a26 	vmul.f32	s12, s14, s13
 8006a78:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006a7c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006a80:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006a84:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006a88:	ee76 7a27 	vadd.f32	s15, s12, s15
 8006a8c:	ed87 7a01 	vstr	s14, [r7, #4]
 8006a90:	edc7 7a00 	vstr	s15, [r7]
 8006a94:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 8006a98:	4621      	mov	r1, r4
 8006a9a:	686a      	ldr	r2, [r5, #4]
 8006a9c:	2304      	movs	r3, #4
 8006a9e:	f000 f8f3 	bl	8006c88 <arm_radix8_butterfly_f32>
 8006aa2:	4630      	mov	r0, r6
 8006aa4:	4621      	mov	r1, r4
 8006aa6:	686a      	ldr	r2, [r5, #4]
 8006aa8:	2304      	movs	r3, #4
 8006aaa:	f000 f8ed 	bl	8006c88 <arm_radix8_butterfly_f32>
 8006aae:	9808      	ldr	r0, [sp, #32]
 8006ab0:	686a      	ldr	r2, [r5, #4]
 8006ab2:	4621      	mov	r1, r4
 8006ab4:	2304      	movs	r3, #4
 8006ab6:	f000 f8e7 	bl	8006c88 <arm_radix8_butterfly_f32>
 8006aba:	686a      	ldr	r2, [r5, #4]
 8006abc:	9801      	ldr	r0, [sp, #4]
 8006abe:	4621      	mov	r1, r4
 8006ac0:	2304      	movs	r3, #4
 8006ac2:	b00d      	add	sp, #52	@ 0x34
 8006ac4:	ecbd 8b0a 	vpop	{d8-d12}
 8006ac8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006acc:	f000 b8dc 	b.w	8006c88 <arm_radix8_butterfly_f32>

08006ad0 <arm_cfft_f32>:
 8006ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ad4:	2a01      	cmp	r2, #1
 8006ad6:	4606      	mov	r6, r0
 8006ad8:	4617      	mov	r7, r2
 8006ada:	460c      	mov	r4, r1
 8006adc:	4698      	mov	r8, r3
 8006ade:	8805      	ldrh	r5, [r0, #0]
 8006ae0:	d056      	beq.n	8006b90 <arm_cfft_f32+0xc0>
 8006ae2:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8006ae6:	d063      	beq.n	8006bb0 <arm_cfft_f32+0xe0>
 8006ae8:	d916      	bls.n	8006b18 <arm_cfft_f32+0x48>
 8006aea:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8006aee:	d01a      	beq.n	8006b26 <arm_cfft_f32+0x56>
 8006af0:	d947      	bls.n	8006b82 <arm_cfft_f32+0xb2>
 8006af2:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8006af6:	d05b      	beq.n	8006bb0 <arm_cfft_f32+0xe0>
 8006af8:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8006afc:	d105      	bne.n	8006b0a <arm_cfft_f32+0x3a>
 8006afe:	2301      	movs	r3, #1
 8006b00:	6872      	ldr	r2, [r6, #4]
 8006b02:	4629      	mov	r1, r5
 8006b04:	4620      	mov	r0, r4
 8006b06:	f000 f8bf 	bl	8006c88 <arm_radix8_butterfly_f32>
 8006b0a:	f1b8 0f00 	cmp.w	r8, #0
 8006b0e:	d111      	bne.n	8006b34 <arm_cfft_f32+0x64>
 8006b10:	2f01      	cmp	r7, #1
 8006b12:	d016      	beq.n	8006b42 <arm_cfft_f32+0x72>
 8006b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b18:	2d20      	cmp	r5, #32
 8006b1a:	d049      	beq.n	8006bb0 <arm_cfft_f32+0xe0>
 8006b1c:	d935      	bls.n	8006b8a <arm_cfft_f32+0xba>
 8006b1e:	2d40      	cmp	r5, #64	@ 0x40
 8006b20:	d0ed      	beq.n	8006afe <arm_cfft_f32+0x2e>
 8006b22:	2d80      	cmp	r5, #128	@ 0x80
 8006b24:	d1f1      	bne.n	8006b0a <arm_cfft_f32+0x3a>
 8006b26:	4621      	mov	r1, r4
 8006b28:	4630      	mov	r0, r6
 8006b2a:	f7ff fcab 	bl	8006484 <arm_cfft_radix8by2_f32>
 8006b2e:	f1b8 0f00 	cmp.w	r8, #0
 8006b32:	d0ed      	beq.n	8006b10 <arm_cfft_f32+0x40>
 8006b34:	68b2      	ldr	r2, [r6, #8]
 8006b36:	89b1      	ldrh	r1, [r6, #12]
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f000 f841 	bl	8006bc0 <arm_bitreversal_32>
 8006b3e:	2f01      	cmp	r7, #1
 8006b40:	d1e8      	bne.n	8006b14 <arm_cfft_f32+0x44>
 8006b42:	ee07 5a90 	vmov	s15, r5
 8006b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b4e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006b52:	2d00      	cmp	r5, #0
 8006b54:	d0de      	beq.n	8006b14 <arm_cfft_f32+0x44>
 8006b56:	f104 0108 	add.w	r1, r4, #8
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	429d      	cmp	r5, r3
 8006b60:	f101 0108 	add.w	r1, r1, #8
 8006b64:	ed11 7a04 	vldr	s14, [r1, #-16]
 8006b68:	ed51 7a03 	vldr	s15, [r1, #-12]
 8006b6c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006b70:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006b74:	ed01 7a04 	vstr	s14, [r1, #-16]
 8006b78:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006b7c:	d1ee      	bne.n	8006b5c <arm_cfft_f32+0x8c>
 8006b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b82:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8006b86:	d0ba      	beq.n	8006afe <arm_cfft_f32+0x2e>
 8006b88:	e7bf      	b.n	8006b0a <arm_cfft_f32+0x3a>
 8006b8a:	2d10      	cmp	r5, #16
 8006b8c:	d0cb      	beq.n	8006b26 <arm_cfft_f32+0x56>
 8006b8e:	e7bc      	b.n	8006b0a <arm_cfft_f32+0x3a>
 8006b90:	b19d      	cbz	r5, 8006bba <arm_cfft_f32+0xea>
 8006b92:	f101 030c 	add.w	r3, r1, #12
 8006b96:	2200      	movs	r2, #0
 8006b98:	ed53 7a02 	vldr	s15, [r3, #-8]
 8006b9c:	3201      	adds	r2, #1
 8006b9e:	eef1 7a67 	vneg.f32	s15, s15
 8006ba2:	4295      	cmp	r5, r2
 8006ba4:	ed43 7a02 	vstr	s15, [r3, #-8]
 8006ba8:	f103 0308 	add.w	r3, r3, #8
 8006bac:	d1f4      	bne.n	8006b98 <arm_cfft_f32+0xc8>
 8006bae:	e798      	b.n	8006ae2 <arm_cfft_f32+0x12>
 8006bb0:	4621      	mov	r1, r4
 8006bb2:	4630      	mov	r0, r6
 8006bb4:	f7ff fd36 	bl	8006624 <arm_cfft_radix8by4_f32>
 8006bb8:	e7a7      	b.n	8006b0a <arm_cfft_f32+0x3a>
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d0aa      	beq.n	8006b14 <arm_cfft_f32+0x44>
 8006bbe:	e7b9      	b.n	8006b34 <arm_cfft_f32+0x64>

08006bc0 <arm_bitreversal_32>:
 8006bc0:	b1e9      	cbz	r1, 8006bfe <arm_bitreversal_32+0x3e>
 8006bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bc4:	2500      	movs	r5, #0
 8006bc6:	f102 0e02 	add.w	lr, r2, #2
 8006bca:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8006bce:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8006bd2:	08a4      	lsrs	r4, r4, #2
 8006bd4:	089b      	lsrs	r3, r3, #2
 8006bd6:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8006bda:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8006bde:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8006be2:	00a6      	lsls	r6, r4, #2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8006bea:	3304      	adds	r3, #4
 8006bec:	1d34      	adds	r4, r6, #4
 8006bee:	3502      	adds	r5, #2
 8006bf0:	58c6      	ldr	r6, [r0, r3]
 8006bf2:	5907      	ldr	r7, [r0, r4]
 8006bf4:	50c7      	str	r7, [r0, r3]
 8006bf6:	428d      	cmp	r5, r1
 8006bf8:	5106      	str	r6, [r0, r4]
 8006bfa:	d3e6      	bcc.n	8006bca <arm_bitreversal_32+0xa>
 8006bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bfe:	4770      	bx	lr

08006c00 <arm_offset_f32>:
 8006c00:	b470      	push	{r4, r5, r6}
 8006c02:	0896      	lsrs	r6, r2, #2
 8006c04:	d025      	beq.n	8006c52 <arm_offset_f32+0x52>
 8006c06:	f100 0410 	add.w	r4, r0, #16
 8006c0a:	f101 0310 	add.w	r3, r1, #16
 8006c0e:	4635      	mov	r5, r6
 8006c10:	ed54 7a04 	vldr	s15, [r4, #-16]
 8006c14:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006c18:	3d01      	subs	r5, #1
 8006c1a:	ed43 7a04 	vstr	s15, [r3, #-16]
 8006c1e:	ed54 7a03 	vldr	s15, [r4, #-12]
 8006c22:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006c26:	f104 0410 	add.w	r4, r4, #16
 8006c2a:	ed43 7a03 	vstr	s15, [r3, #-12]
 8006c2e:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 8006c32:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006c36:	f103 0310 	add.w	r3, r3, #16
 8006c3a:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 8006c3e:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 8006c42:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006c46:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8006c4a:	d1e1      	bne.n	8006c10 <arm_offset_f32+0x10>
 8006c4c:	0136      	lsls	r6, r6, #4
 8006c4e:	4430      	add	r0, r6
 8006c50:	4431      	add	r1, r6
 8006c52:	f012 0203 	ands.w	r2, r2, #3
 8006c56:	d015      	beq.n	8006c84 <arm_offset_f32+0x84>
 8006c58:	edd0 7a00 	vldr	s15, [r0]
 8006c5c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006c60:	3a01      	subs	r2, #1
 8006c62:	edc1 7a00 	vstr	s15, [r1]
 8006c66:	d00d      	beq.n	8006c84 <arm_offset_f32+0x84>
 8006c68:	edd0 7a01 	vldr	s15, [r0, #4]
 8006c6c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006c70:	2a01      	cmp	r2, #1
 8006c72:	edc1 7a01 	vstr	s15, [r1, #4]
 8006c76:	d005      	beq.n	8006c84 <arm_offset_f32+0x84>
 8006c78:	edd0 7a02 	vldr	s15, [r0, #8]
 8006c7c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006c80:	ed81 0a02 	vstr	s0, [r1, #8]
 8006c84:	bc70      	pop	{r4, r5, r6}
 8006c86:	4770      	bx	lr

08006c88 <arm_radix8_butterfly_f32>:
 8006c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c8c:	ed2d 8b10 	vpush	{d8-d15}
 8006c90:	b095      	sub	sp, #84	@ 0x54
 8006c92:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 8006c96:	4603      	mov	r3, r0
 8006c98:	3304      	adds	r3, #4
 8006c9a:	ed9f bab9 	vldr	s22, [pc, #740]	@ 8006f80 <arm_radix8_butterfly_f32+0x2f8>
 8006c9e:	9012      	str	r0, [sp, #72]	@ 0x48
 8006ca0:	468b      	mov	fp, r1
 8006ca2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ca4:	4689      	mov	r9, r1
 8006ca6:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8006caa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006cac:	960f      	str	r6, [sp, #60]	@ 0x3c
 8006cae:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8006cb2:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8006cb6:	eb03 0508 	add.w	r5, r3, r8
 8006cba:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8006cbe:	eb05 040e 	add.w	r4, r5, lr
 8006cc2:	0137      	lsls	r7, r6, #4
 8006cc4:	eba6 030a 	sub.w	r3, r6, sl
 8006cc8:	eb04 000e 	add.w	r0, r4, lr
 8006ccc:	44b2      	add	sl, r6
 8006cce:	1d3a      	adds	r2, r7, #4
 8006cd0:	9702      	str	r7, [sp, #8]
 8006cd2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006cd6:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8006cda:	ebae 0c06 	sub.w	ip, lr, r6
 8006cde:	9703      	str	r7, [sp, #12]
 8006ce0:	eb03 0708 	add.w	r7, r3, r8
 8006ce4:	9701      	str	r7, [sp, #4]
 8006ce6:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8006cea:	9706      	str	r7, [sp, #24]
 8006cec:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8006cee:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8006cf2:	f10e 0104 	add.w	r1, lr, #4
 8006cf6:	4439      	add	r1, r7
 8006cf8:	443a      	add	r2, r7
 8006cfa:	0137      	lsls	r7, r6, #4
 8006cfc:	00f6      	lsls	r6, r6, #3
 8006cfe:	9704      	str	r7, [sp, #16]
 8006d00:	9605      	str	r6, [sp, #20]
 8006d02:	9f01      	ldr	r7, [sp, #4]
 8006d04:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006d06:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8006d0a:	f04f 0c00 	mov.w	ip, #0
 8006d0e:	edd4 6a00 	vldr	s13, [r4]
 8006d12:	edd7 1a00 	vldr	s3, [r7]
 8006d16:	ed16 aa01 	vldr	s20, [r6, #-4]
 8006d1a:	edd5 5a00 	vldr	s11, [r5]
 8006d1e:	ed52 9a01 	vldr	s19, [r2, #-4]
 8006d22:	ed90 6a00 	vldr	s12, [r0]
 8006d26:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006d2a:	ed93 3a00 	vldr	s6, [r3]
 8006d2e:	ee39 0a86 	vadd.f32	s0, s19, s12
 8006d32:	ee33 2a21 	vadd.f32	s4, s6, s3
 8006d36:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8006d3a:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8006d3e:	ee35 7a02 	vadd.f32	s14, s10, s4
 8006d42:	ee34 4a80 	vadd.f32	s8, s9, s0
 8006d46:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d4a:	ee74 6a07 	vadd.f32	s13, s8, s14
 8006d4e:	ee34 4a47 	vsub.f32	s8, s8, s14
 8006d52:	ed46 6a01 	vstr	s13, [r6, #-4]
 8006d56:	ed85 4a00 	vstr	s8, [r5]
 8006d5a:	edd1 6a00 	vldr	s13, [r1]
 8006d5e:	ed94 9a01 	vldr	s18, [r4, #4]
 8006d62:	edd3 2a01 	vldr	s5, [r3, #4]
 8006d66:	edd7 8a01 	vldr	s17, [r7, #4]
 8006d6a:	edd6 0a00 	vldr	s1, [r6]
 8006d6e:	edd5 3a01 	vldr	s7, [r5, #4]
 8006d72:	ed90 8a01 	vldr	s16, [r0, #4]
 8006d76:	ed92 7a00 	vldr	s14, [r2]
 8006d7a:	ee33 3a61 	vsub.f32	s6, s6, s3
 8006d7e:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8006d82:	ee72 aae8 	vsub.f32	s21, s5, s17
 8006d86:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8006d8a:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8006d8e:	ee77 7a83 	vadd.f32	s15, s15, s6
 8006d92:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8006d96:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8006d9a:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8006d9e:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8006da2:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8006da6:	ee77 0a08 	vadd.f32	s1, s14, s16
 8006daa:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8006dae:	ee37 7a48 	vsub.f32	s14, s14, s16
 8006db2:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8006db6:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8006dba:	ee76 6a89 	vadd.f32	s13, s13, s18
 8006dbe:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8006dc2:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006dc6:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8006dca:	ee35 5a42 	vsub.f32	s10, s10, s4
 8006dce:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8006dd2:	ee33 2a20 	vadd.f32	s4, s6, s1
 8006dd6:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8006dda:	ee33 3a60 	vsub.f32	s6, s6, s1
 8006dde:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8006de2:	ee77 0a01 	vadd.f32	s1, s14, s2
 8006de6:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8006dea:	ee37 7a41 	vsub.f32	s14, s14, s2
 8006dee:	ee73 1a84 	vadd.f32	s3, s7, s8
 8006df2:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8006df6:	ee76 3a27 	vadd.f32	s7, s12, s15
 8006dfa:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006dfe:	ee32 8a00 	vadd.f32	s16, s4, s0
 8006e02:	ee33 1a45 	vsub.f32	s2, s6, s10
 8006e06:	ee32 2a40 	vsub.f32	s4, s4, s0
 8006e0a:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006e0e:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8006e12:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8006e16:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8006e1a:	ee34 6a67 	vsub.f32	s12, s8, s15
 8006e1e:	ee75 4a87 	vadd.f32	s9, s11, s14
 8006e22:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8006e26:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8006e2a:	ee77 7a84 	vadd.f32	s15, s15, s8
 8006e2e:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8006e32:	44dc      	add	ip, fp
 8006e34:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8006e38:	45e1      	cmp	r9, ip
 8006e3a:	ed86 8a00 	vstr	s16, [r6]
 8006e3e:	ed85 2a01 	vstr	s4, [r5, #4]
 8006e42:	4456      	add	r6, sl
 8006e44:	ed02 0a01 	vstr	s0, [r2, #-4]
 8006e48:	4455      	add	r5, sl
 8006e4a:	edc0 6a00 	vstr	s13, [r0]
 8006e4e:	ed82 1a00 	vstr	s2, [r2]
 8006e52:	ed80 5a01 	vstr	s10, [r0, #4]
 8006e56:	4452      	add	r2, sl
 8006e58:	ed01 3a01 	vstr	s6, [r1, #-4]
 8006e5c:	4450      	add	r0, sl
 8006e5e:	edc7 2a00 	vstr	s5, [r7]
 8006e62:	edc4 4a00 	vstr	s9, [r4]
 8006e66:	ed83 7a00 	vstr	s14, [r3]
 8006e6a:	edc1 5a00 	vstr	s11, [r1]
 8006e6e:	edc7 3a01 	vstr	s7, [r7, #4]
 8006e72:	4451      	add	r1, sl
 8006e74:	ed84 6a01 	vstr	s12, [r4, #4]
 8006e78:	4457      	add	r7, sl
 8006e7a:	edc3 7a01 	vstr	s15, [r3, #4]
 8006e7e:	4454      	add	r4, sl
 8006e80:	4453      	add	r3, sl
 8006e82:	f63f af44 	bhi.w	8006d0e <arm_radix8_butterfly_f32+0x86>
 8006e86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e88:	2b07      	cmp	r3, #7
 8006e8a:	f240 81b7 	bls.w	80071fc <arm_radix8_butterfly_f32+0x574>
 8006e8e:	9b06      	ldr	r3, [sp, #24]
 8006e90:	9903      	ldr	r1, [sp, #12]
 8006e92:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006e94:	9e05      	ldr	r6, [sp, #20]
 8006e96:	9a04      	ldr	r2, [sp, #16]
 8006e98:	f103 0c08 	add.w	ip, r3, #8
 8006e9c:	9b02      	ldr	r3, [sp, #8]
 8006e9e:	3108      	adds	r1, #8
 8006ea0:	f108 0808 	add.w	r8, r8, #8
 8006ea4:	1841      	adds	r1, r0, r1
 8006ea6:	3608      	adds	r6, #8
 8006ea8:	330c      	adds	r3, #12
 8006eaa:	4604      	mov	r4, r0
 8006eac:	4444      	add	r4, r8
 8006eae:	18c3      	adds	r3, r0, r3
 8006eb0:	9109      	str	r1, [sp, #36]	@ 0x24
 8006eb2:	1981      	adds	r1, r0, r6
 8006eb4:	f10e 0e08 	add.w	lr, lr, #8
 8006eb8:	3208      	adds	r2, #8
 8006eba:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006ebc:	9107      	str	r1, [sp, #28]
 8006ebe:	4604      	mov	r4, r0
 8006ec0:	4601      	mov	r1, r0
 8006ec2:	9304      	str	r3, [sp, #16]
 8006ec4:	f100 030c 	add.w	r3, r0, #12
 8006ec8:	4474      	add	r4, lr
 8006eca:	f04f 0801 	mov.w	r8, #1
 8006ece:	1882      	adds	r2, r0, r2
 8006ed0:	4461      	add	r1, ip
 8006ed2:	9305      	str	r3, [sp, #20]
 8006ed4:	464b      	mov	r3, r9
 8006ed6:	940a      	str	r4, [sp, #40]	@ 0x28
 8006ed8:	46c1      	mov	r9, r8
 8006eda:	9208      	str	r2, [sp, #32]
 8006edc:	46d8      	mov	r8, fp
 8006ede:	9106      	str	r1, [sp, #24]
 8006ee0:	f04f 0e00 	mov.w	lr, #0
 8006ee4:	469b      	mov	fp, r3
 8006ee6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006ee8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006eea:	449e      	add	lr, r3
 8006eec:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8006ef0:	441a      	add	r2, r3
 8006ef2:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ef4:	441a      	add	r2, r3
 8006ef6:	18d4      	adds	r4, r2, r3
 8006ef8:	18e5      	adds	r5, r4, r3
 8006efa:	18ee      	adds	r6, r5, r3
 8006efc:	18f7      	adds	r7, r6, r3
 8006efe:	eb07 0c03 	add.w	ip, r7, r3
 8006f02:	920d      	str	r2, [sp, #52]	@ 0x34
 8006f04:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8006f08:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8006f0c:	910c      	str	r1, [sp, #48]	@ 0x30
 8006f0e:	4419      	add	r1, r3
 8006f10:	9103      	str	r1, [sp, #12]
 8006f12:	4419      	add	r1, r3
 8006f14:	18ca      	adds	r2, r1, r3
 8006f16:	9202      	str	r2, [sp, #8]
 8006f18:	441a      	add	r2, r3
 8006f1a:	18d0      	adds	r0, r2, r3
 8006f1c:	ed92 ea01 	vldr	s28, [r2, #4]
 8006f20:	9a02      	ldr	r2, [sp, #8]
 8006f22:	edd4 7a00 	vldr	s15, [r4]
 8006f26:	edd2 da01 	vldr	s27, [r2, #4]
 8006f2a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006f2c:	ed91 da01 	vldr	s26, [r1, #4]
 8006f30:	ed92 ca01 	vldr	s24, [r2, #4]
 8006f34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006f36:	9903      	ldr	r1, [sp, #12]
 8006f38:	edcd 7a03 	vstr	s15, [sp, #12]
 8006f3c:	edd2 7a00 	vldr	s15, [r2]
 8006f40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f42:	edcd 7a02 	vstr	s15, [sp, #8]
 8006f46:	edd2 7a00 	vldr	s15, [r2]
 8006f4a:	edd0 ea01 	vldr	s29, [r0, #4]
 8006f4e:	edd1 ca01 	vldr	s25, [r1, #4]
 8006f52:	eddc ba00 	vldr	s23, [ip]
 8006f56:	edd7 aa00 	vldr	s21, [r7]
 8006f5a:	ed96 aa00 	vldr	s20, [r6]
 8006f5e:	edd5 9a00 	vldr	s19, [r5]
 8006f62:	edcd 7a01 	vstr	s15, [sp, #4]
 8006f66:	4403      	add	r3, r0
 8006f68:	ed93 fa01 	vldr	s30, [r3, #4]
 8006f6c:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8006f70:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8006f74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006f78:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8006f7c:	46cc      	mov	ip, r9
 8006f7e:	e001      	b.n	8006f84 <arm_radix8_butterfly_f32+0x2fc>
 8006f80:	3f3504f3 	.word	0x3f3504f3
 8006f84:	ed91 6a00 	vldr	s12, [r1]
 8006f88:	ed93 5a00 	vldr	s10, [r3]
 8006f8c:	edd0 fa00 	vldr	s31, [r0]
 8006f90:	edd4 7a00 	vldr	s15, [r4]
 8006f94:	ed95 7a00 	vldr	s14, [r5]
 8006f98:	ed56 3a01 	vldr	s7, [r6, #-4]
 8006f9c:	ed17 3a01 	vldr	s6, [r7, #-4]
 8006fa0:	ed92 2a00 	vldr	s4, [r2]
 8006fa4:	ed96 0a00 	vldr	s0, [r6]
 8006fa8:	ee33 8a85 	vadd.f32	s16, s7, s10
 8006fac:	ee32 1a06 	vadd.f32	s2, s4, s12
 8006fb0:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8006fb4:	ee77 4a87 	vadd.f32	s9, s15, s14
 8006fb8:	ee78 1a04 	vadd.f32	s3, s16, s8
 8006fbc:	ee71 6a24 	vadd.f32	s13, s2, s9
 8006fc0:	ee32 2a46 	vsub.f32	s4, s4, s12
 8006fc4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8006fc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006fcc:	ed06 6a01 	vstr	s12, [r6, #-4]
 8006fd0:	edd4 8a01 	vldr	s17, [r4, #4]
 8006fd4:	ed92 9a01 	vldr	s18, [r2, #4]
 8006fd8:	edd7 0a00 	vldr	s1, [r7]
 8006fdc:	edd1 2a01 	vldr	s5, [r1, #4]
 8006fe0:	ed95 7a01 	vldr	s14, [r5, #4]
 8006fe4:	ed93 6a01 	vldr	s12, [r3, #4]
 8006fe8:	edd0 5a01 	vldr	s11, [r0, #4]
 8006fec:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8006ff0:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8006ff4:	ee39 5a62 	vsub.f32	s10, s18, s5
 8006ff8:	ee78 fac7 	vsub.f32	s31, s17, s14
 8006ffc:	ee38 4a44 	vsub.f32	s8, s16, s8
 8007000:	ee38 7a87 	vadd.f32	s14, s17, s14
 8007004:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8007008:	ee79 2a22 	vadd.f32	s5, s18, s5
 800700c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8007010:	ee72 7a67 	vsub.f32	s15, s4, s15
 8007014:	ee30 2a06 	vadd.f32	s4, s0, s12
 8007018:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800701c:	ee71 4a64 	vsub.f32	s9, s2, s9
 8007020:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8007024:	ee32 1a08 	vadd.f32	s2, s4, s16
 8007028:	ee72 fa87 	vadd.f32	s31, s5, s14
 800702c:	ee32 2a48 	vsub.f32	s4, s4, s16
 8007030:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8007034:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8007038:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800703c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8007040:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8007044:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8007048:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800704c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8007050:	ee30 6a46 	vsub.f32	s12, s0, s12
 8007054:	ee74 0a22 	vadd.f32	s1, s8, s5
 8007058:	ee36 0a28 	vadd.f32	s0, s12, s17
 800705c:	ee74 2a62 	vsub.f32	s5, s8, s5
 8007060:	ee36 6a68 	vsub.f32	s12, s12, s17
 8007064:	ee32 4a64 	vsub.f32	s8, s4, s9
 8007068:	ee73 8a09 	vadd.f32	s17, s6, s18
 800706c:	ee74 4a82 	vadd.f32	s9, s9, s4
 8007070:	ee33 9a49 	vsub.f32	s18, s6, s18
 8007074:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8007078:	ee35 3a85 	vadd.f32	s6, s11, s10
 800707c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8007080:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8007084:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8007088:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800708c:	ee30 7a68 	vsub.f32	s14, s0, s17
 8007090:	ee35 8a03 	vadd.f32	s16, s10, s6
 8007094:	ee38 0a80 	vadd.f32	s0, s17, s0
 8007098:	ee73 3a82 	vadd.f32	s7, s7, s4
 800709c:	ee69 8aa1 	vmul.f32	s17, s19, s3
 80070a0:	ed9d 2a01 	vldr	s4, [sp, #4]
 80070a4:	eddd 1a02 	vldr	s3, [sp, #8]
 80070a8:	ee35 5a43 	vsub.f32	s10, s10, s6
 80070ac:	ee71 fa2f 	vadd.f32	s31, s2, s31
 80070b0:	ee37 3aa5 	vadd.f32	s6, s15, s11
 80070b4:	ee21 1aa0 	vmul.f32	s2, s3, s1
 80070b8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80070bc:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 80070c0:	ee76 5a49 	vsub.f32	s11, s12, s18
 80070c4:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 80070c8:	ee39 6a06 	vadd.f32	s12, s18, s12
 80070cc:	ee2c 9a84 	vmul.f32	s18, s25, s8
 80070d0:	ee21 4a84 	vmul.f32	s8, s3, s8
 80070d4:	ee6c 1a07 	vmul.f32	s3, s24, s14
 80070d8:	ee22 7a07 	vmul.f32	s14, s4, s14
 80070dc:	ee22 2a08 	vmul.f32	s4, s4, s16
 80070e0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80070e4:	ee78 6ae6 	vsub.f32	s13, s17, s13
 80070e8:	ee31 1a09 	vadd.f32	s2, s2, s18
 80070ec:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 80070f0:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 80070f4:	ee74 0a60 	vsub.f32	s1, s8, s1
 80070f8:	ee37 7a48 	vsub.f32	s14, s14, s16
 80070fc:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8007100:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8007104:	ee72 1a21 	vadd.f32	s3, s4, s3
 8007108:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800710c:	ee38 2a89 	vadd.f32	s4, s17, s18
 8007110:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8007114:	ee38 8a04 	vadd.f32	s16, s16, s8
 8007118:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800711c:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8007120:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8007124:	eddd 5a03 	vldr	s11, [sp, #12]
 8007128:	edc6 fa00 	vstr	s31, [r6]
 800712c:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8007130:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8007134:	ee30 0a45 	vsub.f32	s0, s0, s10
 8007138:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800713c:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8007140:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8007144:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8007148:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800714c:	ee25 6a86 	vmul.f32	s12, s11, s12
 8007150:	ee74 4a89 	vadd.f32	s9, s9, s18
 8007154:	ee34 3a43 	vsub.f32	s6, s8, s6
 8007158:	ee78 8a85 	vadd.f32	s17, s17, s10
 800715c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8007160:	44c4      	add	ip, r8
 8007162:	45e3      	cmp	fp, ip
 8007164:	edc3 3a00 	vstr	s7, [r3]
 8007168:	edc3 6a01 	vstr	s13, [r3, #4]
 800716c:	4456      	add	r6, sl
 800716e:	ed07 1a01 	vstr	s2, [r7, #-4]
 8007172:	edc7 0a00 	vstr	s1, [r7]
 8007176:	4453      	add	r3, sl
 8007178:	ed80 2a00 	vstr	s4, [r0]
 800717c:	edc0 2a01 	vstr	s5, [r0, #4]
 8007180:	4457      	add	r7, sl
 8007182:	edc2 1a00 	vstr	s3, [r2]
 8007186:	ed82 7a01 	vstr	s14, [r2, #4]
 800718a:	4450      	add	r0, sl
 800718c:	ed85 8a00 	vstr	s16, [r5]
 8007190:	ed85 0a01 	vstr	s0, [r5, #4]
 8007194:	4452      	add	r2, sl
 8007196:	edc1 4a00 	vstr	s9, [r1]
 800719a:	4455      	add	r5, sl
 800719c:	ed81 3a01 	vstr	s6, [r1, #4]
 80071a0:	edc4 8a00 	vstr	s17, [r4]
 80071a4:	ed84 6a01 	vstr	s12, [r4, #4]
 80071a8:	4451      	add	r1, sl
 80071aa:	4454      	add	r4, sl
 80071ac:	f63f aeea 	bhi.w	8006f84 <arm_radix8_butterfly_f32+0x2fc>
 80071b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071b2:	3308      	adds	r3, #8
 80071b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071b8:	3308      	adds	r3, #8
 80071ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80071bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071be:	3308      	adds	r3, #8
 80071c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80071c2:	9b08      	ldr	r3, [sp, #32]
 80071c4:	3308      	adds	r3, #8
 80071c6:	9308      	str	r3, [sp, #32]
 80071c8:	9b07      	ldr	r3, [sp, #28]
 80071ca:	3308      	adds	r3, #8
 80071cc:	9307      	str	r3, [sp, #28]
 80071ce:	9b06      	ldr	r3, [sp, #24]
 80071d0:	3308      	adds	r3, #8
 80071d2:	9306      	str	r3, [sp, #24]
 80071d4:	9b05      	ldr	r3, [sp, #20]
 80071d6:	3308      	adds	r3, #8
 80071d8:	9305      	str	r3, [sp, #20]
 80071da:	9b04      	ldr	r3, [sp, #16]
 80071dc:	3308      	adds	r3, #8
 80071de:	9304      	str	r3, [sp, #16]
 80071e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071e2:	f109 0901 	add.w	r9, r9, #1
 80071e6:	454b      	cmp	r3, r9
 80071e8:	f47f ae7d 	bne.w	8006ee6 <arm_radix8_butterfly_f32+0x25e>
 80071ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80071ee:	00db      	lsls	r3, r3, #3
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	46d9      	mov	r9, fp
 80071f4:	9310      	str	r3, [sp, #64]	@ 0x40
 80071f6:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 80071fa:	e554      	b.n	8006ca6 <arm_radix8_butterfly_f32+0x1e>
 80071fc:	b015      	add	sp, #84	@ 0x54
 80071fe:	ecbd 8b10 	vpop	{d8-d15}
 8007202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007206:	bf00      	nop

08007208 <__cvt>:
 8007208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800720c:	ec57 6b10 	vmov	r6, r7, d0
 8007210:	2f00      	cmp	r7, #0
 8007212:	460c      	mov	r4, r1
 8007214:	4619      	mov	r1, r3
 8007216:	463b      	mov	r3, r7
 8007218:	bfbb      	ittet	lt
 800721a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800721e:	461f      	movlt	r7, r3
 8007220:	2300      	movge	r3, #0
 8007222:	232d      	movlt	r3, #45	@ 0x2d
 8007224:	700b      	strb	r3, [r1, #0]
 8007226:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007228:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800722c:	4691      	mov	r9, r2
 800722e:	f023 0820 	bic.w	r8, r3, #32
 8007232:	bfbc      	itt	lt
 8007234:	4632      	movlt	r2, r6
 8007236:	4616      	movlt	r6, r2
 8007238:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800723c:	d005      	beq.n	800724a <__cvt+0x42>
 800723e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007242:	d100      	bne.n	8007246 <__cvt+0x3e>
 8007244:	3401      	adds	r4, #1
 8007246:	2102      	movs	r1, #2
 8007248:	e000      	b.n	800724c <__cvt+0x44>
 800724a:	2103      	movs	r1, #3
 800724c:	ab03      	add	r3, sp, #12
 800724e:	9301      	str	r3, [sp, #4]
 8007250:	ab02      	add	r3, sp, #8
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	ec47 6b10 	vmov	d0, r6, r7
 8007258:	4653      	mov	r3, sl
 800725a:	4622      	mov	r2, r4
 800725c:	f000 fe38 	bl	8007ed0 <_dtoa_r>
 8007260:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007264:	4605      	mov	r5, r0
 8007266:	d119      	bne.n	800729c <__cvt+0x94>
 8007268:	f019 0f01 	tst.w	r9, #1
 800726c:	d00e      	beq.n	800728c <__cvt+0x84>
 800726e:	eb00 0904 	add.w	r9, r0, r4
 8007272:	2200      	movs	r2, #0
 8007274:	2300      	movs	r3, #0
 8007276:	4630      	mov	r0, r6
 8007278:	4639      	mov	r1, r7
 800727a:	f7f9 fc25 	bl	8000ac8 <__aeabi_dcmpeq>
 800727e:	b108      	cbz	r0, 8007284 <__cvt+0x7c>
 8007280:	f8cd 900c 	str.w	r9, [sp, #12]
 8007284:	2230      	movs	r2, #48	@ 0x30
 8007286:	9b03      	ldr	r3, [sp, #12]
 8007288:	454b      	cmp	r3, r9
 800728a:	d31e      	bcc.n	80072ca <__cvt+0xc2>
 800728c:	9b03      	ldr	r3, [sp, #12]
 800728e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007290:	1b5b      	subs	r3, r3, r5
 8007292:	4628      	mov	r0, r5
 8007294:	6013      	str	r3, [r2, #0]
 8007296:	b004      	add	sp, #16
 8007298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800729c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80072a0:	eb00 0904 	add.w	r9, r0, r4
 80072a4:	d1e5      	bne.n	8007272 <__cvt+0x6a>
 80072a6:	7803      	ldrb	r3, [r0, #0]
 80072a8:	2b30      	cmp	r3, #48	@ 0x30
 80072aa:	d10a      	bne.n	80072c2 <__cvt+0xba>
 80072ac:	2200      	movs	r2, #0
 80072ae:	2300      	movs	r3, #0
 80072b0:	4630      	mov	r0, r6
 80072b2:	4639      	mov	r1, r7
 80072b4:	f7f9 fc08 	bl	8000ac8 <__aeabi_dcmpeq>
 80072b8:	b918      	cbnz	r0, 80072c2 <__cvt+0xba>
 80072ba:	f1c4 0401 	rsb	r4, r4, #1
 80072be:	f8ca 4000 	str.w	r4, [sl]
 80072c2:	f8da 3000 	ldr.w	r3, [sl]
 80072c6:	4499      	add	r9, r3
 80072c8:	e7d3      	b.n	8007272 <__cvt+0x6a>
 80072ca:	1c59      	adds	r1, r3, #1
 80072cc:	9103      	str	r1, [sp, #12]
 80072ce:	701a      	strb	r2, [r3, #0]
 80072d0:	e7d9      	b.n	8007286 <__cvt+0x7e>

080072d2 <__exponent>:
 80072d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072d4:	2900      	cmp	r1, #0
 80072d6:	bfba      	itte	lt
 80072d8:	4249      	neglt	r1, r1
 80072da:	232d      	movlt	r3, #45	@ 0x2d
 80072dc:	232b      	movge	r3, #43	@ 0x2b
 80072de:	2909      	cmp	r1, #9
 80072e0:	7002      	strb	r2, [r0, #0]
 80072e2:	7043      	strb	r3, [r0, #1]
 80072e4:	dd29      	ble.n	800733a <__exponent+0x68>
 80072e6:	f10d 0307 	add.w	r3, sp, #7
 80072ea:	461d      	mov	r5, r3
 80072ec:	270a      	movs	r7, #10
 80072ee:	461a      	mov	r2, r3
 80072f0:	fbb1 f6f7 	udiv	r6, r1, r7
 80072f4:	fb07 1416 	mls	r4, r7, r6, r1
 80072f8:	3430      	adds	r4, #48	@ 0x30
 80072fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80072fe:	460c      	mov	r4, r1
 8007300:	2c63      	cmp	r4, #99	@ 0x63
 8007302:	f103 33ff 	add.w	r3, r3, #4294967295
 8007306:	4631      	mov	r1, r6
 8007308:	dcf1      	bgt.n	80072ee <__exponent+0x1c>
 800730a:	3130      	adds	r1, #48	@ 0x30
 800730c:	1e94      	subs	r4, r2, #2
 800730e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007312:	1c41      	adds	r1, r0, #1
 8007314:	4623      	mov	r3, r4
 8007316:	42ab      	cmp	r3, r5
 8007318:	d30a      	bcc.n	8007330 <__exponent+0x5e>
 800731a:	f10d 0309 	add.w	r3, sp, #9
 800731e:	1a9b      	subs	r3, r3, r2
 8007320:	42ac      	cmp	r4, r5
 8007322:	bf88      	it	hi
 8007324:	2300      	movhi	r3, #0
 8007326:	3302      	adds	r3, #2
 8007328:	4403      	add	r3, r0
 800732a:	1a18      	subs	r0, r3, r0
 800732c:	b003      	add	sp, #12
 800732e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007330:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007334:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007338:	e7ed      	b.n	8007316 <__exponent+0x44>
 800733a:	2330      	movs	r3, #48	@ 0x30
 800733c:	3130      	adds	r1, #48	@ 0x30
 800733e:	7083      	strb	r3, [r0, #2]
 8007340:	70c1      	strb	r1, [r0, #3]
 8007342:	1d03      	adds	r3, r0, #4
 8007344:	e7f1      	b.n	800732a <__exponent+0x58>
	...

08007348 <_printf_float>:
 8007348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800734c:	b08d      	sub	sp, #52	@ 0x34
 800734e:	460c      	mov	r4, r1
 8007350:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007354:	4616      	mov	r6, r2
 8007356:	461f      	mov	r7, r3
 8007358:	4605      	mov	r5, r0
 800735a:	f000 fcb9 	bl	8007cd0 <_localeconv_r>
 800735e:	6803      	ldr	r3, [r0, #0]
 8007360:	9304      	str	r3, [sp, #16]
 8007362:	4618      	mov	r0, r3
 8007364:	f7f8 ff84 	bl	8000270 <strlen>
 8007368:	2300      	movs	r3, #0
 800736a:	930a      	str	r3, [sp, #40]	@ 0x28
 800736c:	f8d8 3000 	ldr.w	r3, [r8]
 8007370:	9005      	str	r0, [sp, #20]
 8007372:	3307      	adds	r3, #7
 8007374:	f023 0307 	bic.w	r3, r3, #7
 8007378:	f103 0208 	add.w	r2, r3, #8
 800737c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007380:	f8d4 b000 	ldr.w	fp, [r4]
 8007384:	f8c8 2000 	str.w	r2, [r8]
 8007388:	e9d3 8900 	ldrd	r8, r9, [r3]
 800738c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007390:	9307      	str	r3, [sp, #28]
 8007392:	f8cd 8018 	str.w	r8, [sp, #24]
 8007396:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800739a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800739e:	4b9c      	ldr	r3, [pc, #624]	@ (8007610 <_printf_float+0x2c8>)
 80073a0:	f04f 32ff 	mov.w	r2, #4294967295
 80073a4:	f7f9 fbc2 	bl	8000b2c <__aeabi_dcmpun>
 80073a8:	bb70      	cbnz	r0, 8007408 <_printf_float+0xc0>
 80073aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073ae:	4b98      	ldr	r3, [pc, #608]	@ (8007610 <_printf_float+0x2c8>)
 80073b0:	f04f 32ff 	mov.w	r2, #4294967295
 80073b4:	f7f9 fb9c 	bl	8000af0 <__aeabi_dcmple>
 80073b8:	bb30      	cbnz	r0, 8007408 <_printf_float+0xc0>
 80073ba:	2200      	movs	r2, #0
 80073bc:	2300      	movs	r3, #0
 80073be:	4640      	mov	r0, r8
 80073c0:	4649      	mov	r1, r9
 80073c2:	f7f9 fb8b 	bl	8000adc <__aeabi_dcmplt>
 80073c6:	b110      	cbz	r0, 80073ce <_printf_float+0x86>
 80073c8:	232d      	movs	r3, #45	@ 0x2d
 80073ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073ce:	4a91      	ldr	r2, [pc, #580]	@ (8007614 <_printf_float+0x2cc>)
 80073d0:	4b91      	ldr	r3, [pc, #580]	@ (8007618 <_printf_float+0x2d0>)
 80073d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80073d6:	bf8c      	ite	hi
 80073d8:	4690      	movhi	r8, r2
 80073da:	4698      	movls	r8, r3
 80073dc:	2303      	movs	r3, #3
 80073de:	6123      	str	r3, [r4, #16]
 80073e0:	f02b 0304 	bic.w	r3, fp, #4
 80073e4:	6023      	str	r3, [r4, #0]
 80073e6:	f04f 0900 	mov.w	r9, #0
 80073ea:	9700      	str	r7, [sp, #0]
 80073ec:	4633      	mov	r3, r6
 80073ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 80073f0:	4621      	mov	r1, r4
 80073f2:	4628      	mov	r0, r5
 80073f4:	f000 f9d2 	bl	800779c <_printf_common>
 80073f8:	3001      	adds	r0, #1
 80073fa:	f040 808d 	bne.w	8007518 <_printf_float+0x1d0>
 80073fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007402:	b00d      	add	sp, #52	@ 0x34
 8007404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007408:	4642      	mov	r2, r8
 800740a:	464b      	mov	r3, r9
 800740c:	4640      	mov	r0, r8
 800740e:	4649      	mov	r1, r9
 8007410:	f7f9 fb8c 	bl	8000b2c <__aeabi_dcmpun>
 8007414:	b140      	cbz	r0, 8007428 <_printf_float+0xe0>
 8007416:	464b      	mov	r3, r9
 8007418:	2b00      	cmp	r3, #0
 800741a:	bfbc      	itt	lt
 800741c:	232d      	movlt	r3, #45	@ 0x2d
 800741e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007422:	4a7e      	ldr	r2, [pc, #504]	@ (800761c <_printf_float+0x2d4>)
 8007424:	4b7e      	ldr	r3, [pc, #504]	@ (8007620 <_printf_float+0x2d8>)
 8007426:	e7d4      	b.n	80073d2 <_printf_float+0x8a>
 8007428:	6863      	ldr	r3, [r4, #4]
 800742a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800742e:	9206      	str	r2, [sp, #24]
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	d13b      	bne.n	80074ac <_printf_float+0x164>
 8007434:	2306      	movs	r3, #6
 8007436:	6063      	str	r3, [r4, #4]
 8007438:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800743c:	2300      	movs	r3, #0
 800743e:	6022      	str	r2, [r4, #0]
 8007440:	9303      	str	r3, [sp, #12]
 8007442:	ab0a      	add	r3, sp, #40	@ 0x28
 8007444:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007448:	ab09      	add	r3, sp, #36	@ 0x24
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	6861      	ldr	r1, [r4, #4]
 800744e:	ec49 8b10 	vmov	d0, r8, r9
 8007452:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007456:	4628      	mov	r0, r5
 8007458:	f7ff fed6 	bl	8007208 <__cvt>
 800745c:	9b06      	ldr	r3, [sp, #24]
 800745e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007460:	2b47      	cmp	r3, #71	@ 0x47
 8007462:	4680      	mov	r8, r0
 8007464:	d129      	bne.n	80074ba <_printf_float+0x172>
 8007466:	1cc8      	adds	r0, r1, #3
 8007468:	db02      	blt.n	8007470 <_printf_float+0x128>
 800746a:	6863      	ldr	r3, [r4, #4]
 800746c:	4299      	cmp	r1, r3
 800746e:	dd41      	ble.n	80074f4 <_printf_float+0x1ac>
 8007470:	f1aa 0a02 	sub.w	sl, sl, #2
 8007474:	fa5f fa8a 	uxtb.w	sl, sl
 8007478:	3901      	subs	r1, #1
 800747a:	4652      	mov	r2, sl
 800747c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007480:	9109      	str	r1, [sp, #36]	@ 0x24
 8007482:	f7ff ff26 	bl	80072d2 <__exponent>
 8007486:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007488:	1813      	adds	r3, r2, r0
 800748a:	2a01      	cmp	r2, #1
 800748c:	4681      	mov	r9, r0
 800748e:	6123      	str	r3, [r4, #16]
 8007490:	dc02      	bgt.n	8007498 <_printf_float+0x150>
 8007492:	6822      	ldr	r2, [r4, #0]
 8007494:	07d2      	lsls	r2, r2, #31
 8007496:	d501      	bpl.n	800749c <_printf_float+0x154>
 8007498:	3301      	adds	r3, #1
 800749a:	6123      	str	r3, [r4, #16]
 800749c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d0a2      	beq.n	80073ea <_printf_float+0xa2>
 80074a4:	232d      	movs	r3, #45	@ 0x2d
 80074a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074aa:	e79e      	b.n	80073ea <_printf_float+0xa2>
 80074ac:	9a06      	ldr	r2, [sp, #24]
 80074ae:	2a47      	cmp	r2, #71	@ 0x47
 80074b0:	d1c2      	bne.n	8007438 <_printf_float+0xf0>
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1c0      	bne.n	8007438 <_printf_float+0xf0>
 80074b6:	2301      	movs	r3, #1
 80074b8:	e7bd      	b.n	8007436 <_printf_float+0xee>
 80074ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80074be:	d9db      	bls.n	8007478 <_printf_float+0x130>
 80074c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80074c4:	d118      	bne.n	80074f8 <_printf_float+0x1b0>
 80074c6:	2900      	cmp	r1, #0
 80074c8:	6863      	ldr	r3, [r4, #4]
 80074ca:	dd0b      	ble.n	80074e4 <_printf_float+0x19c>
 80074cc:	6121      	str	r1, [r4, #16]
 80074ce:	b913      	cbnz	r3, 80074d6 <_printf_float+0x18e>
 80074d0:	6822      	ldr	r2, [r4, #0]
 80074d2:	07d0      	lsls	r0, r2, #31
 80074d4:	d502      	bpl.n	80074dc <_printf_float+0x194>
 80074d6:	3301      	adds	r3, #1
 80074d8:	440b      	add	r3, r1
 80074da:	6123      	str	r3, [r4, #16]
 80074dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80074de:	f04f 0900 	mov.w	r9, #0
 80074e2:	e7db      	b.n	800749c <_printf_float+0x154>
 80074e4:	b913      	cbnz	r3, 80074ec <_printf_float+0x1a4>
 80074e6:	6822      	ldr	r2, [r4, #0]
 80074e8:	07d2      	lsls	r2, r2, #31
 80074ea:	d501      	bpl.n	80074f0 <_printf_float+0x1a8>
 80074ec:	3302      	adds	r3, #2
 80074ee:	e7f4      	b.n	80074da <_printf_float+0x192>
 80074f0:	2301      	movs	r3, #1
 80074f2:	e7f2      	b.n	80074da <_printf_float+0x192>
 80074f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80074f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074fa:	4299      	cmp	r1, r3
 80074fc:	db05      	blt.n	800750a <_printf_float+0x1c2>
 80074fe:	6823      	ldr	r3, [r4, #0]
 8007500:	6121      	str	r1, [r4, #16]
 8007502:	07d8      	lsls	r0, r3, #31
 8007504:	d5ea      	bpl.n	80074dc <_printf_float+0x194>
 8007506:	1c4b      	adds	r3, r1, #1
 8007508:	e7e7      	b.n	80074da <_printf_float+0x192>
 800750a:	2900      	cmp	r1, #0
 800750c:	bfd4      	ite	le
 800750e:	f1c1 0202 	rsble	r2, r1, #2
 8007512:	2201      	movgt	r2, #1
 8007514:	4413      	add	r3, r2
 8007516:	e7e0      	b.n	80074da <_printf_float+0x192>
 8007518:	6823      	ldr	r3, [r4, #0]
 800751a:	055a      	lsls	r2, r3, #21
 800751c:	d407      	bmi.n	800752e <_printf_float+0x1e6>
 800751e:	6923      	ldr	r3, [r4, #16]
 8007520:	4642      	mov	r2, r8
 8007522:	4631      	mov	r1, r6
 8007524:	4628      	mov	r0, r5
 8007526:	47b8      	blx	r7
 8007528:	3001      	adds	r0, #1
 800752a:	d12b      	bne.n	8007584 <_printf_float+0x23c>
 800752c:	e767      	b.n	80073fe <_printf_float+0xb6>
 800752e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007532:	f240 80dd 	bls.w	80076f0 <_printf_float+0x3a8>
 8007536:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800753a:	2200      	movs	r2, #0
 800753c:	2300      	movs	r3, #0
 800753e:	f7f9 fac3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007542:	2800      	cmp	r0, #0
 8007544:	d033      	beq.n	80075ae <_printf_float+0x266>
 8007546:	4a37      	ldr	r2, [pc, #220]	@ (8007624 <_printf_float+0x2dc>)
 8007548:	2301      	movs	r3, #1
 800754a:	4631      	mov	r1, r6
 800754c:	4628      	mov	r0, r5
 800754e:	47b8      	blx	r7
 8007550:	3001      	adds	r0, #1
 8007552:	f43f af54 	beq.w	80073fe <_printf_float+0xb6>
 8007556:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800755a:	4543      	cmp	r3, r8
 800755c:	db02      	blt.n	8007564 <_printf_float+0x21c>
 800755e:	6823      	ldr	r3, [r4, #0]
 8007560:	07d8      	lsls	r0, r3, #31
 8007562:	d50f      	bpl.n	8007584 <_printf_float+0x23c>
 8007564:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007568:	4631      	mov	r1, r6
 800756a:	4628      	mov	r0, r5
 800756c:	47b8      	blx	r7
 800756e:	3001      	adds	r0, #1
 8007570:	f43f af45 	beq.w	80073fe <_printf_float+0xb6>
 8007574:	f04f 0900 	mov.w	r9, #0
 8007578:	f108 38ff 	add.w	r8, r8, #4294967295
 800757c:	f104 0a1a 	add.w	sl, r4, #26
 8007580:	45c8      	cmp	r8, r9
 8007582:	dc09      	bgt.n	8007598 <_printf_float+0x250>
 8007584:	6823      	ldr	r3, [r4, #0]
 8007586:	079b      	lsls	r3, r3, #30
 8007588:	f100 8103 	bmi.w	8007792 <_printf_float+0x44a>
 800758c:	68e0      	ldr	r0, [r4, #12]
 800758e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007590:	4298      	cmp	r0, r3
 8007592:	bfb8      	it	lt
 8007594:	4618      	movlt	r0, r3
 8007596:	e734      	b.n	8007402 <_printf_float+0xba>
 8007598:	2301      	movs	r3, #1
 800759a:	4652      	mov	r2, sl
 800759c:	4631      	mov	r1, r6
 800759e:	4628      	mov	r0, r5
 80075a0:	47b8      	blx	r7
 80075a2:	3001      	adds	r0, #1
 80075a4:	f43f af2b 	beq.w	80073fe <_printf_float+0xb6>
 80075a8:	f109 0901 	add.w	r9, r9, #1
 80075ac:	e7e8      	b.n	8007580 <_printf_float+0x238>
 80075ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	dc39      	bgt.n	8007628 <_printf_float+0x2e0>
 80075b4:	4a1b      	ldr	r2, [pc, #108]	@ (8007624 <_printf_float+0x2dc>)
 80075b6:	2301      	movs	r3, #1
 80075b8:	4631      	mov	r1, r6
 80075ba:	4628      	mov	r0, r5
 80075bc:	47b8      	blx	r7
 80075be:	3001      	adds	r0, #1
 80075c0:	f43f af1d 	beq.w	80073fe <_printf_float+0xb6>
 80075c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80075c8:	ea59 0303 	orrs.w	r3, r9, r3
 80075cc:	d102      	bne.n	80075d4 <_printf_float+0x28c>
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	07d9      	lsls	r1, r3, #31
 80075d2:	d5d7      	bpl.n	8007584 <_printf_float+0x23c>
 80075d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075d8:	4631      	mov	r1, r6
 80075da:	4628      	mov	r0, r5
 80075dc:	47b8      	blx	r7
 80075de:	3001      	adds	r0, #1
 80075e0:	f43f af0d 	beq.w	80073fe <_printf_float+0xb6>
 80075e4:	f04f 0a00 	mov.w	sl, #0
 80075e8:	f104 0b1a 	add.w	fp, r4, #26
 80075ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075ee:	425b      	negs	r3, r3
 80075f0:	4553      	cmp	r3, sl
 80075f2:	dc01      	bgt.n	80075f8 <_printf_float+0x2b0>
 80075f4:	464b      	mov	r3, r9
 80075f6:	e793      	b.n	8007520 <_printf_float+0x1d8>
 80075f8:	2301      	movs	r3, #1
 80075fa:	465a      	mov	r2, fp
 80075fc:	4631      	mov	r1, r6
 80075fe:	4628      	mov	r0, r5
 8007600:	47b8      	blx	r7
 8007602:	3001      	adds	r0, #1
 8007604:	f43f aefb 	beq.w	80073fe <_printf_float+0xb6>
 8007608:	f10a 0a01 	add.w	sl, sl, #1
 800760c:	e7ee      	b.n	80075ec <_printf_float+0x2a4>
 800760e:	bf00      	nop
 8007610:	7fefffff 	.word	0x7fefffff
 8007614:	0801cb9c 	.word	0x0801cb9c
 8007618:	0801cb98 	.word	0x0801cb98
 800761c:	0801cba4 	.word	0x0801cba4
 8007620:	0801cba0 	.word	0x0801cba0
 8007624:	0801cba8 	.word	0x0801cba8
 8007628:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800762a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800762e:	4553      	cmp	r3, sl
 8007630:	bfa8      	it	ge
 8007632:	4653      	movge	r3, sl
 8007634:	2b00      	cmp	r3, #0
 8007636:	4699      	mov	r9, r3
 8007638:	dc36      	bgt.n	80076a8 <_printf_float+0x360>
 800763a:	f04f 0b00 	mov.w	fp, #0
 800763e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007642:	f104 021a 	add.w	r2, r4, #26
 8007646:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007648:	9306      	str	r3, [sp, #24]
 800764a:	eba3 0309 	sub.w	r3, r3, r9
 800764e:	455b      	cmp	r3, fp
 8007650:	dc31      	bgt.n	80076b6 <_printf_float+0x36e>
 8007652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007654:	459a      	cmp	sl, r3
 8007656:	dc3a      	bgt.n	80076ce <_printf_float+0x386>
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	07da      	lsls	r2, r3, #31
 800765c:	d437      	bmi.n	80076ce <_printf_float+0x386>
 800765e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007660:	ebaa 0903 	sub.w	r9, sl, r3
 8007664:	9b06      	ldr	r3, [sp, #24]
 8007666:	ebaa 0303 	sub.w	r3, sl, r3
 800766a:	4599      	cmp	r9, r3
 800766c:	bfa8      	it	ge
 800766e:	4699      	movge	r9, r3
 8007670:	f1b9 0f00 	cmp.w	r9, #0
 8007674:	dc33      	bgt.n	80076de <_printf_float+0x396>
 8007676:	f04f 0800 	mov.w	r8, #0
 800767a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800767e:	f104 0b1a 	add.w	fp, r4, #26
 8007682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007684:	ebaa 0303 	sub.w	r3, sl, r3
 8007688:	eba3 0309 	sub.w	r3, r3, r9
 800768c:	4543      	cmp	r3, r8
 800768e:	f77f af79 	ble.w	8007584 <_printf_float+0x23c>
 8007692:	2301      	movs	r3, #1
 8007694:	465a      	mov	r2, fp
 8007696:	4631      	mov	r1, r6
 8007698:	4628      	mov	r0, r5
 800769a:	47b8      	blx	r7
 800769c:	3001      	adds	r0, #1
 800769e:	f43f aeae 	beq.w	80073fe <_printf_float+0xb6>
 80076a2:	f108 0801 	add.w	r8, r8, #1
 80076a6:	e7ec      	b.n	8007682 <_printf_float+0x33a>
 80076a8:	4642      	mov	r2, r8
 80076aa:	4631      	mov	r1, r6
 80076ac:	4628      	mov	r0, r5
 80076ae:	47b8      	blx	r7
 80076b0:	3001      	adds	r0, #1
 80076b2:	d1c2      	bne.n	800763a <_printf_float+0x2f2>
 80076b4:	e6a3      	b.n	80073fe <_printf_float+0xb6>
 80076b6:	2301      	movs	r3, #1
 80076b8:	4631      	mov	r1, r6
 80076ba:	4628      	mov	r0, r5
 80076bc:	9206      	str	r2, [sp, #24]
 80076be:	47b8      	blx	r7
 80076c0:	3001      	adds	r0, #1
 80076c2:	f43f ae9c 	beq.w	80073fe <_printf_float+0xb6>
 80076c6:	9a06      	ldr	r2, [sp, #24]
 80076c8:	f10b 0b01 	add.w	fp, fp, #1
 80076cc:	e7bb      	b.n	8007646 <_printf_float+0x2fe>
 80076ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076d2:	4631      	mov	r1, r6
 80076d4:	4628      	mov	r0, r5
 80076d6:	47b8      	blx	r7
 80076d8:	3001      	adds	r0, #1
 80076da:	d1c0      	bne.n	800765e <_printf_float+0x316>
 80076dc:	e68f      	b.n	80073fe <_printf_float+0xb6>
 80076de:	9a06      	ldr	r2, [sp, #24]
 80076e0:	464b      	mov	r3, r9
 80076e2:	4442      	add	r2, r8
 80076e4:	4631      	mov	r1, r6
 80076e6:	4628      	mov	r0, r5
 80076e8:	47b8      	blx	r7
 80076ea:	3001      	adds	r0, #1
 80076ec:	d1c3      	bne.n	8007676 <_printf_float+0x32e>
 80076ee:	e686      	b.n	80073fe <_printf_float+0xb6>
 80076f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80076f4:	f1ba 0f01 	cmp.w	sl, #1
 80076f8:	dc01      	bgt.n	80076fe <_printf_float+0x3b6>
 80076fa:	07db      	lsls	r3, r3, #31
 80076fc:	d536      	bpl.n	800776c <_printf_float+0x424>
 80076fe:	2301      	movs	r3, #1
 8007700:	4642      	mov	r2, r8
 8007702:	4631      	mov	r1, r6
 8007704:	4628      	mov	r0, r5
 8007706:	47b8      	blx	r7
 8007708:	3001      	adds	r0, #1
 800770a:	f43f ae78 	beq.w	80073fe <_printf_float+0xb6>
 800770e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007712:	4631      	mov	r1, r6
 8007714:	4628      	mov	r0, r5
 8007716:	47b8      	blx	r7
 8007718:	3001      	adds	r0, #1
 800771a:	f43f ae70 	beq.w	80073fe <_printf_float+0xb6>
 800771e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007722:	2200      	movs	r2, #0
 8007724:	2300      	movs	r3, #0
 8007726:	f10a 3aff 	add.w	sl, sl, #4294967295
 800772a:	f7f9 f9cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800772e:	b9c0      	cbnz	r0, 8007762 <_printf_float+0x41a>
 8007730:	4653      	mov	r3, sl
 8007732:	f108 0201 	add.w	r2, r8, #1
 8007736:	4631      	mov	r1, r6
 8007738:	4628      	mov	r0, r5
 800773a:	47b8      	blx	r7
 800773c:	3001      	adds	r0, #1
 800773e:	d10c      	bne.n	800775a <_printf_float+0x412>
 8007740:	e65d      	b.n	80073fe <_printf_float+0xb6>
 8007742:	2301      	movs	r3, #1
 8007744:	465a      	mov	r2, fp
 8007746:	4631      	mov	r1, r6
 8007748:	4628      	mov	r0, r5
 800774a:	47b8      	blx	r7
 800774c:	3001      	adds	r0, #1
 800774e:	f43f ae56 	beq.w	80073fe <_printf_float+0xb6>
 8007752:	f108 0801 	add.w	r8, r8, #1
 8007756:	45d0      	cmp	r8, sl
 8007758:	dbf3      	blt.n	8007742 <_printf_float+0x3fa>
 800775a:	464b      	mov	r3, r9
 800775c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007760:	e6df      	b.n	8007522 <_printf_float+0x1da>
 8007762:	f04f 0800 	mov.w	r8, #0
 8007766:	f104 0b1a 	add.w	fp, r4, #26
 800776a:	e7f4      	b.n	8007756 <_printf_float+0x40e>
 800776c:	2301      	movs	r3, #1
 800776e:	4642      	mov	r2, r8
 8007770:	e7e1      	b.n	8007736 <_printf_float+0x3ee>
 8007772:	2301      	movs	r3, #1
 8007774:	464a      	mov	r2, r9
 8007776:	4631      	mov	r1, r6
 8007778:	4628      	mov	r0, r5
 800777a:	47b8      	blx	r7
 800777c:	3001      	adds	r0, #1
 800777e:	f43f ae3e 	beq.w	80073fe <_printf_float+0xb6>
 8007782:	f108 0801 	add.w	r8, r8, #1
 8007786:	68e3      	ldr	r3, [r4, #12]
 8007788:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800778a:	1a5b      	subs	r3, r3, r1
 800778c:	4543      	cmp	r3, r8
 800778e:	dcf0      	bgt.n	8007772 <_printf_float+0x42a>
 8007790:	e6fc      	b.n	800758c <_printf_float+0x244>
 8007792:	f04f 0800 	mov.w	r8, #0
 8007796:	f104 0919 	add.w	r9, r4, #25
 800779a:	e7f4      	b.n	8007786 <_printf_float+0x43e>

0800779c <_printf_common>:
 800779c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077a0:	4616      	mov	r6, r2
 80077a2:	4698      	mov	r8, r3
 80077a4:	688a      	ldr	r2, [r1, #8]
 80077a6:	690b      	ldr	r3, [r1, #16]
 80077a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80077ac:	4293      	cmp	r3, r2
 80077ae:	bfb8      	it	lt
 80077b0:	4613      	movlt	r3, r2
 80077b2:	6033      	str	r3, [r6, #0]
 80077b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80077b8:	4607      	mov	r7, r0
 80077ba:	460c      	mov	r4, r1
 80077bc:	b10a      	cbz	r2, 80077c2 <_printf_common+0x26>
 80077be:	3301      	adds	r3, #1
 80077c0:	6033      	str	r3, [r6, #0]
 80077c2:	6823      	ldr	r3, [r4, #0]
 80077c4:	0699      	lsls	r1, r3, #26
 80077c6:	bf42      	ittt	mi
 80077c8:	6833      	ldrmi	r3, [r6, #0]
 80077ca:	3302      	addmi	r3, #2
 80077cc:	6033      	strmi	r3, [r6, #0]
 80077ce:	6825      	ldr	r5, [r4, #0]
 80077d0:	f015 0506 	ands.w	r5, r5, #6
 80077d4:	d106      	bne.n	80077e4 <_printf_common+0x48>
 80077d6:	f104 0a19 	add.w	sl, r4, #25
 80077da:	68e3      	ldr	r3, [r4, #12]
 80077dc:	6832      	ldr	r2, [r6, #0]
 80077de:	1a9b      	subs	r3, r3, r2
 80077e0:	42ab      	cmp	r3, r5
 80077e2:	dc26      	bgt.n	8007832 <_printf_common+0x96>
 80077e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80077e8:	6822      	ldr	r2, [r4, #0]
 80077ea:	3b00      	subs	r3, #0
 80077ec:	bf18      	it	ne
 80077ee:	2301      	movne	r3, #1
 80077f0:	0692      	lsls	r2, r2, #26
 80077f2:	d42b      	bmi.n	800784c <_printf_common+0xb0>
 80077f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80077f8:	4641      	mov	r1, r8
 80077fa:	4638      	mov	r0, r7
 80077fc:	47c8      	blx	r9
 80077fe:	3001      	adds	r0, #1
 8007800:	d01e      	beq.n	8007840 <_printf_common+0xa4>
 8007802:	6823      	ldr	r3, [r4, #0]
 8007804:	6922      	ldr	r2, [r4, #16]
 8007806:	f003 0306 	and.w	r3, r3, #6
 800780a:	2b04      	cmp	r3, #4
 800780c:	bf02      	ittt	eq
 800780e:	68e5      	ldreq	r5, [r4, #12]
 8007810:	6833      	ldreq	r3, [r6, #0]
 8007812:	1aed      	subeq	r5, r5, r3
 8007814:	68a3      	ldr	r3, [r4, #8]
 8007816:	bf0c      	ite	eq
 8007818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800781c:	2500      	movne	r5, #0
 800781e:	4293      	cmp	r3, r2
 8007820:	bfc4      	itt	gt
 8007822:	1a9b      	subgt	r3, r3, r2
 8007824:	18ed      	addgt	r5, r5, r3
 8007826:	2600      	movs	r6, #0
 8007828:	341a      	adds	r4, #26
 800782a:	42b5      	cmp	r5, r6
 800782c:	d11a      	bne.n	8007864 <_printf_common+0xc8>
 800782e:	2000      	movs	r0, #0
 8007830:	e008      	b.n	8007844 <_printf_common+0xa8>
 8007832:	2301      	movs	r3, #1
 8007834:	4652      	mov	r2, sl
 8007836:	4641      	mov	r1, r8
 8007838:	4638      	mov	r0, r7
 800783a:	47c8      	blx	r9
 800783c:	3001      	adds	r0, #1
 800783e:	d103      	bne.n	8007848 <_printf_common+0xac>
 8007840:	f04f 30ff 	mov.w	r0, #4294967295
 8007844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007848:	3501      	adds	r5, #1
 800784a:	e7c6      	b.n	80077da <_printf_common+0x3e>
 800784c:	18e1      	adds	r1, r4, r3
 800784e:	1c5a      	adds	r2, r3, #1
 8007850:	2030      	movs	r0, #48	@ 0x30
 8007852:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007856:	4422      	add	r2, r4
 8007858:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800785c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007860:	3302      	adds	r3, #2
 8007862:	e7c7      	b.n	80077f4 <_printf_common+0x58>
 8007864:	2301      	movs	r3, #1
 8007866:	4622      	mov	r2, r4
 8007868:	4641      	mov	r1, r8
 800786a:	4638      	mov	r0, r7
 800786c:	47c8      	blx	r9
 800786e:	3001      	adds	r0, #1
 8007870:	d0e6      	beq.n	8007840 <_printf_common+0xa4>
 8007872:	3601      	adds	r6, #1
 8007874:	e7d9      	b.n	800782a <_printf_common+0x8e>
	...

08007878 <_printf_i>:
 8007878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800787c:	7e0f      	ldrb	r7, [r1, #24]
 800787e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007880:	2f78      	cmp	r7, #120	@ 0x78
 8007882:	4691      	mov	r9, r2
 8007884:	4680      	mov	r8, r0
 8007886:	460c      	mov	r4, r1
 8007888:	469a      	mov	sl, r3
 800788a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800788e:	d807      	bhi.n	80078a0 <_printf_i+0x28>
 8007890:	2f62      	cmp	r7, #98	@ 0x62
 8007892:	d80a      	bhi.n	80078aa <_printf_i+0x32>
 8007894:	2f00      	cmp	r7, #0
 8007896:	f000 80d1 	beq.w	8007a3c <_printf_i+0x1c4>
 800789a:	2f58      	cmp	r7, #88	@ 0x58
 800789c:	f000 80b8 	beq.w	8007a10 <_printf_i+0x198>
 80078a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80078a8:	e03a      	b.n	8007920 <_printf_i+0xa8>
 80078aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80078ae:	2b15      	cmp	r3, #21
 80078b0:	d8f6      	bhi.n	80078a0 <_printf_i+0x28>
 80078b2:	a101      	add	r1, pc, #4	@ (adr r1, 80078b8 <_printf_i+0x40>)
 80078b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078b8:	08007911 	.word	0x08007911
 80078bc:	08007925 	.word	0x08007925
 80078c0:	080078a1 	.word	0x080078a1
 80078c4:	080078a1 	.word	0x080078a1
 80078c8:	080078a1 	.word	0x080078a1
 80078cc:	080078a1 	.word	0x080078a1
 80078d0:	08007925 	.word	0x08007925
 80078d4:	080078a1 	.word	0x080078a1
 80078d8:	080078a1 	.word	0x080078a1
 80078dc:	080078a1 	.word	0x080078a1
 80078e0:	080078a1 	.word	0x080078a1
 80078e4:	08007a23 	.word	0x08007a23
 80078e8:	0800794f 	.word	0x0800794f
 80078ec:	080079dd 	.word	0x080079dd
 80078f0:	080078a1 	.word	0x080078a1
 80078f4:	080078a1 	.word	0x080078a1
 80078f8:	08007a45 	.word	0x08007a45
 80078fc:	080078a1 	.word	0x080078a1
 8007900:	0800794f 	.word	0x0800794f
 8007904:	080078a1 	.word	0x080078a1
 8007908:	080078a1 	.word	0x080078a1
 800790c:	080079e5 	.word	0x080079e5
 8007910:	6833      	ldr	r3, [r6, #0]
 8007912:	1d1a      	adds	r2, r3, #4
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6032      	str	r2, [r6, #0]
 8007918:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800791c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007920:	2301      	movs	r3, #1
 8007922:	e09c      	b.n	8007a5e <_printf_i+0x1e6>
 8007924:	6833      	ldr	r3, [r6, #0]
 8007926:	6820      	ldr	r0, [r4, #0]
 8007928:	1d19      	adds	r1, r3, #4
 800792a:	6031      	str	r1, [r6, #0]
 800792c:	0606      	lsls	r6, r0, #24
 800792e:	d501      	bpl.n	8007934 <_printf_i+0xbc>
 8007930:	681d      	ldr	r5, [r3, #0]
 8007932:	e003      	b.n	800793c <_printf_i+0xc4>
 8007934:	0645      	lsls	r5, r0, #25
 8007936:	d5fb      	bpl.n	8007930 <_printf_i+0xb8>
 8007938:	f9b3 5000 	ldrsh.w	r5, [r3]
 800793c:	2d00      	cmp	r5, #0
 800793e:	da03      	bge.n	8007948 <_printf_i+0xd0>
 8007940:	232d      	movs	r3, #45	@ 0x2d
 8007942:	426d      	negs	r5, r5
 8007944:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007948:	4858      	ldr	r0, [pc, #352]	@ (8007aac <_printf_i+0x234>)
 800794a:	230a      	movs	r3, #10
 800794c:	e011      	b.n	8007972 <_printf_i+0xfa>
 800794e:	6821      	ldr	r1, [r4, #0]
 8007950:	6833      	ldr	r3, [r6, #0]
 8007952:	0608      	lsls	r0, r1, #24
 8007954:	f853 5b04 	ldr.w	r5, [r3], #4
 8007958:	d402      	bmi.n	8007960 <_printf_i+0xe8>
 800795a:	0649      	lsls	r1, r1, #25
 800795c:	bf48      	it	mi
 800795e:	b2ad      	uxthmi	r5, r5
 8007960:	2f6f      	cmp	r7, #111	@ 0x6f
 8007962:	4852      	ldr	r0, [pc, #328]	@ (8007aac <_printf_i+0x234>)
 8007964:	6033      	str	r3, [r6, #0]
 8007966:	bf14      	ite	ne
 8007968:	230a      	movne	r3, #10
 800796a:	2308      	moveq	r3, #8
 800796c:	2100      	movs	r1, #0
 800796e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007972:	6866      	ldr	r6, [r4, #4]
 8007974:	60a6      	str	r6, [r4, #8]
 8007976:	2e00      	cmp	r6, #0
 8007978:	db05      	blt.n	8007986 <_printf_i+0x10e>
 800797a:	6821      	ldr	r1, [r4, #0]
 800797c:	432e      	orrs	r6, r5
 800797e:	f021 0104 	bic.w	r1, r1, #4
 8007982:	6021      	str	r1, [r4, #0]
 8007984:	d04b      	beq.n	8007a1e <_printf_i+0x1a6>
 8007986:	4616      	mov	r6, r2
 8007988:	fbb5 f1f3 	udiv	r1, r5, r3
 800798c:	fb03 5711 	mls	r7, r3, r1, r5
 8007990:	5dc7      	ldrb	r7, [r0, r7]
 8007992:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007996:	462f      	mov	r7, r5
 8007998:	42bb      	cmp	r3, r7
 800799a:	460d      	mov	r5, r1
 800799c:	d9f4      	bls.n	8007988 <_printf_i+0x110>
 800799e:	2b08      	cmp	r3, #8
 80079a0:	d10b      	bne.n	80079ba <_printf_i+0x142>
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	07df      	lsls	r7, r3, #31
 80079a6:	d508      	bpl.n	80079ba <_printf_i+0x142>
 80079a8:	6923      	ldr	r3, [r4, #16]
 80079aa:	6861      	ldr	r1, [r4, #4]
 80079ac:	4299      	cmp	r1, r3
 80079ae:	bfde      	ittt	le
 80079b0:	2330      	movle	r3, #48	@ 0x30
 80079b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80079b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80079ba:	1b92      	subs	r2, r2, r6
 80079bc:	6122      	str	r2, [r4, #16]
 80079be:	f8cd a000 	str.w	sl, [sp]
 80079c2:	464b      	mov	r3, r9
 80079c4:	aa03      	add	r2, sp, #12
 80079c6:	4621      	mov	r1, r4
 80079c8:	4640      	mov	r0, r8
 80079ca:	f7ff fee7 	bl	800779c <_printf_common>
 80079ce:	3001      	adds	r0, #1
 80079d0:	d14a      	bne.n	8007a68 <_printf_i+0x1f0>
 80079d2:	f04f 30ff 	mov.w	r0, #4294967295
 80079d6:	b004      	add	sp, #16
 80079d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079dc:	6823      	ldr	r3, [r4, #0]
 80079de:	f043 0320 	orr.w	r3, r3, #32
 80079e2:	6023      	str	r3, [r4, #0]
 80079e4:	4832      	ldr	r0, [pc, #200]	@ (8007ab0 <_printf_i+0x238>)
 80079e6:	2778      	movs	r7, #120	@ 0x78
 80079e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80079ec:	6823      	ldr	r3, [r4, #0]
 80079ee:	6831      	ldr	r1, [r6, #0]
 80079f0:	061f      	lsls	r7, r3, #24
 80079f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80079f6:	d402      	bmi.n	80079fe <_printf_i+0x186>
 80079f8:	065f      	lsls	r7, r3, #25
 80079fa:	bf48      	it	mi
 80079fc:	b2ad      	uxthmi	r5, r5
 80079fe:	6031      	str	r1, [r6, #0]
 8007a00:	07d9      	lsls	r1, r3, #31
 8007a02:	bf44      	itt	mi
 8007a04:	f043 0320 	orrmi.w	r3, r3, #32
 8007a08:	6023      	strmi	r3, [r4, #0]
 8007a0a:	b11d      	cbz	r5, 8007a14 <_printf_i+0x19c>
 8007a0c:	2310      	movs	r3, #16
 8007a0e:	e7ad      	b.n	800796c <_printf_i+0xf4>
 8007a10:	4826      	ldr	r0, [pc, #152]	@ (8007aac <_printf_i+0x234>)
 8007a12:	e7e9      	b.n	80079e8 <_printf_i+0x170>
 8007a14:	6823      	ldr	r3, [r4, #0]
 8007a16:	f023 0320 	bic.w	r3, r3, #32
 8007a1a:	6023      	str	r3, [r4, #0]
 8007a1c:	e7f6      	b.n	8007a0c <_printf_i+0x194>
 8007a1e:	4616      	mov	r6, r2
 8007a20:	e7bd      	b.n	800799e <_printf_i+0x126>
 8007a22:	6833      	ldr	r3, [r6, #0]
 8007a24:	6825      	ldr	r5, [r4, #0]
 8007a26:	6961      	ldr	r1, [r4, #20]
 8007a28:	1d18      	adds	r0, r3, #4
 8007a2a:	6030      	str	r0, [r6, #0]
 8007a2c:	062e      	lsls	r6, r5, #24
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	d501      	bpl.n	8007a36 <_printf_i+0x1be>
 8007a32:	6019      	str	r1, [r3, #0]
 8007a34:	e002      	b.n	8007a3c <_printf_i+0x1c4>
 8007a36:	0668      	lsls	r0, r5, #25
 8007a38:	d5fb      	bpl.n	8007a32 <_printf_i+0x1ba>
 8007a3a:	8019      	strh	r1, [r3, #0]
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	6123      	str	r3, [r4, #16]
 8007a40:	4616      	mov	r6, r2
 8007a42:	e7bc      	b.n	80079be <_printf_i+0x146>
 8007a44:	6833      	ldr	r3, [r6, #0]
 8007a46:	1d1a      	adds	r2, r3, #4
 8007a48:	6032      	str	r2, [r6, #0]
 8007a4a:	681e      	ldr	r6, [r3, #0]
 8007a4c:	6862      	ldr	r2, [r4, #4]
 8007a4e:	2100      	movs	r1, #0
 8007a50:	4630      	mov	r0, r6
 8007a52:	f7f8 fbbd 	bl	80001d0 <memchr>
 8007a56:	b108      	cbz	r0, 8007a5c <_printf_i+0x1e4>
 8007a58:	1b80      	subs	r0, r0, r6
 8007a5a:	6060      	str	r0, [r4, #4]
 8007a5c:	6863      	ldr	r3, [r4, #4]
 8007a5e:	6123      	str	r3, [r4, #16]
 8007a60:	2300      	movs	r3, #0
 8007a62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a66:	e7aa      	b.n	80079be <_printf_i+0x146>
 8007a68:	6923      	ldr	r3, [r4, #16]
 8007a6a:	4632      	mov	r2, r6
 8007a6c:	4649      	mov	r1, r9
 8007a6e:	4640      	mov	r0, r8
 8007a70:	47d0      	blx	sl
 8007a72:	3001      	adds	r0, #1
 8007a74:	d0ad      	beq.n	80079d2 <_printf_i+0x15a>
 8007a76:	6823      	ldr	r3, [r4, #0]
 8007a78:	079b      	lsls	r3, r3, #30
 8007a7a:	d413      	bmi.n	8007aa4 <_printf_i+0x22c>
 8007a7c:	68e0      	ldr	r0, [r4, #12]
 8007a7e:	9b03      	ldr	r3, [sp, #12]
 8007a80:	4298      	cmp	r0, r3
 8007a82:	bfb8      	it	lt
 8007a84:	4618      	movlt	r0, r3
 8007a86:	e7a6      	b.n	80079d6 <_printf_i+0x15e>
 8007a88:	2301      	movs	r3, #1
 8007a8a:	4632      	mov	r2, r6
 8007a8c:	4649      	mov	r1, r9
 8007a8e:	4640      	mov	r0, r8
 8007a90:	47d0      	blx	sl
 8007a92:	3001      	adds	r0, #1
 8007a94:	d09d      	beq.n	80079d2 <_printf_i+0x15a>
 8007a96:	3501      	adds	r5, #1
 8007a98:	68e3      	ldr	r3, [r4, #12]
 8007a9a:	9903      	ldr	r1, [sp, #12]
 8007a9c:	1a5b      	subs	r3, r3, r1
 8007a9e:	42ab      	cmp	r3, r5
 8007aa0:	dcf2      	bgt.n	8007a88 <_printf_i+0x210>
 8007aa2:	e7eb      	b.n	8007a7c <_printf_i+0x204>
 8007aa4:	2500      	movs	r5, #0
 8007aa6:	f104 0619 	add.w	r6, r4, #25
 8007aaa:	e7f5      	b.n	8007a98 <_printf_i+0x220>
 8007aac:	0801cbaa 	.word	0x0801cbaa
 8007ab0:	0801cbbb 	.word	0x0801cbbb

08007ab4 <std>:
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	b510      	push	{r4, lr}
 8007ab8:	4604      	mov	r4, r0
 8007aba:	e9c0 3300 	strd	r3, r3, [r0]
 8007abe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ac2:	6083      	str	r3, [r0, #8]
 8007ac4:	8181      	strh	r1, [r0, #12]
 8007ac6:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ac8:	81c2      	strh	r2, [r0, #14]
 8007aca:	6183      	str	r3, [r0, #24]
 8007acc:	4619      	mov	r1, r3
 8007ace:	2208      	movs	r2, #8
 8007ad0:	305c      	adds	r0, #92	@ 0x5c
 8007ad2:	f000 f8f4 	bl	8007cbe <memset>
 8007ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8007b0c <std+0x58>)
 8007ad8:	6263      	str	r3, [r4, #36]	@ 0x24
 8007ada:	4b0d      	ldr	r3, [pc, #52]	@ (8007b10 <std+0x5c>)
 8007adc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ade:	4b0d      	ldr	r3, [pc, #52]	@ (8007b14 <std+0x60>)
 8007ae0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8007b18 <std+0x64>)
 8007ae4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8007b1c <std+0x68>)
 8007ae8:	6224      	str	r4, [r4, #32]
 8007aea:	429c      	cmp	r4, r3
 8007aec:	d006      	beq.n	8007afc <std+0x48>
 8007aee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007af2:	4294      	cmp	r4, r2
 8007af4:	d002      	beq.n	8007afc <std+0x48>
 8007af6:	33d0      	adds	r3, #208	@ 0xd0
 8007af8:	429c      	cmp	r4, r3
 8007afa:	d105      	bne.n	8007b08 <std+0x54>
 8007afc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b04:	f000 b958 	b.w	8007db8 <__retarget_lock_init_recursive>
 8007b08:	bd10      	pop	{r4, pc}
 8007b0a:	bf00      	nop
 8007b0c:	08007c39 	.word	0x08007c39
 8007b10:	08007c5b 	.word	0x08007c5b
 8007b14:	08007c93 	.word	0x08007c93
 8007b18:	08007cb7 	.word	0x08007cb7
 8007b1c:	20003c34 	.word	0x20003c34

08007b20 <stdio_exit_handler>:
 8007b20:	4a02      	ldr	r2, [pc, #8]	@ (8007b2c <stdio_exit_handler+0xc>)
 8007b22:	4903      	ldr	r1, [pc, #12]	@ (8007b30 <stdio_exit_handler+0x10>)
 8007b24:	4803      	ldr	r0, [pc, #12]	@ (8007b34 <stdio_exit_handler+0x14>)
 8007b26:	f000 b869 	b.w	8007bfc <_fwalk_sglue>
 8007b2a:	bf00      	nop
 8007b2c:	20000014 	.word	0x20000014
 8007b30:	0800946d 	.word	0x0800946d
 8007b34:	20000024 	.word	0x20000024

08007b38 <cleanup_stdio>:
 8007b38:	6841      	ldr	r1, [r0, #4]
 8007b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8007b6c <cleanup_stdio+0x34>)
 8007b3c:	4299      	cmp	r1, r3
 8007b3e:	b510      	push	{r4, lr}
 8007b40:	4604      	mov	r4, r0
 8007b42:	d001      	beq.n	8007b48 <cleanup_stdio+0x10>
 8007b44:	f001 fc92 	bl	800946c <_fflush_r>
 8007b48:	68a1      	ldr	r1, [r4, #8]
 8007b4a:	4b09      	ldr	r3, [pc, #36]	@ (8007b70 <cleanup_stdio+0x38>)
 8007b4c:	4299      	cmp	r1, r3
 8007b4e:	d002      	beq.n	8007b56 <cleanup_stdio+0x1e>
 8007b50:	4620      	mov	r0, r4
 8007b52:	f001 fc8b 	bl	800946c <_fflush_r>
 8007b56:	68e1      	ldr	r1, [r4, #12]
 8007b58:	4b06      	ldr	r3, [pc, #24]	@ (8007b74 <cleanup_stdio+0x3c>)
 8007b5a:	4299      	cmp	r1, r3
 8007b5c:	d004      	beq.n	8007b68 <cleanup_stdio+0x30>
 8007b5e:	4620      	mov	r0, r4
 8007b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b64:	f001 bc82 	b.w	800946c <_fflush_r>
 8007b68:	bd10      	pop	{r4, pc}
 8007b6a:	bf00      	nop
 8007b6c:	20003c34 	.word	0x20003c34
 8007b70:	20003c9c 	.word	0x20003c9c
 8007b74:	20003d04 	.word	0x20003d04

08007b78 <global_stdio_init.part.0>:
 8007b78:	b510      	push	{r4, lr}
 8007b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8007ba8 <global_stdio_init.part.0+0x30>)
 8007b7c:	4c0b      	ldr	r4, [pc, #44]	@ (8007bac <global_stdio_init.part.0+0x34>)
 8007b7e:	4a0c      	ldr	r2, [pc, #48]	@ (8007bb0 <global_stdio_init.part.0+0x38>)
 8007b80:	601a      	str	r2, [r3, #0]
 8007b82:	4620      	mov	r0, r4
 8007b84:	2200      	movs	r2, #0
 8007b86:	2104      	movs	r1, #4
 8007b88:	f7ff ff94 	bl	8007ab4 <std>
 8007b8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b90:	2201      	movs	r2, #1
 8007b92:	2109      	movs	r1, #9
 8007b94:	f7ff ff8e 	bl	8007ab4 <std>
 8007b98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ba2:	2112      	movs	r1, #18
 8007ba4:	f7ff bf86 	b.w	8007ab4 <std>
 8007ba8:	20003d6c 	.word	0x20003d6c
 8007bac:	20003c34 	.word	0x20003c34
 8007bb0:	08007b21 	.word	0x08007b21

08007bb4 <__sfp_lock_acquire>:
 8007bb4:	4801      	ldr	r0, [pc, #4]	@ (8007bbc <__sfp_lock_acquire+0x8>)
 8007bb6:	f000 b900 	b.w	8007dba <__retarget_lock_acquire_recursive>
 8007bba:	bf00      	nop
 8007bbc:	20003d75 	.word	0x20003d75

08007bc0 <__sfp_lock_release>:
 8007bc0:	4801      	ldr	r0, [pc, #4]	@ (8007bc8 <__sfp_lock_release+0x8>)
 8007bc2:	f000 b8fb 	b.w	8007dbc <__retarget_lock_release_recursive>
 8007bc6:	bf00      	nop
 8007bc8:	20003d75 	.word	0x20003d75

08007bcc <__sinit>:
 8007bcc:	b510      	push	{r4, lr}
 8007bce:	4604      	mov	r4, r0
 8007bd0:	f7ff fff0 	bl	8007bb4 <__sfp_lock_acquire>
 8007bd4:	6a23      	ldr	r3, [r4, #32]
 8007bd6:	b11b      	cbz	r3, 8007be0 <__sinit+0x14>
 8007bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bdc:	f7ff bff0 	b.w	8007bc0 <__sfp_lock_release>
 8007be0:	4b04      	ldr	r3, [pc, #16]	@ (8007bf4 <__sinit+0x28>)
 8007be2:	6223      	str	r3, [r4, #32]
 8007be4:	4b04      	ldr	r3, [pc, #16]	@ (8007bf8 <__sinit+0x2c>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1f5      	bne.n	8007bd8 <__sinit+0xc>
 8007bec:	f7ff ffc4 	bl	8007b78 <global_stdio_init.part.0>
 8007bf0:	e7f2      	b.n	8007bd8 <__sinit+0xc>
 8007bf2:	bf00      	nop
 8007bf4:	08007b39 	.word	0x08007b39
 8007bf8:	20003d6c 	.word	0x20003d6c

08007bfc <_fwalk_sglue>:
 8007bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c00:	4607      	mov	r7, r0
 8007c02:	4688      	mov	r8, r1
 8007c04:	4614      	mov	r4, r2
 8007c06:	2600      	movs	r6, #0
 8007c08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c0c:	f1b9 0901 	subs.w	r9, r9, #1
 8007c10:	d505      	bpl.n	8007c1e <_fwalk_sglue+0x22>
 8007c12:	6824      	ldr	r4, [r4, #0]
 8007c14:	2c00      	cmp	r4, #0
 8007c16:	d1f7      	bne.n	8007c08 <_fwalk_sglue+0xc>
 8007c18:	4630      	mov	r0, r6
 8007c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c1e:	89ab      	ldrh	r3, [r5, #12]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d907      	bls.n	8007c34 <_fwalk_sglue+0x38>
 8007c24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	d003      	beq.n	8007c34 <_fwalk_sglue+0x38>
 8007c2c:	4629      	mov	r1, r5
 8007c2e:	4638      	mov	r0, r7
 8007c30:	47c0      	blx	r8
 8007c32:	4306      	orrs	r6, r0
 8007c34:	3568      	adds	r5, #104	@ 0x68
 8007c36:	e7e9      	b.n	8007c0c <_fwalk_sglue+0x10>

08007c38 <__sread>:
 8007c38:	b510      	push	{r4, lr}
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c40:	f000 f86c 	bl	8007d1c <_read_r>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	bfab      	itete	ge
 8007c48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007c4a:	89a3      	ldrhlt	r3, [r4, #12]
 8007c4c:	181b      	addge	r3, r3, r0
 8007c4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007c52:	bfac      	ite	ge
 8007c54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007c56:	81a3      	strhlt	r3, [r4, #12]
 8007c58:	bd10      	pop	{r4, pc}

08007c5a <__swrite>:
 8007c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c5e:	461f      	mov	r7, r3
 8007c60:	898b      	ldrh	r3, [r1, #12]
 8007c62:	05db      	lsls	r3, r3, #23
 8007c64:	4605      	mov	r5, r0
 8007c66:	460c      	mov	r4, r1
 8007c68:	4616      	mov	r6, r2
 8007c6a:	d505      	bpl.n	8007c78 <__swrite+0x1e>
 8007c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c70:	2302      	movs	r3, #2
 8007c72:	2200      	movs	r2, #0
 8007c74:	f000 f840 	bl	8007cf8 <_lseek_r>
 8007c78:	89a3      	ldrh	r3, [r4, #12]
 8007c7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c82:	81a3      	strh	r3, [r4, #12]
 8007c84:	4632      	mov	r2, r6
 8007c86:	463b      	mov	r3, r7
 8007c88:	4628      	mov	r0, r5
 8007c8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c8e:	f000 b857 	b.w	8007d40 <_write_r>

08007c92 <__sseek>:
 8007c92:	b510      	push	{r4, lr}
 8007c94:	460c      	mov	r4, r1
 8007c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c9a:	f000 f82d 	bl	8007cf8 <_lseek_r>
 8007c9e:	1c43      	adds	r3, r0, #1
 8007ca0:	89a3      	ldrh	r3, [r4, #12]
 8007ca2:	bf15      	itete	ne
 8007ca4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007ca6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007caa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007cae:	81a3      	strheq	r3, [r4, #12]
 8007cb0:	bf18      	it	ne
 8007cb2:	81a3      	strhne	r3, [r4, #12]
 8007cb4:	bd10      	pop	{r4, pc}

08007cb6 <__sclose>:
 8007cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cba:	f000 b80d 	b.w	8007cd8 <_close_r>

08007cbe <memset>:
 8007cbe:	4402      	add	r2, r0
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d100      	bne.n	8007cc8 <memset+0xa>
 8007cc6:	4770      	bx	lr
 8007cc8:	f803 1b01 	strb.w	r1, [r3], #1
 8007ccc:	e7f9      	b.n	8007cc2 <memset+0x4>
	...

08007cd0 <_localeconv_r>:
 8007cd0:	4800      	ldr	r0, [pc, #0]	@ (8007cd4 <_localeconv_r+0x4>)
 8007cd2:	4770      	bx	lr
 8007cd4:	20000160 	.word	0x20000160

08007cd8 <_close_r>:
 8007cd8:	b538      	push	{r3, r4, r5, lr}
 8007cda:	4d06      	ldr	r5, [pc, #24]	@ (8007cf4 <_close_r+0x1c>)
 8007cdc:	2300      	movs	r3, #0
 8007cde:	4604      	mov	r4, r0
 8007ce0:	4608      	mov	r0, r1
 8007ce2:	602b      	str	r3, [r5, #0]
 8007ce4:	f7f9 feea 	bl	8001abc <_close>
 8007ce8:	1c43      	adds	r3, r0, #1
 8007cea:	d102      	bne.n	8007cf2 <_close_r+0x1a>
 8007cec:	682b      	ldr	r3, [r5, #0]
 8007cee:	b103      	cbz	r3, 8007cf2 <_close_r+0x1a>
 8007cf0:	6023      	str	r3, [r4, #0]
 8007cf2:	bd38      	pop	{r3, r4, r5, pc}
 8007cf4:	20003d70 	.word	0x20003d70

08007cf8 <_lseek_r>:
 8007cf8:	b538      	push	{r3, r4, r5, lr}
 8007cfa:	4d07      	ldr	r5, [pc, #28]	@ (8007d18 <_lseek_r+0x20>)
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	4608      	mov	r0, r1
 8007d00:	4611      	mov	r1, r2
 8007d02:	2200      	movs	r2, #0
 8007d04:	602a      	str	r2, [r5, #0]
 8007d06:	461a      	mov	r2, r3
 8007d08:	f7f9 feff 	bl	8001b0a <_lseek>
 8007d0c:	1c43      	adds	r3, r0, #1
 8007d0e:	d102      	bne.n	8007d16 <_lseek_r+0x1e>
 8007d10:	682b      	ldr	r3, [r5, #0]
 8007d12:	b103      	cbz	r3, 8007d16 <_lseek_r+0x1e>
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	bd38      	pop	{r3, r4, r5, pc}
 8007d18:	20003d70 	.word	0x20003d70

08007d1c <_read_r>:
 8007d1c:	b538      	push	{r3, r4, r5, lr}
 8007d1e:	4d07      	ldr	r5, [pc, #28]	@ (8007d3c <_read_r+0x20>)
 8007d20:	4604      	mov	r4, r0
 8007d22:	4608      	mov	r0, r1
 8007d24:	4611      	mov	r1, r2
 8007d26:	2200      	movs	r2, #0
 8007d28:	602a      	str	r2, [r5, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f7f9 fe8d 	bl	8001a4a <_read>
 8007d30:	1c43      	adds	r3, r0, #1
 8007d32:	d102      	bne.n	8007d3a <_read_r+0x1e>
 8007d34:	682b      	ldr	r3, [r5, #0]
 8007d36:	b103      	cbz	r3, 8007d3a <_read_r+0x1e>
 8007d38:	6023      	str	r3, [r4, #0]
 8007d3a:	bd38      	pop	{r3, r4, r5, pc}
 8007d3c:	20003d70 	.word	0x20003d70

08007d40 <_write_r>:
 8007d40:	b538      	push	{r3, r4, r5, lr}
 8007d42:	4d07      	ldr	r5, [pc, #28]	@ (8007d60 <_write_r+0x20>)
 8007d44:	4604      	mov	r4, r0
 8007d46:	4608      	mov	r0, r1
 8007d48:	4611      	mov	r1, r2
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	602a      	str	r2, [r5, #0]
 8007d4e:	461a      	mov	r2, r3
 8007d50:	f7f9 fe98 	bl	8001a84 <_write>
 8007d54:	1c43      	adds	r3, r0, #1
 8007d56:	d102      	bne.n	8007d5e <_write_r+0x1e>
 8007d58:	682b      	ldr	r3, [r5, #0]
 8007d5a:	b103      	cbz	r3, 8007d5e <_write_r+0x1e>
 8007d5c:	6023      	str	r3, [r4, #0]
 8007d5e:	bd38      	pop	{r3, r4, r5, pc}
 8007d60:	20003d70 	.word	0x20003d70

08007d64 <__errno>:
 8007d64:	4b01      	ldr	r3, [pc, #4]	@ (8007d6c <__errno+0x8>)
 8007d66:	6818      	ldr	r0, [r3, #0]
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	20000020 	.word	0x20000020

08007d70 <__libc_init_array>:
 8007d70:	b570      	push	{r4, r5, r6, lr}
 8007d72:	4d0d      	ldr	r5, [pc, #52]	@ (8007da8 <__libc_init_array+0x38>)
 8007d74:	4c0d      	ldr	r4, [pc, #52]	@ (8007dac <__libc_init_array+0x3c>)
 8007d76:	1b64      	subs	r4, r4, r5
 8007d78:	10a4      	asrs	r4, r4, #2
 8007d7a:	2600      	movs	r6, #0
 8007d7c:	42a6      	cmp	r6, r4
 8007d7e:	d109      	bne.n	8007d94 <__libc_init_array+0x24>
 8007d80:	4d0b      	ldr	r5, [pc, #44]	@ (8007db0 <__libc_init_array+0x40>)
 8007d82:	4c0c      	ldr	r4, [pc, #48]	@ (8007db4 <__libc_init_array+0x44>)
 8007d84:	f001 fee2 	bl	8009b4c <_init>
 8007d88:	1b64      	subs	r4, r4, r5
 8007d8a:	10a4      	asrs	r4, r4, #2
 8007d8c:	2600      	movs	r6, #0
 8007d8e:	42a6      	cmp	r6, r4
 8007d90:	d105      	bne.n	8007d9e <__libc_init_array+0x2e>
 8007d92:	bd70      	pop	{r4, r5, r6, pc}
 8007d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d98:	4798      	blx	r3
 8007d9a:	3601      	adds	r6, #1
 8007d9c:	e7ee      	b.n	8007d7c <__libc_init_array+0xc>
 8007d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007da2:	4798      	blx	r3
 8007da4:	3601      	adds	r6, #1
 8007da6:	e7f2      	b.n	8007d8e <__libc_init_array+0x1e>
 8007da8:	0801cf14 	.word	0x0801cf14
 8007dac:	0801cf14 	.word	0x0801cf14
 8007db0:	0801cf14 	.word	0x0801cf14
 8007db4:	0801cf18 	.word	0x0801cf18

08007db8 <__retarget_lock_init_recursive>:
 8007db8:	4770      	bx	lr

08007dba <__retarget_lock_acquire_recursive>:
 8007dba:	4770      	bx	lr

08007dbc <__retarget_lock_release_recursive>:
 8007dbc:	4770      	bx	lr

08007dbe <quorem>:
 8007dbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc2:	6903      	ldr	r3, [r0, #16]
 8007dc4:	690c      	ldr	r4, [r1, #16]
 8007dc6:	42a3      	cmp	r3, r4
 8007dc8:	4607      	mov	r7, r0
 8007dca:	db7e      	blt.n	8007eca <quorem+0x10c>
 8007dcc:	3c01      	subs	r4, #1
 8007dce:	f101 0814 	add.w	r8, r1, #20
 8007dd2:	00a3      	lsls	r3, r4, #2
 8007dd4:	f100 0514 	add.w	r5, r0, #20
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dde:	9301      	str	r3, [sp, #4]
 8007de0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007de4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007de8:	3301      	adds	r3, #1
 8007dea:	429a      	cmp	r2, r3
 8007dec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007df0:	fbb2 f6f3 	udiv	r6, r2, r3
 8007df4:	d32e      	bcc.n	8007e54 <quorem+0x96>
 8007df6:	f04f 0a00 	mov.w	sl, #0
 8007dfa:	46c4      	mov	ip, r8
 8007dfc:	46ae      	mov	lr, r5
 8007dfe:	46d3      	mov	fp, sl
 8007e00:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007e04:	b298      	uxth	r0, r3
 8007e06:	fb06 a000 	mla	r0, r6, r0, sl
 8007e0a:	0c02      	lsrs	r2, r0, #16
 8007e0c:	0c1b      	lsrs	r3, r3, #16
 8007e0e:	fb06 2303 	mla	r3, r6, r3, r2
 8007e12:	f8de 2000 	ldr.w	r2, [lr]
 8007e16:	b280      	uxth	r0, r0
 8007e18:	b292      	uxth	r2, r2
 8007e1a:	1a12      	subs	r2, r2, r0
 8007e1c:	445a      	add	r2, fp
 8007e1e:	f8de 0000 	ldr.w	r0, [lr]
 8007e22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007e2c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007e30:	b292      	uxth	r2, r2
 8007e32:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007e36:	45e1      	cmp	r9, ip
 8007e38:	f84e 2b04 	str.w	r2, [lr], #4
 8007e3c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007e40:	d2de      	bcs.n	8007e00 <quorem+0x42>
 8007e42:	9b00      	ldr	r3, [sp, #0]
 8007e44:	58eb      	ldr	r3, [r5, r3]
 8007e46:	b92b      	cbnz	r3, 8007e54 <quorem+0x96>
 8007e48:	9b01      	ldr	r3, [sp, #4]
 8007e4a:	3b04      	subs	r3, #4
 8007e4c:	429d      	cmp	r5, r3
 8007e4e:	461a      	mov	r2, r3
 8007e50:	d32f      	bcc.n	8007eb2 <quorem+0xf4>
 8007e52:	613c      	str	r4, [r7, #16]
 8007e54:	4638      	mov	r0, r7
 8007e56:	f001 f97d 	bl	8009154 <__mcmp>
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	db25      	blt.n	8007eaa <quorem+0xec>
 8007e5e:	4629      	mov	r1, r5
 8007e60:	2000      	movs	r0, #0
 8007e62:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e66:	f8d1 c000 	ldr.w	ip, [r1]
 8007e6a:	fa1f fe82 	uxth.w	lr, r2
 8007e6e:	fa1f f38c 	uxth.w	r3, ip
 8007e72:	eba3 030e 	sub.w	r3, r3, lr
 8007e76:	4403      	add	r3, r0
 8007e78:	0c12      	lsrs	r2, r2, #16
 8007e7a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007e7e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e88:	45c1      	cmp	r9, r8
 8007e8a:	f841 3b04 	str.w	r3, [r1], #4
 8007e8e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007e92:	d2e6      	bcs.n	8007e62 <quorem+0xa4>
 8007e94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e9c:	b922      	cbnz	r2, 8007ea8 <quorem+0xea>
 8007e9e:	3b04      	subs	r3, #4
 8007ea0:	429d      	cmp	r5, r3
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	d30b      	bcc.n	8007ebe <quorem+0x100>
 8007ea6:	613c      	str	r4, [r7, #16]
 8007ea8:	3601      	adds	r6, #1
 8007eaa:	4630      	mov	r0, r6
 8007eac:	b003      	add	sp, #12
 8007eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb2:	6812      	ldr	r2, [r2, #0]
 8007eb4:	3b04      	subs	r3, #4
 8007eb6:	2a00      	cmp	r2, #0
 8007eb8:	d1cb      	bne.n	8007e52 <quorem+0x94>
 8007eba:	3c01      	subs	r4, #1
 8007ebc:	e7c6      	b.n	8007e4c <quorem+0x8e>
 8007ebe:	6812      	ldr	r2, [r2, #0]
 8007ec0:	3b04      	subs	r3, #4
 8007ec2:	2a00      	cmp	r2, #0
 8007ec4:	d1ef      	bne.n	8007ea6 <quorem+0xe8>
 8007ec6:	3c01      	subs	r4, #1
 8007ec8:	e7ea      	b.n	8007ea0 <quorem+0xe2>
 8007eca:	2000      	movs	r0, #0
 8007ecc:	e7ee      	b.n	8007eac <quorem+0xee>
	...

08007ed0 <_dtoa_r>:
 8007ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed4:	69c7      	ldr	r7, [r0, #28]
 8007ed6:	b097      	sub	sp, #92	@ 0x5c
 8007ed8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007edc:	ec55 4b10 	vmov	r4, r5, d0
 8007ee0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007ee2:	9107      	str	r1, [sp, #28]
 8007ee4:	4681      	mov	r9, r0
 8007ee6:	920c      	str	r2, [sp, #48]	@ 0x30
 8007ee8:	9311      	str	r3, [sp, #68]	@ 0x44
 8007eea:	b97f      	cbnz	r7, 8007f0c <_dtoa_r+0x3c>
 8007eec:	2010      	movs	r0, #16
 8007eee:	f000 fe09 	bl	8008b04 <malloc>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	f8c9 001c 	str.w	r0, [r9, #28]
 8007ef8:	b920      	cbnz	r0, 8007f04 <_dtoa_r+0x34>
 8007efa:	4ba9      	ldr	r3, [pc, #676]	@ (80081a0 <_dtoa_r+0x2d0>)
 8007efc:	21ef      	movs	r1, #239	@ 0xef
 8007efe:	48a9      	ldr	r0, [pc, #676]	@ (80081a4 <_dtoa_r+0x2d4>)
 8007f00:	f001 fafa 	bl	80094f8 <__assert_func>
 8007f04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007f08:	6007      	str	r7, [r0, #0]
 8007f0a:	60c7      	str	r7, [r0, #12]
 8007f0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007f10:	6819      	ldr	r1, [r3, #0]
 8007f12:	b159      	cbz	r1, 8007f2c <_dtoa_r+0x5c>
 8007f14:	685a      	ldr	r2, [r3, #4]
 8007f16:	604a      	str	r2, [r1, #4]
 8007f18:	2301      	movs	r3, #1
 8007f1a:	4093      	lsls	r3, r2
 8007f1c:	608b      	str	r3, [r1, #8]
 8007f1e:	4648      	mov	r0, r9
 8007f20:	f000 fee6 	bl	8008cf0 <_Bfree>
 8007f24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	601a      	str	r2, [r3, #0]
 8007f2c:	1e2b      	subs	r3, r5, #0
 8007f2e:	bfb9      	ittee	lt
 8007f30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007f34:	9305      	strlt	r3, [sp, #20]
 8007f36:	2300      	movge	r3, #0
 8007f38:	6033      	strge	r3, [r6, #0]
 8007f3a:	9f05      	ldr	r7, [sp, #20]
 8007f3c:	4b9a      	ldr	r3, [pc, #616]	@ (80081a8 <_dtoa_r+0x2d8>)
 8007f3e:	bfbc      	itt	lt
 8007f40:	2201      	movlt	r2, #1
 8007f42:	6032      	strlt	r2, [r6, #0]
 8007f44:	43bb      	bics	r3, r7
 8007f46:	d112      	bne.n	8007f6e <_dtoa_r+0x9e>
 8007f48:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007f4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007f4e:	6013      	str	r3, [r2, #0]
 8007f50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007f54:	4323      	orrs	r3, r4
 8007f56:	f000 855a 	beq.w	8008a0e <_dtoa_r+0xb3e>
 8007f5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f5c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80081bc <_dtoa_r+0x2ec>
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f000 855c 	beq.w	8008a1e <_dtoa_r+0xb4e>
 8007f66:	f10a 0303 	add.w	r3, sl, #3
 8007f6a:	f000 bd56 	b.w	8008a1a <_dtoa_r+0xb4a>
 8007f6e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007f72:	2200      	movs	r2, #0
 8007f74:	ec51 0b17 	vmov	r0, r1, d7
 8007f78:	2300      	movs	r3, #0
 8007f7a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007f7e:	f7f8 fda3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f82:	4680      	mov	r8, r0
 8007f84:	b158      	cbz	r0, 8007f9e <_dtoa_r+0xce>
 8007f86:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007f88:	2301      	movs	r3, #1
 8007f8a:	6013      	str	r3, [r2, #0]
 8007f8c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f8e:	b113      	cbz	r3, 8007f96 <_dtoa_r+0xc6>
 8007f90:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007f92:	4b86      	ldr	r3, [pc, #536]	@ (80081ac <_dtoa_r+0x2dc>)
 8007f94:	6013      	str	r3, [r2, #0]
 8007f96:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80081c0 <_dtoa_r+0x2f0>
 8007f9a:	f000 bd40 	b.w	8008a1e <_dtoa_r+0xb4e>
 8007f9e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007fa2:	aa14      	add	r2, sp, #80	@ 0x50
 8007fa4:	a915      	add	r1, sp, #84	@ 0x54
 8007fa6:	4648      	mov	r0, r9
 8007fa8:	f001 f984 	bl	80092b4 <__d2b>
 8007fac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007fb0:	9002      	str	r0, [sp, #8]
 8007fb2:	2e00      	cmp	r6, #0
 8007fb4:	d078      	beq.n	80080a8 <_dtoa_r+0x1d8>
 8007fb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fb8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007fbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fc0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007fc4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007fc8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007fcc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	4b76      	ldr	r3, [pc, #472]	@ (80081b0 <_dtoa_r+0x2e0>)
 8007fd6:	f7f8 f957 	bl	8000288 <__aeabi_dsub>
 8007fda:	a36b      	add	r3, pc, #428	@ (adr r3, 8008188 <_dtoa_r+0x2b8>)
 8007fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe0:	f7f8 fb0a 	bl	80005f8 <__aeabi_dmul>
 8007fe4:	a36a      	add	r3, pc, #424	@ (adr r3, 8008190 <_dtoa_r+0x2c0>)
 8007fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fea:	f7f8 f94f 	bl	800028c <__adddf3>
 8007fee:	4604      	mov	r4, r0
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	460d      	mov	r5, r1
 8007ff4:	f7f8 fa96 	bl	8000524 <__aeabi_i2d>
 8007ff8:	a367      	add	r3, pc, #412	@ (adr r3, 8008198 <_dtoa_r+0x2c8>)
 8007ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffe:	f7f8 fafb 	bl	80005f8 <__aeabi_dmul>
 8008002:	4602      	mov	r2, r0
 8008004:	460b      	mov	r3, r1
 8008006:	4620      	mov	r0, r4
 8008008:	4629      	mov	r1, r5
 800800a:	f7f8 f93f 	bl	800028c <__adddf3>
 800800e:	4604      	mov	r4, r0
 8008010:	460d      	mov	r5, r1
 8008012:	f7f8 fda1 	bl	8000b58 <__aeabi_d2iz>
 8008016:	2200      	movs	r2, #0
 8008018:	4607      	mov	r7, r0
 800801a:	2300      	movs	r3, #0
 800801c:	4620      	mov	r0, r4
 800801e:	4629      	mov	r1, r5
 8008020:	f7f8 fd5c 	bl	8000adc <__aeabi_dcmplt>
 8008024:	b140      	cbz	r0, 8008038 <_dtoa_r+0x168>
 8008026:	4638      	mov	r0, r7
 8008028:	f7f8 fa7c 	bl	8000524 <__aeabi_i2d>
 800802c:	4622      	mov	r2, r4
 800802e:	462b      	mov	r3, r5
 8008030:	f7f8 fd4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008034:	b900      	cbnz	r0, 8008038 <_dtoa_r+0x168>
 8008036:	3f01      	subs	r7, #1
 8008038:	2f16      	cmp	r7, #22
 800803a:	d852      	bhi.n	80080e2 <_dtoa_r+0x212>
 800803c:	4b5d      	ldr	r3, [pc, #372]	@ (80081b4 <_dtoa_r+0x2e4>)
 800803e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008046:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800804a:	f7f8 fd47 	bl	8000adc <__aeabi_dcmplt>
 800804e:	2800      	cmp	r0, #0
 8008050:	d049      	beq.n	80080e6 <_dtoa_r+0x216>
 8008052:	3f01      	subs	r7, #1
 8008054:	2300      	movs	r3, #0
 8008056:	9310      	str	r3, [sp, #64]	@ 0x40
 8008058:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800805a:	1b9b      	subs	r3, r3, r6
 800805c:	1e5a      	subs	r2, r3, #1
 800805e:	bf45      	ittet	mi
 8008060:	f1c3 0301 	rsbmi	r3, r3, #1
 8008064:	9300      	strmi	r3, [sp, #0]
 8008066:	2300      	movpl	r3, #0
 8008068:	2300      	movmi	r3, #0
 800806a:	9206      	str	r2, [sp, #24]
 800806c:	bf54      	ite	pl
 800806e:	9300      	strpl	r3, [sp, #0]
 8008070:	9306      	strmi	r3, [sp, #24]
 8008072:	2f00      	cmp	r7, #0
 8008074:	db39      	blt.n	80080ea <_dtoa_r+0x21a>
 8008076:	9b06      	ldr	r3, [sp, #24]
 8008078:	970d      	str	r7, [sp, #52]	@ 0x34
 800807a:	443b      	add	r3, r7
 800807c:	9306      	str	r3, [sp, #24]
 800807e:	2300      	movs	r3, #0
 8008080:	9308      	str	r3, [sp, #32]
 8008082:	9b07      	ldr	r3, [sp, #28]
 8008084:	2b09      	cmp	r3, #9
 8008086:	d863      	bhi.n	8008150 <_dtoa_r+0x280>
 8008088:	2b05      	cmp	r3, #5
 800808a:	bfc4      	itt	gt
 800808c:	3b04      	subgt	r3, #4
 800808e:	9307      	strgt	r3, [sp, #28]
 8008090:	9b07      	ldr	r3, [sp, #28]
 8008092:	f1a3 0302 	sub.w	r3, r3, #2
 8008096:	bfcc      	ite	gt
 8008098:	2400      	movgt	r4, #0
 800809a:	2401      	movle	r4, #1
 800809c:	2b03      	cmp	r3, #3
 800809e:	d863      	bhi.n	8008168 <_dtoa_r+0x298>
 80080a0:	e8df f003 	tbb	[pc, r3]
 80080a4:	2b375452 	.word	0x2b375452
 80080a8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80080ac:	441e      	add	r6, r3
 80080ae:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80080b2:	2b20      	cmp	r3, #32
 80080b4:	bfc1      	itttt	gt
 80080b6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80080ba:	409f      	lslgt	r7, r3
 80080bc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80080c0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80080c4:	bfd6      	itet	le
 80080c6:	f1c3 0320 	rsble	r3, r3, #32
 80080ca:	ea47 0003 	orrgt.w	r0, r7, r3
 80080ce:	fa04 f003 	lslle.w	r0, r4, r3
 80080d2:	f7f8 fa17 	bl	8000504 <__aeabi_ui2d>
 80080d6:	2201      	movs	r2, #1
 80080d8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80080dc:	3e01      	subs	r6, #1
 80080de:	9212      	str	r2, [sp, #72]	@ 0x48
 80080e0:	e776      	b.n	8007fd0 <_dtoa_r+0x100>
 80080e2:	2301      	movs	r3, #1
 80080e4:	e7b7      	b.n	8008056 <_dtoa_r+0x186>
 80080e6:	9010      	str	r0, [sp, #64]	@ 0x40
 80080e8:	e7b6      	b.n	8008058 <_dtoa_r+0x188>
 80080ea:	9b00      	ldr	r3, [sp, #0]
 80080ec:	1bdb      	subs	r3, r3, r7
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	427b      	negs	r3, r7
 80080f2:	9308      	str	r3, [sp, #32]
 80080f4:	2300      	movs	r3, #0
 80080f6:	930d      	str	r3, [sp, #52]	@ 0x34
 80080f8:	e7c3      	b.n	8008082 <_dtoa_r+0x1b2>
 80080fa:	2301      	movs	r3, #1
 80080fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80080fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008100:	eb07 0b03 	add.w	fp, r7, r3
 8008104:	f10b 0301 	add.w	r3, fp, #1
 8008108:	2b01      	cmp	r3, #1
 800810a:	9303      	str	r3, [sp, #12]
 800810c:	bfb8      	it	lt
 800810e:	2301      	movlt	r3, #1
 8008110:	e006      	b.n	8008120 <_dtoa_r+0x250>
 8008112:	2301      	movs	r3, #1
 8008114:	9309      	str	r3, [sp, #36]	@ 0x24
 8008116:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008118:	2b00      	cmp	r3, #0
 800811a:	dd28      	ble.n	800816e <_dtoa_r+0x29e>
 800811c:	469b      	mov	fp, r3
 800811e:	9303      	str	r3, [sp, #12]
 8008120:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008124:	2100      	movs	r1, #0
 8008126:	2204      	movs	r2, #4
 8008128:	f102 0514 	add.w	r5, r2, #20
 800812c:	429d      	cmp	r5, r3
 800812e:	d926      	bls.n	800817e <_dtoa_r+0x2ae>
 8008130:	6041      	str	r1, [r0, #4]
 8008132:	4648      	mov	r0, r9
 8008134:	f000 fd9c 	bl	8008c70 <_Balloc>
 8008138:	4682      	mov	sl, r0
 800813a:	2800      	cmp	r0, #0
 800813c:	d142      	bne.n	80081c4 <_dtoa_r+0x2f4>
 800813e:	4b1e      	ldr	r3, [pc, #120]	@ (80081b8 <_dtoa_r+0x2e8>)
 8008140:	4602      	mov	r2, r0
 8008142:	f240 11af 	movw	r1, #431	@ 0x1af
 8008146:	e6da      	b.n	8007efe <_dtoa_r+0x2e>
 8008148:	2300      	movs	r3, #0
 800814a:	e7e3      	b.n	8008114 <_dtoa_r+0x244>
 800814c:	2300      	movs	r3, #0
 800814e:	e7d5      	b.n	80080fc <_dtoa_r+0x22c>
 8008150:	2401      	movs	r4, #1
 8008152:	2300      	movs	r3, #0
 8008154:	9307      	str	r3, [sp, #28]
 8008156:	9409      	str	r4, [sp, #36]	@ 0x24
 8008158:	f04f 3bff 	mov.w	fp, #4294967295
 800815c:	2200      	movs	r2, #0
 800815e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008162:	2312      	movs	r3, #18
 8008164:	920c      	str	r2, [sp, #48]	@ 0x30
 8008166:	e7db      	b.n	8008120 <_dtoa_r+0x250>
 8008168:	2301      	movs	r3, #1
 800816a:	9309      	str	r3, [sp, #36]	@ 0x24
 800816c:	e7f4      	b.n	8008158 <_dtoa_r+0x288>
 800816e:	f04f 0b01 	mov.w	fp, #1
 8008172:	f8cd b00c 	str.w	fp, [sp, #12]
 8008176:	465b      	mov	r3, fp
 8008178:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800817c:	e7d0      	b.n	8008120 <_dtoa_r+0x250>
 800817e:	3101      	adds	r1, #1
 8008180:	0052      	lsls	r2, r2, #1
 8008182:	e7d1      	b.n	8008128 <_dtoa_r+0x258>
 8008184:	f3af 8000 	nop.w
 8008188:	636f4361 	.word	0x636f4361
 800818c:	3fd287a7 	.word	0x3fd287a7
 8008190:	8b60c8b3 	.word	0x8b60c8b3
 8008194:	3fc68a28 	.word	0x3fc68a28
 8008198:	509f79fb 	.word	0x509f79fb
 800819c:	3fd34413 	.word	0x3fd34413
 80081a0:	0801cbd9 	.word	0x0801cbd9
 80081a4:	0801cbf0 	.word	0x0801cbf0
 80081a8:	7ff00000 	.word	0x7ff00000
 80081ac:	0801cba9 	.word	0x0801cba9
 80081b0:	3ff80000 	.word	0x3ff80000
 80081b4:	0801cd40 	.word	0x0801cd40
 80081b8:	0801cc48 	.word	0x0801cc48
 80081bc:	0801cbd5 	.word	0x0801cbd5
 80081c0:	0801cba8 	.word	0x0801cba8
 80081c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80081c8:	6018      	str	r0, [r3, #0]
 80081ca:	9b03      	ldr	r3, [sp, #12]
 80081cc:	2b0e      	cmp	r3, #14
 80081ce:	f200 80a1 	bhi.w	8008314 <_dtoa_r+0x444>
 80081d2:	2c00      	cmp	r4, #0
 80081d4:	f000 809e 	beq.w	8008314 <_dtoa_r+0x444>
 80081d8:	2f00      	cmp	r7, #0
 80081da:	dd33      	ble.n	8008244 <_dtoa_r+0x374>
 80081dc:	4b9c      	ldr	r3, [pc, #624]	@ (8008450 <_dtoa_r+0x580>)
 80081de:	f007 020f 	and.w	r2, r7, #15
 80081e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081e6:	ed93 7b00 	vldr	d7, [r3]
 80081ea:	05f8      	lsls	r0, r7, #23
 80081ec:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80081f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80081f4:	d516      	bpl.n	8008224 <_dtoa_r+0x354>
 80081f6:	4b97      	ldr	r3, [pc, #604]	@ (8008454 <_dtoa_r+0x584>)
 80081f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80081fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008200:	f7f8 fb24 	bl	800084c <__aeabi_ddiv>
 8008204:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008208:	f004 040f 	and.w	r4, r4, #15
 800820c:	2603      	movs	r6, #3
 800820e:	4d91      	ldr	r5, [pc, #580]	@ (8008454 <_dtoa_r+0x584>)
 8008210:	b954      	cbnz	r4, 8008228 <_dtoa_r+0x358>
 8008212:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008216:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800821a:	f7f8 fb17 	bl	800084c <__aeabi_ddiv>
 800821e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008222:	e028      	b.n	8008276 <_dtoa_r+0x3a6>
 8008224:	2602      	movs	r6, #2
 8008226:	e7f2      	b.n	800820e <_dtoa_r+0x33e>
 8008228:	07e1      	lsls	r1, r4, #31
 800822a:	d508      	bpl.n	800823e <_dtoa_r+0x36e>
 800822c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008230:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008234:	f7f8 f9e0 	bl	80005f8 <__aeabi_dmul>
 8008238:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800823c:	3601      	adds	r6, #1
 800823e:	1064      	asrs	r4, r4, #1
 8008240:	3508      	adds	r5, #8
 8008242:	e7e5      	b.n	8008210 <_dtoa_r+0x340>
 8008244:	f000 80af 	beq.w	80083a6 <_dtoa_r+0x4d6>
 8008248:	427c      	negs	r4, r7
 800824a:	4b81      	ldr	r3, [pc, #516]	@ (8008450 <_dtoa_r+0x580>)
 800824c:	4d81      	ldr	r5, [pc, #516]	@ (8008454 <_dtoa_r+0x584>)
 800824e:	f004 020f 	and.w	r2, r4, #15
 8008252:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800825e:	f7f8 f9cb 	bl	80005f8 <__aeabi_dmul>
 8008262:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008266:	1124      	asrs	r4, r4, #4
 8008268:	2300      	movs	r3, #0
 800826a:	2602      	movs	r6, #2
 800826c:	2c00      	cmp	r4, #0
 800826e:	f040 808f 	bne.w	8008390 <_dtoa_r+0x4c0>
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1d3      	bne.n	800821e <_dtoa_r+0x34e>
 8008276:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008278:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 8094 	beq.w	80083aa <_dtoa_r+0x4da>
 8008282:	4b75      	ldr	r3, [pc, #468]	@ (8008458 <_dtoa_r+0x588>)
 8008284:	2200      	movs	r2, #0
 8008286:	4620      	mov	r0, r4
 8008288:	4629      	mov	r1, r5
 800828a:	f7f8 fc27 	bl	8000adc <__aeabi_dcmplt>
 800828e:	2800      	cmp	r0, #0
 8008290:	f000 808b 	beq.w	80083aa <_dtoa_r+0x4da>
 8008294:	9b03      	ldr	r3, [sp, #12]
 8008296:	2b00      	cmp	r3, #0
 8008298:	f000 8087 	beq.w	80083aa <_dtoa_r+0x4da>
 800829c:	f1bb 0f00 	cmp.w	fp, #0
 80082a0:	dd34      	ble.n	800830c <_dtoa_r+0x43c>
 80082a2:	4620      	mov	r0, r4
 80082a4:	4b6d      	ldr	r3, [pc, #436]	@ (800845c <_dtoa_r+0x58c>)
 80082a6:	2200      	movs	r2, #0
 80082a8:	4629      	mov	r1, r5
 80082aa:	f7f8 f9a5 	bl	80005f8 <__aeabi_dmul>
 80082ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082b2:	f107 38ff 	add.w	r8, r7, #4294967295
 80082b6:	3601      	adds	r6, #1
 80082b8:	465c      	mov	r4, fp
 80082ba:	4630      	mov	r0, r6
 80082bc:	f7f8 f932 	bl	8000524 <__aeabi_i2d>
 80082c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082c4:	f7f8 f998 	bl	80005f8 <__aeabi_dmul>
 80082c8:	4b65      	ldr	r3, [pc, #404]	@ (8008460 <_dtoa_r+0x590>)
 80082ca:	2200      	movs	r2, #0
 80082cc:	f7f7 ffde 	bl	800028c <__adddf3>
 80082d0:	4605      	mov	r5, r0
 80082d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80082d6:	2c00      	cmp	r4, #0
 80082d8:	d16a      	bne.n	80083b0 <_dtoa_r+0x4e0>
 80082da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082de:	4b61      	ldr	r3, [pc, #388]	@ (8008464 <_dtoa_r+0x594>)
 80082e0:	2200      	movs	r2, #0
 80082e2:	f7f7 ffd1 	bl	8000288 <__aeabi_dsub>
 80082e6:	4602      	mov	r2, r0
 80082e8:	460b      	mov	r3, r1
 80082ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80082ee:	462a      	mov	r2, r5
 80082f0:	4633      	mov	r3, r6
 80082f2:	f7f8 fc11 	bl	8000b18 <__aeabi_dcmpgt>
 80082f6:	2800      	cmp	r0, #0
 80082f8:	f040 8298 	bne.w	800882c <_dtoa_r+0x95c>
 80082fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008300:	462a      	mov	r2, r5
 8008302:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008306:	f7f8 fbe9 	bl	8000adc <__aeabi_dcmplt>
 800830a:	bb38      	cbnz	r0, 800835c <_dtoa_r+0x48c>
 800830c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008310:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008314:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008316:	2b00      	cmp	r3, #0
 8008318:	f2c0 8157 	blt.w	80085ca <_dtoa_r+0x6fa>
 800831c:	2f0e      	cmp	r7, #14
 800831e:	f300 8154 	bgt.w	80085ca <_dtoa_r+0x6fa>
 8008322:	4b4b      	ldr	r3, [pc, #300]	@ (8008450 <_dtoa_r+0x580>)
 8008324:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008328:	ed93 7b00 	vldr	d7, [r3]
 800832c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800832e:	2b00      	cmp	r3, #0
 8008330:	ed8d 7b00 	vstr	d7, [sp]
 8008334:	f280 80e5 	bge.w	8008502 <_dtoa_r+0x632>
 8008338:	9b03      	ldr	r3, [sp, #12]
 800833a:	2b00      	cmp	r3, #0
 800833c:	f300 80e1 	bgt.w	8008502 <_dtoa_r+0x632>
 8008340:	d10c      	bne.n	800835c <_dtoa_r+0x48c>
 8008342:	4b48      	ldr	r3, [pc, #288]	@ (8008464 <_dtoa_r+0x594>)
 8008344:	2200      	movs	r2, #0
 8008346:	ec51 0b17 	vmov	r0, r1, d7
 800834a:	f7f8 f955 	bl	80005f8 <__aeabi_dmul>
 800834e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008352:	f7f8 fbd7 	bl	8000b04 <__aeabi_dcmpge>
 8008356:	2800      	cmp	r0, #0
 8008358:	f000 8266 	beq.w	8008828 <_dtoa_r+0x958>
 800835c:	2400      	movs	r4, #0
 800835e:	4625      	mov	r5, r4
 8008360:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008362:	4656      	mov	r6, sl
 8008364:	ea6f 0803 	mvn.w	r8, r3
 8008368:	2700      	movs	r7, #0
 800836a:	4621      	mov	r1, r4
 800836c:	4648      	mov	r0, r9
 800836e:	f000 fcbf 	bl	8008cf0 <_Bfree>
 8008372:	2d00      	cmp	r5, #0
 8008374:	f000 80bd 	beq.w	80084f2 <_dtoa_r+0x622>
 8008378:	b12f      	cbz	r7, 8008386 <_dtoa_r+0x4b6>
 800837a:	42af      	cmp	r7, r5
 800837c:	d003      	beq.n	8008386 <_dtoa_r+0x4b6>
 800837e:	4639      	mov	r1, r7
 8008380:	4648      	mov	r0, r9
 8008382:	f000 fcb5 	bl	8008cf0 <_Bfree>
 8008386:	4629      	mov	r1, r5
 8008388:	4648      	mov	r0, r9
 800838a:	f000 fcb1 	bl	8008cf0 <_Bfree>
 800838e:	e0b0      	b.n	80084f2 <_dtoa_r+0x622>
 8008390:	07e2      	lsls	r2, r4, #31
 8008392:	d505      	bpl.n	80083a0 <_dtoa_r+0x4d0>
 8008394:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008398:	f7f8 f92e 	bl	80005f8 <__aeabi_dmul>
 800839c:	3601      	adds	r6, #1
 800839e:	2301      	movs	r3, #1
 80083a0:	1064      	asrs	r4, r4, #1
 80083a2:	3508      	adds	r5, #8
 80083a4:	e762      	b.n	800826c <_dtoa_r+0x39c>
 80083a6:	2602      	movs	r6, #2
 80083a8:	e765      	b.n	8008276 <_dtoa_r+0x3a6>
 80083aa:	9c03      	ldr	r4, [sp, #12]
 80083ac:	46b8      	mov	r8, r7
 80083ae:	e784      	b.n	80082ba <_dtoa_r+0x3ea>
 80083b0:	4b27      	ldr	r3, [pc, #156]	@ (8008450 <_dtoa_r+0x580>)
 80083b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80083b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80083b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80083bc:	4454      	add	r4, sl
 80083be:	2900      	cmp	r1, #0
 80083c0:	d054      	beq.n	800846c <_dtoa_r+0x59c>
 80083c2:	4929      	ldr	r1, [pc, #164]	@ (8008468 <_dtoa_r+0x598>)
 80083c4:	2000      	movs	r0, #0
 80083c6:	f7f8 fa41 	bl	800084c <__aeabi_ddiv>
 80083ca:	4633      	mov	r3, r6
 80083cc:	462a      	mov	r2, r5
 80083ce:	f7f7 ff5b 	bl	8000288 <__aeabi_dsub>
 80083d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80083d6:	4656      	mov	r6, sl
 80083d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083dc:	f7f8 fbbc 	bl	8000b58 <__aeabi_d2iz>
 80083e0:	4605      	mov	r5, r0
 80083e2:	f7f8 f89f 	bl	8000524 <__aeabi_i2d>
 80083e6:	4602      	mov	r2, r0
 80083e8:	460b      	mov	r3, r1
 80083ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083ee:	f7f7 ff4b 	bl	8000288 <__aeabi_dsub>
 80083f2:	3530      	adds	r5, #48	@ 0x30
 80083f4:	4602      	mov	r2, r0
 80083f6:	460b      	mov	r3, r1
 80083f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80083fc:	f806 5b01 	strb.w	r5, [r6], #1
 8008400:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008404:	f7f8 fb6a 	bl	8000adc <__aeabi_dcmplt>
 8008408:	2800      	cmp	r0, #0
 800840a:	d172      	bne.n	80084f2 <_dtoa_r+0x622>
 800840c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008410:	4911      	ldr	r1, [pc, #68]	@ (8008458 <_dtoa_r+0x588>)
 8008412:	2000      	movs	r0, #0
 8008414:	f7f7 ff38 	bl	8000288 <__aeabi_dsub>
 8008418:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800841c:	f7f8 fb5e 	bl	8000adc <__aeabi_dcmplt>
 8008420:	2800      	cmp	r0, #0
 8008422:	f040 80b4 	bne.w	800858e <_dtoa_r+0x6be>
 8008426:	42a6      	cmp	r6, r4
 8008428:	f43f af70 	beq.w	800830c <_dtoa_r+0x43c>
 800842c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008430:	4b0a      	ldr	r3, [pc, #40]	@ (800845c <_dtoa_r+0x58c>)
 8008432:	2200      	movs	r2, #0
 8008434:	f7f8 f8e0 	bl	80005f8 <__aeabi_dmul>
 8008438:	4b08      	ldr	r3, [pc, #32]	@ (800845c <_dtoa_r+0x58c>)
 800843a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800843e:	2200      	movs	r2, #0
 8008440:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008444:	f7f8 f8d8 	bl	80005f8 <__aeabi_dmul>
 8008448:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800844c:	e7c4      	b.n	80083d8 <_dtoa_r+0x508>
 800844e:	bf00      	nop
 8008450:	0801cd40 	.word	0x0801cd40
 8008454:	0801cd18 	.word	0x0801cd18
 8008458:	3ff00000 	.word	0x3ff00000
 800845c:	40240000 	.word	0x40240000
 8008460:	401c0000 	.word	0x401c0000
 8008464:	40140000 	.word	0x40140000
 8008468:	3fe00000 	.word	0x3fe00000
 800846c:	4631      	mov	r1, r6
 800846e:	4628      	mov	r0, r5
 8008470:	f7f8 f8c2 	bl	80005f8 <__aeabi_dmul>
 8008474:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008478:	9413      	str	r4, [sp, #76]	@ 0x4c
 800847a:	4656      	mov	r6, sl
 800847c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008480:	f7f8 fb6a 	bl	8000b58 <__aeabi_d2iz>
 8008484:	4605      	mov	r5, r0
 8008486:	f7f8 f84d 	bl	8000524 <__aeabi_i2d>
 800848a:	4602      	mov	r2, r0
 800848c:	460b      	mov	r3, r1
 800848e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008492:	f7f7 fef9 	bl	8000288 <__aeabi_dsub>
 8008496:	3530      	adds	r5, #48	@ 0x30
 8008498:	f806 5b01 	strb.w	r5, [r6], #1
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	42a6      	cmp	r6, r4
 80084a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80084a6:	f04f 0200 	mov.w	r2, #0
 80084aa:	d124      	bne.n	80084f6 <_dtoa_r+0x626>
 80084ac:	4baf      	ldr	r3, [pc, #700]	@ (800876c <_dtoa_r+0x89c>)
 80084ae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80084b2:	f7f7 feeb 	bl	800028c <__adddf3>
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084be:	f7f8 fb2b 	bl	8000b18 <__aeabi_dcmpgt>
 80084c2:	2800      	cmp	r0, #0
 80084c4:	d163      	bne.n	800858e <_dtoa_r+0x6be>
 80084c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80084ca:	49a8      	ldr	r1, [pc, #672]	@ (800876c <_dtoa_r+0x89c>)
 80084cc:	2000      	movs	r0, #0
 80084ce:	f7f7 fedb 	bl	8000288 <__aeabi_dsub>
 80084d2:	4602      	mov	r2, r0
 80084d4:	460b      	mov	r3, r1
 80084d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084da:	f7f8 faff 	bl	8000adc <__aeabi_dcmplt>
 80084de:	2800      	cmp	r0, #0
 80084e0:	f43f af14 	beq.w	800830c <_dtoa_r+0x43c>
 80084e4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80084e6:	1e73      	subs	r3, r6, #1
 80084e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80084ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80084ee:	2b30      	cmp	r3, #48	@ 0x30
 80084f0:	d0f8      	beq.n	80084e4 <_dtoa_r+0x614>
 80084f2:	4647      	mov	r7, r8
 80084f4:	e03b      	b.n	800856e <_dtoa_r+0x69e>
 80084f6:	4b9e      	ldr	r3, [pc, #632]	@ (8008770 <_dtoa_r+0x8a0>)
 80084f8:	f7f8 f87e 	bl	80005f8 <__aeabi_dmul>
 80084fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008500:	e7bc      	b.n	800847c <_dtoa_r+0x5ac>
 8008502:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008506:	4656      	mov	r6, sl
 8008508:	e9dd 2300 	ldrd	r2, r3, [sp]
 800850c:	4620      	mov	r0, r4
 800850e:	4629      	mov	r1, r5
 8008510:	f7f8 f99c 	bl	800084c <__aeabi_ddiv>
 8008514:	f7f8 fb20 	bl	8000b58 <__aeabi_d2iz>
 8008518:	4680      	mov	r8, r0
 800851a:	f7f8 f803 	bl	8000524 <__aeabi_i2d>
 800851e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008522:	f7f8 f869 	bl	80005f8 <__aeabi_dmul>
 8008526:	4602      	mov	r2, r0
 8008528:	460b      	mov	r3, r1
 800852a:	4620      	mov	r0, r4
 800852c:	4629      	mov	r1, r5
 800852e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008532:	f7f7 fea9 	bl	8000288 <__aeabi_dsub>
 8008536:	f806 4b01 	strb.w	r4, [r6], #1
 800853a:	9d03      	ldr	r5, [sp, #12]
 800853c:	eba6 040a 	sub.w	r4, r6, sl
 8008540:	42a5      	cmp	r5, r4
 8008542:	4602      	mov	r2, r0
 8008544:	460b      	mov	r3, r1
 8008546:	d133      	bne.n	80085b0 <_dtoa_r+0x6e0>
 8008548:	f7f7 fea0 	bl	800028c <__adddf3>
 800854c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008550:	4604      	mov	r4, r0
 8008552:	460d      	mov	r5, r1
 8008554:	f7f8 fae0 	bl	8000b18 <__aeabi_dcmpgt>
 8008558:	b9c0      	cbnz	r0, 800858c <_dtoa_r+0x6bc>
 800855a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800855e:	4620      	mov	r0, r4
 8008560:	4629      	mov	r1, r5
 8008562:	f7f8 fab1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008566:	b110      	cbz	r0, 800856e <_dtoa_r+0x69e>
 8008568:	f018 0f01 	tst.w	r8, #1
 800856c:	d10e      	bne.n	800858c <_dtoa_r+0x6bc>
 800856e:	9902      	ldr	r1, [sp, #8]
 8008570:	4648      	mov	r0, r9
 8008572:	f000 fbbd 	bl	8008cf0 <_Bfree>
 8008576:	2300      	movs	r3, #0
 8008578:	7033      	strb	r3, [r6, #0]
 800857a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800857c:	3701      	adds	r7, #1
 800857e:	601f      	str	r7, [r3, #0]
 8008580:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008582:	2b00      	cmp	r3, #0
 8008584:	f000 824b 	beq.w	8008a1e <_dtoa_r+0xb4e>
 8008588:	601e      	str	r6, [r3, #0]
 800858a:	e248      	b.n	8008a1e <_dtoa_r+0xb4e>
 800858c:	46b8      	mov	r8, r7
 800858e:	4633      	mov	r3, r6
 8008590:	461e      	mov	r6, r3
 8008592:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008596:	2a39      	cmp	r2, #57	@ 0x39
 8008598:	d106      	bne.n	80085a8 <_dtoa_r+0x6d8>
 800859a:	459a      	cmp	sl, r3
 800859c:	d1f8      	bne.n	8008590 <_dtoa_r+0x6c0>
 800859e:	2230      	movs	r2, #48	@ 0x30
 80085a0:	f108 0801 	add.w	r8, r8, #1
 80085a4:	f88a 2000 	strb.w	r2, [sl]
 80085a8:	781a      	ldrb	r2, [r3, #0]
 80085aa:	3201      	adds	r2, #1
 80085ac:	701a      	strb	r2, [r3, #0]
 80085ae:	e7a0      	b.n	80084f2 <_dtoa_r+0x622>
 80085b0:	4b6f      	ldr	r3, [pc, #444]	@ (8008770 <_dtoa_r+0x8a0>)
 80085b2:	2200      	movs	r2, #0
 80085b4:	f7f8 f820 	bl	80005f8 <__aeabi_dmul>
 80085b8:	2200      	movs	r2, #0
 80085ba:	2300      	movs	r3, #0
 80085bc:	4604      	mov	r4, r0
 80085be:	460d      	mov	r5, r1
 80085c0:	f7f8 fa82 	bl	8000ac8 <__aeabi_dcmpeq>
 80085c4:	2800      	cmp	r0, #0
 80085c6:	d09f      	beq.n	8008508 <_dtoa_r+0x638>
 80085c8:	e7d1      	b.n	800856e <_dtoa_r+0x69e>
 80085ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085cc:	2a00      	cmp	r2, #0
 80085ce:	f000 80ea 	beq.w	80087a6 <_dtoa_r+0x8d6>
 80085d2:	9a07      	ldr	r2, [sp, #28]
 80085d4:	2a01      	cmp	r2, #1
 80085d6:	f300 80cd 	bgt.w	8008774 <_dtoa_r+0x8a4>
 80085da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80085dc:	2a00      	cmp	r2, #0
 80085de:	f000 80c1 	beq.w	8008764 <_dtoa_r+0x894>
 80085e2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80085e6:	9c08      	ldr	r4, [sp, #32]
 80085e8:	9e00      	ldr	r6, [sp, #0]
 80085ea:	9a00      	ldr	r2, [sp, #0]
 80085ec:	441a      	add	r2, r3
 80085ee:	9200      	str	r2, [sp, #0]
 80085f0:	9a06      	ldr	r2, [sp, #24]
 80085f2:	2101      	movs	r1, #1
 80085f4:	441a      	add	r2, r3
 80085f6:	4648      	mov	r0, r9
 80085f8:	9206      	str	r2, [sp, #24]
 80085fa:	f000 fc2d 	bl	8008e58 <__i2b>
 80085fe:	4605      	mov	r5, r0
 8008600:	b166      	cbz	r6, 800861c <_dtoa_r+0x74c>
 8008602:	9b06      	ldr	r3, [sp, #24]
 8008604:	2b00      	cmp	r3, #0
 8008606:	dd09      	ble.n	800861c <_dtoa_r+0x74c>
 8008608:	42b3      	cmp	r3, r6
 800860a:	9a00      	ldr	r2, [sp, #0]
 800860c:	bfa8      	it	ge
 800860e:	4633      	movge	r3, r6
 8008610:	1ad2      	subs	r2, r2, r3
 8008612:	9200      	str	r2, [sp, #0]
 8008614:	9a06      	ldr	r2, [sp, #24]
 8008616:	1af6      	subs	r6, r6, r3
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	9306      	str	r3, [sp, #24]
 800861c:	9b08      	ldr	r3, [sp, #32]
 800861e:	b30b      	cbz	r3, 8008664 <_dtoa_r+0x794>
 8008620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008622:	2b00      	cmp	r3, #0
 8008624:	f000 80c6 	beq.w	80087b4 <_dtoa_r+0x8e4>
 8008628:	2c00      	cmp	r4, #0
 800862a:	f000 80c0 	beq.w	80087ae <_dtoa_r+0x8de>
 800862e:	4629      	mov	r1, r5
 8008630:	4622      	mov	r2, r4
 8008632:	4648      	mov	r0, r9
 8008634:	f000 fcc8 	bl	8008fc8 <__pow5mult>
 8008638:	9a02      	ldr	r2, [sp, #8]
 800863a:	4601      	mov	r1, r0
 800863c:	4605      	mov	r5, r0
 800863e:	4648      	mov	r0, r9
 8008640:	f000 fc20 	bl	8008e84 <__multiply>
 8008644:	9902      	ldr	r1, [sp, #8]
 8008646:	4680      	mov	r8, r0
 8008648:	4648      	mov	r0, r9
 800864a:	f000 fb51 	bl	8008cf0 <_Bfree>
 800864e:	9b08      	ldr	r3, [sp, #32]
 8008650:	1b1b      	subs	r3, r3, r4
 8008652:	9308      	str	r3, [sp, #32]
 8008654:	f000 80b1 	beq.w	80087ba <_dtoa_r+0x8ea>
 8008658:	9a08      	ldr	r2, [sp, #32]
 800865a:	4641      	mov	r1, r8
 800865c:	4648      	mov	r0, r9
 800865e:	f000 fcb3 	bl	8008fc8 <__pow5mult>
 8008662:	9002      	str	r0, [sp, #8]
 8008664:	2101      	movs	r1, #1
 8008666:	4648      	mov	r0, r9
 8008668:	f000 fbf6 	bl	8008e58 <__i2b>
 800866c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800866e:	4604      	mov	r4, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	f000 81d8 	beq.w	8008a26 <_dtoa_r+0xb56>
 8008676:	461a      	mov	r2, r3
 8008678:	4601      	mov	r1, r0
 800867a:	4648      	mov	r0, r9
 800867c:	f000 fca4 	bl	8008fc8 <__pow5mult>
 8008680:	9b07      	ldr	r3, [sp, #28]
 8008682:	2b01      	cmp	r3, #1
 8008684:	4604      	mov	r4, r0
 8008686:	f300 809f 	bgt.w	80087c8 <_dtoa_r+0x8f8>
 800868a:	9b04      	ldr	r3, [sp, #16]
 800868c:	2b00      	cmp	r3, #0
 800868e:	f040 8097 	bne.w	80087c0 <_dtoa_r+0x8f0>
 8008692:	9b05      	ldr	r3, [sp, #20]
 8008694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008698:	2b00      	cmp	r3, #0
 800869a:	f040 8093 	bne.w	80087c4 <_dtoa_r+0x8f4>
 800869e:	9b05      	ldr	r3, [sp, #20]
 80086a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80086a4:	0d1b      	lsrs	r3, r3, #20
 80086a6:	051b      	lsls	r3, r3, #20
 80086a8:	b133      	cbz	r3, 80086b8 <_dtoa_r+0x7e8>
 80086aa:	9b00      	ldr	r3, [sp, #0]
 80086ac:	3301      	adds	r3, #1
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	9b06      	ldr	r3, [sp, #24]
 80086b2:	3301      	adds	r3, #1
 80086b4:	9306      	str	r3, [sp, #24]
 80086b6:	2301      	movs	r3, #1
 80086b8:	9308      	str	r3, [sp, #32]
 80086ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f000 81b8 	beq.w	8008a32 <_dtoa_r+0xb62>
 80086c2:	6923      	ldr	r3, [r4, #16]
 80086c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80086c8:	6918      	ldr	r0, [r3, #16]
 80086ca:	f000 fb79 	bl	8008dc0 <__hi0bits>
 80086ce:	f1c0 0020 	rsb	r0, r0, #32
 80086d2:	9b06      	ldr	r3, [sp, #24]
 80086d4:	4418      	add	r0, r3
 80086d6:	f010 001f 	ands.w	r0, r0, #31
 80086da:	f000 8082 	beq.w	80087e2 <_dtoa_r+0x912>
 80086de:	f1c0 0320 	rsb	r3, r0, #32
 80086e2:	2b04      	cmp	r3, #4
 80086e4:	dd73      	ble.n	80087ce <_dtoa_r+0x8fe>
 80086e6:	9b00      	ldr	r3, [sp, #0]
 80086e8:	f1c0 001c 	rsb	r0, r0, #28
 80086ec:	4403      	add	r3, r0
 80086ee:	9300      	str	r3, [sp, #0]
 80086f0:	9b06      	ldr	r3, [sp, #24]
 80086f2:	4403      	add	r3, r0
 80086f4:	4406      	add	r6, r0
 80086f6:	9306      	str	r3, [sp, #24]
 80086f8:	9b00      	ldr	r3, [sp, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	dd05      	ble.n	800870a <_dtoa_r+0x83a>
 80086fe:	9902      	ldr	r1, [sp, #8]
 8008700:	461a      	mov	r2, r3
 8008702:	4648      	mov	r0, r9
 8008704:	f000 fcba 	bl	800907c <__lshift>
 8008708:	9002      	str	r0, [sp, #8]
 800870a:	9b06      	ldr	r3, [sp, #24]
 800870c:	2b00      	cmp	r3, #0
 800870e:	dd05      	ble.n	800871c <_dtoa_r+0x84c>
 8008710:	4621      	mov	r1, r4
 8008712:	461a      	mov	r2, r3
 8008714:	4648      	mov	r0, r9
 8008716:	f000 fcb1 	bl	800907c <__lshift>
 800871a:	4604      	mov	r4, r0
 800871c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800871e:	2b00      	cmp	r3, #0
 8008720:	d061      	beq.n	80087e6 <_dtoa_r+0x916>
 8008722:	9802      	ldr	r0, [sp, #8]
 8008724:	4621      	mov	r1, r4
 8008726:	f000 fd15 	bl	8009154 <__mcmp>
 800872a:	2800      	cmp	r0, #0
 800872c:	da5b      	bge.n	80087e6 <_dtoa_r+0x916>
 800872e:	2300      	movs	r3, #0
 8008730:	9902      	ldr	r1, [sp, #8]
 8008732:	220a      	movs	r2, #10
 8008734:	4648      	mov	r0, r9
 8008736:	f000 fafd 	bl	8008d34 <__multadd>
 800873a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800873c:	9002      	str	r0, [sp, #8]
 800873e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008742:	2b00      	cmp	r3, #0
 8008744:	f000 8177 	beq.w	8008a36 <_dtoa_r+0xb66>
 8008748:	4629      	mov	r1, r5
 800874a:	2300      	movs	r3, #0
 800874c:	220a      	movs	r2, #10
 800874e:	4648      	mov	r0, r9
 8008750:	f000 faf0 	bl	8008d34 <__multadd>
 8008754:	f1bb 0f00 	cmp.w	fp, #0
 8008758:	4605      	mov	r5, r0
 800875a:	dc6f      	bgt.n	800883c <_dtoa_r+0x96c>
 800875c:	9b07      	ldr	r3, [sp, #28]
 800875e:	2b02      	cmp	r3, #2
 8008760:	dc49      	bgt.n	80087f6 <_dtoa_r+0x926>
 8008762:	e06b      	b.n	800883c <_dtoa_r+0x96c>
 8008764:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008766:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800876a:	e73c      	b.n	80085e6 <_dtoa_r+0x716>
 800876c:	3fe00000 	.word	0x3fe00000
 8008770:	40240000 	.word	0x40240000
 8008774:	9b03      	ldr	r3, [sp, #12]
 8008776:	1e5c      	subs	r4, r3, #1
 8008778:	9b08      	ldr	r3, [sp, #32]
 800877a:	42a3      	cmp	r3, r4
 800877c:	db09      	blt.n	8008792 <_dtoa_r+0x8c2>
 800877e:	1b1c      	subs	r4, r3, r4
 8008780:	9b03      	ldr	r3, [sp, #12]
 8008782:	2b00      	cmp	r3, #0
 8008784:	f6bf af30 	bge.w	80085e8 <_dtoa_r+0x718>
 8008788:	9b00      	ldr	r3, [sp, #0]
 800878a:	9a03      	ldr	r2, [sp, #12]
 800878c:	1a9e      	subs	r6, r3, r2
 800878e:	2300      	movs	r3, #0
 8008790:	e72b      	b.n	80085ea <_dtoa_r+0x71a>
 8008792:	9b08      	ldr	r3, [sp, #32]
 8008794:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008796:	9408      	str	r4, [sp, #32]
 8008798:	1ae3      	subs	r3, r4, r3
 800879a:	441a      	add	r2, r3
 800879c:	9e00      	ldr	r6, [sp, #0]
 800879e:	9b03      	ldr	r3, [sp, #12]
 80087a0:	920d      	str	r2, [sp, #52]	@ 0x34
 80087a2:	2400      	movs	r4, #0
 80087a4:	e721      	b.n	80085ea <_dtoa_r+0x71a>
 80087a6:	9c08      	ldr	r4, [sp, #32]
 80087a8:	9e00      	ldr	r6, [sp, #0]
 80087aa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80087ac:	e728      	b.n	8008600 <_dtoa_r+0x730>
 80087ae:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80087b2:	e751      	b.n	8008658 <_dtoa_r+0x788>
 80087b4:	9a08      	ldr	r2, [sp, #32]
 80087b6:	9902      	ldr	r1, [sp, #8]
 80087b8:	e750      	b.n	800865c <_dtoa_r+0x78c>
 80087ba:	f8cd 8008 	str.w	r8, [sp, #8]
 80087be:	e751      	b.n	8008664 <_dtoa_r+0x794>
 80087c0:	2300      	movs	r3, #0
 80087c2:	e779      	b.n	80086b8 <_dtoa_r+0x7e8>
 80087c4:	9b04      	ldr	r3, [sp, #16]
 80087c6:	e777      	b.n	80086b8 <_dtoa_r+0x7e8>
 80087c8:	2300      	movs	r3, #0
 80087ca:	9308      	str	r3, [sp, #32]
 80087cc:	e779      	b.n	80086c2 <_dtoa_r+0x7f2>
 80087ce:	d093      	beq.n	80086f8 <_dtoa_r+0x828>
 80087d0:	9a00      	ldr	r2, [sp, #0]
 80087d2:	331c      	adds	r3, #28
 80087d4:	441a      	add	r2, r3
 80087d6:	9200      	str	r2, [sp, #0]
 80087d8:	9a06      	ldr	r2, [sp, #24]
 80087da:	441a      	add	r2, r3
 80087dc:	441e      	add	r6, r3
 80087de:	9206      	str	r2, [sp, #24]
 80087e0:	e78a      	b.n	80086f8 <_dtoa_r+0x828>
 80087e2:	4603      	mov	r3, r0
 80087e4:	e7f4      	b.n	80087d0 <_dtoa_r+0x900>
 80087e6:	9b03      	ldr	r3, [sp, #12]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	46b8      	mov	r8, r7
 80087ec:	dc20      	bgt.n	8008830 <_dtoa_r+0x960>
 80087ee:	469b      	mov	fp, r3
 80087f0:	9b07      	ldr	r3, [sp, #28]
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	dd1e      	ble.n	8008834 <_dtoa_r+0x964>
 80087f6:	f1bb 0f00 	cmp.w	fp, #0
 80087fa:	f47f adb1 	bne.w	8008360 <_dtoa_r+0x490>
 80087fe:	4621      	mov	r1, r4
 8008800:	465b      	mov	r3, fp
 8008802:	2205      	movs	r2, #5
 8008804:	4648      	mov	r0, r9
 8008806:	f000 fa95 	bl	8008d34 <__multadd>
 800880a:	4601      	mov	r1, r0
 800880c:	4604      	mov	r4, r0
 800880e:	9802      	ldr	r0, [sp, #8]
 8008810:	f000 fca0 	bl	8009154 <__mcmp>
 8008814:	2800      	cmp	r0, #0
 8008816:	f77f ada3 	ble.w	8008360 <_dtoa_r+0x490>
 800881a:	4656      	mov	r6, sl
 800881c:	2331      	movs	r3, #49	@ 0x31
 800881e:	f806 3b01 	strb.w	r3, [r6], #1
 8008822:	f108 0801 	add.w	r8, r8, #1
 8008826:	e59f      	b.n	8008368 <_dtoa_r+0x498>
 8008828:	9c03      	ldr	r4, [sp, #12]
 800882a:	46b8      	mov	r8, r7
 800882c:	4625      	mov	r5, r4
 800882e:	e7f4      	b.n	800881a <_dtoa_r+0x94a>
 8008830:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008834:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008836:	2b00      	cmp	r3, #0
 8008838:	f000 8101 	beq.w	8008a3e <_dtoa_r+0xb6e>
 800883c:	2e00      	cmp	r6, #0
 800883e:	dd05      	ble.n	800884c <_dtoa_r+0x97c>
 8008840:	4629      	mov	r1, r5
 8008842:	4632      	mov	r2, r6
 8008844:	4648      	mov	r0, r9
 8008846:	f000 fc19 	bl	800907c <__lshift>
 800884a:	4605      	mov	r5, r0
 800884c:	9b08      	ldr	r3, [sp, #32]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d05c      	beq.n	800890c <_dtoa_r+0xa3c>
 8008852:	6869      	ldr	r1, [r5, #4]
 8008854:	4648      	mov	r0, r9
 8008856:	f000 fa0b 	bl	8008c70 <_Balloc>
 800885a:	4606      	mov	r6, r0
 800885c:	b928      	cbnz	r0, 800886a <_dtoa_r+0x99a>
 800885e:	4b82      	ldr	r3, [pc, #520]	@ (8008a68 <_dtoa_r+0xb98>)
 8008860:	4602      	mov	r2, r0
 8008862:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008866:	f7ff bb4a 	b.w	8007efe <_dtoa_r+0x2e>
 800886a:	692a      	ldr	r2, [r5, #16]
 800886c:	3202      	adds	r2, #2
 800886e:	0092      	lsls	r2, r2, #2
 8008870:	f105 010c 	add.w	r1, r5, #12
 8008874:	300c      	adds	r0, #12
 8008876:	f000 fe31 	bl	80094dc <memcpy>
 800887a:	2201      	movs	r2, #1
 800887c:	4631      	mov	r1, r6
 800887e:	4648      	mov	r0, r9
 8008880:	f000 fbfc 	bl	800907c <__lshift>
 8008884:	f10a 0301 	add.w	r3, sl, #1
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	eb0a 030b 	add.w	r3, sl, fp
 800888e:	9308      	str	r3, [sp, #32]
 8008890:	9b04      	ldr	r3, [sp, #16]
 8008892:	f003 0301 	and.w	r3, r3, #1
 8008896:	462f      	mov	r7, r5
 8008898:	9306      	str	r3, [sp, #24]
 800889a:	4605      	mov	r5, r0
 800889c:	9b00      	ldr	r3, [sp, #0]
 800889e:	9802      	ldr	r0, [sp, #8]
 80088a0:	4621      	mov	r1, r4
 80088a2:	f103 3bff 	add.w	fp, r3, #4294967295
 80088a6:	f7ff fa8a 	bl	8007dbe <quorem>
 80088aa:	4603      	mov	r3, r0
 80088ac:	3330      	adds	r3, #48	@ 0x30
 80088ae:	9003      	str	r0, [sp, #12]
 80088b0:	4639      	mov	r1, r7
 80088b2:	9802      	ldr	r0, [sp, #8]
 80088b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80088b6:	f000 fc4d 	bl	8009154 <__mcmp>
 80088ba:	462a      	mov	r2, r5
 80088bc:	9004      	str	r0, [sp, #16]
 80088be:	4621      	mov	r1, r4
 80088c0:	4648      	mov	r0, r9
 80088c2:	f000 fc63 	bl	800918c <__mdiff>
 80088c6:	68c2      	ldr	r2, [r0, #12]
 80088c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088ca:	4606      	mov	r6, r0
 80088cc:	bb02      	cbnz	r2, 8008910 <_dtoa_r+0xa40>
 80088ce:	4601      	mov	r1, r0
 80088d0:	9802      	ldr	r0, [sp, #8]
 80088d2:	f000 fc3f 	bl	8009154 <__mcmp>
 80088d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088d8:	4602      	mov	r2, r0
 80088da:	4631      	mov	r1, r6
 80088dc:	4648      	mov	r0, r9
 80088de:	920c      	str	r2, [sp, #48]	@ 0x30
 80088e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80088e2:	f000 fa05 	bl	8008cf0 <_Bfree>
 80088e6:	9b07      	ldr	r3, [sp, #28]
 80088e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80088ea:	9e00      	ldr	r6, [sp, #0]
 80088ec:	ea42 0103 	orr.w	r1, r2, r3
 80088f0:	9b06      	ldr	r3, [sp, #24]
 80088f2:	4319      	orrs	r1, r3
 80088f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088f6:	d10d      	bne.n	8008914 <_dtoa_r+0xa44>
 80088f8:	2b39      	cmp	r3, #57	@ 0x39
 80088fa:	d027      	beq.n	800894c <_dtoa_r+0xa7c>
 80088fc:	9a04      	ldr	r2, [sp, #16]
 80088fe:	2a00      	cmp	r2, #0
 8008900:	dd01      	ble.n	8008906 <_dtoa_r+0xa36>
 8008902:	9b03      	ldr	r3, [sp, #12]
 8008904:	3331      	adds	r3, #49	@ 0x31
 8008906:	f88b 3000 	strb.w	r3, [fp]
 800890a:	e52e      	b.n	800836a <_dtoa_r+0x49a>
 800890c:	4628      	mov	r0, r5
 800890e:	e7b9      	b.n	8008884 <_dtoa_r+0x9b4>
 8008910:	2201      	movs	r2, #1
 8008912:	e7e2      	b.n	80088da <_dtoa_r+0xa0a>
 8008914:	9904      	ldr	r1, [sp, #16]
 8008916:	2900      	cmp	r1, #0
 8008918:	db04      	blt.n	8008924 <_dtoa_r+0xa54>
 800891a:	9807      	ldr	r0, [sp, #28]
 800891c:	4301      	orrs	r1, r0
 800891e:	9806      	ldr	r0, [sp, #24]
 8008920:	4301      	orrs	r1, r0
 8008922:	d120      	bne.n	8008966 <_dtoa_r+0xa96>
 8008924:	2a00      	cmp	r2, #0
 8008926:	ddee      	ble.n	8008906 <_dtoa_r+0xa36>
 8008928:	9902      	ldr	r1, [sp, #8]
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	2201      	movs	r2, #1
 800892e:	4648      	mov	r0, r9
 8008930:	f000 fba4 	bl	800907c <__lshift>
 8008934:	4621      	mov	r1, r4
 8008936:	9002      	str	r0, [sp, #8]
 8008938:	f000 fc0c 	bl	8009154 <__mcmp>
 800893c:	2800      	cmp	r0, #0
 800893e:	9b00      	ldr	r3, [sp, #0]
 8008940:	dc02      	bgt.n	8008948 <_dtoa_r+0xa78>
 8008942:	d1e0      	bne.n	8008906 <_dtoa_r+0xa36>
 8008944:	07da      	lsls	r2, r3, #31
 8008946:	d5de      	bpl.n	8008906 <_dtoa_r+0xa36>
 8008948:	2b39      	cmp	r3, #57	@ 0x39
 800894a:	d1da      	bne.n	8008902 <_dtoa_r+0xa32>
 800894c:	2339      	movs	r3, #57	@ 0x39
 800894e:	f88b 3000 	strb.w	r3, [fp]
 8008952:	4633      	mov	r3, r6
 8008954:	461e      	mov	r6, r3
 8008956:	3b01      	subs	r3, #1
 8008958:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800895c:	2a39      	cmp	r2, #57	@ 0x39
 800895e:	d04e      	beq.n	80089fe <_dtoa_r+0xb2e>
 8008960:	3201      	adds	r2, #1
 8008962:	701a      	strb	r2, [r3, #0]
 8008964:	e501      	b.n	800836a <_dtoa_r+0x49a>
 8008966:	2a00      	cmp	r2, #0
 8008968:	dd03      	ble.n	8008972 <_dtoa_r+0xaa2>
 800896a:	2b39      	cmp	r3, #57	@ 0x39
 800896c:	d0ee      	beq.n	800894c <_dtoa_r+0xa7c>
 800896e:	3301      	adds	r3, #1
 8008970:	e7c9      	b.n	8008906 <_dtoa_r+0xa36>
 8008972:	9a00      	ldr	r2, [sp, #0]
 8008974:	9908      	ldr	r1, [sp, #32]
 8008976:	f802 3c01 	strb.w	r3, [r2, #-1]
 800897a:	428a      	cmp	r2, r1
 800897c:	d028      	beq.n	80089d0 <_dtoa_r+0xb00>
 800897e:	9902      	ldr	r1, [sp, #8]
 8008980:	2300      	movs	r3, #0
 8008982:	220a      	movs	r2, #10
 8008984:	4648      	mov	r0, r9
 8008986:	f000 f9d5 	bl	8008d34 <__multadd>
 800898a:	42af      	cmp	r7, r5
 800898c:	9002      	str	r0, [sp, #8]
 800898e:	f04f 0300 	mov.w	r3, #0
 8008992:	f04f 020a 	mov.w	r2, #10
 8008996:	4639      	mov	r1, r7
 8008998:	4648      	mov	r0, r9
 800899a:	d107      	bne.n	80089ac <_dtoa_r+0xadc>
 800899c:	f000 f9ca 	bl	8008d34 <__multadd>
 80089a0:	4607      	mov	r7, r0
 80089a2:	4605      	mov	r5, r0
 80089a4:	9b00      	ldr	r3, [sp, #0]
 80089a6:	3301      	adds	r3, #1
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	e777      	b.n	800889c <_dtoa_r+0x9cc>
 80089ac:	f000 f9c2 	bl	8008d34 <__multadd>
 80089b0:	4629      	mov	r1, r5
 80089b2:	4607      	mov	r7, r0
 80089b4:	2300      	movs	r3, #0
 80089b6:	220a      	movs	r2, #10
 80089b8:	4648      	mov	r0, r9
 80089ba:	f000 f9bb 	bl	8008d34 <__multadd>
 80089be:	4605      	mov	r5, r0
 80089c0:	e7f0      	b.n	80089a4 <_dtoa_r+0xad4>
 80089c2:	f1bb 0f00 	cmp.w	fp, #0
 80089c6:	bfcc      	ite	gt
 80089c8:	465e      	movgt	r6, fp
 80089ca:	2601      	movle	r6, #1
 80089cc:	4456      	add	r6, sl
 80089ce:	2700      	movs	r7, #0
 80089d0:	9902      	ldr	r1, [sp, #8]
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	2201      	movs	r2, #1
 80089d6:	4648      	mov	r0, r9
 80089d8:	f000 fb50 	bl	800907c <__lshift>
 80089dc:	4621      	mov	r1, r4
 80089de:	9002      	str	r0, [sp, #8]
 80089e0:	f000 fbb8 	bl	8009154 <__mcmp>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	dcb4      	bgt.n	8008952 <_dtoa_r+0xa82>
 80089e8:	d102      	bne.n	80089f0 <_dtoa_r+0xb20>
 80089ea:	9b00      	ldr	r3, [sp, #0]
 80089ec:	07db      	lsls	r3, r3, #31
 80089ee:	d4b0      	bmi.n	8008952 <_dtoa_r+0xa82>
 80089f0:	4633      	mov	r3, r6
 80089f2:	461e      	mov	r6, r3
 80089f4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089f8:	2a30      	cmp	r2, #48	@ 0x30
 80089fa:	d0fa      	beq.n	80089f2 <_dtoa_r+0xb22>
 80089fc:	e4b5      	b.n	800836a <_dtoa_r+0x49a>
 80089fe:	459a      	cmp	sl, r3
 8008a00:	d1a8      	bne.n	8008954 <_dtoa_r+0xa84>
 8008a02:	2331      	movs	r3, #49	@ 0x31
 8008a04:	f108 0801 	add.w	r8, r8, #1
 8008a08:	f88a 3000 	strb.w	r3, [sl]
 8008a0c:	e4ad      	b.n	800836a <_dtoa_r+0x49a>
 8008a0e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008a10:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008a6c <_dtoa_r+0xb9c>
 8008a14:	b11b      	cbz	r3, 8008a1e <_dtoa_r+0xb4e>
 8008a16:	f10a 0308 	add.w	r3, sl, #8
 8008a1a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008a1c:	6013      	str	r3, [r2, #0]
 8008a1e:	4650      	mov	r0, sl
 8008a20:	b017      	add	sp, #92	@ 0x5c
 8008a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a26:	9b07      	ldr	r3, [sp, #28]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	f77f ae2e 	ble.w	800868a <_dtoa_r+0x7ba>
 8008a2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a30:	9308      	str	r3, [sp, #32]
 8008a32:	2001      	movs	r0, #1
 8008a34:	e64d      	b.n	80086d2 <_dtoa_r+0x802>
 8008a36:	f1bb 0f00 	cmp.w	fp, #0
 8008a3a:	f77f aed9 	ble.w	80087f0 <_dtoa_r+0x920>
 8008a3e:	4656      	mov	r6, sl
 8008a40:	9802      	ldr	r0, [sp, #8]
 8008a42:	4621      	mov	r1, r4
 8008a44:	f7ff f9bb 	bl	8007dbe <quorem>
 8008a48:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008a4c:	f806 3b01 	strb.w	r3, [r6], #1
 8008a50:	eba6 020a 	sub.w	r2, r6, sl
 8008a54:	4593      	cmp	fp, r2
 8008a56:	ddb4      	ble.n	80089c2 <_dtoa_r+0xaf2>
 8008a58:	9902      	ldr	r1, [sp, #8]
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	220a      	movs	r2, #10
 8008a5e:	4648      	mov	r0, r9
 8008a60:	f000 f968 	bl	8008d34 <__multadd>
 8008a64:	9002      	str	r0, [sp, #8]
 8008a66:	e7eb      	b.n	8008a40 <_dtoa_r+0xb70>
 8008a68:	0801cc48 	.word	0x0801cc48
 8008a6c:	0801cbcc 	.word	0x0801cbcc

08008a70 <_free_r>:
 8008a70:	b538      	push	{r3, r4, r5, lr}
 8008a72:	4605      	mov	r5, r0
 8008a74:	2900      	cmp	r1, #0
 8008a76:	d041      	beq.n	8008afc <_free_r+0x8c>
 8008a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a7c:	1f0c      	subs	r4, r1, #4
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	bfb8      	it	lt
 8008a82:	18e4      	addlt	r4, r4, r3
 8008a84:	f000 f8e8 	bl	8008c58 <__malloc_lock>
 8008a88:	4a1d      	ldr	r2, [pc, #116]	@ (8008b00 <_free_r+0x90>)
 8008a8a:	6813      	ldr	r3, [r2, #0]
 8008a8c:	b933      	cbnz	r3, 8008a9c <_free_r+0x2c>
 8008a8e:	6063      	str	r3, [r4, #4]
 8008a90:	6014      	str	r4, [r2, #0]
 8008a92:	4628      	mov	r0, r5
 8008a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a98:	f000 b8e4 	b.w	8008c64 <__malloc_unlock>
 8008a9c:	42a3      	cmp	r3, r4
 8008a9e:	d908      	bls.n	8008ab2 <_free_r+0x42>
 8008aa0:	6820      	ldr	r0, [r4, #0]
 8008aa2:	1821      	adds	r1, r4, r0
 8008aa4:	428b      	cmp	r3, r1
 8008aa6:	bf01      	itttt	eq
 8008aa8:	6819      	ldreq	r1, [r3, #0]
 8008aaa:	685b      	ldreq	r3, [r3, #4]
 8008aac:	1809      	addeq	r1, r1, r0
 8008aae:	6021      	streq	r1, [r4, #0]
 8008ab0:	e7ed      	b.n	8008a8e <_free_r+0x1e>
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	b10b      	cbz	r3, 8008abc <_free_r+0x4c>
 8008ab8:	42a3      	cmp	r3, r4
 8008aba:	d9fa      	bls.n	8008ab2 <_free_r+0x42>
 8008abc:	6811      	ldr	r1, [r2, #0]
 8008abe:	1850      	adds	r0, r2, r1
 8008ac0:	42a0      	cmp	r0, r4
 8008ac2:	d10b      	bne.n	8008adc <_free_r+0x6c>
 8008ac4:	6820      	ldr	r0, [r4, #0]
 8008ac6:	4401      	add	r1, r0
 8008ac8:	1850      	adds	r0, r2, r1
 8008aca:	4283      	cmp	r3, r0
 8008acc:	6011      	str	r1, [r2, #0]
 8008ace:	d1e0      	bne.n	8008a92 <_free_r+0x22>
 8008ad0:	6818      	ldr	r0, [r3, #0]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	6053      	str	r3, [r2, #4]
 8008ad6:	4408      	add	r0, r1
 8008ad8:	6010      	str	r0, [r2, #0]
 8008ada:	e7da      	b.n	8008a92 <_free_r+0x22>
 8008adc:	d902      	bls.n	8008ae4 <_free_r+0x74>
 8008ade:	230c      	movs	r3, #12
 8008ae0:	602b      	str	r3, [r5, #0]
 8008ae2:	e7d6      	b.n	8008a92 <_free_r+0x22>
 8008ae4:	6820      	ldr	r0, [r4, #0]
 8008ae6:	1821      	adds	r1, r4, r0
 8008ae8:	428b      	cmp	r3, r1
 8008aea:	bf04      	itt	eq
 8008aec:	6819      	ldreq	r1, [r3, #0]
 8008aee:	685b      	ldreq	r3, [r3, #4]
 8008af0:	6063      	str	r3, [r4, #4]
 8008af2:	bf04      	itt	eq
 8008af4:	1809      	addeq	r1, r1, r0
 8008af6:	6021      	streq	r1, [r4, #0]
 8008af8:	6054      	str	r4, [r2, #4]
 8008afa:	e7ca      	b.n	8008a92 <_free_r+0x22>
 8008afc:	bd38      	pop	{r3, r4, r5, pc}
 8008afe:	bf00      	nop
 8008b00:	20003d7c 	.word	0x20003d7c

08008b04 <malloc>:
 8008b04:	4b02      	ldr	r3, [pc, #8]	@ (8008b10 <malloc+0xc>)
 8008b06:	4601      	mov	r1, r0
 8008b08:	6818      	ldr	r0, [r3, #0]
 8008b0a:	f000 b825 	b.w	8008b58 <_malloc_r>
 8008b0e:	bf00      	nop
 8008b10:	20000020 	.word	0x20000020

08008b14 <sbrk_aligned>:
 8008b14:	b570      	push	{r4, r5, r6, lr}
 8008b16:	4e0f      	ldr	r6, [pc, #60]	@ (8008b54 <sbrk_aligned+0x40>)
 8008b18:	460c      	mov	r4, r1
 8008b1a:	6831      	ldr	r1, [r6, #0]
 8008b1c:	4605      	mov	r5, r0
 8008b1e:	b911      	cbnz	r1, 8008b26 <sbrk_aligned+0x12>
 8008b20:	f000 fccc 	bl	80094bc <_sbrk_r>
 8008b24:	6030      	str	r0, [r6, #0]
 8008b26:	4621      	mov	r1, r4
 8008b28:	4628      	mov	r0, r5
 8008b2a:	f000 fcc7 	bl	80094bc <_sbrk_r>
 8008b2e:	1c43      	adds	r3, r0, #1
 8008b30:	d103      	bne.n	8008b3a <sbrk_aligned+0x26>
 8008b32:	f04f 34ff 	mov.w	r4, #4294967295
 8008b36:	4620      	mov	r0, r4
 8008b38:	bd70      	pop	{r4, r5, r6, pc}
 8008b3a:	1cc4      	adds	r4, r0, #3
 8008b3c:	f024 0403 	bic.w	r4, r4, #3
 8008b40:	42a0      	cmp	r0, r4
 8008b42:	d0f8      	beq.n	8008b36 <sbrk_aligned+0x22>
 8008b44:	1a21      	subs	r1, r4, r0
 8008b46:	4628      	mov	r0, r5
 8008b48:	f000 fcb8 	bl	80094bc <_sbrk_r>
 8008b4c:	3001      	adds	r0, #1
 8008b4e:	d1f2      	bne.n	8008b36 <sbrk_aligned+0x22>
 8008b50:	e7ef      	b.n	8008b32 <sbrk_aligned+0x1e>
 8008b52:	bf00      	nop
 8008b54:	20003d78 	.word	0x20003d78

08008b58 <_malloc_r>:
 8008b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b5c:	1ccd      	adds	r5, r1, #3
 8008b5e:	f025 0503 	bic.w	r5, r5, #3
 8008b62:	3508      	adds	r5, #8
 8008b64:	2d0c      	cmp	r5, #12
 8008b66:	bf38      	it	cc
 8008b68:	250c      	movcc	r5, #12
 8008b6a:	2d00      	cmp	r5, #0
 8008b6c:	4606      	mov	r6, r0
 8008b6e:	db01      	blt.n	8008b74 <_malloc_r+0x1c>
 8008b70:	42a9      	cmp	r1, r5
 8008b72:	d904      	bls.n	8008b7e <_malloc_r+0x26>
 8008b74:	230c      	movs	r3, #12
 8008b76:	6033      	str	r3, [r6, #0]
 8008b78:	2000      	movs	r0, #0
 8008b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c54 <_malloc_r+0xfc>
 8008b82:	f000 f869 	bl	8008c58 <__malloc_lock>
 8008b86:	f8d8 3000 	ldr.w	r3, [r8]
 8008b8a:	461c      	mov	r4, r3
 8008b8c:	bb44      	cbnz	r4, 8008be0 <_malloc_r+0x88>
 8008b8e:	4629      	mov	r1, r5
 8008b90:	4630      	mov	r0, r6
 8008b92:	f7ff ffbf 	bl	8008b14 <sbrk_aligned>
 8008b96:	1c43      	adds	r3, r0, #1
 8008b98:	4604      	mov	r4, r0
 8008b9a:	d158      	bne.n	8008c4e <_malloc_r+0xf6>
 8008b9c:	f8d8 4000 	ldr.w	r4, [r8]
 8008ba0:	4627      	mov	r7, r4
 8008ba2:	2f00      	cmp	r7, #0
 8008ba4:	d143      	bne.n	8008c2e <_malloc_r+0xd6>
 8008ba6:	2c00      	cmp	r4, #0
 8008ba8:	d04b      	beq.n	8008c42 <_malloc_r+0xea>
 8008baa:	6823      	ldr	r3, [r4, #0]
 8008bac:	4639      	mov	r1, r7
 8008bae:	4630      	mov	r0, r6
 8008bb0:	eb04 0903 	add.w	r9, r4, r3
 8008bb4:	f000 fc82 	bl	80094bc <_sbrk_r>
 8008bb8:	4581      	cmp	r9, r0
 8008bba:	d142      	bne.n	8008c42 <_malloc_r+0xea>
 8008bbc:	6821      	ldr	r1, [r4, #0]
 8008bbe:	1a6d      	subs	r5, r5, r1
 8008bc0:	4629      	mov	r1, r5
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	f7ff ffa6 	bl	8008b14 <sbrk_aligned>
 8008bc8:	3001      	adds	r0, #1
 8008bca:	d03a      	beq.n	8008c42 <_malloc_r+0xea>
 8008bcc:	6823      	ldr	r3, [r4, #0]
 8008bce:	442b      	add	r3, r5
 8008bd0:	6023      	str	r3, [r4, #0]
 8008bd2:	f8d8 3000 	ldr.w	r3, [r8]
 8008bd6:	685a      	ldr	r2, [r3, #4]
 8008bd8:	bb62      	cbnz	r2, 8008c34 <_malloc_r+0xdc>
 8008bda:	f8c8 7000 	str.w	r7, [r8]
 8008bde:	e00f      	b.n	8008c00 <_malloc_r+0xa8>
 8008be0:	6822      	ldr	r2, [r4, #0]
 8008be2:	1b52      	subs	r2, r2, r5
 8008be4:	d420      	bmi.n	8008c28 <_malloc_r+0xd0>
 8008be6:	2a0b      	cmp	r2, #11
 8008be8:	d917      	bls.n	8008c1a <_malloc_r+0xc2>
 8008bea:	1961      	adds	r1, r4, r5
 8008bec:	42a3      	cmp	r3, r4
 8008bee:	6025      	str	r5, [r4, #0]
 8008bf0:	bf18      	it	ne
 8008bf2:	6059      	strne	r1, [r3, #4]
 8008bf4:	6863      	ldr	r3, [r4, #4]
 8008bf6:	bf08      	it	eq
 8008bf8:	f8c8 1000 	streq.w	r1, [r8]
 8008bfc:	5162      	str	r2, [r4, r5]
 8008bfe:	604b      	str	r3, [r1, #4]
 8008c00:	4630      	mov	r0, r6
 8008c02:	f000 f82f 	bl	8008c64 <__malloc_unlock>
 8008c06:	f104 000b 	add.w	r0, r4, #11
 8008c0a:	1d23      	adds	r3, r4, #4
 8008c0c:	f020 0007 	bic.w	r0, r0, #7
 8008c10:	1ac2      	subs	r2, r0, r3
 8008c12:	bf1c      	itt	ne
 8008c14:	1a1b      	subne	r3, r3, r0
 8008c16:	50a3      	strne	r3, [r4, r2]
 8008c18:	e7af      	b.n	8008b7a <_malloc_r+0x22>
 8008c1a:	6862      	ldr	r2, [r4, #4]
 8008c1c:	42a3      	cmp	r3, r4
 8008c1e:	bf0c      	ite	eq
 8008c20:	f8c8 2000 	streq.w	r2, [r8]
 8008c24:	605a      	strne	r2, [r3, #4]
 8008c26:	e7eb      	b.n	8008c00 <_malloc_r+0xa8>
 8008c28:	4623      	mov	r3, r4
 8008c2a:	6864      	ldr	r4, [r4, #4]
 8008c2c:	e7ae      	b.n	8008b8c <_malloc_r+0x34>
 8008c2e:	463c      	mov	r4, r7
 8008c30:	687f      	ldr	r7, [r7, #4]
 8008c32:	e7b6      	b.n	8008ba2 <_malloc_r+0x4a>
 8008c34:	461a      	mov	r2, r3
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	42a3      	cmp	r3, r4
 8008c3a:	d1fb      	bne.n	8008c34 <_malloc_r+0xdc>
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	6053      	str	r3, [r2, #4]
 8008c40:	e7de      	b.n	8008c00 <_malloc_r+0xa8>
 8008c42:	230c      	movs	r3, #12
 8008c44:	6033      	str	r3, [r6, #0]
 8008c46:	4630      	mov	r0, r6
 8008c48:	f000 f80c 	bl	8008c64 <__malloc_unlock>
 8008c4c:	e794      	b.n	8008b78 <_malloc_r+0x20>
 8008c4e:	6005      	str	r5, [r0, #0]
 8008c50:	e7d6      	b.n	8008c00 <_malloc_r+0xa8>
 8008c52:	bf00      	nop
 8008c54:	20003d7c 	.word	0x20003d7c

08008c58 <__malloc_lock>:
 8008c58:	4801      	ldr	r0, [pc, #4]	@ (8008c60 <__malloc_lock+0x8>)
 8008c5a:	f7ff b8ae 	b.w	8007dba <__retarget_lock_acquire_recursive>
 8008c5e:	bf00      	nop
 8008c60:	20003d74 	.word	0x20003d74

08008c64 <__malloc_unlock>:
 8008c64:	4801      	ldr	r0, [pc, #4]	@ (8008c6c <__malloc_unlock+0x8>)
 8008c66:	f7ff b8a9 	b.w	8007dbc <__retarget_lock_release_recursive>
 8008c6a:	bf00      	nop
 8008c6c:	20003d74 	.word	0x20003d74

08008c70 <_Balloc>:
 8008c70:	b570      	push	{r4, r5, r6, lr}
 8008c72:	69c6      	ldr	r6, [r0, #28]
 8008c74:	4604      	mov	r4, r0
 8008c76:	460d      	mov	r5, r1
 8008c78:	b976      	cbnz	r6, 8008c98 <_Balloc+0x28>
 8008c7a:	2010      	movs	r0, #16
 8008c7c:	f7ff ff42 	bl	8008b04 <malloc>
 8008c80:	4602      	mov	r2, r0
 8008c82:	61e0      	str	r0, [r4, #28]
 8008c84:	b920      	cbnz	r0, 8008c90 <_Balloc+0x20>
 8008c86:	4b18      	ldr	r3, [pc, #96]	@ (8008ce8 <_Balloc+0x78>)
 8008c88:	4818      	ldr	r0, [pc, #96]	@ (8008cec <_Balloc+0x7c>)
 8008c8a:	216b      	movs	r1, #107	@ 0x6b
 8008c8c:	f000 fc34 	bl	80094f8 <__assert_func>
 8008c90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c94:	6006      	str	r6, [r0, #0]
 8008c96:	60c6      	str	r6, [r0, #12]
 8008c98:	69e6      	ldr	r6, [r4, #28]
 8008c9a:	68f3      	ldr	r3, [r6, #12]
 8008c9c:	b183      	cbz	r3, 8008cc0 <_Balloc+0x50>
 8008c9e:	69e3      	ldr	r3, [r4, #28]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ca6:	b9b8      	cbnz	r0, 8008cd8 <_Balloc+0x68>
 8008ca8:	2101      	movs	r1, #1
 8008caa:	fa01 f605 	lsl.w	r6, r1, r5
 8008cae:	1d72      	adds	r2, r6, #5
 8008cb0:	0092      	lsls	r2, r2, #2
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f000 fc3e 	bl	8009534 <_calloc_r>
 8008cb8:	b160      	cbz	r0, 8008cd4 <_Balloc+0x64>
 8008cba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008cbe:	e00e      	b.n	8008cde <_Balloc+0x6e>
 8008cc0:	2221      	movs	r2, #33	@ 0x21
 8008cc2:	2104      	movs	r1, #4
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	f000 fc35 	bl	8009534 <_calloc_r>
 8008cca:	69e3      	ldr	r3, [r4, #28]
 8008ccc:	60f0      	str	r0, [r6, #12]
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d1e4      	bne.n	8008c9e <_Balloc+0x2e>
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	bd70      	pop	{r4, r5, r6, pc}
 8008cd8:	6802      	ldr	r2, [r0, #0]
 8008cda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008cde:	2300      	movs	r3, #0
 8008ce0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ce4:	e7f7      	b.n	8008cd6 <_Balloc+0x66>
 8008ce6:	bf00      	nop
 8008ce8:	0801cbd9 	.word	0x0801cbd9
 8008cec:	0801cc59 	.word	0x0801cc59

08008cf0 <_Bfree>:
 8008cf0:	b570      	push	{r4, r5, r6, lr}
 8008cf2:	69c6      	ldr	r6, [r0, #28]
 8008cf4:	4605      	mov	r5, r0
 8008cf6:	460c      	mov	r4, r1
 8008cf8:	b976      	cbnz	r6, 8008d18 <_Bfree+0x28>
 8008cfa:	2010      	movs	r0, #16
 8008cfc:	f7ff ff02 	bl	8008b04 <malloc>
 8008d00:	4602      	mov	r2, r0
 8008d02:	61e8      	str	r0, [r5, #28]
 8008d04:	b920      	cbnz	r0, 8008d10 <_Bfree+0x20>
 8008d06:	4b09      	ldr	r3, [pc, #36]	@ (8008d2c <_Bfree+0x3c>)
 8008d08:	4809      	ldr	r0, [pc, #36]	@ (8008d30 <_Bfree+0x40>)
 8008d0a:	218f      	movs	r1, #143	@ 0x8f
 8008d0c:	f000 fbf4 	bl	80094f8 <__assert_func>
 8008d10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d14:	6006      	str	r6, [r0, #0]
 8008d16:	60c6      	str	r6, [r0, #12]
 8008d18:	b13c      	cbz	r4, 8008d2a <_Bfree+0x3a>
 8008d1a:	69eb      	ldr	r3, [r5, #28]
 8008d1c:	6862      	ldr	r2, [r4, #4]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d24:	6021      	str	r1, [r4, #0]
 8008d26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d2a:	bd70      	pop	{r4, r5, r6, pc}
 8008d2c:	0801cbd9 	.word	0x0801cbd9
 8008d30:	0801cc59 	.word	0x0801cc59

08008d34 <__multadd>:
 8008d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d38:	690d      	ldr	r5, [r1, #16]
 8008d3a:	4607      	mov	r7, r0
 8008d3c:	460c      	mov	r4, r1
 8008d3e:	461e      	mov	r6, r3
 8008d40:	f101 0c14 	add.w	ip, r1, #20
 8008d44:	2000      	movs	r0, #0
 8008d46:	f8dc 3000 	ldr.w	r3, [ip]
 8008d4a:	b299      	uxth	r1, r3
 8008d4c:	fb02 6101 	mla	r1, r2, r1, r6
 8008d50:	0c1e      	lsrs	r6, r3, #16
 8008d52:	0c0b      	lsrs	r3, r1, #16
 8008d54:	fb02 3306 	mla	r3, r2, r6, r3
 8008d58:	b289      	uxth	r1, r1
 8008d5a:	3001      	adds	r0, #1
 8008d5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d60:	4285      	cmp	r5, r0
 8008d62:	f84c 1b04 	str.w	r1, [ip], #4
 8008d66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d6a:	dcec      	bgt.n	8008d46 <__multadd+0x12>
 8008d6c:	b30e      	cbz	r6, 8008db2 <__multadd+0x7e>
 8008d6e:	68a3      	ldr	r3, [r4, #8]
 8008d70:	42ab      	cmp	r3, r5
 8008d72:	dc19      	bgt.n	8008da8 <__multadd+0x74>
 8008d74:	6861      	ldr	r1, [r4, #4]
 8008d76:	4638      	mov	r0, r7
 8008d78:	3101      	adds	r1, #1
 8008d7a:	f7ff ff79 	bl	8008c70 <_Balloc>
 8008d7e:	4680      	mov	r8, r0
 8008d80:	b928      	cbnz	r0, 8008d8e <__multadd+0x5a>
 8008d82:	4602      	mov	r2, r0
 8008d84:	4b0c      	ldr	r3, [pc, #48]	@ (8008db8 <__multadd+0x84>)
 8008d86:	480d      	ldr	r0, [pc, #52]	@ (8008dbc <__multadd+0x88>)
 8008d88:	21ba      	movs	r1, #186	@ 0xba
 8008d8a:	f000 fbb5 	bl	80094f8 <__assert_func>
 8008d8e:	6922      	ldr	r2, [r4, #16]
 8008d90:	3202      	adds	r2, #2
 8008d92:	f104 010c 	add.w	r1, r4, #12
 8008d96:	0092      	lsls	r2, r2, #2
 8008d98:	300c      	adds	r0, #12
 8008d9a:	f000 fb9f 	bl	80094dc <memcpy>
 8008d9e:	4621      	mov	r1, r4
 8008da0:	4638      	mov	r0, r7
 8008da2:	f7ff ffa5 	bl	8008cf0 <_Bfree>
 8008da6:	4644      	mov	r4, r8
 8008da8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008dac:	3501      	adds	r5, #1
 8008dae:	615e      	str	r6, [r3, #20]
 8008db0:	6125      	str	r5, [r4, #16]
 8008db2:	4620      	mov	r0, r4
 8008db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008db8:	0801cc48 	.word	0x0801cc48
 8008dbc:	0801cc59 	.word	0x0801cc59

08008dc0 <__hi0bits>:
 8008dc0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	bf36      	itet	cc
 8008dc8:	0403      	lslcc	r3, r0, #16
 8008dca:	2000      	movcs	r0, #0
 8008dcc:	2010      	movcc	r0, #16
 8008dce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008dd2:	bf3c      	itt	cc
 8008dd4:	021b      	lslcc	r3, r3, #8
 8008dd6:	3008      	addcc	r0, #8
 8008dd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ddc:	bf3c      	itt	cc
 8008dde:	011b      	lslcc	r3, r3, #4
 8008de0:	3004      	addcc	r0, #4
 8008de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008de6:	bf3c      	itt	cc
 8008de8:	009b      	lslcc	r3, r3, #2
 8008dea:	3002      	addcc	r0, #2
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	db05      	blt.n	8008dfc <__hi0bits+0x3c>
 8008df0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008df4:	f100 0001 	add.w	r0, r0, #1
 8008df8:	bf08      	it	eq
 8008dfa:	2020      	moveq	r0, #32
 8008dfc:	4770      	bx	lr

08008dfe <__lo0bits>:
 8008dfe:	6803      	ldr	r3, [r0, #0]
 8008e00:	4602      	mov	r2, r0
 8008e02:	f013 0007 	ands.w	r0, r3, #7
 8008e06:	d00b      	beq.n	8008e20 <__lo0bits+0x22>
 8008e08:	07d9      	lsls	r1, r3, #31
 8008e0a:	d421      	bmi.n	8008e50 <__lo0bits+0x52>
 8008e0c:	0798      	lsls	r0, r3, #30
 8008e0e:	bf49      	itett	mi
 8008e10:	085b      	lsrmi	r3, r3, #1
 8008e12:	089b      	lsrpl	r3, r3, #2
 8008e14:	2001      	movmi	r0, #1
 8008e16:	6013      	strmi	r3, [r2, #0]
 8008e18:	bf5c      	itt	pl
 8008e1a:	6013      	strpl	r3, [r2, #0]
 8008e1c:	2002      	movpl	r0, #2
 8008e1e:	4770      	bx	lr
 8008e20:	b299      	uxth	r1, r3
 8008e22:	b909      	cbnz	r1, 8008e28 <__lo0bits+0x2a>
 8008e24:	0c1b      	lsrs	r3, r3, #16
 8008e26:	2010      	movs	r0, #16
 8008e28:	b2d9      	uxtb	r1, r3
 8008e2a:	b909      	cbnz	r1, 8008e30 <__lo0bits+0x32>
 8008e2c:	3008      	adds	r0, #8
 8008e2e:	0a1b      	lsrs	r3, r3, #8
 8008e30:	0719      	lsls	r1, r3, #28
 8008e32:	bf04      	itt	eq
 8008e34:	091b      	lsreq	r3, r3, #4
 8008e36:	3004      	addeq	r0, #4
 8008e38:	0799      	lsls	r1, r3, #30
 8008e3a:	bf04      	itt	eq
 8008e3c:	089b      	lsreq	r3, r3, #2
 8008e3e:	3002      	addeq	r0, #2
 8008e40:	07d9      	lsls	r1, r3, #31
 8008e42:	d403      	bmi.n	8008e4c <__lo0bits+0x4e>
 8008e44:	085b      	lsrs	r3, r3, #1
 8008e46:	f100 0001 	add.w	r0, r0, #1
 8008e4a:	d003      	beq.n	8008e54 <__lo0bits+0x56>
 8008e4c:	6013      	str	r3, [r2, #0]
 8008e4e:	4770      	bx	lr
 8008e50:	2000      	movs	r0, #0
 8008e52:	4770      	bx	lr
 8008e54:	2020      	movs	r0, #32
 8008e56:	4770      	bx	lr

08008e58 <__i2b>:
 8008e58:	b510      	push	{r4, lr}
 8008e5a:	460c      	mov	r4, r1
 8008e5c:	2101      	movs	r1, #1
 8008e5e:	f7ff ff07 	bl	8008c70 <_Balloc>
 8008e62:	4602      	mov	r2, r0
 8008e64:	b928      	cbnz	r0, 8008e72 <__i2b+0x1a>
 8008e66:	4b05      	ldr	r3, [pc, #20]	@ (8008e7c <__i2b+0x24>)
 8008e68:	4805      	ldr	r0, [pc, #20]	@ (8008e80 <__i2b+0x28>)
 8008e6a:	f240 1145 	movw	r1, #325	@ 0x145
 8008e6e:	f000 fb43 	bl	80094f8 <__assert_func>
 8008e72:	2301      	movs	r3, #1
 8008e74:	6144      	str	r4, [r0, #20]
 8008e76:	6103      	str	r3, [r0, #16]
 8008e78:	bd10      	pop	{r4, pc}
 8008e7a:	bf00      	nop
 8008e7c:	0801cc48 	.word	0x0801cc48
 8008e80:	0801cc59 	.word	0x0801cc59

08008e84 <__multiply>:
 8008e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e88:	4617      	mov	r7, r2
 8008e8a:	690a      	ldr	r2, [r1, #16]
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	bfa8      	it	ge
 8008e92:	463b      	movge	r3, r7
 8008e94:	4689      	mov	r9, r1
 8008e96:	bfa4      	itt	ge
 8008e98:	460f      	movge	r7, r1
 8008e9a:	4699      	movge	r9, r3
 8008e9c:	693d      	ldr	r5, [r7, #16]
 8008e9e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	6879      	ldr	r1, [r7, #4]
 8008ea6:	eb05 060a 	add.w	r6, r5, sl
 8008eaa:	42b3      	cmp	r3, r6
 8008eac:	b085      	sub	sp, #20
 8008eae:	bfb8      	it	lt
 8008eb0:	3101      	addlt	r1, #1
 8008eb2:	f7ff fedd 	bl	8008c70 <_Balloc>
 8008eb6:	b930      	cbnz	r0, 8008ec6 <__multiply+0x42>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	4b41      	ldr	r3, [pc, #260]	@ (8008fc0 <__multiply+0x13c>)
 8008ebc:	4841      	ldr	r0, [pc, #260]	@ (8008fc4 <__multiply+0x140>)
 8008ebe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008ec2:	f000 fb19 	bl	80094f8 <__assert_func>
 8008ec6:	f100 0414 	add.w	r4, r0, #20
 8008eca:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008ece:	4623      	mov	r3, r4
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	4573      	cmp	r3, lr
 8008ed4:	d320      	bcc.n	8008f18 <__multiply+0x94>
 8008ed6:	f107 0814 	add.w	r8, r7, #20
 8008eda:	f109 0114 	add.w	r1, r9, #20
 8008ede:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008ee2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008ee6:	9302      	str	r3, [sp, #8]
 8008ee8:	1beb      	subs	r3, r5, r7
 8008eea:	3b15      	subs	r3, #21
 8008eec:	f023 0303 	bic.w	r3, r3, #3
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	3715      	adds	r7, #21
 8008ef4:	42bd      	cmp	r5, r7
 8008ef6:	bf38      	it	cc
 8008ef8:	2304      	movcc	r3, #4
 8008efa:	9301      	str	r3, [sp, #4]
 8008efc:	9b02      	ldr	r3, [sp, #8]
 8008efe:	9103      	str	r1, [sp, #12]
 8008f00:	428b      	cmp	r3, r1
 8008f02:	d80c      	bhi.n	8008f1e <__multiply+0x9a>
 8008f04:	2e00      	cmp	r6, #0
 8008f06:	dd03      	ble.n	8008f10 <__multiply+0x8c>
 8008f08:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d055      	beq.n	8008fbc <__multiply+0x138>
 8008f10:	6106      	str	r6, [r0, #16]
 8008f12:	b005      	add	sp, #20
 8008f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f18:	f843 2b04 	str.w	r2, [r3], #4
 8008f1c:	e7d9      	b.n	8008ed2 <__multiply+0x4e>
 8008f1e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008f22:	f1ba 0f00 	cmp.w	sl, #0
 8008f26:	d01f      	beq.n	8008f68 <__multiply+0xe4>
 8008f28:	46c4      	mov	ip, r8
 8008f2a:	46a1      	mov	r9, r4
 8008f2c:	2700      	movs	r7, #0
 8008f2e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008f32:	f8d9 3000 	ldr.w	r3, [r9]
 8008f36:	fa1f fb82 	uxth.w	fp, r2
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008f40:	443b      	add	r3, r7
 8008f42:	f8d9 7000 	ldr.w	r7, [r9]
 8008f46:	0c12      	lsrs	r2, r2, #16
 8008f48:	0c3f      	lsrs	r7, r7, #16
 8008f4a:	fb0a 7202 	mla	r2, sl, r2, r7
 8008f4e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f58:	4565      	cmp	r5, ip
 8008f5a:	f849 3b04 	str.w	r3, [r9], #4
 8008f5e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008f62:	d8e4      	bhi.n	8008f2e <__multiply+0xaa>
 8008f64:	9b01      	ldr	r3, [sp, #4]
 8008f66:	50e7      	str	r7, [r4, r3]
 8008f68:	9b03      	ldr	r3, [sp, #12]
 8008f6a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008f6e:	3104      	adds	r1, #4
 8008f70:	f1b9 0f00 	cmp.w	r9, #0
 8008f74:	d020      	beq.n	8008fb8 <__multiply+0x134>
 8008f76:	6823      	ldr	r3, [r4, #0]
 8008f78:	4647      	mov	r7, r8
 8008f7a:	46a4      	mov	ip, r4
 8008f7c:	f04f 0a00 	mov.w	sl, #0
 8008f80:	f8b7 b000 	ldrh.w	fp, [r7]
 8008f84:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008f88:	fb09 220b 	mla	r2, r9, fp, r2
 8008f8c:	4452      	add	r2, sl
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f94:	f84c 3b04 	str.w	r3, [ip], #4
 8008f98:	f857 3b04 	ldr.w	r3, [r7], #4
 8008f9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fa0:	f8bc 3000 	ldrh.w	r3, [ip]
 8008fa4:	fb09 330a 	mla	r3, r9, sl, r3
 8008fa8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008fac:	42bd      	cmp	r5, r7
 8008fae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fb2:	d8e5      	bhi.n	8008f80 <__multiply+0xfc>
 8008fb4:	9a01      	ldr	r2, [sp, #4]
 8008fb6:	50a3      	str	r3, [r4, r2]
 8008fb8:	3404      	adds	r4, #4
 8008fba:	e79f      	b.n	8008efc <__multiply+0x78>
 8008fbc:	3e01      	subs	r6, #1
 8008fbe:	e7a1      	b.n	8008f04 <__multiply+0x80>
 8008fc0:	0801cc48 	.word	0x0801cc48
 8008fc4:	0801cc59 	.word	0x0801cc59

08008fc8 <__pow5mult>:
 8008fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fcc:	4615      	mov	r5, r2
 8008fce:	f012 0203 	ands.w	r2, r2, #3
 8008fd2:	4607      	mov	r7, r0
 8008fd4:	460e      	mov	r6, r1
 8008fd6:	d007      	beq.n	8008fe8 <__pow5mult+0x20>
 8008fd8:	4c25      	ldr	r4, [pc, #148]	@ (8009070 <__pow5mult+0xa8>)
 8008fda:	3a01      	subs	r2, #1
 8008fdc:	2300      	movs	r3, #0
 8008fde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008fe2:	f7ff fea7 	bl	8008d34 <__multadd>
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	10ad      	asrs	r5, r5, #2
 8008fea:	d03d      	beq.n	8009068 <__pow5mult+0xa0>
 8008fec:	69fc      	ldr	r4, [r7, #28]
 8008fee:	b97c      	cbnz	r4, 8009010 <__pow5mult+0x48>
 8008ff0:	2010      	movs	r0, #16
 8008ff2:	f7ff fd87 	bl	8008b04 <malloc>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	61f8      	str	r0, [r7, #28]
 8008ffa:	b928      	cbnz	r0, 8009008 <__pow5mult+0x40>
 8008ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8009074 <__pow5mult+0xac>)
 8008ffe:	481e      	ldr	r0, [pc, #120]	@ (8009078 <__pow5mult+0xb0>)
 8009000:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009004:	f000 fa78 	bl	80094f8 <__assert_func>
 8009008:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800900c:	6004      	str	r4, [r0, #0]
 800900e:	60c4      	str	r4, [r0, #12]
 8009010:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009014:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009018:	b94c      	cbnz	r4, 800902e <__pow5mult+0x66>
 800901a:	f240 2171 	movw	r1, #625	@ 0x271
 800901e:	4638      	mov	r0, r7
 8009020:	f7ff ff1a 	bl	8008e58 <__i2b>
 8009024:	2300      	movs	r3, #0
 8009026:	f8c8 0008 	str.w	r0, [r8, #8]
 800902a:	4604      	mov	r4, r0
 800902c:	6003      	str	r3, [r0, #0]
 800902e:	f04f 0900 	mov.w	r9, #0
 8009032:	07eb      	lsls	r3, r5, #31
 8009034:	d50a      	bpl.n	800904c <__pow5mult+0x84>
 8009036:	4631      	mov	r1, r6
 8009038:	4622      	mov	r2, r4
 800903a:	4638      	mov	r0, r7
 800903c:	f7ff ff22 	bl	8008e84 <__multiply>
 8009040:	4631      	mov	r1, r6
 8009042:	4680      	mov	r8, r0
 8009044:	4638      	mov	r0, r7
 8009046:	f7ff fe53 	bl	8008cf0 <_Bfree>
 800904a:	4646      	mov	r6, r8
 800904c:	106d      	asrs	r5, r5, #1
 800904e:	d00b      	beq.n	8009068 <__pow5mult+0xa0>
 8009050:	6820      	ldr	r0, [r4, #0]
 8009052:	b938      	cbnz	r0, 8009064 <__pow5mult+0x9c>
 8009054:	4622      	mov	r2, r4
 8009056:	4621      	mov	r1, r4
 8009058:	4638      	mov	r0, r7
 800905a:	f7ff ff13 	bl	8008e84 <__multiply>
 800905e:	6020      	str	r0, [r4, #0]
 8009060:	f8c0 9000 	str.w	r9, [r0]
 8009064:	4604      	mov	r4, r0
 8009066:	e7e4      	b.n	8009032 <__pow5mult+0x6a>
 8009068:	4630      	mov	r0, r6
 800906a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800906e:	bf00      	nop
 8009070:	0801cd0c 	.word	0x0801cd0c
 8009074:	0801cbd9 	.word	0x0801cbd9
 8009078:	0801cc59 	.word	0x0801cc59

0800907c <__lshift>:
 800907c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009080:	460c      	mov	r4, r1
 8009082:	6849      	ldr	r1, [r1, #4]
 8009084:	6923      	ldr	r3, [r4, #16]
 8009086:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800908a:	68a3      	ldr	r3, [r4, #8]
 800908c:	4607      	mov	r7, r0
 800908e:	4691      	mov	r9, r2
 8009090:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009094:	f108 0601 	add.w	r6, r8, #1
 8009098:	42b3      	cmp	r3, r6
 800909a:	db0b      	blt.n	80090b4 <__lshift+0x38>
 800909c:	4638      	mov	r0, r7
 800909e:	f7ff fde7 	bl	8008c70 <_Balloc>
 80090a2:	4605      	mov	r5, r0
 80090a4:	b948      	cbnz	r0, 80090ba <__lshift+0x3e>
 80090a6:	4602      	mov	r2, r0
 80090a8:	4b28      	ldr	r3, [pc, #160]	@ (800914c <__lshift+0xd0>)
 80090aa:	4829      	ldr	r0, [pc, #164]	@ (8009150 <__lshift+0xd4>)
 80090ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80090b0:	f000 fa22 	bl	80094f8 <__assert_func>
 80090b4:	3101      	adds	r1, #1
 80090b6:	005b      	lsls	r3, r3, #1
 80090b8:	e7ee      	b.n	8009098 <__lshift+0x1c>
 80090ba:	2300      	movs	r3, #0
 80090bc:	f100 0114 	add.w	r1, r0, #20
 80090c0:	f100 0210 	add.w	r2, r0, #16
 80090c4:	4618      	mov	r0, r3
 80090c6:	4553      	cmp	r3, sl
 80090c8:	db33      	blt.n	8009132 <__lshift+0xb6>
 80090ca:	6920      	ldr	r0, [r4, #16]
 80090cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090d0:	f104 0314 	add.w	r3, r4, #20
 80090d4:	f019 091f 	ands.w	r9, r9, #31
 80090d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80090e0:	d02b      	beq.n	800913a <__lshift+0xbe>
 80090e2:	f1c9 0e20 	rsb	lr, r9, #32
 80090e6:	468a      	mov	sl, r1
 80090e8:	2200      	movs	r2, #0
 80090ea:	6818      	ldr	r0, [r3, #0]
 80090ec:	fa00 f009 	lsl.w	r0, r0, r9
 80090f0:	4310      	orrs	r0, r2
 80090f2:	f84a 0b04 	str.w	r0, [sl], #4
 80090f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80090fa:	459c      	cmp	ip, r3
 80090fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009100:	d8f3      	bhi.n	80090ea <__lshift+0x6e>
 8009102:	ebac 0304 	sub.w	r3, ip, r4
 8009106:	3b15      	subs	r3, #21
 8009108:	f023 0303 	bic.w	r3, r3, #3
 800910c:	3304      	adds	r3, #4
 800910e:	f104 0015 	add.w	r0, r4, #21
 8009112:	4560      	cmp	r0, ip
 8009114:	bf88      	it	hi
 8009116:	2304      	movhi	r3, #4
 8009118:	50ca      	str	r2, [r1, r3]
 800911a:	b10a      	cbz	r2, 8009120 <__lshift+0xa4>
 800911c:	f108 0602 	add.w	r6, r8, #2
 8009120:	3e01      	subs	r6, #1
 8009122:	4638      	mov	r0, r7
 8009124:	612e      	str	r6, [r5, #16]
 8009126:	4621      	mov	r1, r4
 8009128:	f7ff fde2 	bl	8008cf0 <_Bfree>
 800912c:	4628      	mov	r0, r5
 800912e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009132:	f842 0f04 	str.w	r0, [r2, #4]!
 8009136:	3301      	adds	r3, #1
 8009138:	e7c5      	b.n	80090c6 <__lshift+0x4a>
 800913a:	3904      	subs	r1, #4
 800913c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009140:	f841 2f04 	str.w	r2, [r1, #4]!
 8009144:	459c      	cmp	ip, r3
 8009146:	d8f9      	bhi.n	800913c <__lshift+0xc0>
 8009148:	e7ea      	b.n	8009120 <__lshift+0xa4>
 800914a:	bf00      	nop
 800914c:	0801cc48 	.word	0x0801cc48
 8009150:	0801cc59 	.word	0x0801cc59

08009154 <__mcmp>:
 8009154:	690a      	ldr	r2, [r1, #16]
 8009156:	4603      	mov	r3, r0
 8009158:	6900      	ldr	r0, [r0, #16]
 800915a:	1a80      	subs	r0, r0, r2
 800915c:	b530      	push	{r4, r5, lr}
 800915e:	d10e      	bne.n	800917e <__mcmp+0x2a>
 8009160:	3314      	adds	r3, #20
 8009162:	3114      	adds	r1, #20
 8009164:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009168:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800916c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009170:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009174:	4295      	cmp	r5, r2
 8009176:	d003      	beq.n	8009180 <__mcmp+0x2c>
 8009178:	d205      	bcs.n	8009186 <__mcmp+0x32>
 800917a:	f04f 30ff 	mov.w	r0, #4294967295
 800917e:	bd30      	pop	{r4, r5, pc}
 8009180:	42a3      	cmp	r3, r4
 8009182:	d3f3      	bcc.n	800916c <__mcmp+0x18>
 8009184:	e7fb      	b.n	800917e <__mcmp+0x2a>
 8009186:	2001      	movs	r0, #1
 8009188:	e7f9      	b.n	800917e <__mcmp+0x2a>
	...

0800918c <__mdiff>:
 800918c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009190:	4689      	mov	r9, r1
 8009192:	4606      	mov	r6, r0
 8009194:	4611      	mov	r1, r2
 8009196:	4648      	mov	r0, r9
 8009198:	4614      	mov	r4, r2
 800919a:	f7ff ffdb 	bl	8009154 <__mcmp>
 800919e:	1e05      	subs	r5, r0, #0
 80091a0:	d112      	bne.n	80091c8 <__mdiff+0x3c>
 80091a2:	4629      	mov	r1, r5
 80091a4:	4630      	mov	r0, r6
 80091a6:	f7ff fd63 	bl	8008c70 <_Balloc>
 80091aa:	4602      	mov	r2, r0
 80091ac:	b928      	cbnz	r0, 80091ba <__mdiff+0x2e>
 80091ae:	4b3f      	ldr	r3, [pc, #252]	@ (80092ac <__mdiff+0x120>)
 80091b0:	f240 2137 	movw	r1, #567	@ 0x237
 80091b4:	483e      	ldr	r0, [pc, #248]	@ (80092b0 <__mdiff+0x124>)
 80091b6:	f000 f99f 	bl	80094f8 <__assert_func>
 80091ba:	2301      	movs	r3, #1
 80091bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80091c0:	4610      	mov	r0, r2
 80091c2:	b003      	add	sp, #12
 80091c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c8:	bfbc      	itt	lt
 80091ca:	464b      	movlt	r3, r9
 80091cc:	46a1      	movlt	r9, r4
 80091ce:	4630      	mov	r0, r6
 80091d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80091d4:	bfba      	itte	lt
 80091d6:	461c      	movlt	r4, r3
 80091d8:	2501      	movlt	r5, #1
 80091da:	2500      	movge	r5, #0
 80091dc:	f7ff fd48 	bl	8008c70 <_Balloc>
 80091e0:	4602      	mov	r2, r0
 80091e2:	b918      	cbnz	r0, 80091ec <__mdiff+0x60>
 80091e4:	4b31      	ldr	r3, [pc, #196]	@ (80092ac <__mdiff+0x120>)
 80091e6:	f240 2145 	movw	r1, #581	@ 0x245
 80091ea:	e7e3      	b.n	80091b4 <__mdiff+0x28>
 80091ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80091f0:	6926      	ldr	r6, [r4, #16]
 80091f2:	60c5      	str	r5, [r0, #12]
 80091f4:	f109 0310 	add.w	r3, r9, #16
 80091f8:	f109 0514 	add.w	r5, r9, #20
 80091fc:	f104 0e14 	add.w	lr, r4, #20
 8009200:	f100 0b14 	add.w	fp, r0, #20
 8009204:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009208:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800920c:	9301      	str	r3, [sp, #4]
 800920e:	46d9      	mov	r9, fp
 8009210:	f04f 0c00 	mov.w	ip, #0
 8009214:	9b01      	ldr	r3, [sp, #4]
 8009216:	f85e 0b04 	ldr.w	r0, [lr], #4
 800921a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800921e:	9301      	str	r3, [sp, #4]
 8009220:	fa1f f38a 	uxth.w	r3, sl
 8009224:	4619      	mov	r1, r3
 8009226:	b283      	uxth	r3, r0
 8009228:	1acb      	subs	r3, r1, r3
 800922a:	0c00      	lsrs	r0, r0, #16
 800922c:	4463      	add	r3, ip
 800922e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009232:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009236:	b29b      	uxth	r3, r3
 8009238:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800923c:	4576      	cmp	r6, lr
 800923e:	f849 3b04 	str.w	r3, [r9], #4
 8009242:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009246:	d8e5      	bhi.n	8009214 <__mdiff+0x88>
 8009248:	1b33      	subs	r3, r6, r4
 800924a:	3b15      	subs	r3, #21
 800924c:	f023 0303 	bic.w	r3, r3, #3
 8009250:	3415      	adds	r4, #21
 8009252:	3304      	adds	r3, #4
 8009254:	42a6      	cmp	r6, r4
 8009256:	bf38      	it	cc
 8009258:	2304      	movcc	r3, #4
 800925a:	441d      	add	r5, r3
 800925c:	445b      	add	r3, fp
 800925e:	461e      	mov	r6, r3
 8009260:	462c      	mov	r4, r5
 8009262:	4544      	cmp	r4, r8
 8009264:	d30e      	bcc.n	8009284 <__mdiff+0xf8>
 8009266:	f108 0103 	add.w	r1, r8, #3
 800926a:	1b49      	subs	r1, r1, r5
 800926c:	f021 0103 	bic.w	r1, r1, #3
 8009270:	3d03      	subs	r5, #3
 8009272:	45a8      	cmp	r8, r5
 8009274:	bf38      	it	cc
 8009276:	2100      	movcc	r1, #0
 8009278:	440b      	add	r3, r1
 800927a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800927e:	b191      	cbz	r1, 80092a6 <__mdiff+0x11a>
 8009280:	6117      	str	r7, [r2, #16]
 8009282:	e79d      	b.n	80091c0 <__mdiff+0x34>
 8009284:	f854 1b04 	ldr.w	r1, [r4], #4
 8009288:	46e6      	mov	lr, ip
 800928a:	0c08      	lsrs	r0, r1, #16
 800928c:	fa1c fc81 	uxtah	ip, ip, r1
 8009290:	4471      	add	r1, lr
 8009292:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009296:	b289      	uxth	r1, r1
 8009298:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800929c:	f846 1b04 	str.w	r1, [r6], #4
 80092a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80092a4:	e7dd      	b.n	8009262 <__mdiff+0xd6>
 80092a6:	3f01      	subs	r7, #1
 80092a8:	e7e7      	b.n	800927a <__mdiff+0xee>
 80092aa:	bf00      	nop
 80092ac:	0801cc48 	.word	0x0801cc48
 80092b0:	0801cc59 	.word	0x0801cc59

080092b4 <__d2b>:
 80092b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80092b8:	460f      	mov	r7, r1
 80092ba:	2101      	movs	r1, #1
 80092bc:	ec59 8b10 	vmov	r8, r9, d0
 80092c0:	4616      	mov	r6, r2
 80092c2:	f7ff fcd5 	bl	8008c70 <_Balloc>
 80092c6:	4604      	mov	r4, r0
 80092c8:	b930      	cbnz	r0, 80092d8 <__d2b+0x24>
 80092ca:	4602      	mov	r2, r0
 80092cc:	4b23      	ldr	r3, [pc, #140]	@ (800935c <__d2b+0xa8>)
 80092ce:	4824      	ldr	r0, [pc, #144]	@ (8009360 <__d2b+0xac>)
 80092d0:	f240 310f 	movw	r1, #783	@ 0x30f
 80092d4:	f000 f910 	bl	80094f8 <__assert_func>
 80092d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80092dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092e0:	b10d      	cbz	r5, 80092e6 <__d2b+0x32>
 80092e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80092e6:	9301      	str	r3, [sp, #4]
 80092e8:	f1b8 0300 	subs.w	r3, r8, #0
 80092ec:	d023      	beq.n	8009336 <__d2b+0x82>
 80092ee:	4668      	mov	r0, sp
 80092f0:	9300      	str	r3, [sp, #0]
 80092f2:	f7ff fd84 	bl	8008dfe <__lo0bits>
 80092f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80092fa:	b1d0      	cbz	r0, 8009332 <__d2b+0x7e>
 80092fc:	f1c0 0320 	rsb	r3, r0, #32
 8009300:	fa02 f303 	lsl.w	r3, r2, r3
 8009304:	430b      	orrs	r3, r1
 8009306:	40c2      	lsrs	r2, r0
 8009308:	6163      	str	r3, [r4, #20]
 800930a:	9201      	str	r2, [sp, #4]
 800930c:	9b01      	ldr	r3, [sp, #4]
 800930e:	61a3      	str	r3, [r4, #24]
 8009310:	2b00      	cmp	r3, #0
 8009312:	bf0c      	ite	eq
 8009314:	2201      	moveq	r2, #1
 8009316:	2202      	movne	r2, #2
 8009318:	6122      	str	r2, [r4, #16]
 800931a:	b1a5      	cbz	r5, 8009346 <__d2b+0x92>
 800931c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009320:	4405      	add	r5, r0
 8009322:	603d      	str	r5, [r7, #0]
 8009324:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009328:	6030      	str	r0, [r6, #0]
 800932a:	4620      	mov	r0, r4
 800932c:	b003      	add	sp, #12
 800932e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009332:	6161      	str	r1, [r4, #20]
 8009334:	e7ea      	b.n	800930c <__d2b+0x58>
 8009336:	a801      	add	r0, sp, #4
 8009338:	f7ff fd61 	bl	8008dfe <__lo0bits>
 800933c:	9b01      	ldr	r3, [sp, #4]
 800933e:	6163      	str	r3, [r4, #20]
 8009340:	3020      	adds	r0, #32
 8009342:	2201      	movs	r2, #1
 8009344:	e7e8      	b.n	8009318 <__d2b+0x64>
 8009346:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800934a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800934e:	6038      	str	r0, [r7, #0]
 8009350:	6918      	ldr	r0, [r3, #16]
 8009352:	f7ff fd35 	bl	8008dc0 <__hi0bits>
 8009356:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800935a:	e7e5      	b.n	8009328 <__d2b+0x74>
 800935c:	0801cc48 	.word	0x0801cc48
 8009360:	0801cc59 	.word	0x0801cc59

08009364 <__sflush_r>:
 8009364:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800936c:	0716      	lsls	r6, r2, #28
 800936e:	4605      	mov	r5, r0
 8009370:	460c      	mov	r4, r1
 8009372:	d454      	bmi.n	800941e <__sflush_r+0xba>
 8009374:	684b      	ldr	r3, [r1, #4]
 8009376:	2b00      	cmp	r3, #0
 8009378:	dc02      	bgt.n	8009380 <__sflush_r+0x1c>
 800937a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800937c:	2b00      	cmp	r3, #0
 800937e:	dd48      	ble.n	8009412 <__sflush_r+0xae>
 8009380:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009382:	2e00      	cmp	r6, #0
 8009384:	d045      	beq.n	8009412 <__sflush_r+0xae>
 8009386:	2300      	movs	r3, #0
 8009388:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800938c:	682f      	ldr	r7, [r5, #0]
 800938e:	6a21      	ldr	r1, [r4, #32]
 8009390:	602b      	str	r3, [r5, #0]
 8009392:	d030      	beq.n	80093f6 <__sflush_r+0x92>
 8009394:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009396:	89a3      	ldrh	r3, [r4, #12]
 8009398:	0759      	lsls	r1, r3, #29
 800939a:	d505      	bpl.n	80093a8 <__sflush_r+0x44>
 800939c:	6863      	ldr	r3, [r4, #4]
 800939e:	1ad2      	subs	r2, r2, r3
 80093a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80093a2:	b10b      	cbz	r3, 80093a8 <__sflush_r+0x44>
 80093a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80093a6:	1ad2      	subs	r2, r2, r3
 80093a8:	2300      	movs	r3, #0
 80093aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093ac:	6a21      	ldr	r1, [r4, #32]
 80093ae:	4628      	mov	r0, r5
 80093b0:	47b0      	blx	r6
 80093b2:	1c43      	adds	r3, r0, #1
 80093b4:	89a3      	ldrh	r3, [r4, #12]
 80093b6:	d106      	bne.n	80093c6 <__sflush_r+0x62>
 80093b8:	6829      	ldr	r1, [r5, #0]
 80093ba:	291d      	cmp	r1, #29
 80093bc:	d82b      	bhi.n	8009416 <__sflush_r+0xb2>
 80093be:	4a2a      	ldr	r2, [pc, #168]	@ (8009468 <__sflush_r+0x104>)
 80093c0:	40ca      	lsrs	r2, r1
 80093c2:	07d6      	lsls	r6, r2, #31
 80093c4:	d527      	bpl.n	8009416 <__sflush_r+0xb2>
 80093c6:	2200      	movs	r2, #0
 80093c8:	6062      	str	r2, [r4, #4]
 80093ca:	04d9      	lsls	r1, r3, #19
 80093cc:	6922      	ldr	r2, [r4, #16]
 80093ce:	6022      	str	r2, [r4, #0]
 80093d0:	d504      	bpl.n	80093dc <__sflush_r+0x78>
 80093d2:	1c42      	adds	r2, r0, #1
 80093d4:	d101      	bne.n	80093da <__sflush_r+0x76>
 80093d6:	682b      	ldr	r3, [r5, #0]
 80093d8:	b903      	cbnz	r3, 80093dc <__sflush_r+0x78>
 80093da:	6560      	str	r0, [r4, #84]	@ 0x54
 80093dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093de:	602f      	str	r7, [r5, #0]
 80093e0:	b1b9      	cbz	r1, 8009412 <__sflush_r+0xae>
 80093e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093e6:	4299      	cmp	r1, r3
 80093e8:	d002      	beq.n	80093f0 <__sflush_r+0x8c>
 80093ea:	4628      	mov	r0, r5
 80093ec:	f7ff fb40 	bl	8008a70 <_free_r>
 80093f0:	2300      	movs	r3, #0
 80093f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80093f4:	e00d      	b.n	8009412 <__sflush_r+0xae>
 80093f6:	2301      	movs	r3, #1
 80093f8:	4628      	mov	r0, r5
 80093fa:	47b0      	blx	r6
 80093fc:	4602      	mov	r2, r0
 80093fe:	1c50      	adds	r0, r2, #1
 8009400:	d1c9      	bne.n	8009396 <__sflush_r+0x32>
 8009402:	682b      	ldr	r3, [r5, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d0c6      	beq.n	8009396 <__sflush_r+0x32>
 8009408:	2b1d      	cmp	r3, #29
 800940a:	d001      	beq.n	8009410 <__sflush_r+0xac>
 800940c:	2b16      	cmp	r3, #22
 800940e:	d11e      	bne.n	800944e <__sflush_r+0xea>
 8009410:	602f      	str	r7, [r5, #0]
 8009412:	2000      	movs	r0, #0
 8009414:	e022      	b.n	800945c <__sflush_r+0xf8>
 8009416:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800941a:	b21b      	sxth	r3, r3
 800941c:	e01b      	b.n	8009456 <__sflush_r+0xf2>
 800941e:	690f      	ldr	r7, [r1, #16]
 8009420:	2f00      	cmp	r7, #0
 8009422:	d0f6      	beq.n	8009412 <__sflush_r+0xae>
 8009424:	0793      	lsls	r3, r2, #30
 8009426:	680e      	ldr	r6, [r1, #0]
 8009428:	bf08      	it	eq
 800942a:	694b      	ldreq	r3, [r1, #20]
 800942c:	600f      	str	r7, [r1, #0]
 800942e:	bf18      	it	ne
 8009430:	2300      	movne	r3, #0
 8009432:	eba6 0807 	sub.w	r8, r6, r7
 8009436:	608b      	str	r3, [r1, #8]
 8009438:	f1b8 0f00 	cmp.w	r8, #0
 800943c:	dde9      	ble.n	8009412 <__sflush_r+0xae>
 800943e:	6a21      	ldr	r1, [r4, #32]
 8009440:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009442:	4643      	mov	r3, r8
 8009444:	463a      	mov	r2, r7
 8009446:	4628      	mov	r0, r5
 8009448:	47b0      	blx	r6
 800944a:	2800      	cmp	r0, #0
 800944c:	dc08      	bgt.n	8009460 <__sflush_r+0xfc>
 800944e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009452:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009456:	81a3      	strh	r3, [r4, #12]
 8009458:	f04f 30ff 	mov.w	r0, #4294967295
 800945c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009460:	4407      	add	r7, r0
 8009462:	eba8 0800 	sub.w	r8, r8, r0
 8009466:	e7e7      	b.n	8009438 <__sflush_r+0xd4>
 8009468:	20400001 	.word	0x20400001

0800946c <_fflush_r>:
 800946c:	b538      	push	{r3, r4, r5, lr}
 800946e:	690b      	ldr	r3, [r1, #16]
 8009470:	4605      	mov	r5, r0
 8009472:	460c      	mov	r4, r1
 8009474:	b913      	cbnz	r3, 800947c <_fflush_r+0x10>
 8009476:	2500      	movs	r5, #0
 8009478:	4628      	mov	r0, r5
 800947a:	bd38      	pop	{r3, r4, r5, pc}
 800947c:	b118      	cbz	r0, 8009486 <_fflush_r+0x1a>
 800947e:	6a03      	ldr	r3, [r0, #32]
 8009480:	b90b      	cbnz	r3, 8009486 <_fflush_r+0x1a>
 8009482:	f7fe fba3 	bl	8007bcc <__sinit>
 8009486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d0f3      	beq.n	8009476 <_fflush_r+0xa>
 800948e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009490:	07d0      	lsls	r0, r2, #31
 8009492:	d404      	bmi.n	800949e <_fflush_r+0x32>
 8009494:	0599      	lsls	r1, r3, #22
 8009496:	d402      	bmi.n	800949e <_fflush_r+0x32>
 8009498:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800949a:	f7fe fc8e 	bl	8007dba <__retarget_lock_acquire_recursive>
 800949e:	4628      	mov	r0, r5
 80094a0:	4621      	mov	r1, r4
 80094a2:	f7ff ff5f 	bl	8009364 <__sflush_r>
 80094a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80094a8:	07da      	lsls	r2, r3, #31
 80094aa:	4605      	mov	r5, r0
 80094ac:	d4e4      	bmi.n	8009478 <_fflush_r+0xc>
 80094ae:	89a3      	ldrh	r3, [r4, #12]
 80094b0:	059b      	lsls	r3, r3, #22
 80094b2:	d4e1      	bmi.n	8009478 <_fflush_r+0xc>
 80094b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094b6:	f7fe fc81 	bl	8007dbc <__retarget_lock_release_recursive>
 80094ba:	e7dd      	b.n	8009478 <_fflush_r+0xc>

080094bc <_sbrk_r>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	4d06      	ldr	r5, [pc, #24]	@ (80094d8 <_sbrk_r+0x1c>)
 80094c0:	2300      	movs	r3, #0
 80094c2:	4604      	mov	r4, r0
 80094c4:	4608      	mov	r0, r1
 80094c6:	602b      	str	r3, [r5, #0]
 80094c8:	f7f8 fb2c 	bl	8001b24 <_sbrk>
 80094cc:	1c43      	adds	r3, r0, #1
 80094ce:	d102      	bne.n	80094d6 <_sbrk_r+0x1a>
 80094d0:	682b      	ldr	r3, [r5, #0]
 80094d2:	b103      	cbz	r3, 80094d6 <_sbrk_r+0x1a>
 80094d4:	6023      	str	r3, [r4, #0]
 80094d6:	bd38      	pop	{r3, r4, r5, pc}
 80094d8:	20003d70 	.word	0x20003d70

080094dc <memcpy>:
 80094dc:	440a      	add	r2, r1
 80094de:	4291      	cmp	r1, r2
 80094e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80094e4:	d100      	bne.n	80094e8 <memcpy+0xc>
 80094e6:	4770      	bx	lr
 80094e8:	b510      	push	{r4, lr}
 80094ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094f2:	4291      	cmp	r1, r2
 80094f4:	d1f9      	bne.n	80094ea <memcpy+0xe>
 80094f6:	bd10      	pop	{r4, pc}

080094f8 <__assert_func>:
 80094f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094fa:	4614      	mov	r4, r2
 80094fc:	461a      	mov	r2, r3
 80094fe:	4b09      	ldr	r3, [pc, #36]	@ (8009524 <__assert_func+0x2c>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4605      	mov	r5, r0
 8009504:	68d8      	ldr	r0, [r3, #12]
 8009506:	b14c      	cbz	r4, 800951c <__assert_func+0x24>
 8009508:	4b07      	ldr	r3, [pc, #28]	@ (8009528 <__assert_func+0x30>)
 800950a:	9100      	str	r1, [sp, #0]
 800950c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009510:	4906      	ldr	r1, [pc, #24]	@ (800952c <__assert_func+0x34>)
 8009512:	462b      	mov	r3, r5
 8009514:	f000 f842 	bl	800959c <fiprintf>
 8009518:	f000 f852 	bl	80095c0 <abort>
 800951c:	4b04      	ldr	r3, [pc, #16]	@ (8009530 <__assert_func+0x38>)
 800951e:	461c      	mov	r4, r3
 8009520:	e7f3      	b.n	800950a <__assert_func+0x12>
 8009522:	bf00      	nop
 8009524:	20000020 	.word	0x20000020
 8009528:	0801ccbc 	.word	0x0801ccbc
 800952c:	0801ccc9 	.word	0x0801ccc9
 8009530:	0801ccf7 	.word	0x0801ccf7

08009534 <_calloc_r>:
 8009534:	b570      	push	{r4, r5, r6, lr}
 8009536:	fba1 5402 	umull	r5, r4, r1, r2
 800953a:	b934      	cbnz	r4, 800954a <_calloc_r+0x16>
 800953c:	4629      	mov	r1, r5
 800953e:	f7ff fb0b 	bl	8008b58 <_malloc_r>
 8009542:	4606      	mov	r6, r0
 8009544:	b928      	cbnz	r0, 8009552 <_calloc_r+0x1e>
 8009546:	4630      	mov	r0, r6
 8009548:	bd70      	pop	{r4, r5, r6, pc}
 800954a:	220c      	movs	r2, #12
 800954c:	6002      	str	r2, [r0, #0]
 800954e:	2600      	movs	r6, #0
 8009550:	e7f9      	b.n	8009546 <_calloc_r+0x12>
 8009552:	462a      	mov	r2, r5
 8009554:	4621      	mov	r1, r4
 8009556:	f7fe fbb2 	bl	8007cbe <memset>
 800955a:	e7f4      	b.n	8009546 <_calloc_r+0x12>

0800955c <__ascii_mbtowc>:
 800955c:	b082      	sub	sp, #8
 800955e:	b901      	cbnz	r1, 8009562 <__ascii_mbtowc+0x6>
 8009560:	a901      	add	r1, sp, #4
 8009562:	b142      	cbz	r2, 8009576 <__ascii_mbtowc+0x1a>
 8009564:	b14b      	cbz	r3, 800957a <__ascii_mbtowc+0x1e>
 8009566:	7813      	ldrb	r3, [r2, #0]
 8009568:	600b      	str	r3, [r1, #0]
 800956a:	7812      	ldrb	r2, [r2, #0]
 800956c:	1e10      	subs	r0, r2, #0
 800956e:	bf18      	it	ne
 8009570:	2001      	movne	r0, #1
 8009572:	b002      	add	sp, #8
 8009574:	4770      	bx	lr
 8009576:	4610      	mov	r0, r2
 8009578:	e7fb      	b.n	8009572 <__ascii_mbtowc+0x16>
 800957a:	f06f 0001 	mvn.w	r0, #1
 800957e:	e7f8      	b.n	8009572 <__ascii_mbtowc+0x16>

08009580 <__ascii_wctomb>:
 8009580:	4603      	mov	r3, r0
 8009582:	4608      	mov	r0, r1
 8009584:	b141      	cbz	r1, 8009598 <__ascii_wctomb+0x18>
 8009586:	2aff      	cmp	r2, #255	@ 0xff
 8009588:	d904      	bls.n	8009594 <__ascii_wctomb+0x14>
 800958a:	228a      	movs	r2, #138	@ 0x8a
 800958c:	601a      	str	r2, [r3, #0]
 800958e:	f04f 30ff 	mov.w	r0, #4294967295
 8009592:	4770      	bx	lr
 8009594:	700a      	strb	r2, [r1, #0]
 8009596:	2001      	movs	r0, #1
 8009598:	4770      	bx	lr
	...

0800959c <fiprintf>:
 800959c:	b40e      	push	{r1, r2, r3}
 800959e:	b503      	push	{r0, r1, lr}
 80095a0:	4601      	mov	r1, r0
 80095a2:	ab03      	add	r3, sp, #12
 80095a4:	4805      	ldr	r0, [pc, #20]	@ (80095bc <fiprintf+0x20>)
 80095a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80095aa:	6800      	ldr	r0, [r0, #0]
 80095ac:	9301      	str	r3, [sp, #4]
 80095ae:	f000 f837 	bl	8009620 <_vfiprintf_r>
 80095b2:	b002      	add	sp, #8
 80095b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80095b8:	b003      	add	sp, #12
 80095ba:	4770      	bx	lr
 80095bc:	20000020 	.word	0x20000020

080095c0 <abort>:
 80095c0:	b508      	push	{r3, lr}
 80095c2:	2006      	movs	r0, #6
 80095c4:	f000 fa00 	bl	80099c8 <raise>
 80095c8:	2001      	movs	r0, #1
 80095ca:	f7f8 fa33 	bl	8001a34 <_exit>

080095ce <__sfputc_r>:
 80095ce:	6893      	ldr	r3, [r2, #8]
 80095d0:	3b01      	subs	r3, #1
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	b410      	push	{r4}
 80095d6:	6093      	str	r3, [r2, #8]
 80095d8:	da08      	bge.n	80095ec <__sfputc_r+0x1e>
 80095da:	6994      	ldr	r4, [r2, #24]
 80095dc:	42a3      	cmp	r3, r4
 80095de:	db01      	blt.n	80095e4 <__sfputc_r+0x16>
 80095e0:	290a      	cmp	r1, #10
 80095e2:	d103      	bne.n	80095ec <__sfputc_r+0x1e>
 80095e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095e8:	f000 b932 	b.w	8009850 <__swbuf_r>
 80095ec:	6813      	ldr	r3, [r2, #0]
 80095ee:	1c58      	adds	r0, r3, #1
 80095f0:	6010      	str	r0, [r2, #0]
 80095f2:	7019      	strb	r1, [r3, #0]
 80095f4:	4608      	mov	r0, r1
 80095f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <__sfputs_r>:
 80095fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fe:	4606      	mov	r6, r0
 8009600:	460f      	mov	r7, r1
 8009602:	4614      	mov	r4, r2
 8009604:	18d5      	adds	r5, r2, r3
 8009606:	42ac      	cmp	r4, r5
 8009608:	d101      	bne.n	800960e <__sfputs_r+0x12>
 800960a:	2000      	movs	r0, #0
 800960c:	e007      	b.n	800961e <__sfputs_r+0x22>
 800960e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009612:	463a      	mov	r2, r7
 8009614:	4630      	mov	r0, r6
 8009616:	f7ff ffda 	bl	80095ce <__sfputc_r>
 800961a:	1c43      	adds	r3, r0, #1
 800961c:	d1f3      	bne.n	8009606 <__sfputs_r+0xa>
 800961e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009620 <_vfiprintf_r>:
 8009620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009624:	460d      	mov	r5, r1
 8009626:	b09d      	sub	sp, #116	@ 0x74
 8009628:	4614      	mov	r4, r2
 800962a:	4698      	mov	r8, r3
 800962c:	4606      	mov	r6, r0
 800962e:	b118      	cbz	r0, 8009638 <_vfiprintf_r+0x18>
 8009630:	6a03      	ldr	r3, [r0, #32]
 8009632:	b90b      	cbnz	r3, 8009638 <_vfiprintf_r+0x18>
 8009634:	f7fe faca 	bl	8007bcc <__sinit>
 8009638:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800963a:	07d9      	lsls	r1, r3, #31
 800963c:	d405      	bmi.n	800964a <_vfiprintf_r+0x2a>
 800963e:	89ab      	ldrh	r3, [r5, #12]
 8009640:	059a      	lsls	r2, r3, #22
 8009642:	d402      	bmi.n	800964a <_vfiprintf_r+0x2a>
 8009644:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009646:	f7fe fbb8 	bl	8007dba <__retarget_lock_acquire_recursive>
 800964a:	89ab      	ldrh	r3, [r5, #12]
 800964c:	071b      	lsls	r3, r3, #28
 800964e:	d501      	bpl.n	8009654 <_vfiprintf_r+0x34>
 8009650:	692b      	ldr	r3, [r5, #16]
 8009652:	b99b      	cbnz	r3, 800967c <_vfiprintf_r+0x5c>
 8009654:	4629      	mov	r1, r5
 8009656:	4630      	mov	r0, r6
 8009658:	f000 f938 	bl	80098cc <__swsetup_r>
 800965c:	b170      	cbz	r0, 800967c <_vfiprintf_r+0x5c>
 800965e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009660:	07dc      	lsls	r4, r3, #31
 8009662:	d504      	bpl.n	800966e <_vfiprintf_r+0x4e>
 8009664:	f04f 30ff 	mov.w	r0, #4294967295
 8009668:	b01d      	add	sp, #116	@ 0x74
 800966a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800966e:	89ab      	ldrh	r3, [r5, #12]
 8009670:	0598      	lsls	r0, r3, #22
 8009672:	d4f7      	bmi.n	8009664 <_vfiprintf_r+0x44>
 8009674:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009676:	f7fe fba1 	bl	8007dbc <__retarget_lock_release_recursive>
 800967a:	e7f3      	b.n	8009664 <_vfiprintf_r+0x44>
 800967c:	2300      	movs	r3, #0
 800967e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009680:	2320      	movs	r3, #32
 8009682:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009686:	f8cd 800c 	str.w	r8, [sp, #12]
 800968a:	2330      	movs	r3, #48	@ 0x30
 800968c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800983c <_vfiprintf_r+0x21c>
 8009690:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009694:	f04f 0901 	mov.w	r9, #1
 8009698:	4623      	mov	r3, r4
 800969a:	469a      	mov	sl, r3
 800969c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096a0:	b10a      	cbz	r2, 80096a6 <_vfiprintf_r+0x86>
 80096a2:	2a25      	cmp	r2, #37	@ 0x25
 80096a4:	d1f9      	bne.n	800969a <_vfiprintf_r+0x7a>
 80096a6:	ebba 0b04 	subs.w	fp, sl, r4
 80096aa:	d00b      	beq.n	80096c4 <_vfiprintf_r+0xa4>
 80096ac:	465b      	mov	r3, fp
 80096ae:	4622      	mov	r2, r4
 80096b0:	4629      	mov	r1, r5
 80096b2:	4630      	mov	r0, r6
 80096b4:	f7ff ffa2 	bl	80095fc <__sfputs_r>
 80096b8:	3001      	adds	r0, #1
 80096ba:	f000 80a7 	beq.w	800980c <_vfiprintf_r+0x1ec>
 80096be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096c0:	445a      	add	r2, fp
 80096c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80096c4:	f89a 3000 	ldrb.w	r3, [sl]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	f000 809f 	beq.w	800980c <_vfiprintf_r+0x1ec>
 80096ce:	2300      	movs	r3, #0
 80096d0:	f04f 32ff 	mov.w	r2, #4294967295
 80096d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096d8:	f10a 0a01 	add.w	sl, sl, #1
 80096dc:	9304      	str	r3, [sp, #16]
 80096de:	9307      	str	r3, [sp, #28]
 80096e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80096e6:	4654      	mov	r4, sl
 80096e8:	2205      	movs	r2, #5
 80096ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ee:	4853      	ldr	r0, [pc, #332]	@ (800983c <_vfiprintf_r+0x21c>)
 80096f0:	f7f6 fd6e 	bl	80001d0 <memchr>
 80096f4:	9a04      	ldr	r2, [sp, #16]
 80096f6:	b9d8      	cbnz	r0, 8009730 <_vfiprintf_r+0x110>
 80096f8:	06d1      	lsls	r1, r2, #27
 80096fa:	bf44      	itt	mi
 80096fc:	2320      	movmi	r3, #32
 80096fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009702:	0713      	lsls	r3, r2, #28
 8009704:	bf44      	itt	mi
 8009706:	232b      	movmi	r3, #43	@ 0x2b
 8009708:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800970c:	f89a 3000 	ldrb.w	r3, [sl]
 8009710:	2b2a      	cmp	r3, #42	@ 0x2a
 8009712:	d015      	beq.n	8009740 <_vfiprintf_r+0x120>
 8009714:	9a07      	ldr	r2, [sp, #28]
 8009716:	4654      	mov	r4, sl
 8009718:	2000      	movs	r0, #0
 800971a:	f04f 0c0a 	mov.w	ip, #10
 800971e:	4621      	mov	r1, r4
 8009720:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009724:	3b30      	subs	r3, #48	@ 0x30
 8009726:	2b09      	cmp	r3, #9
 8009728:	d94b      	bls.n	80097c2 <_vfiprintf_r+0x1a2>
 800972a:	b1b0      	cbz	r0, 800975a <_vfiprintf_r+0x13a>
 800972c:	9207      	str	r2, [sp, #28]
 800972e:	e014      	b.n	800975a <_vfiprintf_r+0x13a>
 8009730:	eba0 0308 	sub.w	r3, r0, r8
 8009734:	fa09 f303 	lsl.w	r3, r9, r3
 8009738:	4313      	orrs	r3, r2
 800973a:	9304      	str	r3, [sp, #16]
 800973c:	46a2      	mov	sl, r4
 800973e:	e7d2      	b.n	80096e6 <_vfiprintf_r+0xc6>
 8009740:	9b03      	ldr	r3, [sp, #12]
 8009742:	1d19      	adds	r1, r3, #4
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	9103      	str	r1, [sp, #12]
 8009748:	2b00      	cmp	r3, #0
 800974a:	bfbb      	ittet	lt
 800974c:	425b      	neglt	r3, r3
 800974e:	f042 0202 	orrlt.w	r2, r2, #2
 8009752:	9307      	strge	r3, [sp, #28]
 8009754:	9307      	strlt	r3, [sp, #28]
 8009756:	bfb8      	it	lt
 8009758:	9204      	strlt	r2, [sp, #16]
 800975a:	7823      	ldrb	r3, [r4, #0]
 800975c:	2b2e      	cmp	r3, #46	@ 0x2e
 800975e:	d10a      	bne.n	8009776 <_vfiprintf_r+0x156>
 8009760:	7863      	ldrb	r3, [r4, #1]
 8009762:	2b2a      	cmp	r3, #42	@ 0x2a
 8009764:	d132      	bne.n	80097cc <_vfiprintf_r+0x1ac>
 8009766:	9b03      	ldr	r3, [sp, #12]
 8009768:	1d1a      	adds	r2, r3, #4
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	9203      	str	r2, [sp, #12]
 800976e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009772:	3402      	adds	r4, #2
 8009774:	9305      	str	r3, [sp, #20]
 8009776:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800984c <_vfiprintf_r+0x22c>
 800977a:	7821      	ldrb	r1, [r4, #0]
 800977c:	2203      	movs	r2, #3
 800977e:	4650      	mov	r0, sl
 8009780:	f7f6 fd26 	bl	80001d0 <memchr>
 8009784:	b138      	cbz	r0, 8009796 <_vfiprintf_r+0x176>
 8009786:	9b04      	ldr	r3, [sp, #16]
 8009788:	eba0 000a 	sub.w	r0, r0, sl
 800978c:	2240      	movs	r2, #64	@ 0x40
 800978e:	4082      	lsls	r2, r0
 8009790:	4313      	orrs	r3, r2
 8009792:	3401      	adds	r4, #1
 8009794:	9304      	str	r3, [sp, #16]
 8009796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800979a:	4829      	ldr	r0, [pc, #164]	@ (8009840 <_vfiprintf_r+0x220>)
 800979c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80097a0:	2206      	movs	r2, #6
 80097a2:	f7f6 fd15 	bl	80001d0 <memchr>
 80097a6:	2800      	cmp	r0, #0
 80097a8:	d03f      	beq.n	800982a <_vfiprintf_r+0x20a>
 80097aa:	4b26      	ldr	r3, [pc, #152]	@ (8009844 <_vfiprintf_r+0x224>)
 80097ac:	bb1b      	cbnz	r3, 80097f6 <_vfiprintf_r+0x1d6>
 80097ae:	9b03      	ldr	r3, [sp, #12]
 80097b0:	3307      	adds	r3, #7
 80097b2:	f023 0307 	bic.w	r3, r3, #7
 80097b6:	3308      	adds	r3, #8
 80097b8:	9303      	str	r3, [sp, #12]
 80097ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097bc:	443b      	add	r3, r7
 80097be:	9309      	str	r3, [sp, #36]	@ 0x24
 80097c0:	e76a      	b.n	8009698 <_vfiprintf_r+0x78>
 80097c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80097c6:	460c      	mov	r4, r1
 80097c8:	2001      	movs	r0, #1
 80097ca:	e7a8      	b.n	800971e <_vfiprintf_r+0xfe>
 80097cc:	2300      	movs	r3, #0
 80097ce:	3401      	adds	r4, #1
 80097d0:	9305      	str	r3, [sp, #20]
 80097d2:	4619      	mov	r1, r3
 80097d4:	f04f 0c0a 	mov.w	ip, #10
 80097d8:	4620      	mov	r0, r4
 80097da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097de:	3a30      	subs	r2, #48	@ 0x30
 80097e0:	2a09      	cmp	r2, #9
 80097e2:	d903      	bls.n	80097ec <_vfiprintf_r+0x1cc>
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d0c6      	beq.n	8009776 <_vfiprintf_r+0x156>
 80097e8:	9105      	str	r1, [sp, #20]
 80097ea:	e7c4      	b.n	8009776 <_vfiprintf_r+0x156>
 80097ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80097f0:	4604      	mov	r4, r0
 80097f2:	2301      	movs	r3, #1
 80097f4:	e7f0      	b.n	80097d8 <_vfiprintf_r+0x1b8>
 80097f6:	ab03      	add	r3, sp, #12
 80097f8:	9300      	str	r3, [sp, #0]
 80097fa:	462a      	mov	r2, r5
 80097fc:	4b12      	ldr	r3, [pc, #72]	@ (8009848 <_vfiprintf_r+0x228>)
 80097fe:	a904      	add	r1, sp, #16
 8009800:	4630      	mov	r0, r6
 8009802:	f7fd fda1 	bl	8007348 <_printf_float>
 8009806:	4607      	mov	r7, r0
 8009808:	1c78      	adds	r0, r7, #1
 800980a:	d1d6      	bne.n	80097ba <_vfiprintf_r+0x19a>
 800980c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800980e:	07d9      	lsls	r1, r3, #31
 8009810:	d405      	bmi.n	800981e <_vfiprintf_r+0x1fe>
 8009812:	89ab      	ldrh	r3, [r5, #12]
 8009814:	059a      	lsls	r2, r3, #22
 8009816:	d402      	bmi.n	800981e <_vfiprintf_r+0x1fe>
 8009818:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800981a:	f7fe facf 	bl	8007dbc <__retarget_lock_release_recursive>
 800981e:	89ab      	ldrh	r3, [r5, #12]
 8009820:	065b      	lsls	r3, r3, #25
 8009822:	f53f af1f 	bmi.w	8009664 <_vfiprintf_r+0x44>
 8009826:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009828:	e71e      	b.n	8009668 <_vfiprintf_r+0x48>
 800982a:	ab03      	add	r3, sp, #12
 800982c:	9300      	str	r3, [sp, #0]
 800982e:	462a      	mov	r2, r5
 8009830:	4b05      	ldr	r3, [pc, #20]	@ (8009848 <_vfiprintf_r+0x228>)
 8009832:	a904      	add	r1, sp, #16
 8009834:	4630      	mov	r0, r6
 8009836:	f7fe f81f 	bl	8007878 <_printf_i>
 800983a:	e7e4      	b.n	8009806 <_vfiprintf_r+0x1e6>
 800983c:	0801ccf8 	.word	0x0801ccf8
 8009840:	0801cd02 	.word	0x0801cd02
 8009844:	08007349 	.word	0x08007349
 8009848:	080095fd 	.word	0x080095fd
 800984c:	0801ccfe 	.word	0x0801ccfe

08009850 <__swbuf_r>:
 8009850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009852:	460e      	mov	r6, r1
 8009854:	4614      	mov	r4, r2
 8009856:	4605      	mov	r5, r0
 8009858:	b118      	cbz	r0, 8009862 <__swbuf_r+0x12>
 800985a:	6a03      	ldr	r3, [r0, #32]
 800985c:	b90b      	cbnz	r3, 8009862 <__swbuf_r+0x12>
 800985e:	f7fe f9b5 	bl	8007bcc <__sinit>
 8009862:	69a3      	ldr	r3, [r4, #24]
 8009864:	60a3      	str	r3, [r4, #8]
 8009866:	89a3      	ldrh	r3, [r4, #12]
 8009868:	071a      	lsls	r2, r3, #28
 800986a:	d501      	bpl.n	8009870 <__swbuf_r+0x20>
 800986c:	6923      	ldr	r3, [r4, #16]
 800986e:	b943      	cbnz	r3, 8009882 <__swbuf_r+0x32>
 8009870:	4621      	mov	r1, r4
 8009872:	4628      	mov	r0, r5
 8009874:	f000 f82a 	bl	80098cc <__swsetup_r>
 8009878:	b118      	cbz	r0, 8009882 <__swbuf_r+0x32>
 800987a:	f04f 37ff 	mov.w	r7, #4294967295
 800987e:	4638      	mov	r0, r7
 8009880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009882:	6823      	ldr	r3, [r4, #0]
 8009884:	6922      	ldr	r2, [r4, #16]
 8009886:	1a98      	subs	r0, r3, r2
 8009888:	6963      	ldr	r3, [r4, #20]
 800988a:	b2f6      	uxtb	r6, r6
 800988c:	4283      	cmp	r3, r0
 800988e:	4637      	mov	r7, r6
 8009890:	dc05      	bgt.n	800989e <__swbuf_r+0x4e>
 8009892:	4621      	mov	r1, r4
 8009894:	4628      	mov	r0, r5
 8009896:	f7ff fde9 	bl	800946c <_fflush_r>
 800989a:	2800      	cmp	r0, #0
 800989c:	d1ed      	bne.n	800987a <__swbuf_r+0x2a>
 800989e:	68a3      	ldr	r3, [r4, #8]
 80098a0:	3b01      	subs	r3, #1
 80098a2:	60a3      	str	r3, [r4, #8]
 80098a4:	6823      	ldr	r3, [r4, #0]
 80098a6:	1c5a      	adds	r2, r3, #1
 80098a8:	6022      	str	r2, [r4, #0]
 80098aa:	701e      	strb	r6, [r3, #0]
 80098ac:	6962      	ldr	r2, [r4, #20]
 80098ae:	1c43      	adds	r3, r0, #1
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d004      	beq.n	80098be <__swbuf_r+0x6e>
 80098b4:	89a3      	ldrh	r3, [r4, #12]
 80098b6:	07db      	lsls	r3, r3, #31
 80098b8:	d5e1      	bpl.n	800987e <__swbuf_r+0x2e>
 80098ba:	2e0a      	cmp	r6, #10
 80098bc:	d1df      	bne.n	800987e <__swbuf_r+0x2e>
 80098be:	4621      	mov	r1, r4
 80098c0:	4628      	mov	r0, r5
 80098c2:	f7ff fdd3 	bl	800946c <_fflush_r>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d0d9      	beq.n	800987e <__swbuf_r+0x2e>
 80098ca:	e7d6      	b.n	800987a <__swbuf_r+0x2a>

080098cc <__swsetup_r>:
 80098cc:	b538      	push	{r3, r4, r5, lr}
 80098ce:	4b29      	ldr	r3, [pc, #164]	@ (8009974 <__swsetup_r+0xa8>)
 80098d0:	4605      	mov	r5, r0
 80098d2:	6818      	ldr	r0, [r3, #0]
 80098d4:	460c      	mov	r4, r1
 80098d6:	b118      	cbz	r0, 80098e0 <__swsetup_r+0x14>
 80098d8:	6a03      	ldr	r3, [r0, #32]
 80098da:	b90b      	cbnz	r3, 80098e0 <__swsetup_r+0x14>
 80098dc:	f7fe f976 	bl	8007bcc <__sinit>
 80098e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098e4:	0719      	lsls	r1, r3, #28
 80098e6:	d422      	bmi.n	800992e <__swsetup_r+0x62>
 80098e8:	06da      	lsls	r2, r3, #27
 80098ea:	d407      	bmi.n	80098fc <__swsetup_r+0x30>
 80098ec:	2209      	movs	r2, #9
 80098ee:	602a      	str	r2, [r5, #0]
 80098f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098f4:	81a3      	strh	r3, [r4, #12]
 80098f6:	f04f 30ff 	mov.w	r0, #4294967295
 80098fa:	e033      	b.n	8009964 <__swsetup_r+0x98>
 80098fc:	0758      	lsls	r0, r3, #29
 80098fe:	d512      	bpl.n	8009926 <__swsetup_r+0x5a>
 8009900:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009902:	b141      	cbz	r1, 8009916 <__swsetup_r+0x4a>
 8009904:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009908:	4299      	cmp	r1, r3
 800990a:	d002      	beq.n	8009912 <__swsetup_r+0x46>
 800990c:	4628      	mov	r0, r5
 800990e:	f7ff f8af 	bl	8008a70 <_free_r>
 8009912:	2300      	movs	r3, #0
 8009914:	6363      	str	r3, [r4, #52]	@ 0x34
 8009916:	89a3      	ldrh	r3, [r4, #12]
 8009918:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800991c:	81a3      	strh	r3, [r4, #12]
 800991e:	2300      	movs	r3, #0
 8009920:	6063      	str	r3, [r4, #4]
 8009922:	6923      	ldr	r3, [r4, #16]
 8009924:	6023      	str	r3, [r4, #0]
 8009926:	89a3      	ldrh	r3, [r4, #12]
 8009928:	f043 0308 	orr.w	r3, r3, #8
 800992c:	81a3      	strh	r3, [r4, #12]
 800992e:	6923      	ldr	r3, [r4, #16]
 8009930:	b94b      	cbnz	r3, 8009946 <__swsetup_r+0x7a>
 8009932:	89a3      	ldrh	r3, [r4, #12]
 8009934:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800993c:	d003      	beq.n	8009946 <__swsetup_r+0x7a>
 800993e:	4621      	mov	r1, r4
 8009940:	4628      	mov	r0, r5
 8009942:	f000 f883 	bl	8009a4c <__smakebuf_r>
 8009946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800994a:	f013 0201 	ands.w	r2, r3, #1
 800994e:	d00a      	beq.n	8009966 <__swsetup_r+0x9a>
 8009950:	2200      	movs	r2, #0
 8009952:	60a2      	str	r2, [r4, #8]
 8009954:	6962      	ldr	r2, [r4, #20]
 8009956:	4252      	negs	r2, r2
 8009958:	61a2      	str	r2, [r4, #24]
 800995a:	6922      	ldr	r2, [r4, #16]
 800995c:	b942      	cbnz	r2, 8009970 <__swsetup_r+0xa4>
 800995e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009962:	d1c5      	bne.n	80098f0 <__swsetup_r+0x24>
 8009964:	bd38      	pop	{r3, r4, r5, pc}
 8009966:	0799      	lsls	r1, r3, #30
 8009968:	bf58      	it	pl
 800996a:	6962      	ldrpl	r2, [r4, #20]
 800996c:	60a2      	str	r2, [r4, #8]
 800996e:	e7f4      	b.n	800995a <__swsetup_r+0x8e>
 8009970:	2000      	movs	r0, #0
 8009972:	e7f7      	b.n	8009964 <__swsetup_r+0x98>
 8009974:	20000020 	.word	0x20000020

08009978 <_raise_r>:
 8009978:	291f      	cmp	r1, #31
 800997a:	b538      	push	{r3, r4, r5, lr}
 800997c:	4605      	mov	r5, r0
 800997e:	460c      	mov	r4, r1
 8009980:	d904      	bls.n	800998c <_raise_r+0x14>
 8009982:	2316      	movs	r3, #22
 8009984:	6003      	str	r3, [r0, #0]
 8009986:	f04f 30ff 	mov.w	r0, #4294967295
 800998a:	bd38      	pop	{r3, r4, r5, pc}
 800998c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800998e:	b112      	cbz	r2, 8009996 <_raise_r+0x1e>
 8009990:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009994:	b94b      	cbnz	r3, 80099aa <_raise_r+0x32>
 8009996:	4628      	mov	r0, r5
 8009998:	f000 f830 	bl	80099fc <_getpid_r>
 800999c:	4622      	mov	r2, r4
 800999e:	4601      	mov	r1, r0
 80099a0:	4628      	mov	r0, r5
 80099a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099a6:	f000 b817 	b.w	80099d8 <_kill_r>
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d00a      	beq.n	80099c4 <_raise_r+0x4c>
 80099ae:	1c59      	adds	r1, r3, #1
 80099b0:	d103      	bne.n	80099ba <_raise_r+0x42>
 80099b2:	2316      	movs	r3, #22
 80099b4:	6003      	str	r3, [r0, #0]
 80099b6:	2001      	movs	r0, #1
 80099b8:	e7e7      	b.n	800998a <_raise_r+0x12>
 80099ba:	2100      	movs	r1, #0
 80099bc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80099c0:	4620      	mov	r0, r4
 80099c2:	4798      	blx	r3
 80099c4:	2000      	movs	r0, #0
 80099c6:	e7e0      	b.n	800998a <_raise_r+0x12>

080099c8 <raise>:
 80099c8:	4b02      	ldr	r3, [pc, #8]	@ (80099d4 <raise+0xc>)
 80099ca:	4601      	mov	r1, r0
 80099cc:	6818      	ldr	r0, [r3, #0]
 80099ce:	f7ff bfd3 	b.w	8009978 <_raise_r>
 80099d2:	bf00      	nop
 80099d4:	20000020 	.word	0x20000020

080099d8 <_kill_r>:
 80099d8:	b538      	push	{r3, r4, r5, lr}
 80099da:	4d07      	ldr	r5, [pc, #28]	@ (80099f8 <_kill_r+0x20>)
 80099dc:	2300      	movs	r3, #0
 80099de:	4604      	mov	r4, r0
 80099e0:	4608      	mov	r0, r1
 80099e2:	4611      	mov	r1, r2
 80099e4:	602b      	str	r3, [r5, #0]
 80099e6:	f7f8 f815 	bl	8001a14 <_kill>
 80099ea:	1c43      	adds	r3, r0, #1
 80099ec:	d102      	bne.n	80099f4 <_kill_r+0x1c>
 80099ee:	682b      	ldr	r3, [r5, #0]
 80099f0:	b103      	cbz	r3, 80099f4 <_kill_r+0x1c>
 80099f2:	6023      	str	r3, [r4, #0]
 80099f4:	bd38      	pop	{r3, r4, r5, pc}
 80099f6:	bf00      	nop
 80099f8:	20003d70 	.word	0x20003d70

080099fc <_getpid_r>:
 80099fc:	f7f8 b802 	b.w	8001a04 <_getpid>

08009a00 <__swhatbuf_r>:
 8009a00:	b570      	push	{r4, r5, r6, lr}
 8009a02:	460c      	mov	r4, r1
 8009a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a08:	2900      	cmp	r1, #0
 8009a0a:	b096      	sub	sp, #88	@ 0x58
 8009a0c:	4615      	mov	r5, r2
 8009a0e:	461e      	mov	r6, r3
 8009a10:	da0d      	bge.n	8009a2e <__swhatbuf_r+0x2e>
 8009a12:	89a3      	ldrh	r3, [r4, #12]
 8009a14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009a18:	f04f 0100 	mov.w	r1, #0
 8009a1c:	bf14      	ite	ne
 8009a1e:	2340      	movne	r3, #64	@ 0x40
 8009a20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009a24:	2000      	movs	r0, #0
 8009a26:	6031      	str	r1, [r6, #0]
 8009a28:	602b      	str	r3, [r5, #0]
 8009a2a:	b016      	add	sp, #88	@ 0x58
 8009a2c:	bd70      	pop	{r4, r5, r6, pc}
 8009a2e:	466a      	mov	r2, sp
 8009a30:	f000 f848 	bl	8009ac4 <_fstat_r>
 8009a34:	2800      	cmp	r0, #0
 8009a36:	dbec      	blt.n	8009a12 <__swhatbuf_r+0x12>
 8009a38:	9901      	ldr	r1, [sp, #4]
 8009a3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009a3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009a42:	4259      	negs	r1, r3
 8009a44:	4159      	adcs	r1, r3
 8009a46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a4a:	e7eb      	b.n	8009a24 <__swhatbuf_r+0x24>

08009a4c <__smakebuf_r>:
 8009a4c:	898b      	ldrh	r3, [r1, #12]
 8009a4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a50:	079d      	lsls	r5, r3, #30
 8009a52:	4606      	mov	r6, r0
 8009a54:	460c      	mov	r4, r1
 8009a56:	d507      	bpl.n	8009a68 <__smakebuf_r+0x1c>
 8009a58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009a5c:	6023      	str	r3, [r4, #0]
 8009a5e:	6123      	str	r3, [r4, #16]
 8009a60:	2301      	movs	r3, #1
 8009a62:	6163      	str	r3, [r4, #20]
 8009a64:	b003      	add	sp, #12
 8009a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a68:	ab01      	add	r3, sp, #4
 8009a6a:	466a      	mov	r2, sp
 8009a6c:	f7ff ffc8 	bl	8009a00 <__swhatbuf_r>
 8009a70:	9f00      	ldr	r7, [sp, #0]
 8009a72:	4605      	mov	r5, r0
 8009a74:	4639      	mov	r1, r7
 8009a76:	4630      	mov	r0, r6
 8009a78:	f7ff f86e 	bl	8008b58 <_malloc_r>
 8009a7c:	b948      	cbnz	r0, 8009a92 <__smakebuf_r+0x46>
 8009a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a82:	059a      	lsls	r2, r3, #22
 8009a84:	d4ee      	bmi.n	8009a64 <__smakebuf_r+0x18>
 8009a86:	f023 0303 	bic.w	r3, r3, #3
 8009a8a:	f043 0302 	orr.w	r3, r3, #2
 8009a8e:	81a3      	strh	r3, [r4, #12]
 8009a90:	e7e2      	b.n	8009a58 <__smakebuf_r+0xc>
 8009a92:	89a3      	ldrh	r3, [r4, #12]
 8009a94:	6020      	str	r0, [r4, #0]
 8009a96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a9a:	81a3      	strh	r3, [r4, #12]
 8009a9c:	9b01      	ldr	r3, [sp, #4]
 8009a9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009aa2:	b15b      	cbz	r3, 8009abc <__smakebuf_r+0x70>
 8009aa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	f000 f81d 	bl	8009ae8 <_isatty_r>
 8009aae:	b128      	cbz	r0, 8009abc <__smakebuf_r+0x70>
 8009ab0:	89a3      	ldrh	r3, [r4, #12]
 8009ab2:	f023 0303 	bic.w	r3, r3, #3
 8009ab6:	f043 0301 	orr.w	r3, r3, #1
 8009aba:	81a3      	strh	r3, [r4, #12]
 8009abc:	89a3      	ldrh	r3, [r4, #12]
 8009abe:	431d      	orrs	r5, r3
 8009ac0:	81a5      	strh	r5, [r4, #12]
 8009ac2:	e7cf      	b.n	8009a64 <__smakebuf_r+0x18>

08009ac4 <_fstat_r>:
 8009ac4:	b538      	push	{r3, r4, r5, lr}
 8009ac6:	4d07      	ldr	r5, [pc, #28]	@ (8009ae4 <_fstat_r+0x20>)
 8009ac8:	2300      	movs	r3, #0
 8009aca:	4604      	mov	r4, r0
 8009acc:	4608      	mov	r0, r1
 8009ace:	4611      	mov	r1, r2
 8009ad0:	602b      	str	r3, [r5, #0]
 8009ad2:	f7f7 ffff 	bl	8001ad4 <_fstat>
 8009ad6:	1c43      	adds	r3, r0, #1
 8009ad8:	d102      	bne.n	8009ae0 <_fstat_r+0x1c>
 8009ada:	682b      	ldr	r3, [r5, #0]
 8009adc:	b103      	cbz	r3, 8009ae0 <_fstat_r+0x1c>
 8009ade:	6023      	str	r3, [r4, #0]
 8009ae0:	bd38      	pop	{r3, r4, r5, pc}
 8009ae2:	bf00      	nop
 8009ae4:	20003d70 	.word	0x20003d70

08009ae8 <_isatty_r>:
 8009ae8:	b538      	push	{r3, r4, r5, lr}
 8009aea:	4d06      	ldr	r5, [pc, #24]	@ (8009b04 <_isatty_r+0x1c>)
 8009aec:	2300      	movs	r3, #0
 8009aee:	4604      	mov	r4, r0
 8009af0:	4608      	mov	r0, r1
 8009af2:	602b      	str	r3, [r5, #0]
 8009af4:	f7f7 fffe 	bl	8001af4 <_isatty>
 8009af8:	1c43      	adds	r3, r0, #1
 8009afa:	d102      	bne.n	8009b02 <_isatty_r+0x1a>
 8009afc:	682b      	ldr	r3, [r5, #0]
 8009afe:	b103      	cbz	r3, 8009b02 <_isatty_r+0x1a>
 8009b00:	6023      	str	r3, [r4, #0]
 8009b02:	bd38      	pop	{r3, r4, r5, pc}
 8009b04:	20003d70 	.word	0x20003d70

08009b08 <sqrtf>:
 8009b08:	b508      	push	{r3, lr}
 8009b0a:	ed2d 8b02 	vpush	{d8}
 8009b0e:	eeb0 8a40 	vmov.f32	s16, s0
 8009b12:	f000 f817 	bl	8009b44 <__ieee754_sqrtf>
 8009b16:	eeb4 8a48 	vcmp.f32	s16, s16
 8009b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b1e:	d60c      	bvs.n	8009b3a <sqrtf+0x32>
 8009b20:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8009b40 <sqrtf+0x38>
 8009b24:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b2c:	d505      	bpl.n	8009b3a <sqrtf+0x32>
 8009b2e:	f7fe f919 	bl	8007d64 <__errno>
 8009b32:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009b36:	2321      	movs	r3, #33	@ 0x21
 8009b38:	6003      	str	r3, [r0, #0]
 8009b3a:	ecbd 8b02 	vpop	{d8}
 8009b3e:	bd08      	pop	{r3, pc}
 8009b40:	00000000 	.word	0x00000000

08009b44 <__ieee754_sqrtf>:
 8009b44:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009b48:	4770      	bx	lr
	...

08009b4c <_init>:
 8009b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b4e:	bf00      	nop
 8009b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b52:	bc08      	pop	{r3}
 8009b54:	469e      	mov	lr, r3
 8009b56:	4770      	bx	lr

08009b58 <_fini>:
 8009b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5a:	bf00      	nop
 8009b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b5e:	bc08      	pop	{r3}
 8009b60:	469e      	mov	lr, r3
 8009b62:	4770      	bx	lr
